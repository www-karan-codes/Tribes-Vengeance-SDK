#pragma once

// Tribes Vengeance (1) SDK

#include "TV_MISSING.hpp"

#ifdef _MSC_VER
	#pragma pack(push, 0x1)
#endif

namespace SDK
{
typedef uint8_t ETexClampMode;
typedef uint8_t EenumBaseType;
typedef uint8_t EMessageBoxResult;
typedef uint8_t EeTribesGameState;
typedef uint8_t EMusicTransition;
typedef uint8_t EDoubleClickDir;
typedef uint8_t EGetPointAxis;
typedef uint8_t EMenuSound;
typedef uint8_t ELinkState;
typedef uint8_t EeIconPosition;
typedef uint8_t EParticleDrawStyle;
typedef uint8_t ELODSet;
typedef uint8_t EParticleCoordinateSystem;
typedef uint8_t EMaterialVisualType;
typedef uint8_t EOrientationConstraint;
typedef uint8_t EFilterState;
typedef uint8_t EAxis;
typedef uint8_t ETeamAlignment;
typedef uint8_t EVehiclePositionType;
typedef uint8_t EPhysics;
typedef uint8_t EParticleStartLocationShape;
typedef uint8_t ERepDataType;
typedef uint8_t EHorizontalFill;
typedef uint8_t EMessageType;
typedef uint8_t EMaterialSequenceTriggerActon;
typedef uint8_t EParticleRotationSource;
typedef uint8_t EProjectileDamageStat;
typedef uint8_t ESoundOcclusion;
typedef uint8_t EUseablePointValid;
typedef uint8_t EFrameBufferBlending;
typedef uint8_t ELevelAction;
typedef uint8_t ERenderDetailSetting;
typedef uint8_t ETriggerType;
typedef uint8_t EWeatherType;
typedef uint8_t EGroundMovementModeType;
typedef uint8_t EDrawType;
typedef uint8_t ETexRotationType;
typedef uint8_t ELightType;
typedef uint8_t ETeamAffiliationResult;
typedef uint8_t EJetCompetencyLevels;
typedef uint8_t EeSortType;
typedef uint8_t EeImgAlign;
typedef uint8_t EColorFadeType;
typedef uint8_t EAwayMode;
typedef uint8_t EeTextCase;
typedef uint8_t EMoverEncroachType;
typedef uint8_t EForceType;
typedef uint8_t EBeamEndPointType;
typedef uint8_t ESkiCompetencyLevels;
typedef uint8_t EHitPosition;
typedef uint8_t EeImgStyle;
typedef uint8_t EPhysicsDetailLevel;
typedef uint8_t EHeightDiff;
typedef uint8_t EDLM_MovementMode;
typedef uint8_t EeBakeAnimationState;
typedef uint8_t EGUISplitterType;
typedef uint8_t EHorizontalAlignment;
typedef uint8_t EScalabilitySetting;
typedef uint8_t EGameSpyResult;
typedef uint8_t EeXControllerCodes;
typedef uint8_t EeProgressDirection;
typedef uint8_t EClientPainType;
typedef uint8_t EDigitalAxisInput;
typedef uint8_t EBumpType;
typedef uint8_t EColorOperation;
typedef uint8_t ENetMode;
typedef uint8_t ESocketCoordinates;
typedef uint8_t EeComponentAlign;
typedef uint8_t EFluidGridType;
typedef uint8_t EMaterialType;
typedef uint8_t ETexEnvMapType;
typedef uint8_t ESoundStatus;
typedef uint8_t EDZGLM_ReturnCodes;
typedef uint8_t ECsgOper;
typedef uint8_t EACT_ErrorCodes;
typedef uint8_t EParticleMeshSpawning;
typedef uint8_t EParticleVelocityDirection;
typedef uint8_t ERetriggerAction;
typedef uint8_t EFogType;
typedef uint8_t EHavokCollisionType;
typedef uint8_t EeListElemDisplay;
typedef uint8_t EFindPathResult;
typedef uint8_t EStateType;
typedef uint8_t EOutputBlending;
typedef uint8_t ECombatRangeCategories;
typedef uint8_t EeScrollState;
typedef uint8_t ETextureFormat;
typedef uint8_t EMovementState;
typedef uint8_t EPainReactionCategories;
typedef uint8_t EAccelerationEffectStateEnum;
typedef uint8_t EObjectiveStatus;
typedef uint8_t EMoverGlideType;
typedef uint8_t EEnvMapTransformType;
typedef uint8_t ECarriedObjectState;
typedef uint8_t EAnimationStateEnum;
typedef uint8_t EeDeployableInfo;
typedef uint8_t EHavokHingeType;
typedef uint8_t EPlatform;
typedef uint8_t ETexOscillationType;
typedef uint8_t EPerPixelSpecular;
typedef uint8_t EDetailMode;
typedef uint8_t ECombatMovementCategories;
typedef uint8_t EPerPixelSpecularType;
typedef uint8_t EAlertnessModeType;
typedef uint8_t EOptimizeOption;
typedef uint8_t ETexCoordSrc;
typedef uint8_t ETravelType;
typedef uint8_t EAnimationChannelIndex;
typedef uint8_t EProjectorBlending;
typedef uint8_t EMenuRenderStyle;
typedef uint8_t EChannelID;
typedef uint8_t EReceiveMode;
typedef uint8_t EAlertnessLevels;
typedef uint8_t ETriggerCategories;
typedef uint8_t EVerticalAlignment;
typedef uint8_t EGroundMovementLevels;
typedef uint8_t EDirectionType;
typedef uint8_t EHavokHingeMotorType;
typedef uint8_t EVerticalFill;
typedef uint8_t EePackState;
typedef uint8_t ETexCoordCount;
typedef uint8_t EHavokSteerType;
typedef uint8_t EDodgingCategories;
typedef uint8_t ETextAlign;
typedef uint8_t EAnimationType;
typedef uint8_t ESkelLocationUpdate;
typedef uint8_t EeMenuState;
typedef uint8_t EDLM_ReturnCodes;
typedef uint8_t EParticleCollisionSound;
typedef uint8_t ESteerType;
typedef uint8_t EeTextAlign;
typedef uint8_t EFiringWhileMovingStates;
typedef uint8_t ESoundStreamType;
typedef uint8_t EGrenadeUseCategories;
typedef uint8_t ESensorDataType;
typedef uint8_t EAI_LOD_Levels;
typedef uint8_t EMusicType;
typedef uint8_t ELightEffect;
typedef uint8_t EDynamicMusicType;
typedef uint8_t EAutoComputeConstraint;
typedef uint8_t EVDLM_ReturnCodes;
typedef uint8_t EeComponentSize;
typedef uint8_t ESpeedPackUseCategories;
typedef uint8_t EClickSound;
typedef uint8_t EMovementDirectionalInput;
typedef uint8_t EOpTest;
typedef uint8_t EObjectiveType;
typedef uint8_t EWinMessage;
typedef uint8_t EPassAsTag;
typedef uint8_t EAllyType;
typedef uint8_t EInputKey;
typedef uint8_t EOpeningState;
typedef uint8_t ELookAtType;
typedef uint8_t ERenderStyle;
typedef uint8_t EeScriptType;
typedef uint8_t EMessageBoxButtons;
typedef uint8_t EColorType;
typedef uint8_t ELinkMode;
typedef uint8_t ENetRole;
typedef uint8_t EParticleDirectionUsage;
typedef uint8_t ETextureDetail;
typedef uint8_t EAlphaOperation;
typedef uint8_t EParticleEffectAxis;
typedef uint8_t ELOA_AvoidDirections;
typedef uint8_t EFrameHitTest;
typedef uint8_t ETextAlignment;
typedef uint8_t EInputAction;

//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Object.TsMojoAction
// 0x0040 (0x0068 - 0x0028)
class UClass_Object_TsMojoAction : public UClass_Object
{
public:
	class AClass_Object_Actor*                         Actor;                                                    // 0x0028(0x0004) (Const, Transient)
	unsigned long                                      m_skip_action : 1;                                        // 0x002C(0x0004) (Const, Transient, NoExport)
	class UClass_Object*                               m_source_key;                                             // 0x0030(0x0004) (Const, Transient, NoExport)
	class UClass_Object*                               m_output_key;                                             // 0x0034(0x0004) (Const, Transient, NoExport)
	class UClass_Object*                               m_group;                                                  // 0x0038(0x0004) (Const, Transient, NoExport)
	float                                              m_start_time;                                             // 0x003C(0x0004) (Const, Transient, NoExport)
	float                                              m_offset;                                                 // 0x0040(0x0004) (Const, Transient, NoExport)
	float                                              m_predicted_start_time;                                   // 0x0044(0x0004) (Const, Transient, NoExport)
	float                                              m_recorded_length;                                        // 0x0048(0x0004) (Const, Transient, NoExport)
	unsigned long                                      m_length_dirty : 1;                                       // 0x004C(0x0004) (Const, Transient, NoExport)
	TArray<class UClass_Object_TsMojoAction*>          m_subaction_list;                                         // 0x0050(0x000C) (Const, Transient, NeedCtorLink, NoExport)
	float                                              m_subaction_offset;                                       // 0x005C(0x0004) (Const, Transient, NoExport)
	class UClass_Object_TsMojoAction*                  m_subaction_parent;                                       // 0x0060(0x0004) (Const, Transient, NoExport)
	int                                                m_subaction_track;                                        // 0x0064(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction");
		return ptr;
	}


	float Function_GetDuration();
	bool Function_SetDuration(float duration);
	void Function_Resume();
	void Function_Pause();
	void Function_Interrupt();
	void Function_OnDelete();
	bool Function_CanGenerateOutputKeys();
	bool Function_CanAcceptSubactions();
	bool Function_IsSubaction();
	bool Function_DisableActionInMojo();
	bool Function_ModifiesActorLocation();
	bool Function_CanSetDuration();
	bool Function_CanFastForwardSkip();
	bool Function_CanBeUsedWith(class AClass_Object_Actor* Actor);
	struct FString Function_GetSummaryString();
	struct FString Function_GetHelpString();
	struct FString Function_GetTrackString();
	struct FString Function_GetNameString();
	bool Function_EndCutscene();
	void Function_Finish();
	bool Function_Tick(float Delta);
	bool Function_Start();
	struct FStruct_MojoActorRef Function_ResolveActorRef(const struct FStruct_MojoActorRef& ref);
};


// Class Object.TsMojoAction.TsAction
// 0x0030 (0x0098 - 0x0068)
class UClass_Object_TsMojoAction_TsAction : public UClass_Object_TsMojoAction
{
public:
	struct FString                                     DName;                                                    // 0x0068(0x000C) (NeedCtorLink)
	struct FString                                     Track;                                                    // 0x0074(0x000C) (NeedCtorLink)
	struct FString                                     Help;                                                     // 0x0080(0x000C) (NeedCtorLink)
	unsigned long                                      FastForwardSkip : 1;                                      // 0x008C(0x0004)
	unsigned long                                      ModifiesLocation : 1;                                     // 0x008C(0x0004)
	unsigned long                                      DisableInMojo : 1;                                        // 0x008C(0x0004)
	unsigned long                                      UsesDuration : 1;                                         // 0x008C(0x0004)
	unsigned long                                      bShowSubtitles : 1;                                       // 0x008C(0x0004) (Config)
	float                                              interpTime;                                               // 0x0090(0x0004) (Transient)
	int                                                interpolator;                                             // 0x0094(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction");
		return ptr;
	}


	bool Function_ShouldShowSubtitles();
	bool Function_tickInterpolation(float Delta, float* Alpha);
	void Function_resetInterpolation(float easeIn, float duration, float easeOut);
	bool Function_DisableActionInMojo_DisableActionInMojo();
	bool Function_ModifiesActorLocation_ModifiesActorLocation();
	bool Function_CanSetDuration_CanSetDuration();
	bool Function_CanFastForwardSkip_CanFastForwardSkip();
	struct FString Function_GetHelpString_GetHelpString();
	struct FString Function_GetTrackString_GetTrackString();
	struct FString Function_GetNameString_GetNameString();
	void Function_Message(class UClass_Object_Message* msg);
	void Function_Finish_Finish();
	bool Function_Tick_Tick(float Delta);
	bool Function_Start_Start();
	struct FString Function_GetSummaryString_GetSummaryString();
	float Function_GetLength();
	void Function_OnFinish();
	bool Function_OnTick(float Delta);
	bool Function_OnStart();
};


// Class Object.TsMojoAction.TsAction.TsPawnAction
// 0x0004 (0x009C - 0x0098)
class UClass_Object_TsMojoAction_TsAction_TsPawnAction : public UClass_Object_TsMojoAction_TsAction
{
public:
	class AClass_Object_Actor_Pawn*                    Pawn;                                                     // 0x0098(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsPawnAction");
		return ptr;
	}


	bool Function_CanBeUsedWith_CanBeUsedWith(class AClass_Object_Actor* Actor);
	bool Function_Start_Start_Start();
};


// Class Object.TsMojoAction.TsAction.TsPawnAction.TsActionPlayLIPSinc
// 0x0044 (0x00E0 - 0x009C)
class UClass_Object_TsMojoAction_TsAction_TsPawnAction_TsActionPlayLIPSinc : public UClass_Object_TsMojoAction_TsAction_TsPawnAction
{
public:
	struct FString                                     FileName;                                                 // 0x009C(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     SectionName;                                              // 0x00A8(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     TextName;                                                 // 0x00B4(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     Path;                                                     // 0x00C0(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FName                                       LIPSincAnimName;                                          // 0x00CC(0x0004) (Edit)
	float                                              Volume;                                                   // 0x00D0(0x0004) (Edit)
	float                                              Radius;                                                   // 0x00D4(0x0004) (Edit)
	float                                              Pitch;                                                    // 0x00D8(0x0004) (Edit)
	unsigned long                                      bAttenuate : 1;                                           // 0x00DC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsPawnAction.TsActionPlayLIPSinc");
		return ptr;
	}


	bool Function_CanGenerateOutputKeys_CanGenerateOutputKeys();
	void Function_Resume_Resume();
	void Function_Pause_Pause();
	void Function_Interrupt_Interrupt();
	void Function_OnFinish_OnFinish();
	bool Function_OnTick_OnTick(float Delta);
	bool Function_OnStart_OnStart();
	void Function_ResumeLIPSinc();
	void Function_StopLIPSinc();
	void Function_PauseLIPSinc();
};


// Class Object.TsMojoAction.TsAction.TsActionInterpolateBase
// 0x0078 (0x0110 - 0x0098)
class UClass_Object_TsMojoAction_TsAction_TsActionInterpolateBase : public UClass_Object_TsMojoAction_TsAction
{
public:
	struct FStruct_MojoKeyframe                        cur_keyframe;                                             // 0x0098(0x0018) (Const)
	struct FStruct_Vector                              src_tangent;                                              // 0x00B0(0x000C) (Const)
	struct FStruct_Vector                              dest_tangent;                                             // 0x00BC(0x000C) (Const)
	struct FStruct_Vector                              src_position;                                             // 0x00C8(0x000C) (Const)
	struct FStruct_Vector                              dest_position;                                            // 0x00D4(0x000C) (Const)
	float                                              sqx;                                                      // 0x00E0(0x0004) (Const, Transient, NoExport)
	float                                              sqy;                                                      // 0x00E4(0x0004) (Const, Transient, NoExport)
	float                                              sqz;                                                      // 0x00E8(0x0004) (Const, Transient, NoExport)
	float                                              sqw;                                                      // 0x00EC(0x0004) (Const, Transient, NoExport)
	float                                              dqx;                                                      // 0x00F0(0x0004) (Const, Transient, NoExport)
	float                                              dqy;                                                      // 0x00F4(0x0004) (Const, Transient, NoExport)
	float                                              dqz;                                                      // 0x00F8(0x0004) (Const, Transient, NoExport)
	float                                              dqw;                                                      // 0x00FC(0x0004) (Const, Transient, NoExport)
	float                                              iqx;                                                      // 0x0100(0x0004) (Const, Transient, NoExport)
	float                                              iqy;                                                      // 0x0104(0x0004) (Const, Transient, NoExport)
	float                                              iqz;                                                      // 0x0108(0x0004) (Const, Transient, NoExport)
	float                                              iqw;                                                      // 0x010C(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsActionInterpolateBase");
		return ptr;
	}


	void Function_FinishActorInterpolation();
	void Function_StartActorInterpolation();
	void Function_ApplyCurrentKeyframePos();
};


// Class Object.TsMojoAction.TsAction.TsActionInterpolateBase.TsActionKeyframeInterpolate
// 0x0058 (0x0168 - 0x0110)
class UClass_Object_TsMojoAction_TsAction_TsActionInterpolateBase_TsActionKeyframeInterpolate : public UClass_Object_TsMojoAction_TsAction_TsActionInterpolateBase
{
public:
	float                                              duration;                                                 // 0x0110(0x0004) (Edit)
	float                                              ease_in_time;                                             // 0x0114(0x0004) (Edit)
	float                                              ease_out_time;                                            // 0x0118(0x0004) (Edit)
	unsigned long                                      snap_to_first_key : 1;                                    // 0x011C(0x0004) (Edit)
	unsigned long                                      use_linear_rotation : 1;                                  // 0x011C(0x0004) (Edit)
	TArray<struct FStruct_MojoKeyframe>                keys;                                                     // 0x0120(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<ELookAtType>                           look_at_type;                                             // 0x012C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	struct FStruct_MojoKeyframe                        look_at_point;                                            // 0x0130(0x0018) (Edit)
	struct FStruct_MojoActorRef                        look_at_actor;                                            // 0x0148(0x0008) (Edit)
	float                                              look_at_ease_time;                                        // 0x0150(0x0004) (Edit)
	float                                              cur_time;                                                 // 0x0154(0x0004)
	int                                                cur_key;                                                  // 0x0158(0x0004) (Const)
	float                                              src_key_distance;                                         // 0x015C(0x0004) (Const)
	float                                              dest_key_distance;                                        // 0x0160(0x0004) (Const)
	int                                                spline;                                                   // 0x0164(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsActionInterpolateBase.TsActionKeyframeInterpolate");
		return ptr;
	}


	float Function_GetDuration_GetDuration();
	bool Function_SetDuration_SetDuration(float _duration);
	void Function_OnFinish_OnFinish();
	bool Function_OnTick_OnTick(float Delta);
	bool Function_OnStart_OnStart();
	bool Function_UpdateCurrentKeyframePos(float Time);
	void Function_CalculateConstants(const struct FStruct_Vector& initial_pos, const struct FStruct_Rotator& initial_rot);
};


// Class Object.TsMojoAction.TsAction.TsActionInterpolateBase.TsActionInterpolateTo
// 0x0028 (0x0138 - 0x0110)
class UClass_Object_TsMojoAction_TsAction_TsActionInterpolateBase_TsActionInterpolateTo : public UClass_Object_TsMojoAction_TsAction_TsActionInterpolateBase
{
public:
	struct FStruct_MojoKeyframe                        Target;                                                   // 0x0110(0x0018) (Edit)
	float                                              duration;                                                 // 0x0128(0x0004) (Edit)
	float                                              ease_in_time;                                             // 0x012C(0x0004) (Edit)
	float                                              ease_out_time;                                            // 0x0130(0x0004) (Edit)
	float                                              elapsed_duration;                                         // 0x0134(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsActionInterpolateBase.TsActionInterpolateTo");
		return ptr;
	}


	float Function_GetDuration_GetDuration();
	bool Function_SetDuration_SetDuration(float _duration);
	void Function_OnFinish_OnFinish();
	bool Function_OnTick_OnTick(float Delta);
	bool Function_OnStart_OnStart();
	void Function_UpdateCurrentKeyframePos(float Time);
	void Function_CalculateConstants(const struct FStruct_Vector& initial_pos, const struct FStruct_Rotator& initial_rot);
};


// Class Object.TsMojoAction.TsAction.TsActionSnapTo
// 0x001C (0x00B4 - 0x0098)
class UClass_Object_TsMojoAction_TsAction_TsActionSnapTo : public UClass_Object_TsMojoAction_TsAction
{
public:
	struct FStruct_MojoKeyframe                        Target;                                                   // 0x0098(0x0018) (Edit)
	unsigned long                                      reset_animation : 1;                                      // 0x00B0(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsActionSnapTo");
		return ptr;
	}


	bool Function_OnTick_OnTick(float Delta);
	bool Function_OnStart_OnStart();
};


// Class Object.TsMojoAction.TsAction.TsCameraAction
// 0x0004 (0x009C - 0x0098)
class UClass_Object_TsMojoAction_TsAction_TsCameraAction : public UClass_Object_TsMojoAction_TsAction
{
public:
	class AClass_Object_Actor_Controller_PlayerController* PC;                                                       // 0x0098(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TsMojoAction.TsAction.TsCameraAction");
		return ptr;
	}


	bool Function_CanBeUsedWith_CanBeUsedWith(class AClass_Object_Actor* Actor);
	bool Function_Start_Start_Start();
};


// Class Object.xUtil
// 0x0004 (0x002C - 0x0028)
class UClass_Object_xUtil : public UClass_Object
{
public:
	class UClass_Object_xUtil_CacheMutators*           CachedMutatorList;                                        // 0x0028(0x0004) (Edit, Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.xUtil");
		return ptr;
	}


	void STATIC_Function_GetMutatorList(TArray<struct FStruct_MutatorRecord>* MutatorRecords);
};


// Class Object.xUtil.CacheMutators
// 0x000C (0x0038 - 0x002C)
class UClass_Object_xUtil_CacheMutators : public UClass_Object_xUtil
{
public:
	TArray<struct FStruct_MutatorRecord>               Records;                                                  // 0x002C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.xUtil.CacheMutators");
		return ptr;
	}

};


// Class Object.RefCount
// 0x0010 (0x0038 - 0x0028)
class UClass_Object_RefCount : public UClass_Object
{
public:
	int                                                m_RefCount;                                               // 0x0028(0x0004) (Const)
	TArray<int>                                        LatentStackLocations;                                     // 0x002C(0x000C) (Const, Transient, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount");
		return ptr;
	}


	int Function_Release();
	int Function_AddRef();
};


// Class Object.RefCount.VisionNotifier
// 0x0010 (0x0048 - 0x0038)
class UClass_Object_RefCount_VisionNotifier : public UClass_Object_RefCount
{
public:
	class AClass_Object_Actor_Pawn*                    Viewer;                                                   // 0x0038(0x0004)
	int                                                SeenListPadding;                                          // 0x003C(0x0004) (Const, Transient)
	int                                                CurrentSeenListPadding;                                   // 0x0040(0x0004) (Const, Transient)
	int                                                NotificationListPadding;                                  // 0x0044(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.VisionNotifier");
		return ptr;
	}


	void Function_logSeenList();
	void Function_UnregisterVisionNotification(class UClass_Object_IVisionNotification* Registrant);
	void Function_RegisterVisionNotification(class UClass_Object_IVisionNotification* Registrant);
	bool Function_IsOnSeenList(class AClass_Object_Actor_Pawn* TestPawn);
	bool Function_IsOnCurrentSeenList(class AClass_Object_Actor_Pawn* TestPawn);
	bool Function_isVisible(class AClass_Object_Actor_Pawn* TestPawn);
	void Function_RemoveAnyReferencesToPawn(class AClass_Object_Actor_Pawn* PawnBeingRemoved);
	void Function_OnOtherPawnDied(class AClass_Object_Actor_Pawn* DeadPawn);
	void Function_OnOtherActorDestroyed(class AClass_Object_Actor* ActorBeingDestroyed);
	void Function_CleanupVisionNotifier();
	void Function_InitializeVisionNotifier(class AClass_Object_Actor_Pawn* InViewer);
};


// Class Object.RefCount.VisionNotifier.TribesVisionNotifier
// 0x0000 (0x0048 - 0x0048)
class UClass_Object_RefCount_VisionNotifier_TribesVisionNotifier : public UClass_Object_RefCount_VisionNotifier
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.VisionNotifier.TribesVisionNotifier");
		return ptr;
	}


	TArray<class AClass_Object_Actor_Pawn_Rook*> Function_getEnemyList();
	TArray<class AClass_Object_Actor_Pawn_Rook*> Function_getSeenList();
	void Function_RemoveAnyReferencesToPawn_RemoveAnyReferencesToPawn(class AClass_Object_Actor_Pawn* PawnBeingRemoved);
	bool Function_isLocallyVisible(class AClass_Object_Actor_Pawn* TestPawn);
	bool Function_isVisible_isVisible(class AClass_Object_Actor_Pawn* TestPawn);
};


// Class Object.Commandlet
// 0x01B4 (0x01DC - 0x0028)
class UClass_Object_Commandlet : public UClass_Object
{
public:
	struct FString                                     HelpCmd;                                                  // 0x0028(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HelpOneLiner;                                             // 0x0034(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HelpUsage;                                                // 0x0040(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HelpWebLink;                                              // 0x004C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HelpParm[0x10];                                           // 0x0058(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HelpDesc[0x10];                                           // 0x0118(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      LogToStdout : 1;                                          // 0x01D8(0x0004)
	unsigned long                                      IsServer : 1;                                             // 0x01D8(0x0004)
	unsigned long                                      IsClient : 1;                                             // 0x01D8(0x0004)
	unsigned long                                      IsEditor : 1;                                             // 0x01D8(0x0004)
	unsigned long                                      LazyLoad : 1;                                             // 0x01D8(0x0004)
	unsigned long                                      ShowErrorCount : 1;                                       // 0x01D8(0x0004)
	unsigned long                                      ShowBanner : 1;                                           // 0x01D8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet");
		return ptr;
	}


	int Function_Main(const struct FString& Parms);
};


// Class Object.Commandlet.NativeListUnitTestCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_NativeListUnitTestCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.NativeListUnitTestCommandlet");
		return ptr;
	}

};


// Class Object.CheatManager
// 0x000C (0x0034 - 0x0028)
class UClass_Object_CheatManager : public UClass_Object
{
public:
	struct FStruct_Rotator                             LockedRotation;                                           // 0x0028(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CheatManager");
		return ptr;
	}


	void Function_findCamels();
	void Function_PlayAllCS();
	void Function_Cutscene(const struct FName& cutsceneName);
};


// Class Object.CheatManager.ConsoleCommandManager
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_CheatManager_ConsoleCommandManager : public UClass_Object_CheatManager
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CheatManager.ConsoleCommandManager");
		return ptr;
	}


	void Function_applySkin(const struct FString& skinPath);
	void Function_DebugEffectEvent(const struct FName& EffectEvent);
	void Function_modCharVis(const struct FName& CharacterName, const struct FName& Mode);
	void Function_toggleModifyHUD();
	void Function_SetMass(const struct FName& ActorName, float newMass);
	void Function_OffsetPosition(const struct FName& ActorName, float posZ);
	void Function_setPosition(const struct FName& ActorName, float posX, float posY, float posZ);
	void Function_setAcceleration(const struct FName& ActorName, float magnitude);
	void Function_setVelocity(const struct FName& ActorName, float magnitude);
	void Function_AddVelocity(const struct FName& ActorName, float magnitude);
	void Function_AddTorque(const struct FName& ActorName, float magnitude);
	void Function_addForce(const struct FName& ActorName, float magnitude, float Offset);
	void Function_AddForceAtPosition(const struct FName& ActorName, float magnitude, float Offset);
	void Function_addImpulse(const struct FName& ActorName, float magnitude, float Offset);
	void Function_AddImpulseAtPosition(const struct FName& ActorName, float magnitude);
	void Function_UnifiedGetMethodsTest(const struct FName& ActorName);
	void Function_SetState(const struct FName& ActorName, const struct FName& NewState);
	void Function_spectate(const struct FString& PlayerName);
	void Function_ChangeTeam(int i);
	void Function_switchTeam();
	void Function_setRoundTime(float t);
	void Function_toggleWatermark();
	void Function_showHUD(bool B);
	void Function_showFirstPersonGun(bool B);
	void Function_logDLM(const struct FName& aiLabel);
	void Function_logTyrion(const struct FName& aiLabel);
	void Function_logCersei(const struct FName& aiLabel);
	void Function_logNavigationSystem(const struct FName& aiLabel);
	void Function_debugJS(const struct FName& aiLabel);
	void Function_debugLOA(const struct FName& aiLabel);
	void Function_debugSensing(const struct FName& aiLabel);
	void Function_disableAI(const struct FName& aiLabel);
	void Function_debugNav(const struct FName& aiLabel);
	void Function_debugAI(const struct FName& aiLabel);
};


// Class Object.Armor
// 0x0100 (0x0128 - 0x0028)
class UClass_Object_Armor : public UClass_Object
{
public:
	float                                              CollisionRadius;                                          // 0x0028(0x0004) (Edit, NoClear)
	float                                              CollisionHeight;                                          // 0x002C(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      HavokParamsClass;                                         // 0x0030(0x0004) (Edit, NoClear)
	float                                              breathingDurationMod;                                     // 0x0034(0x0004) (Edit, NoClear)
	float                                              Health;                                                   // 0x0038(0x0004) (Edit, NoClear)
	float                                              energy;                                                   // 0x003C(0x0004) (Edit, NoClear)
	float                                              ammoMod;                                                  // 0x0040(0x0004) (Edit, NoClear)
	float                                              collisionDamageMod;                                       // 0x0044(0x0004) (Edit, NoClear)
	float                                              noise;                                                    // 0x0048(0x0004) (Edit, NoClear)
	float                                              jetPackNoise;                                             // 0x004C(0x0004) (Edit, NoClear)
	float                                              EyeHeight;                                                // 0x0050(0x0004) (Edit, NoClear)
	float                                              headFraction;                                             // 0x0054(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      hudIcon;                                                  // 0x0058(0x0004) (Edit, NoClear)
	int                                                maxCarriedWeapons;                                        // 0x005C(0x0004) (Edit, NoClear)
	struct FString                                     movementConfiguration;                                    // 0x0060(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     movementConfigurationFastActive;                          // 0x006C(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     movementConfigurationFastPassive;                         // 0x0078(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_Field_Struct_State_Class*      movementDamageTypeClass;                                  // 0x0084(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      movementDamageOtherTypeClass;                             // 0x0088(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      movementCrushingDamageTypeClass;                          // 0x008C(0x0004) (Edit, NoClear)
	unsigned long                                      bUseAlternateWeaponMesh : 1;                              // 0x0090(0x0004) (Edit, NoClear)
	int                                                heightIndex;                                              // 0x0094(0x0004) (Edit, NoClear)
	struct FString                                     armorName;                                                // 0x0098(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     infoString;                                               // 0x00A4(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Field_Struct_State_Class*      personalShieldClass;                                      // 0x00B0(0x0004) (Edit, NoClear)
	struct FString                                     SpeechTag;                                                // 0x00B4(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_Field_Struct_State_Class*      radarInfoClass;                                           // 0x00C0(0x0004) (Edit, NoClear)
	unsigned long                                      bCanUseTurrets : 1;                                       // 0x00C4(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      fallbackWeaponClass;                                      // 0x00C8(0x0004) (Edit, NoClear)
	float                                              knockbackScale;                                           // 0x00CC(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      suicideDamageTypeClass;                                   // 0x00D0(0x0004) (Edit, NoClear)
	unsigned long                                      bRestrictions : 1;                                        // 0x00D4(0x0004)
	TArray<struct FStruct_QuantityWeapon>              AllowedWeapons;                                           // 0x00D8(0x000C) (Edit, NeedCtorLink, EditInline)
	struct FStruct_QuantityGrenades                    AllowedGrenades;                                          // 0x00E4(0x0008) (Edit, EditInline)
	TArray<class UClass_Object_Field_Struct_State_Class*> AllowedPacks;                                             // 0x00EC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_QuantityDeployable>          AllowedDeployables;                                       // 0x00F8(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<struct FStruct_QuantityConsumable>          AllowedConsumables;                                       // 0x0104(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UClass_Object_Field_Struct_State_Class*> AllowedDriver;                                            // 0x0110(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> AllowedPassenger;                                         // 0x011C(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Armor");
		return ptr;
	}


	bool STATIC_Function_useAlternateWeaponMesh();
	void STATIC_Function_equip(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getHandGrenadeClass();
	int STATIC_Function_maxGrenades();
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getHealthKitClass();
	int STATIC_Function_maxHealthKits();
	int STATIC_Function_maxConsumable(class UClass_Object_Field_Struct_State_Class* typeClass);
	int STATIC_Function_maxDeployable(class UClass_Object_Field_Struct_State_Class* typeClass);
	int STATIC_Function_maxAmmo(class UClass_Object_Field_Struct_State_Class* typeClass);
	bool STATIC_Function_isPassengerAllowed(class UClass_Object_Field_Struct_State_Class* typeClass);
	bool STATIC_Function_isDriverAllowed(class UClass_Object_Field_Struct_State_Class* typeClass);
	bool STATIC_Function_isConsumableAllowed(class UClass_Object_Field_Struct_State_Class* typeClass);
	bool STATIC_Function_isDeployableAllowed(class UClass_Object_Field_Struct_State_Class* typeClass);
	bool STATIC_Function_isPackAllowed(class UClass_Object_Field_Struct_State_Class* typeClass);
	bool STATIC_Function_isWeaponAllowed(class UClass_Object_Field_Struct_State_Class* typeClass);
};


// Class Object.Material
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_Material : public UClass_Object
{
public:
	class UClass_Object_Material*                      FallbackMaterial;                                         // 0x0028(0x0004) (Edit)
	class UClass_Object_Material*                      DefaultMaterial;                                          // 0x002C(0x0004)
	unsigned long                                      UseFallback : 1;                                          // 0x0030(0x0004) (Const, Transient)
	unsigned long                                      Validated : 1;                                            // 0x0030(0x0004) (Const, Transient)
	TEnumAsByte<EMaterialType>                         MaterialType;                                             // 0x0034(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                MaterialSoundType;                                        // 0x0038(0x0004) (Edit)
	TEnumAsByte<EMaterialVisualType>                   MaterialVisualType;                                       // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material");
		return ptr;
	}


	void Function_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
	void Function_Reset();
	int Function_GetVSize();
	int Function_GetUSize();
};


// Class Object.Material.Modifier
// 0x0004 (0x0044 - 0x0040)
class UClass_Object_Material_Modifier : public UClass_Object_Material
{
public:
	class UClass_Object_Material*                      Material;                                                 // 0x0040(0x0004) (Edit, EditInline, EditInlineUse)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier");
		return ptr;
	}


	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
	void Function_Reset_Reset();
	int Function_GetVSize_GetVSize();
	int Function_GetUSize_GetUSize();
};


// Class Object.Material.Modifier.TexModifier
// 0x0008 (0x004C - 0x0044)
class UClass_Object_Material_Modifier_TexModifier : public UClass_Object_Material_Modifier
{
public:
	TEnumAsByte<ETexCoordSrc>                          TexCoordSource;                                           // 0x0044(0x0001)
	TEnumAsByte<ETexCoordCount>                        TexCoordCount;                                            // 0x0045(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0046(0x0002) MISSED OFFSET
	unsigned long                                      TexCoordProjected : 1;                                    // 0x0048(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexMatrix
// 0x0040 (0x008C - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexMatrix : public UClass_Object_Material_Modifier_TexModifier
{
public:
	struct FStruct_Matrix                              Matrix;                                                   // 0x004C(0x0040)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexMatrix");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexMatrix.ControllableTexMatrix
// 0x001C (0x00A8 - 0x008C)
class UClass_Object_Material_Modifier_TexModifier_TexMatrix_ControllableTexMatrix : public UClass_Object_Material_Modifier_TexModifier_TexMatrix
{
public:
	struct FStruct_Rotator                             rotationAxis;                                             // 0x008C(0x000C)
	float                                              Rotation;                                                 // 0x0098(0x0004)
	float                                              panU;                                                     // 0x009C(0x0004)
	float                                              panV;                                                     // 0x00A0(0x0004)
	float                                              Scale;                                                    // 0x00A4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexMatrix.ControllableTexMatrix");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.ControllableTextureRotator
// 0x0058 (0x00A4 - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_ControllableTextureRotator : public UClass_Object_Material_Modifier_TexModifier
{
public:
	struct FStruct_Rotator                             Rotation;                                                 // 0x004C(0x000C)
	struct FStruct_Matrix                              M;                                                        // 0x0058(0x0040)
	float                                              Scale;                                                    // 0x0098(0x0004)
	float                                              UOffset;                                                  // 0x009C(0x0004)
	float                                              VOffset;                                                  // 0x00A0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.ControllableTextureRotator");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.ControllableTexturePanner
// 0x0050 (0x009C - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner : public UClass_Object_Material_Modifier_TexModifier
{
public:
	struct FStruct_Vector                              PanDirection;                                             // 0x004C(0x000C) (Edit)
	struct FStruct_Matrix                              M;                                                        // 0x0058(0x0040)
	float                                              Scale;                                                    // 0x0098(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.ControllableTexturePanner");
		return ptr;
	}

};


// Class Object.RefCount.ClientSideCharacter
// 0x0660 (0x0698 - 0x0038)
class UClass_Object_RefCount_ClientSideCharacter : public UClass_Object_RefCount
{
public:
	int                                                MouseX;                                                   // 0x0038(0x0004)
	int                                                MouseY;                                                   // 0x003C(0x0004)
	TEnumAsByte<EColorType>                            UserPrefColorType;                                        // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              levelTimeSeconds;                                         // 0x0044(0x0004)
	unsigned long                                      bNeedCountDownTimer : 1;                                  // 0x0048(0x0004)
	unsigned long                                      bRoundCountingDown : 1;                                   // 0x0048(0x0004)
	float                                              countDown;                                                // 0x004C(0x0004)
	float                                              respawnTime;                                              // 0x0050(0x0004)
	struct FStruct_Vector                              charLocation;                                             // 0x0054(0x000C)
	struct FStruct_Rotator                             charRotation;                                             // 0x0060(0x000C)
	float                                              Velocity;                                                 // 0x006C(0x0004)
	struct FString                                     promptText;                                               // 0x0070(0x000C) (NeedCtorLink)
	struct FStruct_Vector                              useableObjectLocation;                                    // 0x007C(0x000C)
	unsigned long                                      bUseableObjectSwitch : 1;                                 // 0x0088(0x0004)
	unsigned long                                      bCanBeUsed : 1;                                           // 0x0088(0x0004)
	unsigned long                                      bEnabledForUse : 1;                                       // 0x0088(0x0004)
	unsigned long                                      bUseableObjectPowered : 1;                                // 0x0088(0x0004)
	float                                              Health;                                                   // 0x008C(0x0004)
	float                                              healthMaximum;                                            // 0x0090(0x0004)
	float                                              energy;                                                   // 0x0094(0x0004)
	float                                              energyMaximum;                                            // 0x0098(0x0004)
	unsigned long                                      bShowEnergyBar : 1;                                       // 0x009C(0x0004)
	float                                              energyWeaponDepleted;                                     // 0x00A0(0x0004)
	float                                              healthInjectionAmount;                                    // 0x00A4(0x0004)
	unsigned long                                      bHotkeysUpdated : 1;                                      // 0x00A8(0x0004)
	float                                              throwForceMax;                                            // 0x00AC(0x0004)
	float                                              throwForce;                                               // 0x00B0(0x0004)
	unsigned long                                      bZoomed : 1;                                              // 0x00B4(0x0004)
	float                                              zoomMagnificationLevel;                                   // 0x00B8(0x0004)
	int                                                activeWeaponIdx;                                          // 0x00BC(0x0004)
	struct FStruct_HUDWeaponInfo                       activeWeapon;                                             // 0x00C0(0x0024) (NeedCtorLink)
	struct FStruct_HUDWeaponInfo                       fallbackWeapon;                                           // 0x00E4(0x0024) (NeedCtorLink)
	struct FStruct_HUDWeaponInfo                       weapons[0x3];                                             // 0x0108(0x0024) (NeedCtorLink)
	struct FStruct_HUDWeaponInfo                       grenades;                                                 // 0x0174(0x0024) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      carryable;                                                // 0x0198(0x0004)
	int                                                numCarryables;                                            // 0x019C(0x0004)
	class UClass_Object_Field_Struct_State_Class*      Deployable;                                               // 0x01A0(0x0004)
	class UClass_Object_Field_Struct_State_Class*      questItem;                                                // 0x01A4(0x0004)
	class UClass_Object_Field_Struct_State_Class*      Pack;                                                     // 0x01A8(0x0004)
	class UClass_Object_Field_Struct_State_Class*      HealthKit;                                                // 0x01AC(0x0004)
	int                                                healthKitQuantity;                                        // 0x01B0(0x0004)
	struct FString                                     deployableHotkey;                                         // 0x01B4(0x000C) (NeedCtorLink)
	struct FString                                     healthKitHotkey;                                          // 0x01C0(0x000C) (NeedCtorLink)
	struct FString                                     packHotkey;                                               // 0x01CC(0x000C) (NeedCtorLink)
	struct FString                                     carryableHotkey;                                          // 0x01D8(0x000C) (NeedCtorLink)
	TEnumAsByte<EeDeployableInfo>                      deployableState;                                          // 0x01E4(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01E5(0x0003) MISSED OFFSET
	unsigned long                                      bDeployableActive : 1;                                    // 0x01E8(0x0004)
	float                                              deployableUseTime;                                        // 0x01EC(0x0004)
	TEnumAsByte<EePackState>                           packState;                                                // 0x01F0(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01F1(0x0003) MISSED OFFSET
	float                                              packProgressRatio;                                        // 0x01F4(0x0004)
	struct FStruct_SpawnPointData                      spawnAreas[0x14];                                         // 0x01F8(0x001C) (NeedCtorLink)
	unsigned long                                      bShowRespawnMap : 1;                                      // 0x0428(0x0004)
	unsigned long                                      bInstantRespawnMode : 1;                                  // 0x0428(0x0004)
	class UClass_Object_Field_Struct_State_Class*      GameClass;                                                // 0x042C(0x0004)
	unsigned long                                      bAwaitingTournamentStart : 1;                             // 0x0430(0x0004)
	int                                                ownTeamScore;                                             // 0x0434(0x0004)
	int                                                otherTeamScore;                                           // 0x0438(0x0004)
	struct FString                                     ownTeam;                                                  // 0x043C(0x000C) (NeedCtorLink)
	struct FString                                     otherTeam;                                                // 0x0448(0x000C) (NeedCtorLink)
	class UClass_Object_Material*                      ownTeamIcon;                                              // 0x0454(0x0004)
	class UClass_Object_Material*                      otherTeamIcon;                                            // 0x0458(0x0004)
	struct FStruct_Color                               ownTeamColor;                                             // 0x045C(0x0004)
	struct FStruct_Color                               ownTeamHighlightColor;                                    // 0x0460(0x0004)
	struct FStruct_Color                               otherTeamColor;                                           // 0x0464(0x0004)
	struct FStruct_Color                               otherTeamHighlightColor;                                  // 0x0468(0x0004)
	unsigned long                                      bNoMoreCarryables : 1;                                    // 0x046C(0x0004)
	struct FStruct_Color                               relativeFriendlyTeamColor;                                // 0x0470(0x0004)
	struct FStruct_Color                               relativeFriendlyHighlightColor;                           // 0x0474(0x0004)
	struct FStruct_Color                               relativeEnemyTeamColor;                                   // 0x0478(0x0004)
	struct FStruct_Color                               relativeEnemyHighlightColor;                              // 0x047C(0x0004)
	struct FStruct_Color                               neutralColor;                                             // 0x0480(0x0004)
	struct FStruct_Color                               neutralHighlightColor;                                    // 0x0484(0x0004)
	unsigned long                                      bHitObject : 1;                                           // 0x0488(0x0004)
	float                                              lastHitObjectTime;                                        // 0x048C(0x0004)
	int                                                DamageAmounts[0x7];                                       // 0x0490(0x0004)
	class UClass_Object_Field_Struct_State_Class*      targetType;                                               // 0x04AC(0x0004)
	struct FString                                     targetLabel;                                              // 0x04B0(0x000C) (NeedCtorLink)
	float                                              targetHealth;                                             // 0x04BC(0x0004)
	float                                              targetHealthMax;                                          // 0x04C0(0x0004)
	float                                              targetShield;                                             // 0x04C4(0x0004)
	float                                              targetShieldMax;                                          // 0x04C8(0x0004)
	float                                              targetDistance;                                           // 0x04CC(0x0004)
	float                                              targetFunctionalHealthThreshold;                          // 0x04D0(0x0004)
	TEnumAsByte<ETeamAlignment>                        targetTeamAlignment;                                      // 0x04D4(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	class UClass_Object_Field_Struct_State_Class*      targetTeam;                                               // 0x04D8(0x0004)
	unsigned long                                      targetCanBeDamaged : 1;                                   // 0x04DC(0x0004)
	TArray<struct FStruct_HUDPositionData>             vehiclePositionData;                                      // 0x04E0(0x000C) (NeedCtorLink)
	class UClass_Object_Material*                      vehicleManifestSchematic;                                 // 0x04EC(0x0004)
	float                                              vehicleHealth;                                            // 0x04F0(0x0004)
	float                                              vehicleHealthMaximum;                                     // 0x04F4(0x0004)
	float                                              turretHealth;                                             // 0x04F8(0x0004)
	float                                              turretHealthMaximum;                                      // 0x04FC(0x0004)
	unsigned long                                      bCanExitRespawnHUD : 1;                                   // 0x0500(0x0004)
	struct FString                                     ExitRespawnKeyText;                                       // 0x0504(0x000C) (NeedCtorLink)
	int                                                ExitRespawnKeyBinding;                                    // 0x0510(0x0004)
	struct FString                                     ShowCommandMapKeyText;                                    // 0x0514(0x000C) (NeedCtorLink)
	int                                                livesLeft;                                                // 0x0520(0x0004)
	unsigned long                                      bWaitingForRoundEnd : 1;                                  // 0x0524(0x0004)
	int                                                matchScoreLimit;                                          // 0x0528(0x0004)
	struct FString                                     watchedPlayerName;                                        // 0x052C(0x000C) (NeedCtorLink)
	int                                                Ping;                                                     // 0x0538(0x0004)
	int                                                OffenseScore;                                             // 0x053C(0x0004)
	int                                                DefenseScore;                                             // 0x0540(0x0004)
	int                                                StyleScore;                                               // 0x0544(0x0004)
	struct FString                                     levelDescription;                                         // 0x0548(0x000C) (NeedCtorLink)
	struct FStruct_Vector                              mapOrigin;                                                // 0x0554(0x000C)
	float                                              mapExtent;                                                // 0x0560(0x0004)
	class UClass_Object_Material*                      radarUnderlayMaterial;                                    // 0x0564(0x0004)
	float                                              zoomFactor;                                               // 0x0568(0x0004)
	unsigned long                                      bSensorGridFunctional : 1;                                // 0x056C(0x0004)
	TArray<struct FStruct_POIInfo>                     POIData;                                                  // 0x0570(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> detectedAlliesClass;                                      // 0x057C(0x000C) (NeedCtorLink)
	TArray<float>                                      detectedAlliesXPosition;                                  // 0x0588(0x000C) (NeedCtorLink)
	TArray<float>                                      detectedAlliesYPosition;                                  // 0x0594(0x000C) (NeedCtorLink)
	TArray<int>                                        detectedAlliesHeight;                                     // 0x05A0(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              detectedAlliesState;                                      // 0x05AC(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> detectedEnemiesTeam;                                      // 0x05B8(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> detectedEnemiesClass;                                     // 0x05C4(0x000C) (NeedCtorLink)
	TArray<float>                                      detectedEnemiesXPosition;                                 // 0x05D0(0x000C) (NeedCtorLink)
	TArray<float>                                      detectedEnemiesYPosition;                                 // 0x05DC(0x000C) (NeedCtorLink)
	TArray<int>                                        detectedEnemiesHeight;                                    // 0x05E8(0x000C) (NeedCtorLink)
	TArray<int>                                        detectedEnemiesScreenX;                                   // 0x05F4(0x000C) (NeedCtorLink)
	TArray<int>                                        detectedEnemiesScreenY;                                   // 0x0600(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              detectedEnemiesState;                                     // 0x060C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_ClientObjectiveInfo>         ObjectiveData;                                            // 0x0618(0x000C) (NeedCtorLink)
	TArray<struct FStruct_ClientObjectiveActorInfo>    ObjectiveActorData;                                       // 0x0624(0x000C) (NeedCtorLink)
	TArray<struct FStruct_MarkerData>                  markers;                                                  // 0x0630(0x000C) (NeedCtorLink)
	unsigned long                                      bDisplayChatWindow : 1;                                   // 0x063C(0x0004)
	int                                                CurrentChatWindowSize;                                    // 0x0640(0x0004)
	int                                                ChatScrollDelta;                                          // 0x0644(0x0004)
	TArray<struct FStruct_HUDMessage>                  Messages;                                                 // 0x0648(0x000C) (NeedCtorLink)
	TArray<struct FString>                             Announcements;                                            // 0x0654(0x000C) (NeedCtorLink)
	TArray<struct FStruct_HUDMessage>                  PersonalMessages;                                         // 0x0660(0x000C) (NeedCtorLink)
	TArray<struct FStruct_EventMessage>                EventMessages;                                            // 0x066C(0x000C) (NeedCtorLink)
	unsigned long                                      bTalk : 1;                                                // 0x0678(0x0004)
	unsigned long                                      bTeamTalk : 1;                                            // 0x0678(0x0004)
	unsigned long                                      bQuickChat : 1;                                           // 0x0678(0x0004)
	unsigned long                                      aHeadIsTalking : 1;                                       // 0x0678(0x0004)
	TArray<struct FString>                             loadoutNames;                                             // 0x067C(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              loadoutEnabled;                                           // 0x0688(0x000C) (NeedCtorLink)
	unsigned long                                      bLoadoutSelection : 1;                                    // 0x0694(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.ClientSideCharacter");
		return ptr;
	}


	void Function_SetSpawnArea(int Index, const struct FStruct_SpawnPointData& data);
	struct FStruct_SpawnPointData Function_GetSpawnArea(int Index);
	struct FStruct_Color Function_GetTeamColor(TEnumAsByte<ETeamAlignment> alignment, bool bHighlight, class UClass_Object_Field_Struct_State_Class* ObjectTeam);
	TEnumAsByte<ETeamAlignment> Function_GetTeamAlignment(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* localController, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
};


// Class Object.Actor
// 0x03D8 (0x0400 - 0x0028)
class AClass_Object_Actor : public UClass_Object
{
public:
	//char UnknownData0000[4+4+4];
	TEnumAsByte<ELightType>                            LightType;                                                // 0x0028(0x0001) (Edit, Net)
	TEnumAsByte<ELightEffect>                          LightEffect;                                              // 0x0029(0x0001) (Edit, Net)
	//unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	float                                              LightBrightness;                                          // 0x002C(0x0004) (Edit, Net)
	float                                              LightRadius;                                              // 0x0030(0x0004) (Edit, Net)
	unsigned char                                      LightHue;                                                 // 0x0034(0x0001) (Edit, Net)
	unsigned char                                      LightSaturation;                                          // 0x0035(0x0001) (Edit, Net)
	unsigned char                                      LightPeriod;                                              // 0x0036(0x0001) (Edit, Net)
	unsigned char                                      LightPhase;                                               // 0x0037(0x0001) (Edit, Net)
	unsigned char                                      LightCone;                                                // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	unsigned long                                      bDisableEditorCopying : 1;                                // 0x003C(0x0004)
	unsigned long                                      bCastsVolumetricShadows : 1;                              // 0x003C(0x0004) (Edit)
	unsigned long                                      bDisableShadowOptimisation : 1;                           // 0x003C(0x0004) (Edit)
	unsigned long                                      bDisableBspVolumetrics : 1;                               // 0x003C(0x0004) (Edit)
	unsigned long                                      bVolumetricShadowCast : 1;                                // 0x003C(0x0004) (Edit, NoClear)
	unsigned long                                      bDoNotApproximateBumpmap : 1;                             // 0x003C(0x0004) (Edit)
	float                                              BumpmapLODScale;                                          // 0x0040(0x0004) (Edit)
	unsigned long                                      bOnlyAffectCurrentZone : 1;                               // 0x0044(0x0004) (Edit, NoClear)
	float                                              MaxTraceDistance;                                         // 0x0048(0x0004) (Edit)
	unsigned long                                      bImportantActor : 1;                                      // 0x004C(0x0004) (Edit)
	unsigned long                                      bGetOverlayMaterialFromBase : 1;                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bGetSkinFromBase : 1;                                     // 0x004C(0x0004) (Edit)
	unsigned long                                      bNeedPostRenderCallback : 1;                              // 0x004C(0x0004)
	unsigned long                                      bIsMirror : 1;                                            // 0x004C(0x0004)
	unsigned long                                      bIsVehicle : 1;                                           // 0x004C(0x0004) (Const)
	unsigned long                                      bUseRootMotionBound : 1;                                  // 0x004C(0x0004) (Edit)
	unsigned long                                      bNetworkRelevancyVisible : 1;                             // 0x004C(0x0004)
	struct FString                                     SpeechTag;                                                // 0x0050(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FStruct_Vector                              forceAccumulator;                                         // 0x005C(0x000C)
	struct FStruct_Vector                              torqueAccumulator;                                        // 0x0068(0x000C)
	unsigned long                                      bUnifiedPositionChanged : 1;                              // 0x0074(0x0004)
	struct FStruct_Vector                              unifiedPosition;                                          // 0x0078(0x000C)
	unsigned long                                      bUnifiedVelocityChanged : 1;                              // 0x0084(0x0004)
	struct FStruct_Vector                              unifiedVelocity;                                          // 0x0088(0x000C)
	TEnumAsByte<EPhysics>                              Physics;                                                  // 0x0094(0x0001) (Edit, Const, Net)
	TEnumAsByte<EDrawType>                             DrawType;                                                 // 0x0095(0x0001) (Edit, Const, Net)
	//unsigned char                                      UnknownData02[0x2];                                       // 0x0096(0x0002) MISSED OFFSET
	class UClass_Object_Primitive_StaticMesh*          StaticMesh;                                               // 0x0098(0x0004) (Edit, Const, Net)
	class AClass_Object_Actor*                         Owner;                                                    // 0x009C(0x0004) (Const, Net)
	class AClass_Object_Actor*                         Base;                                                     // 0x00A0(0x0004) (Const, Net)
	struct FStruct_ActorRenderDataPtr                  ActorRenderData;                                          // 0x00A4(0x0004) (Const, Native)
	struct FStruct_LightRenderDataPtr                  LightRenderData;                                          // 0x00A8(0x0004) (Const, Native)
	int                                                RenderRevision;                                           // 0x00AC(0x0004) (Const, Native)
	unsigned long                                      UsesSubVisibility : 1;                                    // 0x00B0(0x0004) (Const)
	TEnumAsByte<EFilterState>                          StaticFilterState;                                        // 0x00B4(0x0001) (Const, Native)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	TArray<struct FStruct_BatchReference>              StaticSectionBatches;                                     // 0x00B8(0x000C) (Const, Native)
	struct FName                                       ForcedVisibilityZoneTag;                                  // 0x00C4(0x0004) (Edit, Const, NoClear)
	unsigned long                                      bSpecialLit : 1;                                          // 0x00C8(0x0004) (Edit, Net)
	unsigned long                                      bActorShadows : 1;                                        // 0x00C8(0x0004) (Edit)
	unsigned long                                      bCorona : 1;                                              // 0x00C8(0x0004) (Edit)
	unsigned long                                      bLightingVisibility : 1;                                  // 0x00C8(0x0004) (Edit)
	unsigned long                                      bUseDynamicLights : 1;                                    // 0x00C8(0x0004) (Edit)
	unsigned long                                      bLightChanged : 1;                                        // 0x00C8(0x0004)
	unsigned long                                      bStatic : 1;                                              // 0x00C8(0x0004) (Const)
	unsigned long                                      bHidden : 1;                                              // 0x00C8(0x0004) (Edit, Net)
	unsigned long                                      bNoDelete : 1;                                            // 0x00C8(0x0004) (Edit, Const)
	unsigned long                                      bDeleteMe : 1;                                            // 0x00C8(0x0004) (Const)
	unsigned long                                      bDisableTick : 1;                                         // 0x00C8(0x0004)
	unsigned long                                      bDisableTouch : 1;                                        // 0x00C8(0x0004)
	unsigned long                                      bDynamicLight : 1;                                        // 0x00C8(0x0004) (Edit)
	unsigned long                                      bTimerLoop : 1;                                           // 0x00C8(0x0004)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x00C8(0x0004) (Net)
	unsigned long                                      bHighDetail : 1;                                          // 0x00C8(0x0004) (Edit)
	unsigned long                                      bSuperHighDetail : 1;                                     // 0x00C8(0x0004) (Edit)
	unsigned long                                      bOnlyDrawIfAttached : 1;                                  // 0x00C8(0x0004) (Net)
	unsigned long                                      bStasis : 1;                                              // 0x00C8(0x0004) (Edit)
	unsigned long                                      bTrailerAllowRotation : 1;                                // 0x00C8(0x0004)
	unsigned long                                      bTrailerSameRotation : 1;                                 // 0x00C8(0x0004)
	unsigned long                                      bTrailerPrePivot : 1;                                     // 0x00C8(0x0004)
	unsigned long                                      bWorldGeometry : 1;                                       // 0x00C8(0x0004) (Edit)
	unsigned long                                      bAcceptsProjectors : 1;                                   // 0x00C8(0x0004) (Edit)
	unsigned long                                      bAcceptsShadowProjectors : 1;                             // 0x00C8(0x0004) (Edit, NoClear)
	unsigned long                                      bOrientOnSlope : 1;                                       // 0x00C8(0x0004)
	unsigned long                                      bOnlyAffectPawns : 1;                                     // 0x00C8(0x0004) (Const)
	unsigned long                                      bDisableSorting : 1;                                      // 0x00C8(0x0004) (Edit)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x00C8(0x0004) (Edit)
	unsigned long                                      bShowOctreeNodes : 1;                                     // 0x00C8(0x0004)
	unsigned long                                      bWasSNFiltered : 1;                                       // 0x00C8(0x0004)
	unsigned long                                      bNetTemporary : 1;                                        // 0x00C8(0x0004) (Const)
	unsigned long                                      bOnlyRelevantToOwner : 1;                                 // 0x00CC(0x0004)
	unsigned long                                      bNetDirty : 1;                                            // 0x00CC(0x0004) (Const, Transient)
	unsigned long                                      bAlwaysRelevant : 1;                                      // 0x00CC(0x0004)
	unsigned long                                      bReplicateInstigator : 1;                                 // 0x00CC(0x0004)
	unsigned long                                      bReplicateMovement : 1;                                   // 0x00CC(0x0004)
	unsigned long                                      bSkipActorPropertyReplication : 1;                        // 0x00CC(0x0004)
	unsigned long                                      bUpdateSimulatedPosition : 1;                             // 0x00CC(0x0004)
	unsigned long                                      bTearOff : 1;                                             // 0x00CC(0x0004) (Net)
	unsigned long                                      bOnlyDirtyReplication : 1;                                // 0x00CC(0x0004)
	unsigned long                                      bReplicateAnimations : 1;                                 // 0x00CC(0x0004) (Net)
	unsigned long                                      bNetInitialRotation : 1;                                  // 0x00CC(0x0004) (Const)
	unsigned long                                      bCompressedPosition : 1;                                  // 0x00CC(0x0004)
	unsigned long                                      bAlwaysZeroBoneOffset : 1;                                // 0x00CC(0x0004)
	unsigned long                                      bNavigationRelevant : 1;                                  // 0x00CC(0x0004) (Edit)
	unsigned long                                      bOverruleNavigationRelevant : 1;                          // 0x00CC(0x0004) (Edit)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x00D0(0x0001) (Net)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x00D1(0x0001) (Net)
	unsigned char                                      UnknownData04[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	int                                                NetTag;                                                   // 0x00D4(0x0004) (Const, Transient)
	float                                              NetUpdateTime;                                            // 0x00D8(0x0004) (Const)
	float                                              NetUpdateFrequency;                                       // 0x00DC(0x0004)
	float                                              NetPriority;                                              // 0x00E0(0x0004)
	class AClass_Object_Actor_Pawn*                    Instigator;                                               // 0x00E4(0x0004) (Net)
	struct FName                                       AttachmentBone;                                           // 0x00E8(0x0004) (Const, Net)
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level;                                                    // 0x00EC(0x0004) (Const)
	class UClass_Object_LevelBase_Level*               XLevel;                                                   // 0x00F0(0x0004) (Const, Transient)
	float                                              LifeSpan;                                                 // 0x00F4(0x0004) (Edit)
	struct FName                                       MovementObjectClass;                                      // 0x00F8(0x0004)
	class UClass_Object_MovementObject*                MovementObject;                                           // 0x00FC(0x0004) (Const)
	TArray<class UClass_Object*>                       OwnerGroups;                                              // 0x0100(0x000C) (Const, NeedCtorLink)
	int                                                LastTick;                                                 // 0x010C(0x0004) (Const, Transient)
	class UClass_Object_Field_Struct_State_Class*      exclusiveToGameInfo;                                      // 0x0110(0x0004) (Edit, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> gameInfoExclusions;                                       // 0x0114(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> gameInfoInclusions;                                       // 0x0120(0x000C) (Edit, NeedCtorLink, NoClear)
	int                                                maxDifficulty;                                            // 0x012C(0x0004) (Edit)
	int                                                minDifficulty;                                            // 0x0130(0x0004) (Edit)
	int                                                maxNumPlayers;                                            // 0x0134(0x0004) (Edit)
	int                                                minNumPlayers;                                            // 0x0138(0x0004) (Edit)
	struct FStruct_PointRegion                         Region;                                                   // 0x013C(0x000C) (Const)
	float                                              TimerRate;                                                // 0x0148(0x0004)
	class UClass_Object_Primitive_Mesh*                Mesh;                                                     // 0x014C(0x0004) (Edit, Const, Net)
	float                                              LastRenderTime;                                           // 0x0150(0x0004) (Transient)
	struct FName                                       Tag;                                                      // 0x0154(0x0004) (Edit)
	TArray<int>                                        Leaves;                                                   // 0x0158(0x000C) (Transient, NeedCtorLink)
	struct FName                                       Event;                                                    // 0x0164(0x0004) (Edit)
	float                                              TimerCounter;                                             // 0x0168(0x0004) (Const)
	class UClass_Object_Primitive_MeshInstance*        MeshInstance;                                             // 0x016C(0x0004) (Transient)
	float                                              LODBias;                                                  // 0x0170(0x0004) (Edit)
	struct FName                                       InitialState;                                             // 0x0174(0x0004) (Edit)
	struct FName                                       Group;                                                    // 0x0178(0x0004) (Edit)
	TArray<class AClass_Object_Actor*>                 Touching;                                                 // 0x017C(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        OctreeNodes;                                              // 0x0188(0x000C) (Const, Transient, NeedCtorLink)
	struct FStruct_Box                                 OctreeBox;                                                // 0x0194(0x001C) (Const, Transient)
	struct FStruct_Vector                              OctreeBoxCenter;                                          // 0x01B0(0x000C) (Const, Transient)
	struct FStruct_Vector                              OctreeBoxRadii;                                           // 0x01BC(0x000C) (Const, Transient)
	class AClass_Object_Actor*                         Deleted;                                                  // 0x01C8(0x0004) (Const)
	float                                              LatentFloat;                                              // 0x01CC(0x0004) (Const)
	TArray<unsigned char>                              LatentAnimChannelCount;                                   // 0x01D0(0x000C) (Const, NeedCtorLink)
	int                                                CollisionTag;                                             // 0x01DC(0x0004) (Const, Native)
	int                                                JoinedTag;                                                // 0x01E0(0x0004) (Const, Transient)
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume* PhysicsVolume;                                            // 0x01E4(0x0004) (Const)
	struct FStruct_Vector                              Location;                                                 // 0x01E8(0x000C) (Edit, Const, Net)
	struct FStruct_Rotator                             Rotation;                                                 // 0x01F4(0x000C) (Edit, Const, Net)
	struct FStruct_Vector                              Velocity;                                                 // 0x0200(0x000C) (Edit, Net)
	struct FStruct_Vector                              Acceleration;                                             // 0x020C(0x000C)
	struct FStruct_Vector                              CachedLocation;                                           // 0x0218(0x000C) (Const)
	struct FStruct_Rotator                             CachedRotation;                                           // 0x0224(0x000C) (Const)
	struct FStruct_Matrix                              CachedLocalToWorld;                                       // 0x0230(0x0040)
	struct FName                                       AttachTag;                                                // 0x0270(0x0004) (Edit)
	TArray<class AClass_Object_Actor*>                 Attached;                                                 // 0x0274(0x000C) (Const, NeedCtorLink)
	struct FStruct_Vector                              RelativeLocation;                                         // 0x0280(0x000C) (Const, Net)
	struct FStruct_Rotator                             RelativeRotation;                                         // 0x028C(0x000C) (Const, Net)
	unsigned long                                      bHardAttach : 1;                                          // 0x0298(0x0004) (Edit, Net)
	struct FStruct_Matrix                              HardRelMatrix;                                            // 0x029C(0x0040) (Const)
	TArray<struct FStruct_ProjectorRenderInfoPtr>      Projectors;                                               // 0x02DC(0x000C) (Const, Native)
	TArray<struct FStruct_StaticMeshProjectorRenderInfoPtr> StaticMeshProjectors;                                     // 0x02E8(0x000C) (Const, Native)
	class UClass_Object_Material*                      Texture;                                                  // 0x02F4(0x0004) (Edit, Net)
	class UClass_Object_Primitive_StaticMeshInstance*  StaticMeshInstance;                                       // 0x02F8(0x0004)
	class UClass_Object_Primitive_Model*               Brush;                                                    // 0x02FC(0x0004) (Edit, Const, ExportObject, EditConst)
	float                                              DrawScale;                                                // 0x0300(0x0004) (Edit, Const, Net)
	struct FStruct_Vector                              DrawScale3D;                                              // 0x0304(0x000C) (Edit, Const)
	struct FStruct_Vector                              PrePivot;                                                 // 0x0310(0x000C) (Edit, Net)
	TArray<class UClass_Object_Material*>              Skins;                                                    // 0x031C(0x000C) (Edit, NeedCtorLink)
	class UClass_Object_Material*                      RepSkin;                                                  // 0x0328(0x0004) (Net)
	unsigned char                                      AmbientGlow;                                              // 0x032C(0x0001) (Edit, Net)
	unsigned char                                      MaxLights;                                                // 0x032D(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x2];                                       // 0x032E(0x0002) MISSED OFFSET
	class UClass_Object_Primitive_ConvexVolume*        AntiPortal;                                               // 0x0330(0x0004) (Edit)
	float                                              CullDistance;                                             // 0x0334(0x0004) (Edit)
	float                                              ScaleGlow;                                                // 0x0338(0x0004) (Edit)
	TEnumAsByte<ERenderStyle>                          Style;                                                    // 0x033C(0x0001) (Edit, Net)
	unsigned char                                      UnknownData06[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	unsigned long                                      bUnlit : 1;                                               // 0x0340(0x0004) (Edit, Net)
	unsigned long                                      bShadowCast : 1;                                          // 0x0340(0x0004) (Edit)
	unsigned long                                      bStaticLighting : 1;                                      // 0x0340(0x0004) (Edit)
	unsigned long                                      bUseLightingFromBase : 1;                                 // 0x0340(0x0004) (Edit)
	unsigned long                                      bHurtEntry : 1;                                           // 0x0340(0x0004)
	unsigned long                                      bGameRelevant : 1;                                        // 0x0340(0x0004) (Edit)
	unsigned long                                      bCollideWhenPlacing : 1;                                  // 0x0340(0x0004) (Edit)
	unsigned long                                      bTravel : 1;                                              // 0x0340(0x0004)
	unsigned long                                      bMovable : 1;                                             // 0x0340(0x0004) (Edit)
	unsigned long                                      bDestroyInPainVolume : 1;                                 // 0x0340(0x0004)
	unsigned long                                      bCanBeDamaged : 1;                                        // 0x0340(0x0004) (Edit)
	unsigned long                                      bShouldBaseAtStartup : 1;                                 // 0x0340(0x0004) (Edit)
	unsigned long                                      bPendingDelete : 1;                                       // 0x0340(0x0004)
	unsigned long                                      bAnimByOwner : 1;                                         // 0x0340(0x0004)
	unsigned long                                      bOwnerNoSee : 1;                                          // 0x0340(0x0004) (Edit)
	unsigned long                                      bCanTeleport : 1;                                         // 0x0340(0x0004) (Edit)
	unsigned long                                      bClientAnim : 1;                                          // 0x0340(0x0004)
	unsigned long                                      bDisturbFluidSurface : 1;                                 // 0x0340(0x0004)
	unsigned long                                      bAlwaysTick : 1;                                          // 0x0340(0x0004) (Const)
	TEnumAsByte<ESoundOcclusion>                       SoundOcclusion;                                           // 0x0344(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	float                                              CollisionRadius;                                          // 0x0348(0x0004) (Edit, Const, Net)
	float                                              CollisionHeight;                                          // 0x034C(0x0004) (Edit, Const, Net)
	unsigned long                                      bCollideActors : 1;                                       // 0x0350(0x0004) (Edit, Const, Net)
	unsigned long                                      bCollideWorld : 1;                                        // 0x0350(0x0004) (Edit, Net)
	unsigned long                                      bBlockActors : 1;                                         // 0x0350(0x0004) (Edit, Net)
	unsigned long                                      bBlockPlayers : 1;                                        // 0x0350(0x0004) (Edit, Net)
	unsigned long                                      bProjTarget : 1;                                          // 0x0350(0x0004) (Edit, Net)
	unsigned long                                      bProjectile : 1;                                          // 0x0350(0x0004) (Edit)
	unsigned long                                      bSkipEncroachment : 1;                                    // 0x0350(0x0004) (Edit)
	unsigned long                                      bBlockZeroExtentTraces : 1;                               // 0x0350(0x0004) (Edit)
	unsigned long                                      bBlockNonZeroExtentTraces : 1;                            // 0x0350(0x0004) (Edit)
	unsigned long                                      bAutoAlignToTerrain : 1;                                  // 0x0350(0x0004) (Edit)
	unsigned long                                      bUseCylinderCollision : 1;                                // 0x0350(0x0004) (Edit)
	unsigned long                                      bBlockKarma : 1;                                          // 0x0350(0x0004) (Edit, Const)
	unsigned long                                      bBlockHavok : 1;                                          // 0x0350(0x0004) (Edit, Const)
	unsigned long                                      bEnableHavokBackstep : 1;                                 // 0x0350(0x0004) (Edit)
	unsigned long                                      bClientHavokPhysics : 1;                                  // 0x0350(0x0004) (Edit)
	unsigned long                                      bDisableHavokCollisionWhenAttached : 1;                   // 0x0350(0x0004) (Edit, Const)
	unsigned long                                      bNetNotify : 1;                                           // 0x0350(0x0004)
	unsigned long                                      bIgnoreOutOfWorld : 1;                                    // 0x0350(0x0004)
	unsigned long                                      bBounce : 1;                                              // 0x0350(0x0004) (Edit)
	unsigned long                                      bFixedRotationDir : 1;                                    // 0x0350(0x0004) (Edit, Net)
	unsigned long                                      bRotateToDesired : 1;                                     // 0x0350(0x0004) (Edit, Net)
	unsigned long                                      bInterpolating : 1;                                       // 0x0350(0x0004)
	unsigned long                                      bJustTeleported : 1;                                      // 0x0350(0x0004) (Const)
	float                                              Mass;                                                     // 0x0354(0x0004) (Edit)
	float                                              Buoyancy;                                                 // 0x0358(0x0004) (Edit)
	struct FStruct_Rotator                             RotationRate;                                             // 0x035C(0x000C) (Edit, Net)
	struct FStruct_Rotator                             DesiredRotation;                                          // 0x0368(0x000C) (Edit, Net)
	class AClass_Object_Actor*                         PendingTouch;                                             // 0x0374(0x0004)
	struct FStruct_Vector                              ColLocation;                                              // 0x0378(0x000C) (Const)
	float                                              GravityScale;                                             // 0x0384(0x0004) (Edit)
	class UClass_Object_HavokObject*                   HavokData;                                                // 0x0388(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_Field_Struct_State_Class*      havokDataClass;                                           // 0x038C(0x0004) (Edit)
	struct FStruct_Vector                              havokAngularVelocity;                                     // 0x0390(0x000C)
	struct FStruct_Vector                              havokGameTickForce;                                       // 0x039C(0x000C)
	struct FStruct_Vector                              havokGameTickForcePosition;                               // 0x03A8(0x000C)
	float                                              havokSkeletalRotationSpeed;                               // 0x03B4(0x0004) (Const)
	struct FStruct_AnimRep                             SimAnim;                                                  // 0x03B8(0x000C) (Net, Transient)
	TEnumAsByte<EForceType>                            ForceType;                                                // 0x03C4(0x0001) (Edit)
	unsigned char                                      UnknownData08[0x3];                                       // 0x03C5(0x0003) MISSED OFFSET
	float                                              ForceRadius;                                              // 0x03C8(0x0004) (Edit)
	float                                              ForceScale;                                               // 0x03CC(0x0004) (Edit)
	unsigned long                                      bNetInitial : 1;                                          // 0x03D0(0x0004) (Const)
	unsigned long                                      bNetOwner : 1;                                            // 0x03D0(0x0004) (Const, Net)
	unsigned long                                      bNetRelevant : 1;                                         // 0x03D0(0x0004) (Const)
	unsigned long                                      bDemoRecording : 1;                                       // 0x03D0(0x0004) (Const)
	unsigned long                                      bClientDemoRecording : 1;                                 // 0x03D0(0x0004) (Const)
	unsigned long                                      bRepClientDemo : 1;                                       // 0x03D0(0x0004) (Const)
	unsigned long                                      bClientDemoNetFunc : 1;                                   // 0x03D0(0x0004) (Const)
	unsigned long                                      bDemoOwner : 1;                                           // 0x03D0(0x0004) (Const)
	unsigned long                                      bNoRepMesh : 1;                                           // 0x03D0(0x0004)
	unsigned long                                      bHiddenEd : 1;                                            // 0x03D0(0x0004) (Const)
	unsigned long                                      bHiddenEdGroup : 1;                                       // 0x03D0(0x0004) (Const, Component)
	unsigned long                                      bDirectional : 1;                                         // 0x03D0(0x0004) (Edit)
	unsigned long                                      bSelected : 1;                                            // 0x03D0(0x0004) (Const)
	unsigned long                                      bEdShouldSnap : 1;                                        // 0x03D0(0x0004) (Edit)
	unsigned long                                      bEdSnap : 1;                                              // 0x03D0(0x0004) (Transient)
	unsigned long                                      bTempEditor : 1;                                          // 0x03D0(0x0004) (Const, Transient)
	unsigned long                                      bObsolete : 1;                                            // 0x03D0(0x0004)
	unsigned long                                      bPathColliding : 1;                                       // 0x03D0(0x0004) (Edit)
	unsigned long                                      bPathTemp : 1;                                            // 0x03D0(0x0004) (Transient)
	unsigned long                                      bScriptInitialized : 1;                                   // 0x03D0(0x0004)
	unsigned long                                      bLockLocation : 1;                                        // 0x03D0(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      MessageClass;                                             // 0x03D4(0x0004)
	unsigned long                                      bTriggerEffectEventsBeforeGameStarts : 1;                 // 0x03D8(0x0004) (Edit)
	unsigned long                                      bNeedLifetimeEffectEvents : 1;                            // 0x03D8(0x0004) (Edit)
	struct FName                                       Label;                                                    // 0x03DC(0x0004) (Edit, Net, NoClear)
	unsigned long                                      bReplicateLabel : 1;                                      // 0x03E0(0x0004)
	struct FString                                     TriggeredBy;                                              // 0x03E4(0x000C) (Edit, Const, NeedCtorLink, NoClear)
	unsigned long                                      bSendDestructionNotification : 1;                         // 0x03F0(0x0004) (Edit, NoClear)
	TArray<int>                                        LatentStackLocations;                                     // 0x03F4(0x000C) (Const, Transient, NeedCtorLink, NoExport)

	//char unknown0000[4];

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor");
		return ptr;
	}


	void Function_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
	bool Function_ShouldActorsBlockSplash();
	bool Function_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	struct FString Function_GetUrlOption(const struct FString& Option);
	void Function_UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSaveDefault);
	float Function_unifiedGetGravity();
	void Function_unifiedAddTorque(const struct FStruct_Vector& torque);
	void Function_unifiedAddForceAtPosition(const struct FStruct_Vector& Force, const struct FStruct_Vector& Position);
	void Function_unifiedAddForce(const struct FStruct_Vector& Force);
	void Function_unifiedAddImpulseAtPosition(const struct FStruct_Vector& Impulse, const struct FStruct_Vector& Position);
	void Function_unifiedAddImpulse(const struct FStruct_Vector& Impulse);
	void Function_unifiedAddVelocity(const struct FStruct_Vector& deltaVelocity);
	void Function_unifiedSetMass(float newMass);
	float Function_unifiedGetMass();
	void Function_unifiedSetAcceleration(const struct FStruct_Vector& newAcceleration);
	struct FStruct_Vector Function_unifiedGetAcceleration();
	void Function_unifiedSetVelocity(const struct FStruct_Vector& newVelocity);
	struct FStruct_Vector Function_unifiedGetVelocity();
	void Function_unifiedSetAngularVelocity(const struct FStruct_Rotator& newAngularVelocity);
	void Function_unifiedSetRotation(const struct FStruct_Rotator& NewRotation);
	void Function_unifiedSetPosition(const struct FStruct_Vector& newPosition);
	struct FStruct_Vector Function_unifiedGetPosition();
	struct FStruct_Vector Function_unifiedGetCOMPosition();
	struct FStruct_Vector Function_unifiedGetNaturalCOMPosition();
	struct FString Function_LocalizeMapText(const struct FString& SectionName, const struct FString& KeyName);
	bool Function_checkSocket(const struct FString& Name);
	bool Function_getSocket(const struct FString& Name, TEnumAsByte<ESocketCoordinates> coordinates, struct FStruct_Vector* Position, struct FStruct_Rotator* Rotation, struct FStruct_Vector* Scale);
	struct FName Function_GetClosestBone(const struct FStruct_Vector& Loc, const struct FStruct_Vector& ray, const struct FName& BiasBone, float BiasDistance, float* boneDist);
	void Function_AnimStopLooping(int Channel);
	void Function_OnShown();
	void Function_Show();
	void Function_OnHidden();
	void Function_Hide();
	void Function_OnOptimizedIn();
	void Function_OnOptimizedOut();
	void Function_OptimizeIn();
	void Function_OptimizeOut();
	void Function_clientDispatchMessage(class UClass_Object_Message* msg);
	void Function_dispatchMessage(class UClass_Object_Message* msg);
	void Function_registerClientMessage(class UClass_Object_Field_Struct_State_Class* MessageClass, const struct FString& triggeredByFilter);
	void Function_registerMessage(class UClass_Object_Field_Struct_State_Class* MessageClass, const struct FString& triggeredByFilter);
	void Function_onMessage(class UClass_Object_Message* msg);
	class UClass_Object_Material* Function_GetCurrentMaterial(int Index);
	void Function_PreTrigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_UnTriggerEffectEvent(const struct FName& EffectEvent, const struct FName& ReferenceTag);
	bool Function_TriggerEffectEvent(const struct FName& EffectEvent, class AClass_Object_Actor* Other, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& HitLocation, const struct FStruct_Rotator& HitNormal, bool PlayOnOther, bool QueryOnly, class UClass_Object_IEffectObserver* Observer, const struct FName& ReferenceTag);
	void Function_AddContextForNextEffectEvent(const struct FName& Context);
	void Function_OnGameStarted();
	void Function_RegisterNotifyGameStarted();
	bool Function_EffectIsRelevant(const struct FStruct_Vector& SpawnLocation, bool bForceDedicated);
	struct FStruct_Vector Function_GetCollisionExtent();
	bool Function_CanSplash();
	void Function_PlayTeleportEffect(bool bOut, bool bSound);
	bool Function_IsInPain();
	bool Function_IsInVolume(class AClass_Object_Actor_Brush_Volume* aVolume);
	void Function_UnTriggerEvent(const struct FName& EventName, class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_TriggerEvent(const struct FName& EventName, class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_Reset();
	void Function_StartInterpolation();
	bool Function_TouchingActor(class AClass_Object_Actor* A);
	bool Function_NearSpot(const struct FStruct_Vector& Spot);
	void Function_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	struct FString Function_GetDebugName();
	void Function_SetGRI(class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GRI);
	void Function_MatchStarting();
	struct FString STATIC_Function_GetLocalString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2);
	void Function_SetDefaultDisplayProperties();
	void Function_SetDisplayProperties(TEnumAsByte<ERenderStyle> NewStyle, class UClass_Object_Material* NewTexture, bool bLighting);
	class UClass_Object_Field_Struct_State_Class* Function_GetRadarInfoClass();
	void Function_ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text);
	struct FString Function_GetHumanReadableName();
	struct FString Function_GetItemName(const struct FString& FullName);
	void Function_BecomeViewTarget();
	void Function_TravelPostAccept();
	void Function_TravelPreAccept();
	float Function_getReceiveDamageRadius();
	class AClass_Object_Actor* Function_getHurtRadiusParent();
	void Function_processHurtRadiusVictim(class AClass_Object_Actor* victim, float DamageAmount, float DamageRadius, class UClass_Object_Field_Struct_State_Class* DamageType, float Momentum, const struct FStruct_Vector& HitLocation, class AClass_Object_Actor* directHitActor, const struct FStruct_Vector& directHitDirection);
	void Function_HurtRadius(float DamageAmount, float DamageRadius, class UClass_Object_Field_Struct_State_Class* DamageType, float Momentum, const struct FStruct_Vector& HitLocation, class AClass_Object_Actor* directHitActor, const struct FStruct_Vector& directHitDirection);
	void Function_UpdatePrecacheRenderData();
	void Function_PostLoadGame();
	void Function_PostNetBeginPlay();
	void Function_SetInitialState();
	void Function_PostBeginPlay();
	void Function_BroadcastLocalizedMessage(class UClass_Object_Field_Struct_State_Class* MessageClass, int Switch, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* RelatedPRI_1, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* RelatedPRI_2, class UClass_Object* OptionalObject);
	void Function_PreBeginPlay();
	void Function_PreScriptedTextureRendered(class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* Tex);
	void Function_RenderTexture(class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* Tex);
	void Function_RenderOverlays(class UClass_Object_Canvas* Canvas);
	struct FStruct_Color STATIC_Function_Multiply_ColorFloat(const struct FStruct_Color& A, float B);
	struct FStruct_Color STATIC_Function_Add_ColorColor(const struct FStruct_Color& A, const struct FStruct_Color& B);
	struct FStruct_Color STATIC_Function_Multiply_FloatColor(float A, const struct FStruct_Color& B);
	struct FStruct_Color STATIC_Function_Subtract_ColorColor(const struct FStruct_Color& A, const struct FStruct_Color& B);
	void Function_CollidingActors(class UClass_Object_Field_Struct_State_Class* BaseClass, float Radius, const struct FStruct_Vector& Loc, class AClass_Object_Actor** Actor);
	void Function_VisibleCollidingActors(class UClass_Object_Field_Struct_State_Class* BaseClass, float Radius, const struct FStruct_Vector& Loc, bool bIgnoreHidden, bool bUseBoxCheck, class AClass_Object_Actor* checkActor, bool bIgnoreStatic, class UClass_Object** Actor);
	void Function_VisibleActors(class UClass_Object_Field_Struct_State_Class* BaseClass, float Radius, const struct FStruct_Vector& Loc, class AClass_Object_Actor** Actor);
	void Function_RadiusActors(class UClass_Object_Field_Struct_State_Class* BaseClass, float Radius, const struct FStruct_Vector& Loc, class AClass_Object_Actor** Actor);
	void Function_TraceActors(class UClass_Object_Field_Struct_State_Class* BaseClass, const struct FStruct_Vector& End, const struct FStruct_Vector& Start, const struct FStruct_Vector& Extent, class AClass_Object_Actor** Actor, struct FStruct_Vector* HitLoc, struct FStruct_Vector* HitNorm);
	void Function_TouchingActors(class UClass_Object_Field_Struct_State_Class* BaseClass, class AClass_Object_Actor** Actor);
	void Function_BasedActors(class UClass_Object_Field_Struct_State_Class* BaseClass, class AClass_Object_Actor** Actor);
	void Function_ChildActors(class UClass_Object_Field_Struct_State_Class* BaseClass, class AClass_Object_Actor** Actor);
	void Function_DynamicActors(class UClass_Object_Field_Struct_State_Class* BaseClass, const struct FName& matchTag, class AClass_Object_Actor** Actor);
	void Function_AllActors(class UClass_Object_Field_Struct_State_Class* BaseClass, const struct FName& matchTag, class AClass_Object_Actor** Actor);
	bool Function_MoveCacheEntry(const struct FString& Guid, const struct FString& NewFilename);
	bool Function_GetCacheEntry(int Num, struct FString* Guid, struct FString* FileName);
	void Function_GetNextIntDesc(const struct FString& ClassName, int Num, struct FString* Entry, struct FString* Description);
	struct FString Function_GetNextInt(const struct FString& ClassName, int Num);
	struct FString Function_GetURLMap();
	void Function_GetNextSkin(const struct FString& Prefix, const struct FString& CurrentSkin, int Dir, struct FString* SkinName, struct FString* SkinDesc);
	struct FString STATIC_Function_GetMapName(const struct FString& NameEnding, const struct FString& MapName, int Dir);
	void Function_BeginPlay();
	void Function_PostTeleport(class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Teleporter* OutTeleporter);
	bool Function_PreTeleport(class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Teleporter* InTeleporter);
	struct FStruct_Vector Function_SuggestFallVelocity(const struct FStruct_Vector& Destination, const struct FStruct_Vector& Start, float MaxZ, float MaxXYSpeed);
	bool Function_PlayerCanSeeMe();
	void Function_MakeNoise(float Loudness);
	bool Function_ForceFeedbackSupported(bool Enable);
	void Function_StopFeedbackEffect(const struct FString& EffectName);
	void Function_PlayFeedbackEffect(const struct FString& EffectName);
	void Function_PlayStream(const struct FString& StreamPath, float Volume, float InnerRadius, float OuterRadius, float Pitch, int flags, float FadeInTime);
	void Function_PlayLoopedSound(class UClass_Object_Sound* Sound, float Volume, bool bNoOverride, float InnerRadius, float OuterRadius, float Pitch, int flags, bool Attenuate, float AISoundRadius, const struct FName& SoundCategory);
	void Function_ResumeSound(class UClass_Object_Sound* Sound);
	void Function_PauseSound(class UClass_Object_Sound* Sound);
	void Function_InterruptSound(class UClass_Object_Sound* Sound);
	float Function_GetSoundDuration(class UClass_Object_Sound* Sound);
	void Function_DemoPlaySound(class UClass_Object_Sound* Sound, float Volume, bool bNoOverride, float InnerRadius, float OuterRadius, float Pitch, int flags, float FadeInTime, bool Attenuate);
	void Function_PlayOwnedSound(class UClass_Object_Sound* Sound, float Volume, bool bNoOverride, float InnerRadius, float OuterRadius, float Pitch, int flags, float FadeInTime, bool Attenuate);
	int Function_PlaySound(class UClass_Object_Sound* Sound, float Volume, bool bNoOverride, float InnerRadius, float OuterRadius, float Pitch, int flags, float FadeInTime, bool Attenuate, float AISoundRadius, const struct FName& SoundCategory);
	void Function_SetTimer(float NewTimerRate, bool bLoop);
	void Function_TornOff();
	bool Function_Destroy();
	class AClass_Object_Actor* Function_Spawn(class UClass_Object_Field_Struct_State_Class* SpawnClass, class AClass_Object_Actor* SpawnOwner, const struct FName& SpawnTag, const struct FStruct_Vector& SpawnLocation, const struct FStruct_Rotator& SpawnRotation);
	bool Function_FastTrace(const struct FStruct_Vector& TraceEnd, const struct FStruct_Vector& TraceStart);
	class AClass_Object_Actor* Function_AITrace(const struct FStruct_Vector& TraceEnd, const struct FStruct_Vector& TraceStart, const struct FStruct_Vector& Extent);
	class AClass_Object_Actor* Function_Trace(const struct FStruct_Vector& TraceEnd, const struct FStruct_Vector& TraceStart, bool bTraceActors, const struct FStruct_Vector& Extent, struct FStruct_Vector* HitLocation, struct FStruct_Vector* HitNormal, class UClass_Object_Material** Material);
	void Function_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_TakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_KilledBy(class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_ProjectileTouch(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_UsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_EndedRotation();
	void Function_FinishedInterpolation();
	void Function_EncroachedBy(class AClass_Object_Actor* Other);
	bool Function_EncroachingOn(class AClass_Object_Actor* Other);
	class AClass_Object_Actor* Function_SpecialHandling(class AClass_Object_Actor_Pawn* Other);
	void Function_Detach(class AClass_Object_Actor* Other);
	void Function_Attach(class AClass_Object_Actor* Other);
	void Function_BaseChange();
	void Function_Bump(class AClass_Object_Actor* Other);
	void Function_UnTouch(class AClass_Object_Actor* Other);
	void Function_PostTouch(class AClass_Object_Actor* Other);
	void Function_Touch(class AClass_Object_Actor* Other);
	void Function_PhysicsVolumeChange(class AClass_Object_Actor_Brush_Volume_PhysicsVolume* NewVolume);
	void Function_ZoneChange(class AClass_Object_Actor_Info_ZoneInfo* NewZone);
	void Function_Landed(const struct FStruct_Vector& HitNormal);
	void Function_Falling();
	void Function_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* HitWall);
	void Function_Timer();
	void Function_EndEvent();
	void Function_BeginEvent();
	void Function_UnTrigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_PostNetReceive();
	void Function_Tick(float DeltaTime);
	void Function_LostChild(class AClass_Object_Actor* Other);
	void Function_GainedChild(class AClass_Object_Actor* Other);
	void Function_Destroyed();
	void Function_StopAllMusic(float FadeOutTime);
	void Function_StopMusic(int SongHandle, float FadeOutTime);
	int Function_PlayMusic(const struct FString& Song, float FadeInTime);
	void Function_UnClock(float* Time);
	void Function_Clock(float* Time);
	void Function_HavokReturnSkeletalActorToAnimationSystem();
	void Function_HavokCollisionGroupChange(int layer, int systemGroup, int subpartID, int subpartIgnoreID, const struct FName& BoneName);
	void Function_HavokSlowSetCollisionEnabled(class AClass_Object_Actor* Other, bool Enabled, const struct FName& BoneNameA, const struct FName& BoneNameB);
	bool Function_HavokUpdateState(struct FStruct_HavokRigidBodyState* NewState);
	void Function_HavokGetState(const struct FName& BoneName, struct FStruct_HavokRigidBodyState* State);
	void Function_HavokSetGameTickForce(const struct FStruct_Vector& Force, const struct FStruct_Vector& Position);
	struct FStruct_Vector Function_HavokGetCenterOfMass();
	void Function_HavokSetRotation(const struct FStruct_Quat& NewRotation);
	void Function_HavokImpartLinearForceAll(const struct FStruct_Vector& Force);
	void Function_HavokSetCOM(const struct FStruct_Vector& Offset, const struct FName& BoneName);
	void Function_HavokSetPosition(const struct FStruct_Vector& Linear, const struct FName& BoneName);
	struct FStruct_Vector Function_HavokGetPosition(const struct FName& BoneName);
	void Function_HavokSetBlocking(bool blockHavok);
	void Function_HavokActivate(bool Activate);
	void Function_HavokImpartCOMImpulse(const struct FStruct_Vector& Impulse, const struct FName& BoneName);
	struct FName Function_HavokGetLastTracedBone();
	void Function_HavokSetAngularDamping(float Damping, const struct FName& BoneName);
	void Function_HavokSetLinearDamping(float Damping, const struct FName& BoneName);
	void Function_HavokSetLinearVelocityAll(const struct FStruct_Vector& Linear);
	void Function_HavokSetAngularVelocity(const struct FStruct_Vector& Angular, const struct FName& BoneName);
	void Function_HavokSetLinearVelocity(const struct FStruct_Vector& Linear, const struct FName& BoneName);
	struct FStruct_Vector Function_HavokGetAngularVelocity(const struct FName& BoneName);
	struct FStruct_Vector Function_HavokGetLinearVelocity(const struct FName& BoneName);
	void Function_HavokImpartForce(const struct FStruct_Vector& Force, const struct FStruct_Vector& Position, const struct FName& BoneName);
	void Function_HavokImpartImpulse(const struct FStruct_Vector& Impulse, const struct FStruct_Vector& Position, const struct FName& BoneName);
	bool Function_HavokIsActive();
	void Function_OnlyAffectPawns(bool B);
	void Function_SetPhysics(TEnumAsByte<EPhysics> newPhysics);
	void Function_FinishInterpolation();
	void Function_DebugUnclock();
	void Function_DebugClock();
	void Function_DrawDebugLine(const struct FStruct_Vector& LineStart, const struct FStruct_Vector& LineEnd, unsigned char R, unsigned char G, unsigned char B);
	struct FStruct_Vector_Plane Function_GetRenderBoundingSphere();
	bool Function_AnimIsInGroup(int Channel, const struct FName& GroupName);
	void Function_GetAnimParams(int Channel, struct FName* OutSeqName, float* OutAnimFrame, float* OutAnimRate);
	void Function_SetBoneRotation(const struct FName& BoneName, const struct FStruct_Rotator& BoneTurn, int Space, float Alpha);
	void Function_SetBoneLocation(const struct FName& BoneName, const struct FStruct_Vector& BoneTrans, float Alpha);
	void Function_SetBoneDirection(const struct FName& BoneName, const struct FStruct_Rotator& BoneTurn, const struct FStruct_Vector& BoneTrans, float Alpha, int Space);
	void Function_SetBoneScale(int Slot, float BoneScale, const struct FName& BoneName);
	void Function_LockRootMotion(int Lock);
	void Function_UpdateAttachmentLocations();
	bool Function_DetachFromBone(class AClass_Object_Actor* Attachment);
	bool Function_AttachToBone(class AClass_Object_Actor* Attachment, const struct FName& BoneName);
	struct FStruct_Vector Function_GetMeshOrigin();
	struct FStruct_Rotator Function_GetRootRotationDelta();
	struct FStruct_Vector Function_GetRootLocationDelta();
	struct FStruct_Rotator Function_GetRootRotation();
	struct FStruct_Vector Function_GetRootLocation();
	struct FStruct_Rotator Function_GetBoneRotation(const struct FName& BoneName, int Space);
	struct FStruct_Coords Function_GetBoneCoords(const struct FName& BoneName, bool bGetSocketCoords);
	void Function_AnimBlendToAlpha(int Stage, float TargetAlpha, float TimeInterval);
	void Function_AnimBlendParams(int Stage, float BlendAlpha, float InTime, float OutTime, const struct FName& BoneName, bool bGlobalPose);
	void Function_BoneRefresh();
	void Function_LinkMesh(class UClass_Object_Primitive_Mesh* NewMesh, bool bKeepAnim);
	void Function_LinkSkelAnim(class UClass_Object_Primitive_MeshAnimation* Anim, class UClass_Object_Primitive_Mesh* NewMesh);
	int Function_GetNotifyChannel();
	void Function_EnableChannelNotify(int Channel, int Switch);
	void Function_AnimEnd(int Channel);
	void Function_LIPSincAnimEnd();
	float Function_GetLIPSincAnimDuration(const struct FName& LIPSincAnimName);
	struct FString Function_CurrentLIPSincAnim();
	bool Function_IsPlayingLIPSincAnim();
	bool Function_HasLIPSincAnim(const struct FName& LIPSincAnimName);
	void Function_StopLIPSincAnim();
	void Function_PlayLIPSincAnim(const struct FName& LIPSincAnimName, float Volume, float Radius, float Pitch, bool bPositional);
	float Function_GetAnimLength(const struct FName& Sequence, float Rate, float TweenTime, int Channel);
	void Function_PlayScriptedAnim(const struct FName& AnimToPlay);
	bool Function_IsTweening(int Channel);
	void Function_SetAnimFrame(float Time, int Channel, int UnitFlag);
	void Function_FreezeAnimAt(float Time, int Channel);
	void Function_StopAnimating(bool ClearAllButBase);
	bool Function_HasAnim(const struct FName& Sequence);
	void Function_FinishAnim(int Channel);
	bool Function_IsAnimating(int Channel);
	void Function_TweenAnim(const struct FName& Sequence, float Time, int Channel);
	void Function_LoopAnim(const struct FName& Sequence, float Rate, float TweenTime, int Channel);
	void Function_PlayAnimAdditive(const struct FName& Sequence, float Rate, float TweenTime, int Channel, const struct FName& RefSequence);
	void Function_PlayAnim(const struct FName& Sequence, float Rate, float TweenTime, int Channel);
	struct FString Function_GetMeshName();
	void Function_makeDormant(bool onOff);
	void Function_SetOwner(class AClass_Object_Actor* NewOwner);
	void Function_SetBase(class AClass_Object_Actor* NewBase, const struct FStruct_Vector& NewFloor);
	void Function_AutonomousPhysics(float DeltaSeconds);
	bool Function_MoveSmooth(const struct FStruct_Vector& Delta);
	bool Function_SetRelativeLocation(const struct FStruct_Vector& NewLocation);
	bool Function_SetRelativeRotation(const struct FStruct_Rotator& NewRotation);
	bool Function_TestMove(const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
	bool Function_SetRotation(const struct FStruct_Rotator& NewRotation);
	bool Function_SetLocation(const struct FStruct_Vector& NewLocation);
	bool Function_Move(const struct FStruct_Vector& Delta);
	class UClass_Object_Material* Function_ShallowCopyMaterial(class UClass_Object_Material* Src, class AClass_Object_Actor* Owner);
	class UClass_Object_Material* Function_GetMaterial(int Index);
	void Function_SetDrawType(TEnumAsByte<EDrawType> NewDrawType);
	void Function_SetStaticMesh(class UClass_Object_Primitive_StaticMesh* NewStaticMesh);
	void Function_SetDrawScale3D(const struct FStruct_Vector& NewScale3D);
	void Function_SetDrawScale(float NewScale);
	bool Function_SetCollisionSize(float NewRadius, float NewHeight);
	void Function_SetCollision(bool NewColActors, bool NewBlockActors, bool NewBlockPlayers);
	void Function_Construct_ActorNameVectorRotator(class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
	void Function_Construct_Void_Construct_Void();
	class UClass_Object* STATIC_Function_Allocate_Allocate(class UClass_Object* Context, class UClass_Object* Outer, const struct FString& n, int flags, class UClass_Object* Template);
	void Function_staticActorLabel(class UClass_Object_Field_Struct_State_Class* actorClass, const struct FName& Label, class AClass_Object_Actor** foundActor);
	void Function_ClassConstruct_ClassConstruct();
	class AClass_Object_Actor* Function_findStaticByLabel(class UClass_Object_Field_Struct_State_Class* actorClass, const struct FName& Label, bool checkDead);
	void Function_actorLabel(class UClass_Object_Field_Struct_State_Class* actorClass, const struct FName& Label, class AClass_Object_Actor** foundActor);
	class AClass_Object_Actor* Function_findByLabel(class UClass_Object_Field_Struct_State_Class* actorClass, const struct FName& Label, bool checkDead);
	void Function_nearbyControlledPawns(const struct FStruct_Vector& CenterLocation, float Radius, const struct FName& matchTag, class AClass_Object_Actor_Pawn** Pawn);
	bool Function_IsOverlapping(class AClass_Object_Actor* Other);
	class UClass_Object_Material* Function_GetOverlayMaterial(int Index);
	void Function_Error(const struct FString& S);
	struct FString Function_ConsoleCommand(const struct FString& Command);
	void Function_AddDebugMessage(const struct FString& NewMessage, const struct FStruct_Color& NewMessageColor);
};


// Class Object.Actor.HUD
// 0x0234 (0x0634 - 0x0400)
class AClass_Object_Actor_HUD : public AClass_Object_Actor
{
public:
	class UClass_Object_Font*                          SmallFont;                                                // 0x0400(0x0004)
	class UClass_Object_Font*                          MedFont;                                                  // 0x0404(0x0004)
	class UClass_Object_Font*                          BigFont;                                                  // 0x0408(0x0004)
	class UClass_Object_Font*                          LargeFont;                                                // 0x040C(0x0004)
	struct FString                                     HUDConfigWindowType;                                      // 0x0410(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_HUD*                     nextHUD;                                                  // 0x041C(0x0004)
	class AClass_Object_Actor_Controller_PlayerController* PlayerOwner;                                              // 0x0420(0x0004)
	struct FString                                     ProgressFontName;                                         // 0x0424(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_Font*                          ProgressFontFont;                                         // 0x0430(0x0004)
	float                                              ProgressFadeTime;                                         // 0x0434(0x0004)
	struct FStruct_Color                               MOTDColor;                                                // 0x0438(0x0004)
	class AClass_Object_Actor_Info_ScoreBoard*         ScoreBoard;                                               // 0x043C(0x0004)
	unsigned long                                      bHideHUD : 1;                                             // 0x0440(0x0004)
	unsigned long                                      bShowScores : 1;                                          // 0x0440(0x0004)
	unsigned long                                      bShowDebugInfo : 1;                                       // 0x0440(0x0004)
	unsigned long                                      bHideCenterMessages : 1;                                  // 0x0440(0x0004)
	unsigned long                                      bBadConnectionAlert : 1;                                  // 0x0440(0x0004)
	unsigned long                                      bMessageBeep : 1;                                         // 0x0440(0x0004) (Config)
	float                                              HudCanvasScale;                                           // 0x0444(0x0004) (Config, GlobalConfig)
	struct FString                                     LoadingMessage;                                           // 0x0448(0x000C) (Localized, NeedCtorLink)
	struct FString                                     SavingMessage;                                            // 0x0454(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConnectingMessage;                                        // 0x0460(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PausedMessage;                                            // 0x046C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PrecachingMessage;                                        // 0x0478(0x000C) (Localized, NeedCtorLink)
	struct FStruct_Color                               ConsoleColor;                                             // 0x0484(0x0004)
	int                                                ConsoleMessageCount;                                      // 0x0488(0x0004) (Config, GlobalConfig)
	int                                                ConsoleFontSize;                                          // 0x048C(0x0004) (Config, GlobalConfig)
	int                                                MessageFontOffset;                                        // 0x0490(0x0004) (Config, GlobalConfig)
	struct FStruct_ConsoleMessage                      TextMessages[0x8];                                        // 0x0494(0x0018) (NeedCtorLink)
	float                                              ConsoleMessagePosX;                                       // 0x0554(0x0004) (Edit)
	float                                              ConsoleMessagePosY;                                       // 0x0558(0x0004) (Edit)
	struct FString                                     FontArrayNames[0x9];                                      // 0x055C(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_Font*                          FontArrayFonts[0x9];                                      // 0x05C8(0x0004)
	int                                                FontScreenWidthMedium[0x9];                               // 0x05EC(0x0004)
	int                                                FontScreenWidthSmall[0x9];                                // 0x0610(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HUD");
		return ptr;
	}


	class UClass_Object_Font* Function_LoadProgressFont();
	class UClass_Object_Font* STATIC_Function_LargerFontThan(class UClass_Object_Font* aFont);
	class UClass_Object_Font* STATIC_Function_GetMediumFontFor(class UClass_Object_Canvas* Canvas);
	class UClass_Object_Font* STATIC_Function_GetConsoleFont(class UClass_Object_Canvas* C);
	class UClass_Object_Font* Function_LoadFont(int i);
	class UClass_Object_Font* STATIC_Function_LoadFontStatic(int i);
	void Function_UseHugeFont(class UClass_Object_Canvas* Canvas);
	void Function_UseLargeFont(class UClass_Object_Canvas* Canvas);
	void Function_UseMediumFont(class UClass_Object_Canvas* Canvas);
	void Function_UseSmallFont(class UClass_Object_Canvas* Canvas);
	void Function_AddTextMessage(const struct FString& M, class UClass_Object_Field_Struct_State_Class* MessageClass, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_DisplayMessages(class UClass_Object_Canvas* C);
	bool Function_ProcessKeyEvent(int Key, int Action, float Delta);
	void Function_PlayReceivedMessage(const struct FString& S, const struct FString& PName, class AClass_Object_Actor_Info_ZoneInfo* PZone);
	void Function_LocalizedMessage(class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& CriticalString, const struct FString& OptionalString);
	void Function_DisplayPortrait(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_Message(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType);
	void Function_DisplayBadConnectionAlert();
	bool Function_DrawLevelAction(class UClass_Object_Canvas* C);
	void Function_DisplayProgressMessage(class UClass_Object_Canvas* C);
	void Function_PrintActionMessage(class UClass_Object_Canvas* C, const struct FString& BigMessage);
	void Function_DrawHUD(class UClass_Object_Canvas* Canvas);
	void Function_DrawRoute();
	void Function_PostRender(class UClass_Object_Canvas* Canvas);
	void Function_CopyMessage(const struct FStruct_HUDLocalizedMessage& M2, struct FStruct_HUDLocalizedMessage* M1);
	void Function_ClearMessage(struct FStruct_HUDLocalizedMessage* M);
	void Function_PlayStartupMessage(unsigned char Stage);
	void Function_ConnectFailure(const struct FString& FailCode, const struct FString& URL);
	void Function_CheckCountdown(class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GRI);
	void Function_WorldSpaceOverlays();
	void Function_ShowDebug();
	void Function_ShowScores();
	void Function_Destroyed_Destroyed();
	void Function_SpawnScoreBoard(class UClass_Object_Field_Struct_State_Class* ScoringType);
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_Draw3DCone(const struct FStruct_Vector& Origin, const struct FStruct_Vector& direction, float Length, float HalfAngle, const struct FStruct_Color& Color, int NumSides);
	void Function_Draw3DCylinder(const struct FStruct_Vector& Base, const struct FStruct_Vector& X, const struct FStruct_Vector& Y, const struct FStruct_Vector& Z, float Radius, float HalfHeight, const struct FStruct_Color& Color, int NumSides);
	void Function_Draw3DCircle(const struct FStruct_Vector& Origin, const struct FStruct_Vector& PlaneXAxis, const struct FStruct_Vector& PlaneYAxis, float Radius, const struct FStruct_Color& Color, int NumSides);
	void Function_Draw3DLine(const struct FStruct_Vector& Start, const struct FStruct_Vector& End, const struct FStruct_Color& LineColor);
};


// Class Object.Actor.HUD.TribesHUDBase
// 0x0024 (0x0658 - 0x0634)
class AClass_Object_Actor_HUD_TribesHUDBase : public AClass_Object_Actor_HUD
{
public:
	unsigned long                                      bAllowCommandHUDSwitching : 1;                            // 0x0634(0x0004)
	unsigned long                                      bShowCursor : 1;                                          // 0x0634(0x0004)
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* Controller;                                               // 0x0638(0x0004)
	class UClass_Object_RefCount_ClientSideCharacter*  clientSideChar;                                           // 0x063C(0x0004)
	struct FString                                     quickKeyText;                                             // 0x0640(0x000C) (Localized, NeedCtorLink)
	TArray<struct FStruct_TagBindingMap>               TagBindings;                                              // 0x064C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HUD.TribesHUDBase");
		return ptr;
	}


	void Function_UpdateHUDGameData();
	void Function_UpdateHUDSensorData();
	void Function_AddHUDMarker(class AClass_Object_Actor* MarkedActor, int State, class UClass_Object_Field_Struct_State_Class* radarInfoClass);
	void Function_UpdateHUDRadarData();
	void Function_UpdateHUDPromptData();
	void Function_UpdateHUDObjectiveData();
	void Function_UpdateObjectiveList(class AClass_Object_Actor_Info_ObjectivesList* List);
	void Function_UpdateHUDTargetData();
	void Function_UpdateHUDEquipmentData();
	struct FString Function_GetHotkey(const struct FString& Binding);
	void Function_ClearHUDEquipmentData();
	void Function_UpdateHUDHealthData();
	void Function_UpdateHUDData();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_GetCharacter();
	bool Function_NeedsKeyInput();
	void Function_cleanup();
	bool Function_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta);
	bool Function_KeyType(TEnumAsByte<EInputKey> Key, const struct FString& Unicode);
	void Function_HUDHidden();
	void Function_HUDShown();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	struct FString Function_ReplacePromptKeyBinds(const struct FString& promptText);
};


// Class Object.SpeechManager
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_SpeechManager : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SpeechManager");
		return ptr;
	}


	void Function_PrecacheVO(const struct FString& SpeechTag);
	void Function_PrecacheAIVoiceSet(const struct FString& VoiceSetPackageName);
	void Function_EnableChannel(const struct FString& channelName);
	void Function_DisableChannel(const struct FString& channelName);
	float Function_CancelSpeech(class AClass_Object_Actor_Pawn* speaker);
	float Function_PlayMovementSpeech(class AClass_Object_Actor_Pawn* speaker, const struct FName& Event);
	float Function_PlayAnnouncerSpeech(const struct FName& Event, class AClass_Object_Actor* Instigator, class AClass_Object_Actor* Other, const struct FString& VoiceSetPackageName);
	float Function_PlayScriptedSpeech(class AClass_Object_Actor_Pawn* speaker, const struct FName& Event, bool bPositional);
	float Function_PlayQuickChatSpeech(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* speaker, const struct FString& VoiceSetPackageName, const struct FName& Event, class AClass_Object_Actor_Pawn* cSpeaker);
	float Function_PlayDynamicSpeech(class AClass_Object_Actor_Pawn* speaker, const struct FName& Event, class AClass_Object_Actor* Instigator, class AClass_Object_Actor* Other, const struct FString& extraKey);
};


// Class Object.SpeechManager.ConcreteSpeechManager
// 0x0068 (0x0090 - 0x0028)
class UClass_Object_SpeechManager_ConcreteSpeechManager : public UClass_Object_SpeechManager
{
public:
	float                                              SpeechPitch;                                              // 0x0028(0x0004) (Edit, Config)
	float                                              SpeechInnerRadius;                                        // 0x002C(0x0004) (Edit, Config)
	float                                              SpeechOuterRadius;                                        // 0x0030(0x0004) (Edit, Config)
	struct FString                                     AnnouncerType;                                            // 0x0034(0x000C) (Edit, Config, NeedCtorLink)
	float                                              VolumePriorityDisabledLagTime;                            // 0x0040(0x0004) (Edit, Config)
	float                                              SecondsPerWord;                                           // 0x0044(0x0004) (Edit, Config)
	class UClass_Object_SpeechCategoryManager*         categoryManager;                                          // 0x0048(0x0004) (Transient)
	TArray<class UClass_Object_SpeechChannel*>         channels;                                                 // 0x004C(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bIgnoreCategoryFrequency : 1;                             // 0x0058(0x0004) (Transient)
	TArray<struct FString>                             AIVoiceSetPrecache;                                       // 0x005C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             VOPrecache;                                               // 0x0068(0x000C) (Transient, NeedCtorLink)
	int                                                level_padding;                                            // 0x0074(0x0004) (Const, Transient, NoExport)
	int                                                categoryMap_padding[0x5];                                 // 0x0078(0x0004) (Const, Transient, NoExport)
	float                                              VolumePriorityDisableTime_padding;                        // 0x008C(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SpeechManager.ConcreteSpeechManager");
		return ptr;
	}


	void Function_EnableChannel_EnableChannel(const struct FString& channelName);
	void Function_DisableChannel_DisableChannel(const struct FString& channelName);
	void Function_ToggleCategoryFrequency();
	void Function_ToggleChannel(const struct FString& channelName);
	void Function_ToggleChannelLogging(const struct FString& channelName);
	int Function_GetChannelID(const struct FString& channelName);
	void Function_PrecacheVO_PrecacheVO(const struct FString& SpeechTag);
	void Function_PrecacheAIVoiceSet_PrecacheAIVoiceSet(const struct FString& VoiceSetPackageName);
};


// Class Object.SpeechChannel
// 0x0028 (0x0050 - 0x0028)
class UClass_Object_SpeechChannel : public UClass_Object
{
public:
	int                                                Id;                                                       // 0x0028(0x0004)
	int                                                maxSounds;                                                // 0x002C(0x0004) (Config)
	int                                                Priority;                                                 // 0x0030(0x0004) (Config)
	unsigned long                                      bStreamed : 1;                                            // 0x0034(0x0004) (Config)
	unsigned long                                      bLifo : 1;                                                // 0x0034(0x0004) (Config)
	TArray<class UClass_Object_SpeakerRecord*>         speechList;                                               // 0x0038(0x000C) (NeedCtorLink)
	class UClass_Object_SpeechManager_ConcreteSpeechManager* SpeechManager;                                            // 0x0044(0x0004)
	float                                              SpeechVolume;                                             // 0x0048(0x0004)
	unsigned long                                      bDebugLogged : 1;                                         // 0x004C(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SpeechChannel");
		return ptr;
	}

};


// Class Object.SpeakerRecord
// 0x0038 (0x0060 - 0x0028)
class UClass_Object_SpeakerRecord : public UClass_Object
{
public:
	struct FStruct_SpeakerRef                          speaker;                                                  // 0x0028(0x000C)
	class UClass_Object_SpeechCategory*                category;                                                 // 0x0034(0x0004)
	class UClass_Object_Sound*                         speechSound;                                              // 0x0038(0x0004)
	struct FString                                     speechName;                                               // 0x003C(0x000C) (NeedCtorLink)
	int                                                channelID;                                                // 0x0048(0x0004)
	int                                                soundID;                                                  // 0x004C(0x0004)
	int                                                Priority;                                                 // 0x0050(0x0004)
	int                                                flags;                                                    // 0x0054(0x0004)
	float                                              duration;                                                 // 0x0058(0x0004)
	float                                              currentDuration;                                          // 0x005C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SpeakerRecord");
		return ptr;
	}

};


// Class Object.SpeechCategoryManager
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_SpeechCategoryManager : public UClass_Object
{
public:
	TArray<struct FString>                             categoryNames;                                            // 0x0028(0x000C) (Config, NeedCtorLink)
	TArray<class UClass_Object_SpeechCategory*>        categories;                                               // 0x0034(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SpeechCategoryManager");
		return ptr;
	}


	void Function_LoadCategories();
};


// Class Object.SpeechCategory
// 0x003C (0x0064 - 0x0028)
class UClass_Object_SpeechCategory : public UClass_Object
{
public:
	struct FName                                       EventName;                                                // 0x0028(0x0004) (Config)
	float                                              Priority;                                                 // 0x002C(0x0004) (Config)
	float                                              Frequency;                                                // 0x0030(0x0004) (Config)
	TEnumAsByte<EChannelID>                            channelID;                                                // 0x0034(0x0001) (Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	unsigned long                                      exclusive : 1;                                            // 0x0038(0x0004) (Config)
	float                                              lingerDuration;                                           // 0x003C(0x0004) (Config)
	unsigned long                                      bHasSquadCondition : 1;                                   // 0x0040(0x0004) (Config)
	TArray<struct FStruct_SpeechPoolMap>               poolMap;                                                  // 0x0044(0x000C) (Config, NeedCtorLink)
	int                                                speechPoolMapping_SizePadding[0x5];                       // 0x0050(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SpeechCategory");
		return ptr;
	}

};


// Class Object.TribesGUIConfig
// 0x00A0 (0x00C8 - 0x0028)
class UClass_Object_TribesGUIConfig : public UClass_Object
{
public:
	struct FString                                     ExitMenuClass;                                            // 0x0028(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     EntryMenuClass;                                           // 0x0034(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bShownEntryMenu : 1;                                      // 0x0040(0x0004)
	class UClass_Object_LevelSummary*                  CurrentLevelSummary;                                      // 0x0044(0x0004)
	struct FString                                     CurrentURL;                                               // 0x0048(0x000C) (NeedCtorLink)
	struct FString                                     openingMusic;                                             // 0x0054(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     CurrentMission;                                           // 0x0060(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     LastCutscene;                                             // 0x006C(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	class UClass_Object_CampaignInfo*                  CurrentCampaign;                                          // 0x0078(0x0004)
	unsigned long                                      bTravelMission : 1;                                       // 0x007C(0x0004)
	struct FString                                     CurrentGameInfo;                                          // 0x0080(0x000C) (NeedCtorLink)
	unsigned long                                      bMissionFailed : 1;                                       // 0x008C(0x0004)
	TArray<struct FString>                             ScreenResolutionChoices;                                  // 0x0090(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	TEnumAsByte<EeTribesGameState>                     TribesGameState;                                          // 0x009C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	struct FString                                     MPHostURL;                                                // 0x00A0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bDedicated : 1;                                           // 0x00AC(0x0004) (Edit)
	struct FString                                     advancedGameType;                                         // 0x00B0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     advancedMap;                                              // 0x00BC(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesGUIConfig");
		return ptr;
	}

};


// Class Object.Interactions
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_Interactions : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions");
		return ptr;
	}

};


// Class Object.Interactions.Interaction
// 0x000C (0x0034 - 0x0028)
class UClass_Object_Interactions_Interaction : public UClass_Object_Interactions
{
public:
	unsigned long                                      bActive : 1;                                              // 0x0028(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x0028(0x0004)
	unsigned long                                      bRequiresTick : 1;                                        // 0x0028(0x0004)
	unsigned long                                      bNativeEvents : 1;                                        // 0x0028(0x0004)
	class UClass_Object_Player*                        ViewportOwner;                                            // 0x002C(0x0004)
	class UClass_Object_Interactions_InteractionMaster* Master;                                                   // 0x0030(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction");
		return ptr;
	}


	void Function_Tick(float DeltaTime);
	void Function_SetFocus();
	void Function_PostRender(class UClass_Object_Canvas* Canvas);
	void Function_PreRender(class UClass_Object_Canvas* Canvas);
	bool Function_KeyEvent(float Delta, TEnumAsByte<EInputKey>* Key, TEnumAsByte<EInputAction>* Action);
	bool Function_KeyType(const struct FString& Unicode, TEnumAsByte<EInputKey>* Key);
	void Function_Message(const struct FString& msg, float MsgLife);
	void Function_Initialized();
	struct FStruct_Vector Function_ScreenToWorld(const struct FStruct_Vector& Location, const struct FStruct_Vector& CameraLocation, const struct FStruct_Rotator& CameraRotation);
	struct FStruct_Vector Function_WorldToScreen(const struct FStruct_Vector& Location, const struct FStruct_Vector& CameraLocation, const struct FStruct_Rotator& CameraRotation);
	void Function_PostBeginPlay();
	bool Function_ConsoleCommand(const struct FString& S);
	void Function_Initialize();
};


// Class Object.Interactions.Interaction.BaseGUIController
// 0x0020 (0x0054 - 0x0034)
class UClass_Object_Interactions_Interaction_BaseGUIController : public UClass_Object_Interactions_Interaction
{
public:
	class UClass_Object_Material*                      DefaultPens[0x3];                                         // 0x0034(0x0004)
	unsigned long                                      bIsConsole : 1;                                           // 0x0040(0x0004)
	unsigned long                                      bHackDoNotRenderGUIPages : 1;                             // 0x0040(0x0004)
	struct FScriptDelegate                             __OnAdminReply__Delegate;                                 // 0x0044(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPostPrecache__Delegate;                               // 0x004C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.BaseGUIController");
		return ptr;
	}


	bool Function_IsPageActive(const struct FString& menuClass);
	bool Function_OnNetworkBrowse(const struct FString& URL, const struct FString& ProfileOption, bool bSelectProfile);
	void Function_OnProgress(const struct FString& Str1, const struct FString& Str2);
	void Function_OnMojoFinished();
	void Function_onGameplayMessage(class UClass_Object_Message* msg);
	void Function_InitializeController();
	void Function_SetControllerStatus(bool On);
	void Function_RemoveMenu(const struct FString& MenuName);
	void Function_CloseAll();
	bool Function_CloseMenu();
	bool Function_ReplaceMenu(const struct FString& NewMenuName, const struct FString& MenuNameOverride, const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_AutoLoadMenuClass(class UClass_Object_Field_Struct_State_Class* menuClass);
	void Function_AutoLoadMenus();
	bool Function_OpenMenu(const struct FString& NewMenuName, const struct FString& MenuNameOverride, const struct FString& Param1, const struct FString& Param2, int param3);
	bool Function_ShouldSuppressLevelRender();
	void Function_OnPostPrecache();
	void Function_PostPrecache();
	void Function_PostLevelChange(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* newLevel, bool bSaveGame);
	void Function_PreLevelChange(const struct FString& DestURL, class UClass_Object_LevelSummary* NewSummary);
	void Function_OnAdminReply(const struct FString& Reply);
};


// Class Object.Interactions.Interaction.BaseGUIController.GUIController
// 0x0270 (0x02C4 - 0x0054)
class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController : public UClass_Object_Interactions_Interaction_BaseGUIController
{
public:
	unsigned long                                      bDontDisplayHelpText : 1;                                 // 0x0054(0x0004) (Edit, Config, NoClear)
	TArray<struct FStruct_sMoveGroup>                  MoveGroups;                                               // 0x0058(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	int                                                GridSize;                                                 // 0x0064(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bSnapToGrid : 1;                                          // 0x0068(0x0004) (Edit, Config, NoClear)
	int                                                ResolutionX;                                              // 0x006C(0x0004) (Edit, Config, EditConst, NoClear)
	int                                                ResolutionY;                                              // 0x0070(0x0004) (Edit, Config, EditConst, NoClear)
	unsigned long                                      bMousePositioning : 1;                                    // 0x0074(0x0004) (Edit, EditConst, NoClear)
	float                                              GUI_TO_WORLD_X;                                           // 0x0078(0x0004) (Edit, Config, NoClear)
	float                                              GUI_TO_WORLD_Y;                                           // 0x007C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bLastScaled : 1;                                          // 0x0080(0x0004) (Edit, EditConst, NoClear)
	TArray<struct FString>                             PackageNames;                                             // 0x0084(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bHasLoadedPackages : 1;                                   // 0x0090(0x0004) (Edit, EditConst, NoClear)
	TArray<class UClass_Object_GUI_GUIComponent*>      PersistentStack;                                          // 0x0094(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage*> MenuStack;                                                // 0x00A0(0x000C) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage* ActivePage;                                               // 0x00AC(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             FontNames;                                                // 0x00B0(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIFont*>           FontStack;                                                // 0x00BC(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIStyles*>         StyleStack;                                               // 0x00C8(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             StyleNames;                                               // 0x00D4(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_Material*>              MouseCursors;                                             // 0x00E0(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FStruct_Vector>                      MouseCursorOffset;                                        // 0x00EC(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	unsigned char                                      ControllerMask;                                           // 0x00F8(0x0001) (Edit, EditConst, NoClear)
	unsigned char                                      ControllerId;                                             // 0x00F9(0x0001) (Edit, EditConst, NoClear)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FA(0x0002) MISSED OFFSET
	float                                              MouseX;                                                   // 0x00FC(0x0004) (Edit, EditConst)
	float                                              MouseY;                                                   // 0x0100(0x0004) (Edit, EditConst, NoClear)
	float                                              LastMouseX;                                               // 0x0104(0x0004) (Edit, EditConst)
	float                                              LastMouseY;                                               // 0x0108(0x0004) (Edit, EditConst)
	unsigned long                                      ShiftPressed : 1;                                         // 0x010C(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      AltPressed : 1;                                           // 0x010C(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      CtrlPressed : 1;                                          // 0x010C(0x0004) (Edit, EditConst, NoClear)
	float                                              DblClickWindow;                                           // 0x0110(0x0004) (Edit, Config, NoClear)
	float                                              LastClickTime;                                            // 0x0114(0x0004) (Edit, EditConst, NoClear)
	int                                                LastClickX;                                               // 0x0118(0x0004) (Edit, EditConst)
	int                                                LastClickY;                                               // 0x011C(0x0004) (Edit, EditConst, NoClear)
	float                                              ButtonRepeatDelay;                                        // 0x0120(0x0004) (Edit, EditConst, NoClear)
	unsigned char                                      RepeatKey[0x4];                                           // 0x0124(0x0001) (Edit, EditConst, NoClear)
	float                                              RepeatDelta[0x4];                                         // 0x0128(0x0004) (Edit, EditConst, NoClear)
	float                                              RepeatTime[0x4];                                          // 0x0138(0x0004) (Edit, EditConst, NoClear)
	float                                              CursorFade;                                               // 0x0148(0x0004) (Edit, EditConst, NoClear)
	int                                                CursorStep;                                               // 0x014C(0x0004) (Edit, EditConst, NoClear)
	float                                              FastCursorFade;                                           // 0x0150(0x0004) (Edit, EditConst, NoClear)
	int                                                FastCursorStep;                                           // 0x0154(0x0004) (Edit, EditConst, NoClear)
	class UClass_Object_GUI_GUIComponent*              FocusedControl;                                           // 0x0158(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent*              ActiveControl;                                            // 0x015C(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent*              SkipControl;                                              // 0x0160(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent*              MoveControl;                                              // 0x0164(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	float                                              SavedMoveOffsetX;                                         // 0x0168(0x0004) (Edit, EditConst)
	float                                              SavedMoveOffsetY;                                         // 0x016C(0x0004) (Edit, EditConst)
	unsigned long                                      bModAuthor : 1;                                           // 0x0170(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bDesignMode : 1;                                          // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bPlayerDesignMode : 1;                                    // 0x0170(0x0004) (Edit, EditConst)
	unsigned long                                      bHighlightCurrent : 1;                                    // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bStyleCreate : 1;                                         // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bStylesDisplay : 1;                                       // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bMemberDisplay : 1;                                       // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bMemberEdit : 1;                                          // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bEditing : 1;                                             // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bHelpDisplay : 1;                                         // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bShowConfigMembers : 1;                                   // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bShowGUIMembers : 1;                                      // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bShowPageList : 1;                                        // 0x0170(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bComponentMenu : 1;                                       // 0x0170(0x0004) (Edit, EditConst, NoClear)
	class UClass_Object_GUI_GUIComponent*              SaveControl;                                              // 0x0174(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIStyles*                 SaveStyle;                                                // 0x0178(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	struct FString                                     CurrentMemberObjName;                                     // 0x017C(0x000C) (Edit, EditConst, NeedCtorLink, NoClear)
	TArray<struct FString>                             CurrentMemberObjValue;                                    // 0x0188(0x000C) (Edit, EditConst, NeedCtorLink, NoClear)
	int                                                CurrentMember;                                            // 0x0194(0x0004) (Edit, EditConst, NoClear)
	int                                                MemberEditLevel;                                          // 0x0198(0x0004) (Edit, EditConst, NoClear)
	int                                                MemberEditPosition;                                       // 0x019C(0x0004) (Edit, EditConst, NoClear)
	TArray<struct FString>                             HelpStack;                                                // 0x01A0(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             ComponentClassList;                                       // 0x01AC(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	float                                              MenuMouseSens;                                            // 0x01B8(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Sound*                         MouseOverSound;                                           // 0x01BC(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Sound*                         ClickSound;                                               // 0x01C0(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Sound*                         EditSound;                                                // 0x01C4(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Sound*                         UpSound;                                                  // 0x01C8(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Sound*                         DownSound;                                                // 0x01CC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bForceMouseCheck : 1;                                     // 0x01D0(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bSwallowNextKeyType : 1;                                  // 0x01D0(0x0004) (Edit, EditConst, NoClear)
	TArray<struct FStruct_ControlSpec>                 AutoLoad;                                                 // 0x01D4(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent*>      InterestedResolutionChanged;                              // 0x01E0(0x000C) (NeedCtorLink)
	unsigned long                                      bEmulatedJoypad : 1;                                      // 0x01EC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bJoyMouse : 1;                                            // 0x01EC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bHideMouseCursor : 1;                                     // 0x01EC(0x0004) (Edit, Config, NoClear)
	float                                              JoyDeadZone;                                              // 0x01F0(0x0004) (Edit, Config, NoClear)
	float                                              JoyLeftXAxis[0x4];                                        // 0x01F4(0x0004)
	float                                              JoyLeftYAxis[0x4];                                        // 0x0204(0x0004)
	float                                              JoyRightXAxis[0x4];                                       // 0x0214(0x0004)
	float                                              JoyRightYAxis[0x4];                                       // 0x0224(0x0004)
	unsigned char                                      JoyButtons[0x40];                                         // 0x0234(0x0001)
	float                                              JoyControlsDelta[0x10];                                   // 0x0274(0x0004)
	class UClass_Object_Material*                      WhiteBorder;                                              // 0x02B4(0x0004)
	unsigned long                                      CaptureScriptExec : 1;                                    // 0x02B8(0x0004) (Edit, NoClear)
	struct FScriptDelegate                             __OnNeedRawKeyPress__Delegate;                            // 0x02BC(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.BaseGUIController.GUIController");
		return ptr;
	}


	bool Function_IsPageActive_IsPageActive(const struct FString& menuClass);
	void Function_OnProgress_OnProgress(const struct FString& Str1, const struct FString& Str2);
	void Function_PaintProgress();
	void Function_LoadLocalizedPerObjectConfigGUI();
	void Function_LoadLocalizedPerObjectConfig();
	void Function_LogGUIComponent(class UClass_Object_GUI_GUIComponent* Ctrl, int Level);
	void Function_LogGUIPage(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage* Page);
	void Function_LogGUI();
	void Function_RemoveMenu_RemoveMenu(const struct FString& MenuName);
	void Function_NotifyLevelChange();
	bool Function_HasMouseMoved();
	void Function_SizeOfControl(class UClass_Object_GUI_GUIComponent* Ctrl, float* Size);
	void Function_CenterOfControl(class UClass_Object_GUI_GUIComponent* Ctrl, float* Left, float* Top);
	void Function_RedoActiveComponent(class UClass_Object_GUI_GUIComponent* Ctrl, bool bMoveGroup);
	void Function_UndoActiveComponent(class UClass_Object_GUI_GUIComponent* Ctrl, bool bMoveGroup);
	void Function_ChangeResolutionY(int newSize);
	void Function_ChangeResolutionX(int newSize);
	void Function_ChangeGridSize(int newSize);
	void Function_ChangeActiveStyle(const struct FString& NewStyle);
	void Function_SaveComponent(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_SaveActiveComponent(class UClass_Object_GUI_GUIComponent* Ctrl, bool bMoveGroup);
	void Function_ToggleActiveComponentSizing(class UClass_Object_GUI_GUIComponent* Ctrl, bool bPropagate, bool bMoveGroup);
	void Function_SnapToGrid(class UClass_Object_GUI_GUIComponent* Ctrl, bool bResized);
	void Function_ToggleSnapToGrid();
	void Function_DoScalingOnComponent(class UClass_Object_GUI_GUIComponent* Ctrl, bool bScaleIt, bool bPropagate);
	void Function_ResolutionToScale(class UClass_Object_GUI_GUIComponent* Ctrl, bool bPropagate);
	void Function_ScaleToResolution(class UClass_Object_GUI_GUIComponent* Ctrl, bool bPropagate);
	void Function_SetGuiResolution();
	void Function_UnRegisterNotifyResolutionChanged(class UClass_Object_GUI_GUIComponent* Component);
	bool Function_ComponentIsRegisteredForResolutionChanged(class UClass_Object_GUI_GUIComponent* Component);
	void Function_RegisterNotifyResolutionChanged(class UClass_Object_GUI_GUIComponent* Component);
	void Function_OnResolutionChanged(int OldResolutionX, int OldResolutionY, int NewResolutionX, int NewResolutionY);
	void Function_SetChildrenDirty(class UClass_Object_GUI_GUIComponent_GUIMultiComponent* C);
	void Function_GetGuiResolution();
	void Function_UpdateControl(class UClass_Object_GUI_GUIComponent* Ctrl, bool bResized);
	void Function_SetFocusedPos(class UClass_Object_GUI_GUIComponent* Ctrl, float bmLeft, float bmTop, int ClipX, int ClipY);
	void Function_MoveFocused(class UClass_Object_GUI_GUIComponent* Ctrl, int bmLeft, int bmTop, int bmWidth, int bmHeight, float ClipX, float ClipY, bool bMoveGroup);
	void Function_SelectNextControlInMoveGroup();
	void Function_SizeControlsInGroup(class UClass_Object_GUI_GUIComponent* Ctrl, TEnumAsByte<EeComponentSize> Size);
	void Function_AlignControlsInGroup(class UClass_Object_GUI_GUIComponent* Ctrl, TEnumAsByte<EeComponentAlign> Align);
	void Function_MoveControlGroup(int fromGroup, int toGroup);
	void Function_KillControlGroup(int Group);
	void Function_GroupControl(class UClass_Object_GUI_GUIComponent* Ctrl, int Group);
	void Function_MakeMoveGroup();
	void Function_SetCaptureScriptExec(bool bCapture);
	void Function_ResetFocus();
	void Function_ChangeFocus(class UClass_Object_GUI_GUIComponent* NewFocus);
	void Function_PostLevelChange_PostLevelChange(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* newLevel, bool bSaveGame);
	void Function_PreLevelChange_PreLevelChange(const struct FString& DestURL, class UClass_Object_LevelSummary* NewSummary);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage* Function_ParentPage();
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage* Function_TopPage();
	void Function_CloseAll_CloseAll();
	bool Function_CloseMenu_CloseMenu();
	bool Function_ReplaceMenu_ReplaceMenu(const struct FString& NewMenuName, const struct FString& MenuNameOverride, const struct FString& Param1, const struct FString& Param2, int param3);
	bool Function_InternalOpenMenu(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage* NewMenu, const struct FString& Param1, const struct FString& Param2, int param3);
	bool Function_OpenMenu_OpenMenu(const struct FString& NewMenuName, const struct FString& MenuNameOverride, const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_RemovePersistentComponent(class UClass_Object_GUI_GUIComponent* Ctrl);
	class UClass_Object_GUI_GUIComponent* Function_FindPersistentComponent(const struct FString& theName, bool bExact);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage* Function_CreateMenu(const struct FString& NewMenuName, const struct FString& MenuNameOverride);
	void Function_ReloadGUI();
	class UClass_Object_GUI_GUIComponent* Function_CreateComponent(const struct FString& ComponentClass, const struct FString& ComponentName);
	struct FString Function_FixGUIComponentName(const struct FString& ComponentName);
	void Function_onGameplayMessage_onGameplayMessage(class UClass_Object_Message* msg);
	void Function_AutoLoadMenus_AutoLoadMenus();
	void Function_SetControllerStatus_SetControllerStatus(bool On);
	bool Function_RegisterStyle(const struct FString& StyleClass);
	bool Function_RegisterFont(const struct FString& FontClass);
	void Function_InitializeController_InitializeController();
	bool Function_OnNeedRawKeyPress(unsigned char NewKey);
	class UClass_Object_LevelSummary* Function_LoadLevelSummary(const struct FString& LevelSummaryName);
	bool Function_GetDEMHeader(const struct FString& DemoName, struct FString* MapName, struct FString* GameType, int* ScoreLimit, int* TimeLimit, int* ClientSide, struct FString* RecordedBy, struct FString* TimeStamp, struct FString* ReqPackages);
	void Function_GetDEMList(TArray<struct FString>* DEMFiles);
	void Function_MouseEmulation(bool On);
	void Function_ResetKeyboard();
	void Function_GetMapList(const struct FString& Prefix, class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList* List);
	struct FString Function_GetCurrentRes();
	class UClass_Object_GUI_GUIStyles* Function_GetStyle(const struct FString& StyleName);
	class UClass_Object_GUI_GUIFont* Function_GetMenuFont(const struct FString& FontName);
};


// Class Object.Interactions.Interaction.BaseGUIController.GUIController.TribesGUIControllerBase
// 0x001C (0x02E0 - 0x02C4)
class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController_TribesGUIControllerBase : public UClass_Object_Interactions_Interaction_BaseGUIController_GUIController
{
public:
	class UClass_Object_RefCount_ClientSideCharacter*  clientSideChar;                                           // 0x02C4(0x0004)
	class UClass_Object_TribesGUIConfig*               GuiConfig;                                                // 0x02C8(0x0004)
	struct FString                                     LastChatMessage;                                          // 0x02CC(0x000C) (NeedCtorLink)
	unsigned long                                      bMusicPlaying : 1;                                        // 0x02D8(0x0004)
	int                                                CurrentSongHandle;                                        // 0x02DC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.BaseGUIController.GUIController.TribesGUIControllerBase");
		return ptr;
	}


	struct FString Function_GetGameSpyPassword();
	bool Function_UseGameSpyTeamAffiliation();
	int Function_GetGameSpyTeamId();
	int Function_GetGameSpyProfileId();
	void Function_loadlevel(const struct FString& URL);
	void Function_GameResume();
	void Function_GameOver();
	void Function_GameStart();
	void Function_OnMojoFinished_OnMojoFinished();
	bool Function_FinishCampaignMission();
	bool Function_PlayCampaignMission(int idx);
	bool Function_NextCampaignMission();
	bool Function_StartNewCampaignAt(int missionIdx, int difficulty);
	bool Function_StartNewCampaign(int difficulty);
	void Function_StartCampaignCutscene(const struct FString& Map, const struct FString& scene);
	void Function_Quit();
	void Function_PlayerDisconnect();
	void Function_ChangeTeams();
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Function_GetLevelInfo();
	class AClass_Object_Actor_Info_GameInfo_GameInfo* Function_GetGameInfo();
	void Function_PostLevelChange_PostLevelChange_PostLevelChange(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* newLevel, bool bSaveGame);
	void Function_PreLevelChange_PreLevelChange_PreLevelChange(const struct FString& DestURL, class UClass_Object_LevelSummary* NewSummary);
	void Function_InitializeController_InitializeController_InitializeController();
};


// Class Object.Actor.Pawn
// 0x0270 (0x0670 - 0x0400)
class AClass_Object_Actor_Pawn : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Controller*              Controller;                                               // 0x0400(0x0004) (Net)
	unsigned long                                      movementSimProxyPending : 1;                              // 0x0404(0x0004)
	struct FStruct_Vector                              movementSimProxyPosition;                                 // 0x0408(0x000C)
	struct FStruct_Vector                              movementSimProxyVelocity;                                 // 0x0414(0x000C)
	struct FStruct_Rotator                             movementSimProxyRotation;                                 // 0x0420(0x000C)
	TArray<class UClass_Object_Field_Struct_State_Class*> goals;                                                    // 0x042C(0x000C) (Edit, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_Field_Struct_State_Class*> abilities;                                                // 0x0438(0x000C) (Edit, NeedCtorLink, NoClear, EditInline)
	TEnumAsByte<EAI_LOD_Levels>                        AI_LOD_LevelOrig;                                         // 0x0444(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	class UClass_Object_RefCount_Tyrion_ResourceBase*  CharacterAI;                                              // 0x0448(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase*  MovementAI;                                               // 0x044C(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase*  WeaponAI;                                                 // 0x0450(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase*  HeadAI;                                                   // 0x0454(0x0004)
	TEnumAsByte<EAI_LOD_Levels>                        AI_LOD_Level;                                             // 0x0458(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	unsigned long                                      logTyrion : 1;                                            // 0x045C(0x0004)
	unsigned long                                      logDLM : 1;                                               // 0x045C(0x0004)
	unsigned long                                      logNavigationSystem : 1;                                  // 0x045C(0x0004)
	class AClass_Object_Actor_Pawn*                    nextPawn;                                                 // 0x0460(0x0004) (Transient)
	float                                              NetRelevancyTime;                                         // 0x0464(0x0004)
	class AClass_Object_Actor_Controller_PlayerController* LastRealViewer;                                           // 0x0468(0x0004)
	class AClass_Object_Actor*                         LastViewer;                                               // 0x046C(0x0004)
	unsigned long                                      bJustLanded : 1;                                          // 0x0470(0x0004)
	unsigned long                                      bUpAndOut : 1;                                            // 0x0470(0x0004)
	unsigned long                                      bIsWalking : 1;                                           // 0x0470(0x0004) (Net)
	unsigned long                                      bWarping : 1;                                             // 0x0470(0x0004)
	unsigned long                                      bWantsToCrouch : 1;                                       // 0x0470(0x0004)
	unsigned long                                      bIsCrouched : 1;                                          // 0x0470(0x0004) (Const, Net)
	unsigned long                                      bTryToUncrouch : 1;                                       // 0x0470(0x0004) (Const)
	unsigned long                                      bCanCrouch : 1;                                           // 0x0470(0x0004)
	unsigned long                                      bCrawler : 1;                                             // 0x0470(0x0004)
	unsigned long                                      bReducedSpeed : 1;                                        // 0x0470(0x0004) (Const)
	unsigned long                                      bJumpCapable : 1;                                         // 0x0470(0x0004)
	unsigned long                                      bCanJump : 1;                                             // 0x0470(0x0004)
	unsigned long                                      bCanWalk : 1;                                             // 0x0470(0x0004)
	unsigned long                                      bCanSwim : 1;                                             // 0x0470(0x0004)
	unsigned long                                      bCanFly : 1;                                              // 0x0470(0x0004)
	unsigned long                                      bCanClimbLadders : 1;                                     // 0x0470(0x0004)
	unsigned long                                      bCanStrafe : 1;                                           // 0x0470(0x0004)
	unsigned long                                      bCanDoubleJump : 1;                                       // 0x0470(0x0004)
	unsigned long                                      bAvoidLedges : 1;                                         // 0x0470(0x0004)
	unsigned long                                      bStopAtLedges : 1;                                        // 0x0470(0x0004)
	unsigned long                                      bNoJumpAdjust : 1;                                        // 0x0470(0x0004)
	unsigned long                                      bCountJumps : 1;                                          // 0x0470(0x0004)
	unsigned long                                      bSimulateGravity : 1;                                     // 0x0470(0x0004) (Const, Net)
	unsigned long                                      bUpdateEyeHeight : 1;                                     // 0x0470(0x0004)
	unsigned long                                      bIgnoreForces : 1;                                        // 0x0470(0x0004)
	unsigned long                                      bNoVelocityUpdate : 1;                                    // 0x0470(0x0004) (Const)
	unsigned long                                      bCanWalkOffLedges : 1;                                    // 0x0470(0x0004)
	unsigned long                                      bSteadyFiring : 1;                                        // 0x0470(0x0004) (Net)
	unsigned long                                      bCanBeBaseForPawns : 1;                                   // 0x0470(0x0004)
	unsigned long                                      bClientCollision : 1;                                     // 0x0470(0x0004)
	unsigned long                                      bSimGravityDisabled : 1;                                  // 0x0470(0x0004) (Const)
	unsigned long                                      bDirectHitWall : 1;                                       // 0x0470(0x0004)
	unsigned long                                      bHavokCharacterCollisions : 1;                            // 0x0474(0x0004) (Edit, NoClear)
	unsigned long                                      bHavokInitCalled : 1;                                     // 0x0474(0x0004) (Const, Transient)
	float                                              bHavokCharacterCollisionExtraRadius;                      // 0x0478(0x0004) (Edit, NoClear)
	unsigned long                                      bThumped : 1;                                             // 0x047C(0x0004)
	unsigned long                                      bInvulnerableBody : 1;                                    // 0x047C(0x0004)
	unsigned long                                      bIsFemale : 1;                                            // 0x047C(0x0004) (Edit)
	unsigned long                                      bUpdatingDisplay : 1;                                     // 0x047C(0x0004)
	unsigned long                                      bAmbientCreature : 1;                                     // 0x047C(0x0004)
	unsigned long                                      bLOSHearing : 1;                                          // 0x047C(0x0004)
	unsigned long                                      bSameZoneHearing : 1;                                     // 0x047C(0x0004)
	unsigned long                                      bAdjacentZoneHearing : 1;                                 // 0x047C(0x0004)
	unsigned long                                      bMuffledHearing : 1;                                      // 0x047C(0x0004)
	unsigned long                                      bDontPossess : 1;                                         // 0x047C(0x0004)
	unsigned long                                      bRollToDesired : 1;                                       // 0x047C(0x0004)
	unsigned long                                      bCachedRelevant : 1;                                      // 0x047C(0x0004)
	unsigned long                                      bUseCompressedPosition : 1;                               // 0x047C(0x0004)
	unsigned long                                      bWeaponBob : 1;                                           // 0x047C(0x0004)
	unsigned long                                      bHideRegularHUD : 1;                                      // 0x047C(0x0004)
	unsigned long                                      bSpecialHUD : 1;                                          // 0x047C(0x0004)
	unsigned long                                      bSpecialCalcView : 1;                                     // 0x047C(0x0004)
	unsigned long                                      bNoWeaponFiring : 1;                                      // 0x047C(0x0004)
	unsigned long                                      bIsTyping : 1;                                            // 0x047C(0x0004) (Net)
	unsigned long                                      bCouldSeeLastTick : 1;                                    // 0x047C(0x0004)
	unsigned long                                      bGroundNavigationObstruction : 1;                         // 0x047C(0x0004)
	unsigned char                                      Visibility;                                               // 0x0480(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0481(0x0003) MISSED OFFSET
	float                                              DesiredSpeed;                                             // 0x0484(0x0004)
	struct FName                                       AIScriptTag;                                              // 0x0488(0x0004)
	float                                              HearingThreshold;                                         // 0x048C(0x0004)
	float                                              Alertness;                                                // 0x0490(0x0004)
	float                                              SightRadius;                                              // 0x0494(0x0004) (Edit)
	float                                              PeripheralVision;                                         // 0x0498(0x0004) (Edit)
	float                                              AvgPhysicsTime;                                           // 0x049C(0x0004) (Const)
	float                                              MeleeRange;                                               // 0x04A0(0x0004)
	class AClass_Object_Actor_NavigationPoint*         Anchor;                                                   // 0x04A4(0x0004)
	class AClass_Object_Actor_NavigationPoint*         LastAnchor;                                               // 0x04A8(0x0004) (Const)
	float                                              LastValidAnchorTime;                                      // 0x04AC(0x0004)
	float                                              DestinationOffset;                                        // 0x04B0(0x0004)
	float                                              SerpentineDist;                                           // 0x04B4(0x0004)
	float                                              SerpentineTime;                                           // 0x04B8(0x0004)
	float                                              UncrouchTime;                                             // 0x04BC(0x0004) (Const)
	float                                              SpawnTime;                                                // 0x04C0(0x0004)
	float                                              VisionCounter;                                            // 0x04C4(0x0004) (Const)
	struct FStruct_Range                               VisionUpdateRange;                                        // 0x04C8(0x0008)
	float                                              GroundSpeed;                                              // 0x04D0(0x0004) (Net)
	float                                              WaterSpeed;                                               // 0x04D4(0x0004) (Net)
	float                                              AirSpeed;                                                 // 0x04D8(0x0004) (Net)
	float                                              LadderSpeed;                                              // 0x04DC(0x0004)
	float                                              AccelRate;                                                // 0x04E0(0x0004) (Net)
	float                                              JumpZ;                                                    // 0x04E4(0x0004) (Net)
	float                                              AirControl;                                               // 0x04E8(0x0004) (Net)
	float                                              WalkingPct;                                               // 0x04EC(0x0004)
	float                                              CrouchedPct;                                              // 0x04F0(0x0004)
	float                                              MaxFallSpeed;                                             // 0x04F4(0x0004)
	struct FStruct_Vector                              ConstantAcceleration;                                     // 0x04F8(0x000C)
	struct FString                                     OwnerName;                                                // 0x0504(0x000C) (NeedCtorLink)
	float                                              BaseEyeHeight;                                            // 0x0510(0x0004)
	float                                              EyeHeight;                                                // 0x0514(0x0004)
	struct FStruct_Vector                              Floor;                                                    // 0x0518(0x000C) (Const)
	float                                              SplashTime;                                               // 0x0524(0x0004)
	float                                              CrouchHeight;                                             // 0x0528(0x0004)
	float                                              CrouchRadius;                                             // 0x052C(0x0004)
	float                                              OldZ;                                                     // 0x0530(0x0004)
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume* HeadVolume;                                               // 0x0534(0x0004)
	float                                              Health;                                                   // 0x0538(0x0004) (Edit, Net)
	float                                              BreathTime;                                               // 0x053C(0x0004)
	float                                              UnderWaterTime;                                           // 0x0540(0x0004)
	float                                              LastPainTime;                                             // 0x0544(0x0004)
	class UClass_Object_Field_Struct_State_Class*      ReducedDamageType;                                        // 0x0548(0x0004)
	float                                              HeadScale;                                                // 0x054C(0x0004) (Net)
	struct FStruct_Vector                              noise1spot;                                               // 0x0550(0x000C) (Const)
	float                                              noise1time;                                               // 0x055C(0x0004) (Const)
	class AClass_Object_Actor_Pawn*                    noise1other;                                              // 0x0560(0x0004) (Const)
	float                                              noise1loudness;                                           // 0x0564(0x0004) (Const)
	struct FStruct_Vector                              noise2spot;                                               // 0x0568(0x000C) (Const)
	float                                              noise2time;                                               // 0x0574(0x0004) (Const)
	class AClass_Object_Actor_Pawn*                    noise2other;                                              // 0x0578(0x0004) (Const)
	float                                              noise2loudness;                                           // 0x057C(0x0004) (Const)
	float                                              LastPainSound;                                            // 0x0580(0x0004)
	float                                              Bob;                                                      // 0x0584(0x0004)
	float                                              LandBob;                                                  // 0x0588(0x0004)
	float                                              AppliedBob;                                               // 0x058C(0x0004)
	float                                              bobtime;                                                  // 0x0590(0x0004)
	struct FStruct_Vector                              WalkBob;                                                  // 0x0594(0x000C)
	float                                              SoundDampening;                                           // 0x05A0(0x0004)
	float                                              DamageScaling;                                            // 0x05A4(0x0004)
	struct FString                                     MenuName;                                                 // 0x05A8(0x000C) (Localized, NeedCtorLink)
	class AClass_Object_Actor_Projector_ShadowProjector* Shadow;                                                   // 0x05B4(0x0004)
	class UClass_Object_Field_Struct_State_Class*      BloodEffect;                                              // 0x05B8(0x0004)
	class UClass_Object_Field_Struct_State_Class*      LowGoreBlood;                                             // 0x05BC(0x0004)
	struct FString                                     ControllerClassName;                                      // 0x05C0(0x000C) (Edit, NeedCtorLink)
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PlayerReplicationInfo;                                    // 0x05CC(0x0004) (Net)
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume_LadderVolume* OnLadder;                                                 // 0x05D0(0x0004)
	struct FName                                       LandMovementState;                                        // 0x05D4(0x0004)
	struct FName                                       WaterMovementState;                                       // 0x05D8(0x0004)
	class AClass_Object_Actor*                         LastStartSpot;                                            // 0x05DC(0x0004)
	float                                              LastStartTime;                                            // 0x05E0(0x0004)
	struct FName                                       AnimAction;                                               // 0x05E4(0x0004) (Net)
	struct FStruct_Vector                              TakeHitLocation;                                          // 0x05E8(0x000C) (Net)
	class UClass_Object_Field_Struct_State_Class*      HitDamageType;                                            // 0x05F4(0x0004) (Net)
	struct FStruct_Vector                              TearOffMomentum;                                          // 0x05F8(0x000C) (Net)
	unsigned long                                      bPhysicsAnimUpdate : 1;                                   // 0x0604(0x0004)
	unsigned long                                      bWasCrouched : 1;                                         // 0x0604(0x0004)
	unsigned long                                      bWasWalking : 1;                                          // 0x0604(0x0004)
	unsigned long                                      bWasOnGround : 1;                                         // 0x0604(0x0004)
	unsigned long                                      bInitializeAnimation : 1;                                 // 0x0604(0x0004)
	unsigned long                                      bPlayedDeath : 1;                                         // 0x0604(0x0004)
	TEnumAsByte<EPhysics>                              OldPhysics;                                               // 0x0608(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0609(0x0003) MISSED OFFSET
	float                                              OldRotYaw;                                                // 0x060C(0x0004)
	struct FStruct_Vector                              OldAcceleration;                                          // 0x0610(0x000C)
	float                                              BaseMovementRate;                                         // 0x061C(0x0004)
	struct FName                                       MovementAnims[0x4];                                       // 0x0620(0x0004)
	struct FName                                       TurnLeftAnim;                                             // 0x0630(0x0004)
	struct FName                                       TurnRightAnim;                                            // 0x0634(0x0004)
	float                                              BlendChangeTime;                                          // 0x0638(0x0004) (Edit)
	float                                              MovementBlendStartTime;                                   // 0x063C(0x0004)
	float                                              ForwardStrafeBias;                                        // 0x0640(0x0004)
	float                                              BackwardStrafeBias;                                       // 0x0644(0x0004)
	struct FStruct_CompressedPosition                  PawnPosition;                                             // 0x0648(0x0024) (Net, Transient)
	unsigned long                                      bNotifiedDeathListeners : 1;                              // 0x066C(0x0004) (Const)
	unsigned long                                      bSendsDamagedMessages : 1;                                // 0x066C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn");
		return ptr;
	}


	void Function_PlayVictoryAnimation();
	void Function_PlayLandingAnimation(float impactVel);
	void Function_PlayLanded(float impactVel);
	void Function_PlayWaiting();
	void Function_PlayMoving();
	void Function_PlayFalling();
	void Function_PlayJump();
	bool Function_CannotJumpNow();
	void Function_AnimEnd_AnimEnd(int Channel);
	void Function_ChangeAnimation();
	void Function_PlayTakeHit(const struct FStruct_Vector& HitLoc, int Damage, class UClass_Object_Field_Struct_State_Class* DamageType);
	void Function_StopPlayFiring();
	void Function_PlayFiring(float Rate, const struct FName& FiringMode);
	void Function_PlayDying(class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLoc);
	void Function_SetAnimAction(const struct FName& NewAction);
	void Function_ChunkUp(const struct FStruct_Rotator& HitRotation, class UClass_Object_Field_Struct_State_Class* D);
	void Function_PlayHit(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& Momentum);
	void Function_PlayDyingSound();
	void Function_PlayMoverHitSound();
	bool Function_DoJump(bool bUpdating);
	bool Function_Dodge(TEnumAsByte<EDoubleClickDir> DoubleClickMove);
	void Function_UpdateRocketAcceleration(float DeltaTime, float YawChange, float PitchChange);
	bool Function_CanDoubleJump();
	void Function_DoDoubleJump(bool bUpdating);
	bool Function_CheckWaterJump(struct FStruct_Vector* WallNormal);
	void Function_TakeDrowningDamage();
	void Function_BreathTimer();
	bool Function_IsInPain_IsInPain();
	bool Function_TouchingWaterVolume();
	void Function_HeadVolumeChange(class AClass_Object_Actor_Brush_Volume_PhysicsVolume* newHeadVolume);
	void Function_Landed_Landed(const struct FStruct_Vector& HitNormal);
	void Function_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	void Function_Falling_Falling();
	void Function_rematchGoals();
	void Function_setLimitedTimeLODActivation(int ticksToKeepActivated);
	struct FStruct_Vector Function_groundPredictedLocation(float t);
	struct FStruct_Vector Function_predictedLocation(float t);
	bool Function_isAlive();
	bool STATIC_Function_checkDead(class AClass_Object_Actor_Pawn* Pawn);
	bool STATIC_Function_checkAlive(class AClass_Object_Actor_Pawn* Pawn);
	bool Function_Gibbed(class UClass_Object_Field_Struct_State_Class* DamageType);
	void Function_Died(class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_NotifyPawnDeathListeners();
	class AClass_Object_Actor_Controller* Function_GetKillerController();
	void Function_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_ApplyDamage(class AClass_Object_Actor_Pawn* InstigatedBy, float Damage, const struct FName& teamLabel);
	void Function_SetMovementPhysics();
	void Function_Gasp();
	void Function_SetMesh();
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_PreBeginPlay_PreBeginPlay();
	void Function_Destroyed_Destroyed();
	struct FStruct_Vector Function_EyePosition();
	void Function_UpdateEyeHeight(float DeltaTime);
	void Function_BaseChange_BaseChange();
	void Function_JumpOffPawn();
	void Function_gibbedBy(class AClass_Object_Actor* Other);
	void Function_EncroachedBy_EncroachedBy(class AClass_Object_Actor* Other);
	bool Function_EncroachingOn_EncroachingOn(class AClass_Object_Actor* Other);
	void Function_ChangedWeapon();
	void Function_NextItem();
	void Function_SwitchToLastWeapon();
	void Function_TossWeapon(const struct FStruct_Vector& TossVel);
	bool Function_CanThrowWeapon();
	bool Function_InCurrentCombo();
	void Function_ClientDying(class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_FaceRotation(const struct FStruct_Rotator& NewRotation, float DeltaTime);
	void Function_ClientSetRotation(const struct FStruct_Rotator& NewRotation);
	void Function_ClientSetLocation(const struct FStruct_Vector& NewLocation, const struct FStruct_Rotator& NewRotation);
	void Function_ClientRestart();
	void Function_TakeFallingDamage();
	void Function_KilledBy_KilledBy(class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_AddVelocity(const struct FStruct_Vector& newVelocity);
	void Function_StartCrouch(float HeightAdjust);
	void Function_EndCrouch(float HeightAdjust);
	void Function_ShouldCrouch(bool Crouch);
	void Function_ModifyVelocity(float DeltaTime, const struct FStruct_Vector& OldVelocity);
	void Function_JumpOutOfWater(const struct FStruct_Vector& jumpDir);
	void Function_FinishedInterpolation_FinishedInterpolation();
	void Function_SetDefaultDisplayProperties_SetDefaultDisplayProperties();
	void Function_SetDisplayProperties_SetDisplayProperties(TEnumAsByte<ERenderStyle> NewStyle, class UClass_Object_Material* NewTexture, bool bLighting);
	void Function_GiveWeapon(const struct FString& aClassName);
	void Function_CreateInventory(const struct FString& InventoryClassName);
	bool Function_CanTrigger(class AClass_Object_Actor_Triggers_Trigger* t);
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_ClientMessage(const struct FString& S, const struct FName& Type);
	void Function_ReceiveLocalizedMessage(class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	float Function_AdjustedStrength();
	class AClass_Object_Actor* Function_ShootSpecial(class AClass_Object_Actor* A);
	bool Function_LineOfSightTo(class AClass_Object_Actor* Other);
	bool Function_PressingAltFire();
	bool Function_PressingFire();
	bool Function_InGodMode();
	void Function_SetViewRotation(const struct FStruct_Rotator& NewRotation);
	struct FStruct_Rotator Function_GetViewRotation();
	bool Function_IsFirstPerson();
	bool Function_IsLocallyControlled();
	bool Function_IsHumanControlled();
	bool Function_WasPlayerPawn();
	bool Function_IsPlayerPawn();
	void Function_CheckBob(float DeltaTime, const struct FStruct_Vector& Y);
	struct FStruct_Vector Function_WeaponBob(float BobDamping);
	void Function_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_ClimbLadder(class AClass_Object_Actor_Brush_Volume_PhysicsVolume_LadderVolume* L);
	void Function_EndClimbLadder(class AClass_Object_Actor_Brush_Volume_PhysicsVolume_LadderVolume* OldLadder);
	bool Function_CanSplash_CanSplash();
	void Function_SetWalking(bool bNewIsWalking);
	bool Function_CanGrabLadder();
	void Function_DropToGround();
	void Function_BecomeViewTarget_BecomeViewTarget();
	void Function_UnPossessed();
	void Function_PossessedBy(class AClass_Object_Actor_Controller* C);
	void Function_PlayTeleportEffect_PlayTeleportEffect(bool bOut, bool bSound);
	struct FString Function_GetHumanReadableName_GetHumanReadableName();
	bool Function_SpecialCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_DrawHUD(class UClass_Object_Canvas* Canvas);
	void Function_Reset_Reset();
	void Function_ForceCrouch();
	bool Function_ReachedDestination(class AClass_Object_Actor* goal);
	void Function_SetHeadScale(float NewScale);
	bool Function_HavokCharacterCollision(const struct FStruct_HavokCharacterObjectInteractionEvent& data, struct FStruct_HavokCharacterObjectInteractionResult* res);
	bool Function_CanSee(class AClass_Object_Actor* Other);
	bool Function_IgnoresSeenPawnsOfType(class UClass_Object_Field_Struct_State_Class* SeenType);
	void Function_ClassConstruct_ClassConstruct_ClassConstruct();
	struct FStruct_Vector Function_GetViewPoint();
	struct FStruct_Vector Function_GetViewDirection();
	void Function_NotifyKilled(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Killed, class AClass_Object_Actor_Pawn* Other);
	void Function_RemovePawn();
	void Function_AddPawn();
};


// Class Object.Actor.Pawn.Rook
// 0x0244 (0x08B4 - 0x0670)
class AClass_Object_Actor_Pawn_Rook : public AClass_Object_Actor_Pawn
{
public:
	float                                              healthMaximum;                                            // 0x0670(0x0004) (Net)
	struct FString                                     HUDType;                                                  // 0x0674(0x000C) (NeedCtorLink)
	unsigned long                                      bCanRepair : 1;                                           // 0x0680(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           m_team;                                                   // 0x0684(0x0004) (Edit, Net, NoClear)
	class AClass_Object_Actor_Info_TeamInfo*           m_localTeam;                                              // 0x0688(0x0004)
	class AClass_Object_Actor_SquadInfo*               m_squad;                                                  // 0x068C(0x0004) (Edit)
	class UClass_Object_RefCount_VisionNotifier_TribesVisionNotifier* vision;                                                   // 0x0690(0x0004)
	class UClass_Object_RefCount_HearingNotifier*      hearing;                                                  // 0x0694(0x0004)
	class UClass_Object_DeleteableObject_ShotNotifier* ShotNotifier;                                             // 0x0698(0x0004)
	float                                              PeripheralVisionZAngle;                                   // 0x069C(0x0004) (Edit, NoClear)
	float                                              SightRadiusToPlayer;                                      // 0x06A0(0x0004) (Edit, NoClear)
	TEnumAsByte<EAI_LOD_Levels>                        AI_LOD_LevelMP;                                           // 0x06A4(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x06A5(0x0003) MISSED OFFSET
	float                                              AI_LOD_ActivationDistance;                                // 0x06A8(0x0004) (Edit, NoClear)
	float                                              AI_LOD_DeactivationDistance;                              // 0x06AC(0x0004) (Edit, NoClear)
	unsigned long                                      bAIThreat : 1;                                            // 0x06B0(0x0004) (Edit, NoClear)
	float                                              shotAngularDeviation;                                     // 0x06B4(0x0004) (Edit, NoClear)
	float                                              shotAngularDeviationMP;                                   // 0x06B8(0x0004) (Edit, NoClear)
	struct FStruct_Range                               shotLeadAbility;                                          // 0x06BC(0x0008) (Edit, NoClear)
	struct FStruct_Range                               shotLeadAbilityMP;                                        // 0x06C4(0x0008) (Edit, NoClear)
	float                                              reactionDelay;                                            // 0x06CC(0x0004) (Edit, NoClear)
	float                                              reactionDelayMP;                                          // 0x06D0(0x0004) (Edit, NoClear)
	float                                              visionMemory;                                             // 0x06D4(0x0004) (Edit, NoClear)
	TEnumAsByte<EAlertnessLevels>                      Alertness;                                                // 0x06D8(0x0001) (Net)
	unsigned char                                      UnknownData01[0x3];                                       // 0x06D9(0x0003) MISSED OFFSET
	int                                                AI_LOD_deactivation_exemption_ticks;                      // 0x06DC(0x0004)
	struct FStruct_Vector                              pastPositions[0x4];                                       // 0x06E0(0x000C)
	int                                                pastPositionsIndex;                                       // 0x0710(0x0004)
	float                                              pastPositionsTimeAccu;                                    // 0x0714(0x0004)
	class AClass_Object_Actor_Pawn*                    attacker;                                                 // 0x0718(0x0004)
	float                                              expectedImpactTime;                                       // 0x071C(0x0004)
	float                                              lastShotFiredTime;                                        // 0x0720(0x0004)
	unsigned long                                      bUnobstructedLOF : 1;                                     // 0x0724(0x0004)
	unsigned long                                      bDeferredAICleanup : 1;                                   // 0x0724(0x0004)
	float                                              tickTime;                                                 // 0x0728(0x0004)
	float                                              tickTimeOrg;                                              // 0x072C(0x0004)
	struct FStruct_Range                               tickTimeUpdateRange;                                      // 0x0730(0x0008)
	class UClass_Object_RefCount_Tyrion_ResourceBase*  vehicleAI;                                                // 0x0738(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase*  mountAI;                                                  // 0x073C(0x0004)
	unsigned long                                      bShowLOADebug : 1;                                        // 0x0740(0x0004)
	unsigned long                                      bShowSensingDebug : 1;                                    // 0x0740(0x0004)
	struct FStruct_Vector                              loaStartPoint;                                            // 0x0744(0x000C)
	struct FStruct_Vector                              loaEndPoint;                                              // 0x0750(0x000C)
	struct FStruct_Vector                              loaStartPoint2;                                           // 0x075C(0x000C)
	struct FStruct_Vector                              loaEndPoint2;                                             // 0x0768(0x000C)
	unsigned long                                      loaHit : 1;                                               // 0x0774(0x0004)
	unsigned long                                      bShowTyrionCharacterDebug : 1;                            // 0x0774(0x0004)
	unsigned long                                      bShowTyrionMovementDebug : 1;                             // 0x0774(0x0004)
	unsigned long                                      bShowTyrionWeaponDebug : 1;                               // 0x0774(0x0004)
	unsigned long                                      bShowTyrionHeadDebug : 1;                                 // 0x0774(0x0004)
	unsigned long                                      bShowNavigationDebug : 1;                                 // 0x0774(0x0004)
	unsigned long                                      bShowJSDebug : 1;                                         // 0x0774(0x0004)
	struct FStruct_Vector                              estLocation;                                              // 0x0778(0x000C)
	struct FStruct_Vector                              movementForce;                                            // 0x0784(0x000C)
	unsigned long                                      bShowSquadDebug : 1;                                      // 0x0790(0x0004)
	struct FStruct_Vector                              desiredLocation;                                          // 0x0794(0x000C)
	unsigned long                                      logAlertnessChanges : 1;                                  // 0x07A0(0x0004)
	float                                              ShadowLightDistance;                                      // 0x07A4(0x0004) (Edit)
	float                                              MaxShadowTraceDistance;                                   // 0x07A8(0x0004) (Edit)
	unsigned long                                      bCanBeSensed : 1;                                         // 0x07AC(0x0004) (Edit)
	unsigned long                                      bIsDetectableByEnemies : 1;                               // 0x07AC(0x0004) (Edit)
	unsigned long                                      sensorUpdateFlag : 1;                                     // 0x07AC(0x0004)
	float                                              lastDetectedTime;                                         // 0x07B0(0x0004)
	unsigned long                                      bAlwaysMarked : 1;                                        // 0x07B4(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      radarInfoClass;                                           // 0x07B8(0x0004) (Edit)
	TArray<class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character*> repairers;                                                // 0x07BC(0x000C) (NeedCtorLink)
	TArray<struct FStruct_DamageComponent>             damageComponents;                                         // 0x07C8(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      clientDamageComponentMask;                                // 0x07D4(0x0001)
	unsigned char                                      damageComponentMask;                                      // 0x07D5(0x0001) (Net)
	unsigned char                                      UnknownData02[0x2];                                       // 0x07D6(0x0002) MISSED OFFSET
	float                                              componentBreakThreshold;                                  // 0x07D8(0x0004)
	struct FName                                       playerControllerState;                                    // 0x07DC(0x0004)
	unsigned long                                      bUseAlternateOwnershipMaterial : 1;                       // 0x07E0(0x0004) (Edit)
	unsigned long                                      bUseAlternateSelfIllumMaterial : 1;                       // 0x07E0(0x0004) (Edit)
	struct FName                                       teamSelfIllumSkinName;                                    // 0x07E4(0x0004)
	class AClass_Object_Actor_Pawn*                    flameSource;                                              // 0x07E8(0x0004)
	class UClass_Object_Field_Struct_State_Class*      flameDamageType;                                          // 0x07EC(0x0004)
	float                                              flameDamagePerSecond;                                     // 0x07F0(0x0004)
	float                                              flameDamageReductionPerSecond;                            // 0x07F4(0x0004)
	class UClass_Object_Field_Struct_State_Class*      personalShieldClass;                                      // 0x07F8(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Shield*                  personalShield;                                           // 0x07FC(0x0004) (Net)
	float                                              teamDamagePercentage;                                     // 0x0800(0x0004) (Edit, NoClear)
	unsigned long                                      effectLogging : 1;                                        // 0x0804(0x0004)
	TArray<struct FString>                             loopingEffects;                                           // 0x0808(0x000C) (NeedCtorLink)
	float                                              grapplerRetentionScale;                                   // 0x0814(0x0004) (Edit, NoClear)
	float                                              repDepLastRateAddition;                                   // 0x0818(0x0004)
	float                                              repDepRepairRate;                                         // 0x081C(0x0004)
	float                                              repPakLastRateAddition;                                   // 0x0820(0x0004)
	float                                              repPakRepairRate;                                         // 0x0824(0x0004)
	struct FStruct_Vector                              UseablePoints[0xA];                                       // 0x0828(0x000C) (Net)
	TEnumAsByte<EUseablePointValid>                    UseablePointsValid[0xA];                                  // 0x08A0(0x0001) (Net)
	unsigned char                                      UnknownData03[0x2];                                       // 0x08AA(0x0002) MISSED OFFSET
	unsigned long                                      teamSpecificHavokCollisionFiltering : 1;                  // 0x08AC(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           m_lastTeam;                                               // 0x08B0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook");
		return ptr;
	}


	struct FName Function_getKillerLabel();
	class UClass_Object_Field_Struct_State_Class* Function_GetRadarInfoClass_GetRadarInfoClass();
	void Function_ChunkUp_ChunkUp(const struct FStruct_Rotator& HitRotation, class UClass_Object_Field_Struct_State_Class* D);
	void Function_OnEffectStopped(class AClass_Object_Actor* effect, bool Completed);
	void Function_OnEffectStarted(class AClass_Object_Actor* effect);
	void Function_OnEffectInitialized(class AClass_Object_Actor* effect);
	bool Function_StopLoopingEffect(const struct FString& effect);
	bool Function_EffectIsLooping(const struct FString& effect);
	bool Function_StartLoopingEffect(const struct FString& effect, const struct FString& Tag, class AClass_Object_Actor* Other, class UClass_Object_Material* Material, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotator);
	bool Function_StopEffect(const struct FString& effect);
	bool Function_PlayEffect(const struct FString& effect, const struct FString& Tag, class AClass_Object_Actor* Other, class UClass_Object_Material* Material, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotator);
	bool Function_IsInVisionCone(class AClass_Object_Actor* Other, float SightRadius);
	void Function_displayEnemiesList();
	void Function_displayTyrionDebugHeader();
	void Function_DrawVisionCone(class AClass_Object_Actor_HUD* DrawTarget);
	struct FStruct_Vector Function_groundPredictedLocation_groundPredictedLocation(float t);
	struct FStruct_Vector Function_predictedLocation_predictedLocation(float t);
	struct FStruct_Vector Function_averageVelocity();
	void Function_updatePastPositions(float DeltaSeconds);
	void Function_setLimitedTimeLODActivation_setLimitedTimeLODActivation(int ticksToKeepActivated);
	void Function_setAlertnessLevel(TEnumAsByte<EAlertnessLevels> Alertness);
	TEnumAsByte<EAlertnessLevels> Function_getAlertnessLevel();
	void Function_setSquad(class AClass_Object_Actor_SquadInfo* squad);
	class AClass_Object_Actor_SquadInfo* Function_squad();
	bool Function_canBeRepairedBy(class AClass_Object_Actor_Pawn_Rook* otherGuy);
	bool Function_IsFriendly(class AClass_Object_Actor_Pawn_Rook* otherGuy);
	void Function_setTeam(class AClass_Object_Actor_Info_TeamInfo* Info);
	struct FName Function_getTeamLabel();
	class AClass_Object_Actor_Info_TeamInfo* Function_Team();
	struct FString Function_displayActorLabel(class AClass_Object_Actor* t);
	void Function_enumSquadInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_SquadInfo*>* S);
	void Function_enumTeamInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_TeamInfo*>* S);
	void Function_CleanupSensing();
	void Function_squadCleanupOnDeath(class AClass_Object_Actor_Pawn* InstigatedBy, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	bool Function_cleanupAI();
	void Function_Died_Died(class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_OnShotFired(class AClass_Object_Actor_Projectile* Projectile);
	void Function_UnregisterShotNotification(class UClass_Object_IShotNotification* Registrant);
	void Function_RegisterShotNotification(class UClass_Object_IShotNotification* Registrant);
	void Function_UnregisterHearingNotification(class UClass_Object_IHearingNotification* Registrant);
	void Function_RegisterHearingNotification(class UClass_Object_IHearingNotification* Registrant);
	void Function_UnregisterVisionNotification(class UClass_Object_IVisionNotification* Registrant);
	void Function_RegisterVisionNotification(class UClass_Object_IVisionNotification* Registrant);
	void Function_CreateShotNotifier();
	void Function_CreateHearingNotifier();
	void Function_CreateVisionNotifier();
	void Function_resetPersonalShield();
	void Function_deactivatePersonalShield();
	void Function_activatePersonalShield();
	bool Function_personalShieldActive();
	float Function_getTeamDamagePercentage();
	void Function_IncreaseHealth(float quantity);
	class UClass_Object_Material* Function_GetOverlayMaterial_GetOverlayMaterial(int Index);
	void Function_PostNetReceive_PostNetReceive();
	void Function_generateAISpeechEvents(class AClass_Object_Actor_Pawn_Rook* attackerRook);
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_onTeamChange();
	void Function_damageComponentsOnIncreaseHealth(float quantity);
	void Function_damageComponentsOnDamage(float Damage, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType);
	void Function_damageComponentsPostTakeDamage(float Damage, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_createDamageComponent(int Index, bool FadeIn);
	void Function_breakDamageComponent(int Index, float Damage, const struct FStruct_Vector& Momentum);
	void Function_cleanupDamageComponents();
	void Function_clientUpdateDamageComponents();
	bool Function_ShouldBeMarked(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	float Function_GetDamageComponentThresholdRange();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_displayWorldSpaceDebug(class AClass_Object_Actor_HUD* displayHUD);
	void Function_removeFlameDamage();
	void Function_ProcessBurnDamage(float Delta);
	void Function_ProcessRepair(float Delta);
	void Function_removeRepairFromPack(float accumulationScale, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* repairer);
	void Function_addRepairFromPack(float repairRate, float accumulationScale, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* repairer);
	void Function_removeRepairFromDeployable(float accumulationScale);
	void Function_addRepairFromDeployable(float repairRate, float accumulationScale);
	class AClass_Object_Actor_Info_TeamInfo* Function_getControllingCharacterTeam();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getControllingCharacter();
	class UClass_Object_IFiringMotor* Function_firingMotor();
	bool Function_canBeSensed();
	bool Function_CanBeUsedBy(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* CharacterUser);
	struct FStruct_Vector Function_GetObjectiveLocation();
	void Function_updateHavokCollisionFilter();
	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void STATIC_Function_PrecacheDamageComponents(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class UClass_Object_Field_Struct_State_Class* RookClass);
	void Function_ApplyDamage_ApplyDamage(class AClass_Object_Actor_Pawn* InstigatedBy, float Damage, const struct FName& teamLabel);
};


// Class Object.Actor.Pawn.Rook.MPActor
// 0x0058 (0x090C - 0x08B4)
class AClass_Object_Actor_Pawn_Rook_MPActor : public AClass_Object_Actor_Pawn_Rook
{
public:
	struct FString                                     localizedName;                                            // 0x08B4(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bAllowSpectators : 1;                                     // 0x08C0(0x0004) (Edit, NoClear)
	struct FString                                     primaryFriendlyObjectiveDesc;                             // 0x08C4(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     primaryEnemyObjectiveDesc;                                // 0x08D0(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     primaryNeutralObjectiveDesc;                              // 0x08DC(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Field_Struct_State_Class*      defendStat;                                               // 0x08E8(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      attackStat;                                               // 0x08EC(0x0004) (Edit, NoClear)
	int                                                defendRadius;                                             // 0x08F0(0x0004) (Edit, NoClear)
	int                                                attackRadius;                                             // 0x08F4(0x0004) (Edit, NoClear)
	struct FName                                       idleAnim;                                                 // 0x08F8(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      secondaryMessageClass;                                    // 0x08FC(0x0004) (Edit, NoClear)
	TArray<class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController*> spectatorList;                                            // 0x0900(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.MPActor");
		return ptr;
	}


	class AClass_Object_Actor_Pawn* Function_getViewTarget();
	void Function_resetSpectatorViewTarget();
	void Function_removeSpectator(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc);
	void Function_addSpectator(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc);
	void Function_setSpectatorViewTarget(class AClass_Object_Actor_Pawn* Target);
	void Function_onUnavailableToLattice();
	void Function_onAvailableToLattice();
	void Function_contractLattice(class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_expandLattice(class AClass_Object_Actor_Info_TeamInfo* t);
	struct FString Function_GetHumanReadableName_GetHumanReadableName_GetHumanReadableName();
	struct FName Function_getPersonalObjectiveName();
	struct FName Function_getUniqueObjectiveName();
	void Function_evaluateObjectiveState();
	void Function_setObjectiveTally(int Num, int Max);
	void Function_setObjectiveState(int i);
	void Function_addNeutralObjective(const struct FString& Desc, class AClass_Object_Actor* Other);
	void Function_addEnemyObjective(const struct FString& Desc, class AClass_Object_Actor* Other);
	void Function_addFriendlyObjective(const struct FString& Desc, class AClass_Object_Actor* Other);
	void Function_setPersonalObjective(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C, const struct FString& Desc, class AClass_Object_Actor* Other);
	void Function_removePersonalObjective(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	void Function_removeDefaultObjectives();
	void Function_addDefaultObjectives();
	void Function_onPlayerKilled(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Target);
	void Function_incrementStatAttempt(class UClass_Object_Field_Struct_State_Class* S, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Who);
	void Function_awardStat(class UClass_Object_Field_Struct_State_Class* S, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Who, class AClass_Object_Actor_Controller* Target, int Amount);
	void Function_scoreIndividual(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Who, int Amount);
	void Function_scoreTeam(int Amount, class AClass_Object_Actor_Info_TeamInfo* otherTeam);
	class AClass_Object_Actor_Pawn_Rook* Function_getNearest(class UClass_Object_Field_Struct_State_Class* Type, const struct FStruct_Vector& From, class AClass_Object_Actor_Info_TeamInfo* onlyTeam);
	void Function_registerStats(class AClass_Object_Actor_Info_StatTracker* tracker);
	void Function_cleanup();
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.MPActor.MPCarryable
// 0x01B0 (0x0ABC - 0x090C)
class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable : public AClass_Object_Actor_Pawn_Rook_MPActor
{
public:
	int                                                maxCarried;                                               // 0x090C(0x0004) (Edit, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> denominations;                                            // 0x0910(0x000C) (Edit, NeedCtorLink, NoClear)
	float                                              returnTime;                                               // 0x091C(0x0004) (Edit, NoClear)
	float                                              minRespawnTime;                                           // 0x0920(0x0004) (Edit, NoClear)
	float                                              maxRespawnTime;                                           // 0x0924(0x0004) (Edit, NoClear)
	float                                              existenceTime;                                            // 0x0928(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      hudIcon;                                                  // 0x092C(0x0004) (Edit, Config, NoClear)
	struct FStruct_MatCoords                           hudIconCoords;                                            // 0x0930(0x0010) (Edit, Config, NoClear)
	float                                              selfPickupTimeout;                                        // 0x0940(0x0004) (Edit, NoClear)
	int                                                stopSpeed;                                                // 0x0944(0x0004) (Edit, NoClear)
	float                                              Elasticity;                                               // 0x0948(0x0004) (Edit, NoClear)
	float                                              Spread;                                                   // 0x094C(0x0004) (Edit, NoClear)
	TEnumAsByte<EPhysics>                              droppedPhysics;                                           // 0x0950(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0951(0x0003) MISSED OFFSET
	unsigned long                                      bRandomizeStartingRotation : 1;                           // 0x0954(0x0004) (Edit, NoClear)
	float                                              maxTimeCarried;                                           // 0x0958(0x0004) (Edit, NoClear)
	float                                              damagePerSecondAfterMaxTimeCarried;                       // 0x095C(0x0004) (Edit, NoClear)
	TArray<struct FStruct_Vector>                      randomStartingLocations;                                  // 0x0960(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FName                                       attachmentSocket;                                         // 0x096C(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              offsetCOM;                                                // 0x0970(0x000C) (Edit, NoClear)
	unsigned long                                      bIsWeaponType : 1;                                        // 0x097C(0x0004) (Edit, NoClear)
	unsigned long                                      bAllowThroughEnergyBarriers : 1;                          // 0x097C(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_StaticMesh*          staticMeshWhileCarried;                                   // 0x0980(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_Mesh*                meshWhileCarried;                                         // 0x0984(0x0004) (Edit, NoClear)
	struct FName                                       carriedAnimation;                                         // 0x0988(0x0004) (Edit, NoClear)
	unsigned long                                      bCanBeGrappledInField : 1;                                // 0x098C(0x0004) (Edit, NoClear)
	unsigned long                                      bCanBeGrappledAtHome : 1;                                 // 0x098C(0x0004) (Edit, NoClear)
	unsigned long                                      bDontReplicateEffects : 1;                                // 0x098C(0x0004) (Edit, NoClear)
	unsigned long                                      bCanBringIntoVehicle : 1;                                 // 0x098C(0x0004) (Edit, NoClear)
	float                                              extraMass;                                                // 0x0990(0x0004) (Edit, NoClear)
	unsigned long                                      bBlockActorsWhenDropped : 1;                              // 0x0994(0x0004) (Edit, NoClear)
	float                                              inheritedVelocityFactor;                                  // 0x0998(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      CarryableMessageClass;                                    // 0x099C(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      pickupStat;                                               // 0x09A0(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      carrierKillStat;                                          // 0x09A4(0x0004) (Edit, NoClear)
	struct FName                                       pickupEffectEvent;                                        // 0x09A8(0x0004) (Edit, NoClear)
	struct FName                                       dropEffectEvent;                                          // 0x09AC(0x0004) (Edit, NoClear)
	struct FName                                       thrownEffectEvent;                                        // 0x09B0(0x0004) (Edit, NoClear)
	struct FName                                       returnedHomeEffectEvent;                                  // 0x09B4(0x0004) (Edit, NoClear)
	struct FName                                       preReturnEffectEvent;                                     // 0x09B8(0x0004) (Edit, NoClear)
	struct FName                                       carryingEffectEvent;                                      // 0x09BC(0x0004) (Edit, NoClear)
	struct FName                                       idlingEffectEvent;                                        // 0x09C0(0x0004) (Edit, NoClear)
	struct FName                                       throwingEffectEvent;                                      // 0x09C4(0x0004) (Edit, NoClear)
	struct FName                                       idlingHomeEffectEvent;                                    // 0x09C8(0x0004) (Edit, NoClear)
	int                                                numCarried;                                               // 0x09CC(0x0004)
	struct FStruct_Vector                              homeLocation;                                             // 0x09D0(0x000C)
	struct FStruct_Rotator                             homeRotation;                                             // 0x09DC(0x000C)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* carrier;                                                  // 0x09E8(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* lastCarrier;                                              // 0x09EC(0x0004)
	class AClass_Object_Actor_Controller*              carrierController;                                        // 0x09F0(0x0004)
	float                                              timeDropped;                                              // 0x09F4(0x0004) (Net)
	float                                              timePickedUp;                                             // 0x09F8(0x0004)
	unsigned long                                      bHome : 1;                                                // 0x09FC(0x0004)
	class AClass_Object_Actor_Timer*                   existenceTimer;                                           // 0x0A00(0x0004)
	unsigned long                                      bHotPotato : 1;                                           // 0x0A04(0x0004)
	class AClass_Object_Actor_Pawn_Rook_MPActor_MPArea_MPCarryableContainer* homeContainer;                                            // 0x0A08(0x0004)
	float                                              lastEnergyBarrierCollisionTime;                           // 0x0A0C(0x0004)
	float                                              timeBetweenEnergyBarrierCollisions;                       // 0x0A10(0x0004)
	struct FStruct_Rotator                             pickupRotation;                                           // 0x0A14(0x000C)
	unsigned long                                      bInitialization : 1;                                      // 0x0A20(0x0004)
	unsigned long                                      bCarriedEffect : 1;                                       // 0x0A20(0x0004) (Net)
	unsigned long                                      bLocalCarriedEffect : 1;                                  // 0x0A20(0x0004)
	unsigned long                                      bHomeEffect : 1;                                          // 0x0A20(0x0004) (Net)
	unsigned long                                      bPreReturnEffect : 1;                                     // 0x0A20(0x0004)
	unsigned long                                      bLocalPreReturnEffect : 1;                                // 0x0A20(0x0004)
	unsigned long                                      bLocalHomeEffect : 1;                                     // 0x0A20(0x0004)
	unsigned long                                      bThrowingEffect : 1;                                      // 0x0A20(0x0004) (Net)
	unsigned long                                      bLocalThrowingEffect : 1;                                 // 0x0A20(0x0004)
	unsigned long                                      bWasDropped : 1;                                          // 0x0A20(0x0004) (Net)
	unsigned long                                      bOldWasDropped : 1;                                       // 0x0A20(0x0004)
	class UClass_Object_Field_Struct_State_Class*      carriedObjectClass;                                       // 0x0A24(0x0004) (Edit, NoClear)
	float                                              maximumNetUpdateInterval;                                 // 0x0A28(0x0004) (Edit)
	float                                              minimumNetUpdateInterval;                                 // 0x0A2C(0x0004) (Edit)
	float                                              maximumNextNetUpdateTime;                                 // 0x0A30(0x0004)
	float                                              minimumNextNetUpdateTime;                                 // 0x0A34(0x0004)
	struct FStruct_HavokCarryableReplicationState      ReplicationState;                                         // 0x0A38(0x0038) (Net)
	float                                              lastStateReceiveTime;                                     // 0x0A70(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x0A74(0x0004)
	struct FStruct_DesiredHavokState                   currentDesiredHavokState;                                 // 0x0A78(0x0038)
	float                                              clientInterpolationPeriod;                                // 0x0AB0(0x0004) (Edit)
	float                                              clientInterpolationSnapDistance;                          // 0x0AB4(0x0004) (Edit)
	int                                                Padding;                                                  // 0x0AB8(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.MPActor.MPCarryable");
		return ptr;
	}


	void Function_unifiedSetMesh(class UClass_Object* M);
	class UClass_Object* STATIC_Function_getCarriedMesh();
	void Function_EnergyBarrierCollision();
	int Function_getMaxCarried();
	int Function_getNumCarryables();
	void Function_updateHavok();
	void Function_pushStateToClient();
	bool Function_needToPushStateToClient();
	void Function_Tick_Tick(float Delta);
	void Function_attachDenomination();
	void Function_attachToCarrier();
	struct FStruct_Vector Function_GetObjectiveLocation_GetObjectiveLocation();
	void Function_unsetup();
	void Function_BaseChange_BaseChange_BaseChange();
	bool Function_attemptPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, bool ignoreLastCarrierCheck);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_onGrappled(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_setCarrier(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_clearCarrier();
	bool Function_canCombineWith(class UClass_Object_Field_Struct_State_Class* targetClass);
	bool Function_validCarrier(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, bool ignoreLastCarrierCheck);
	bool Function_isReplicatedInstance();
	void Function_HitWall_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	void Function_existenceTimerExpired();
	void Function_toss();
	void Function_Drop(bool bSpread);
	void Function_returnToHome(bool bSignificant);
	void Function_onExistenceTimerExpired();
	void Function_onDropTimerExpired();
	void Function_onCarrierDeath(class AClass_Object_Actor_Controller* Killer);
	void Function_onCharacterPassedThrough(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_onDropped(class AClass_Object_Actor_Controller* C);
	void Function_onPickedUp(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	struct FStruct_Vector Function_chooseHomeLocation();
	void Function_registerStats_registerStats(class AClass_Object_Actor_Info_StatTracker* tracker);
	void Function_setMovementReplication(bool replicate);
	void Function_cleanup_cleanup();
	void Function_updateCarryableEffects();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_forceNetDirty();
};


// Class Object.Actor.Info
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info");
		return ptr;
	}


	bool STATIC_Function_AcceptPlayInfoProperty(const struct FString& PropertyName);
	void STATIC_Function_FillPlayInfo(class UClass_Object_PlayInfo* PlayInfo);
};


// Class Object.Actor.Info.BaseInfo
// 0x0064 (0x0464 - 0x0400)
class AClass_Object_Actor_Info_BaseInfo : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_TeamInfo*           Team;                                                     // 0x0400(0x0004) (Edit, Net, NoClear)
	TEnumAsByte<EenumBaseType>                         baseType;                                                 // 0x0404(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0408(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_SpawnArray* SpawnArray;                                               // 0x0414(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              SpawnArrayLocation;                                       // 0x0418(0x000C) (Net)
	class AClass_Object_Actor_Pawn_Rook_MPActor_MPArea_MPCarryableContainer* container;                                                // 0x0424(0x0004) (Edit, NoClear)
	TArray<class AClass_Object_Actor_Pawn_Rook_BaseDevice*> devices;                                                  // 0x0428(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor_Pawn_Rook_BaseDevice_PowerGenerator*> generators;                                               // 0x0434(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor_Info_PlayerStart_PlayerStart*> playerStarts;                                             // 0x0440(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor_StaticMeshActor_PowerIndicator*> powerIndicators;                                          // 0x044C(0x000C) (NeedCtorLink)
	unsigned long                                      bValidRespawnBase : 1;                                    // 0x0458(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           m_oldTeam;                                                // 0x045C(0x0004)
	unsigned long                                      m_bPowered : 1;                                           // 0x0460(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.BaseInfo");
		return ptr;
	}


	void Function_enumContainer(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Pawn_Rook_MPActor_MPArea_MPCarryableContainer*> A);
	struct FString Function_displayActorLabel(class AClass_Object_Actor* t);
	void Function_enumSpawnArray(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Pawn_Rook_BaseDevice_SpawnArray*>* S);
	void Function_enumTeamInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_TeamInfo*>* S);
	bool Function_isPowered();
	void Function_setPowered(bool bPowered);
	void Function_checkForPower();
	void Function_onTeamChanged();
	void Function_Tick_Tick(float Delta);
	void Function_Initialize();
};


// Class Object.RadarInfo
// 0x0098 (0x00C0 - 0x0028)
class UClass_Object_RadarInfo : public UClass_Object
{
public:
	TArray<struct FStruct_MaterialDef>                 radarIcons;                                               // 0x0028(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FStruct_MaterialDef>                 viewportIcons;                                            // 0x0034(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_MaterialDef                         UpIndicator;                                              // 0x0040(0x0024) (Edit, Config, NoClear, EditInline)
	struct FStruct_MaterialDef                         DownIndicator;                                            // 0x0064(0x0024) (Edit, Config, NoClear, EditInline)
	class UClass_Object_Field_Struct_State_Class*      relatedObjectClass;                                       // 0x0088(0x0004) (Edit, NoClear)
	struct FString                                     infoLabel;                                                // 0x008C(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FStruct_Vector                              markerOffset;                                             // 0x0098(0x000C) (Edit, NoClear)
	unsigned long                                      bOccluded : 1;                                            // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bRespectRange : 1;                                        // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bRespectZoom : 1;                                         // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bDisplayViewport : 1;                                     // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bDisplayRadar : 1;                                        // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bDisplayCommandMap : 1;                                   // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bShowHeightMarker : 1;                                    // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bNoSizeReduction : 1;                                     // 0x00A4(0x0004) (Edit, NoClear)
	unsigned long                                      bDisplayDistance : 1;                                     // 0x00A4(0x0004) (Edit, NoClear)
	TEnumAsByte<EColorType>                            colorType;                                                // 0x00A8(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	struct FStruct_Color                               friendlyColor;                                            // 0x00AC(0x0004) (Edit, NoClear)
	struct FStruct_Color                               enemyColor;                                               // 0x00B0(0x0004) (Edit, NoClear)
	struct FStruct_Color                               neutralColor;                                             // 0x00B4(0x0004) (Edit, NoClear)
	float                                              newDuration;                                              // 0x00B8(0x0004) (Edit, NoClear)
	float                                              deadDuration;                                             // 0x00BC(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo");
		return ptr;
	}

};


// Class Object.Actor.Equipment
// 0x0094 (0x0494 - 0x0400)
class AClass_Object_Actor_Equipment : public AClass_Object_Actor
{
public:
	unsigned long                                      bCanDrop : 1;                                             // 0x0400(0x0004) (Edit)
	float                                              droppedElasticity;                                        // 0x0404(0x0004) (Edit, NoClear)
	int                                                dropVelocity;                                             // 0x0408(0x0004) (Edit)
	struct FString                                     Prompt;                                                   // 0x040C(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     localizedName;                                            // 0x0418(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     infoString;                                               // 0x0424(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Material*                      inventoryIcon;                                            // 0x0430(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      hudIcon;                                                  // 0x0434(0x0004) (Edit, NoClear)
	struct FStruct_MatCoords                           hudIconCoords;                                            // 0x0438(0x0010) (Edit, NoClear)
	class UClass_Object_Material*                      hudRefireIcon;                                            // 0x0448(0x0004) (Edit, NoClear)
	struct FStruct_MatCoords                           hudRefireIconCoords;                                      // 0x044C(0x0010) (Edit, NoClear)
	class UClass_Object_Material*                      attentionFXMaterial;                                      // 0x045C(0x0004) (Edit, NoClear)
	float                                              attentionFXSpacing;                                       // 0x0460(0x0004) (Edit, NoClear)
	float                                              attentionFXDuration;                                      // 0x0464(0x0004) (Edit, NoClear)
	unsigned long                                      bCanPickup : 1;                                           // 0x0468(0x0004)
	unsigned long                                      bDropped : 1;                                             // 0x0468(0x0004) (Net)
	unsigned long                                      bHeld : 1;                                                // 0x0468(0x0004) (Net)
	class AClass_Object_Actor_Equipment*               Next;                                                     // 0x046C(0x0004) (Net)
	class AClass_Object_Actor_Equipment*               Prev;                                                     // 0x0470(0x0004) (Net)
	struct FName                                       heldStartState;                                           // 0x0474(0x0004)
	unsigned long                                      bPlayPickupSound : 1;                                     // 0x0478(0x0004)
	unsigned long                                      sensorUpdateFlag : 1;                                     // 0x0478(0x0004)
	float                                              nextAttentionTime;                                        // 0x047C(0x0004)
	float                                              attentionLeft;                                            // 0x0480(0x0004)
	class AClass_Object_Actor_EquipmentSpawnPoint*     spawnPoint;                                               // 0x0484(0x0004)
	TEnumAsByte<EPhysics>                              awaitingPickupPhysics;                                    // 0x0488(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0489(0x0003) MISSED OFFSET
	class AClass_Object_Actor_EquipmentPickupProxy*    pickupProxy;                                              // 0x048C(0x0004)
	float                                              pickupRadius;                                             // 0x0490(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment");
		return ptr;
	}


	void Function_onTakenFromSpawnPoint();
	bool Function_canExpire();
	class UClass_Object_Material* Function_GetOverlayMaterial_GetOverlayMaterial(int Index);
	void Function_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	void Function_setDropVelocity();
	void Function_setDropLocation();
	void Function_gotoHeldState();
	void Function_PickupProxyUntouch(class AClass_Object_Actor* Other);
	void Function_PickupProxyTouch(class AClass_Object_Actor* Other);
	void Function_equipmentGone();
	void Function_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	void Function_onPickup();
	bool Function_allowPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_needPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	void Function_requestEquipmentDrop();
	bool Function_isInNoDropRangeOfInventoryStation();
	void Function_setMovementReplication(bool replicate);
	void Function_doSwitch(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	void Function_Drop();
	void Function_endHeldByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* holder);
	void Function_startHeldByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* holder);
	void Function_PostNetReceive_PostNetReceive();
	void Function_TravelPreAccept_TravelPreAccept();
	void Function_removeDroppedEquipment();
	void Function_Destroyed_Destroyed();
};


// Class Object.Actor.Equipment.Equippable
// 0x00D8 (0x056C - 0x0494)
class AClass_Object_Actor_Equipment_Equippable : public AClass_Object_Actor_Equipment
{
public:
	class UClass_Object_Primitive_Mesh*                firstPersonMesh;                                          // 0x0494(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_Mesh*                thirdPersonMesh;                                          // 0x0498(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_Mesh*                firstPersonAltMesh;                                       // 0x049C(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_Mesh*                thirdPersonAltMesh;                                       // 0x04A0(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_StaticMesh*          thirdPersonStaticMesh;                                    // 0x04A4(0x0004) (Edit, NoClear)
	class UClass_Object_Primitive_StaticMesh*          thirdPersonAltStaticMesh;                                 // 0x04A8(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              thirdPersonAttachmentOffset;                              // 0x04AC(0x000C) (Edit, NoClear)
	struct FName                                       thirdPersonAttachmentBone;                                // 0x04B8(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              firstPersonOffset;                                        // 0x04BC(0x000C) (Edit, NoClear)
	struct FStruct_Vector                              firstPersonAltOffset;                                     // 0x04C8(0x000C) (Edit, NoClear)
	float                                              firstPersonBobMultiplier;                                 // 0x04D4(0x0004) (Edit, NoClear)
	float                                              firstPersonTraceLength;                                   // 0x04D8(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              firstPersonTraceExtent;                                   // 0x04DC(0x000C) (Edit)
	float                                              firstPersonAltTraceLength;                                // 0x04E8(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              firstPersonAltTraceExtent;                                // 0x04EC(0x000C) (Edit)
	unsigned long                                      bFirstPersonUseTrace : 1;                                 // 0x04F8(0x0004) (Edit, NoClear)
	struct FString                                     animPrefix;                                               // 0x04FC(0x000C) (Edit, NeedCtorLink, NoClear)
	unsigned long                                      automaticallyHold : 1;                                    // 0x0508(0x0004) (Edit, NoClear)
	float                                              firstPersonInterpStep;                                    // 0x050C(0x0004)
	float                                              firstPersonInterpTarget;                                  // 0x0510(0x0004)
	float                                              firstPersonInterpCurrent;                                 // 0x0514(0x0004)
	float                                              unequipDuration;                                          // 0x0518(0x0004) (Edit, NoClear)
	float                                              equipDuration;                                            // 0x051C(0x0004) (Edit, NoClear)
	class UClass_Object_IFiringMotor*                  rookMotor;                                                // 0x0520(0x0004)
	unsigned long                                      bMeshChangeOK : 1;                                        // 0x0524(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               rookOwner;                                                // 0x0528(0x0004) (Net)
	unsigned long                                      bIsFirstPerson : 1;                                       // 0x052C(0x0004)
	float                                              startEquippingTime;                                       // 0x0530(0x0004)
	unsigned char                                      fireCount;                                                // 0x0534(0x0001) (Net)
	unsigned char                                      localFireCount;                                           // 0x0535(0x0001)
	unsigned char                                      demoFireCount;                                            // 0x0536(0x0001) (Net)
	unsigned char                                      localDemoFireCount;                                       // 0x0537(0x0001)
	unsigned long                                      equipped : 1;                                             // 0x0538(0x0004) (Net)
	float                                              equipDurationCounter;                                     // 0x053C(0x0004)
	struct FStruct_Vector                              equippablePos;                                            // 0x0540(0x000C)
	struct FName                                       fireState;                                                // 0x054C(0x0004)
	struct FName                                       releaseFireState;                                         // 0x0550(0x0004)
	unsigned long                                      attemptedAttach : 1;                                      // 0x0554(0x0004)
	class UClass_Object_Field_Struct_State_Class*      animClass;                                                // 0x0558(0x0004) (Edit)
	struct FString                                     equippedArmAnim;                                          // 0x055C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bPlayedCharacterEquipAnim : 1;                            // 0x0568(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable");
		return ptr;
	}


	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void STATIC_Function_PrecacheEquippableRenderData(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class UClass_Object_Field_Struct_State_Class* EquipClass);
	void Function_setFirstPersonOffset(const struct FStruct_Vector& V);
	struct FStruct_Vector Function_getFirstPersonOffset();
	bool Function_shouldHide(bool bIsFirstPerson);
	void Function_drawDebug(class AClass_Object_Actor_HUD* debugHUD);
	void Function_setDroppedMesh();
	void Function_playUnequipAnim();
	void Function_playEquipAnim();
	bool Function_shouldPlayEquipAnim();
	void Function_playIdleAnim();
	void Function_equip();
	void Function_unEquip();
	bool Function_canUnequip();
	bool Function_handleReleaseFire();
	bool Function_handleFire();
	bool Function_sendServerRequestReleaseFire();
	bool Function_sendServerRequestFire();
	bool Function_releaseFire(bool bClientOnly);
	bool Function_Fire(bool _fireOnce);
	void Function_onThirdPersonFireCount();
	void Function_checkFireCount();
	void Function_attachWeaponHack();
	void Function_Tick_Tick(float DeltaTime);
	void Function_calculateInterpolation();
	void Function_setupThirdPerson();
	void Function_moveWeapon();
	void Function_setupFirstPerson();
	bool Function_useAlternateMesh();
	bool Function_firstPersonStatus();
	void Function_selectMesh(bool bForceChange);
	bool Function_armsFirstPersonStatus(bool bNewIsFirstPerson);
	bool Function_keepArms();
	void Function_pickup_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	void Function_setMovementReplication_setMovementReplication(bool replicate);
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void Function_initialiseRookMotor();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Deployable
// 0x0068 (0x05D4 - 0x056C)
class AClass_Object_Actor_Equipment_Equippable_Deployable : public AClass_Object_Actor_Equipment_Equippable
{
public:
	float                                              deployRange;                                              // 0x056C(0x0004) (Edit, NoClear)
	unsigned long                                      bCanDeployOnWall : 1;                                     // 0x0570(0x0004) (Edit, NoClear)
	float                                              exclusiveRange;                                           // 0x0574(0x0004) (Edit, NoClear)
	unsigned long                                      bCanBeStolen : 1;                                         // 0x0578(0x0004) (Edit, NoClear)
	unsigned long                                      bDeployed : 1;                                            // 0x0578(0x0004) (Net)
	unsigned long                                      bIsInStation : 1;                                         // 0x0578(0x0004) (Net)
	class AClass_Object_Actor_Info_TeamInfo*           Team;                                                     // 0x057C(0x0004)
	unsigned long                                      bDeploying : 1;                                           // 0x0580(0x0004)
	class UClass_Object_Material*                      hudReticuleOk;                                            // 0x0584(0x0004) (Edit, NoClear)
	float                                              hudReticuleOkWidth;                                       // 0x0588(0x0004) (Edit, NoClear)
	float                                              hudReticuleOkHeight;                                      // 0x058C(0x0004) (Edit, NoClear)
	float                                              hudReticuleOkCenterX;                                     // 0x0590(0x0004) (Edit, NoClear)
	float                                              hudReticuleOkCenterY;                                     // 0x0594(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      hudReticuleBad;                                           // 0x0598(0x0004) (Edit, NoClear)
	float                                              hudReticuleBadWidth;                                      // 0x059C(0x0004) (Edit, NoClear)
	float                                              hudReticuleBadHeight;                                     // 0x05A0(0x0004) (Edit, NoClear)
	float                                              hudReticuleBadCenterX;                                    // 0x05A4(0x0004) (Edit, NoClear)
	float                                              hudReticuleBadCenterY;                                    // 0x05A8(0x0004) (Edit, NoClear)
	struct FStruct_Rotator                             deployRotOffset;                                          // 0x05AC(0x000C) (Edit, NoClear)
	struct FName                                       thirdPersonInventoryAttachmentBone;                       // 0x05B8(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              thirdPersonInventoryAttachmentOffset;                     // 0x05BC(0x000C) (Edit, NoClear)
	struct FName                                       originalAttachmentBone;                                   // 0x05C8(0x0004)
	struct FName                                       deployedQuickChatTag;                                     // 0x05CC(0x0004) (Edit, NoClear)
	TEnumAsByte<EeDeployableInfo>                      lastTestResult;                                           // 0x05D0(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05D1(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable");
		return ptr;
	}


	bool Function_Fire_Fire(bool _fireOnce);
	void Function_updateAttachmentStatus(bool bForce);
	void Function_Tick_Tick_Tick(float Delta);
	bool Function_needPrompt_needPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	TEnumAsByte<EeDeployableInfo> Function_doDeploy(bool bTest);
	bool Function_EncroachingOn_EncroachingOn(class AClass_Object_Actor* Other);
	TEnumAsByte<EeDeployableInfo> Function_testDeploy();
	bool Function_canPickup_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_armsFirstPersonStatus_armsFirstPersonStatus(bool bNewIsFirstPerson);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
};


// Class Object.Loadout
// 0x0030 (0x0058 - 0x0028)
class UClass_Object_Loadout : public UClass_Object
{
public:
	class UClass_Object_Field_Struct_State_Class*      packClass;                                                // 0x0028(0x0004) (Edit, Config, NoClear)
	TArray<struct FStruct_DeployableInfo>              deployableList;                                           // 0x002C(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FStruct_WeaponInfo>                  weaponList;                                               // 0x0038(0x000C) (Edit, Config, NeedCtorLink, EditInline)
	struct FStruct_GrenadeInfo                         grenades;                                                 // 0x0044(0x0008) (Edit, Config, EditInline)
	TArray<struct FStruct_ConsumableInfo>              consumableList;                                           // 0x004C(0x000C) (Edit, Config, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Loadout");
		return ptr;
	}


	bool Function_equip(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	bool Function_IsValid(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, class UClass_Object_Armor* A);
};


// Class Object.Loadout.CustomPlayerLoadout
// 0x0028 (0x0080 - 0x0058)
class UClass_Object_Loadout_CustomPlayerLoadout : public UClass_Object_Loadout
{
public:
	class UClass_Object_Field_Struct_State_Class*      combatRoleClass;                                          // 0x0058(0x0004) (Config)
	struct FString                                     userSkinPath;                                             // 0x005C(0x000C) (Config, NeedCtorLink)
	struct FString                                     loadoutName;                                              // 0x0068(0x000C) (Config, NeedCtorLink)
	TArray<struct FStruct_SkinPreferenceMapping>       skinPreferences;                                          // 0x0074(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Loadout.CustomPlayerLoadout");
		return ptr;
	}


	struct FString STATIC_Function_GetSkinPreference(TArray<struct FStruct_SkinPreferenceMapping> skinPreferences, class UClass_Object_Primitive_Mesh* Mesh);
	void STATIC_Function_SetSkinPreference(class UClass_Object_Primitive_Mesh* Mesh, const struct FString& skinPath, TArray<struct FStruct_SkinPreferenceMapping>* skinPreferences);
	bool Function_equip_equip(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	bool Function_IsValid_IsValid(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, class UClass_Object_Armor* A);
};


// Class Object.Actor.Motor
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Motor : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon
// 0x0090 (0x05FC - 0x056C)
class AClass_Object_Actor_Equipment_Equippable_Weapon : public AClass_Object_Actor_Equipment_Equippable
{
public:
	int                                                ammoCount;                                                // 0x056C(0x0004) (Edit, Net, NoClear)
	int                                                ammoUsage;                                                // 0x0570(0x0004) (Edit, NoClear)
	float                                              roundsPerSecond;                                          // 0x0574(0x0004) (Edit, NoClear)
	unsigned long                                      bNeedIdleFX : 1;                                          // 0x0578(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      projectileClass;                                          // 0x057C(0x0004) (Edit, NoClear)
	struct FName                                       projectileSpawnBone;                                      // 0x0580(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              projectileSpawnOffset;                                    // 0x0584(0x000C)
	float                                              projectileVelocity;                                       // 0x0590(0x0004) (Edit, NoClear)
	float                                              projectileInheritedVelFactor;                             // 0x0594(0x0004) (Edit, NoClear)
	TArray<class UClass_Object_Material*>              emptyMaterials;                                           // 0x0598(0x000C) (Edit, NeedCtorLink, EditInline, EditInlineUse)
	class UClass_Object_Field_Struct_State_Class*      aimClass;                                                 // 0x05A4(0x0004)
	struct FStruct_Rotator                             AIspread;                                                 // 0x05A8(0x000C)
	float                                              AIAccelerationModifier;                                   // 0x05B4(0x0004)
	unsigned long                                      bGenerateMissSpeechEvents : 1;                            // 0x05B8(0x0004)
	class UClass_Object_Material*                      hudReticule;                                              // 0x05BC(0x0004) (Edit, Config, NoClear)
	float                                              hudReticuleWidth;                                         // 0x05C0(0x0004) (Edit, Config, NoClear)
	float                                              hudReticuleHeight;                                        // 0x05C4(0x0004) (Edit, Config, NoClear)
	float                                              hudReticuleCenterX;                                       // 0x05C8(0x0004) (Edit, Config, NoClear)
	float                                              hudReticuleCenterY;                                       // 0x05CC(0x0004) (Edit, Config, NoClear)
	float                                              lastFireTime;                                             // 0x05D0(0x0004)
	float                                              startEquippingTime;                                       // 0x05D4(0x0004)
	unsigned long                                      fireOnce : 1;                                             // 0x05D8(0x0004)
	unsigned long                                      bFiredWeapon : 1;                                         // 0x05D8(0x0004)
	unsigned long                                      noAmmo : 1;                                               // 0x05D8(0x0004)
	struct FName                                       fireAnimation;                                            // 0x05DC(0x0004)
	unsigned long                                      bMelee : 1;                                               // 0x05E0(0x0004) (Edit)
	struct FString                                     fireAnimSubString;                                        // 0x05E4(0x000C) (Edit, NeedCtorLink)
	int                                                localAmmoCount;                                           // 0x05F0(0x0004)
	float                                              speedPackScale;                                           // 0x05F4(0x0004)
	unsigned long                                      pickupDelay : 1;                                          // 0x05F8(0x0004) (Net)
	unsigned long                                      localPickupDelay : 1;                                     // 0x05F8(0x0004)
	unsigned long                                      bBeingSwitched : 1;                                       // 0x05F8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon");
		return ptr;
	}


	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void STATIC_Function_PrecacheWeaponRenderData(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class UClass_Object_Field_Struct_State_Class* weaponClass);
	bool Function_willHurtFriendly(const struct FStruct_Vector& HitLocation, float timeToHit, bool bDoObstacleCheck);
	float Function_getPredictedProjectileGravity();
	void Function_drawDebug_drawDebug(class AClass_Object_Actor_HUD* debugHUD);
	float Function_GetProjectileSpreadScale();
	void Function_playUnequipAnim_playUnequipAnim();
	void Function_playEquipAnim_playEquipAnim();
	void Function_droppedByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_heldByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_playPostFireAnim();
	void Function_firedEffectProcessing();
	void Function_FireWeapon();
	void Function_playCharacterFireAnim();
	struct FStruct_Rotator Function_getAimAdjustedViewRotation(class AClass_Object_Actor_Controller_PlayerController* PC, const struct FStruct_Vector& fireLoc);
	struct FStruct_Rotator Function_getAimRotation(const struct FStruct_Vector& fireLoc);
	class AClass_Object_Actor* Function_AIAimTrace(const struct FStruct_Vector& TraceStart, const struct FStruct_Vector& TraceEnd, struct FStruct_Vector* HitLocation, struct FStruct_Vector* HitNormal);
	void Function_aimTrace(const struct FStruct_Vector& TraceStart, const struct FStruct_Vector& traceDirection, struct FStruct_Vector* HitLocation);
	void Function_playIdleAnim_playIdleAnim();
	class AClass_Object_Actor_Projectile* Function_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_initialiseVelocity(class AClass_Object_Actor_Projectile* p, const struct FStruct_Vector& InitialVelocity);
	struct FStruct_Vector Function_calcProjectileSpawnLocation(const struct FStruct_Rotator& fireRot);
	bool Function_releaseAltFire();
	bool Function_AltFire(bool _fireOnce);
	bool Function_Fire_Fire(bool _fireOnce);
	void Function_onThirdPersonFireCount_onThirdPersonFireCount();
	void Function_removeSpeedPackScale();
	void Function_addSpeedPackScale(float Scale);
	bool Function_fireRatePassed();
	void Function_pickup_pickup_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	bool Function_allowPrompt_allowPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_needPrompt_needPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_canPickup_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_canFire();
	bool Function_hasAmmo();
	void Function_setOutOfAmmo();
	void Function_setHasAmmoSkins();
	void Function_useAmmo();
	int Function_getMaxAmmo();
	int Function_increaseAmmo(int quantity);
	void Function_doSwitch_doSwitch(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	bool Function_canExpire_canExpire();
	void Function_requestEquipmentDrop_requestEquipmentDrop();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_applyPickupDelay();
	void Function_setupFirstPerson_setupFirstPerson();
	void Function_extractFirstPersonMeshData();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_Destroyed_Destroyed_Destroyed();
	bool Function_TriggerWeaponEffect(const struct FName& EffectEvent);
};


// Class Object.Actor.Pawn.Rook.BaseDevice
// 0x0054 (0x0908 - 0x08B4)
class AClass_Object_Actor_Pawn_Rook_BaseDevice : public AClass_Object_Actor_Pawn_Rook
{
public:
	class AClass_Object_Actor_Info_BaseInfo*           ownerBase;                                                // 0x08B4(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      DestroyedDiffuse;                                         // 0x08B8(0x0004) (Edit, NoClear)
	float                                              functionalHealthThreshold;                                // 0x08BC(0x0004) (Edit, NoClear)
	float                                              damagedHealthThreshold;                                   // 0x08C0(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      destroyedExplosionClass;                                  // 0x08C4(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      baseDeviceMessageClass;                                   // 0x08C8(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      secondaryBaseDeviceMessageClass;                          // 0x08CC(0x0004) (Edit, NoClear)
	struct FString                                     localizedName;                                            // 0x08D0(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	unsigned long                                      bInitialization : 1;                                      // 0x08DC(0x0004)
	unsigned long                                      bPowered : 1;                                             // 0x08DC(0x0004) (Net)
	unsigned long                                      m_bSwitchedOn : 1;                                        // 0x08DC(0x0004)
	unsigned long                                      bWasDeployed : 1;                                         // 0x08DC(0x0004) (Net)
	unsigned long                                      bCurrentlyDeploying : 1;                                  // 0x08DC(0x0004) (Net)
	unsigned long                                      bHasOpenAnim : 1;                                         // 0x08DC(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* deployer;                                                 // 0x08E0(0x0004)
	int                                                m_ownershipMaterialIdx;                                   // 0x08E4(0x0004)
	int                                                lastUnderAttackTime;                                      // 0x08E8(0x0004)
	int                                                lastOfflineTime;                                          // 0x08EC(0x0004)
	int                                                lastOnlineTime;                                           // 0x08F0(0x0004)
	class AClass_Object_Actor_Pawn*                    lastAttacker;                                             // 0x08F4(0x0004)
	struct FName                                       savedAnim;                                                // 0x08F8(0x0004)
	unsigned long                                      bLoopSavedAnim : 1;                                       // 0x08FC(0x0004)
	int                                                OWNERSHIP_MATERIAL_UNDISCOVERED;                          // 0x0900(0x0004) (Const)
	int                                                OWNERSHIP_MATERIAL_NOT_FOUND;                             // 0x0904(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice");
		return ptr;
	}


	void Function_setSwitchedOn(bool B);
	void Function_setHasPower(bool B);
	bool Function_isPowered();
	void Function_onTeamChange_onTeamChange();
	void Function_PlayDamagedDegeneratingEffects();
	void Function_PlayDamagedExitedEffects();
	void Function_PlayDamagedEnteredEffects();
	void Function_latentExecuteInitialization();
	void Function_latentExecuteActive();
	void Function_latentBeginActive();
	bool Function_isOpenedAnimPlaying(const struct FName& animName);
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	float Function_getTeamDamagePercentage_getTeamDamagePercentage();
	void Function_unifiedAddImpulseAtPosition_unifiedAddImpulseAtPosition(const struct FStruct_Vector& Impulse, const struct FStruct_Vector& Position);
	void Function_Died_Died_Died(class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_dispatchDeathMessage(class AClass_Object_Actor_Controller* Killer);
	void Function_enumBaseInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_BaseInfo*> A);
	bool Function_isFunctional();
	bool Function_isDisabled();
	bool Function_isDamaged();
	bool Function_isDamagedAtThreshold();
	bool Function_isActive();
	bool Function_isAlive_isAlive();
	struct FString Function_GetHumanReadableName_GetHumanReadableName_GetHumanReadableName();
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* CharacterUser);
	void Function_ClassConstruct_ClassConstruct_ClassConstruct_ClassConstruct();
	float Function_GetDamageComponentThresholdRange_GetDamageComponentThresholdRange();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_construct_BoolCharacterTeamInfoVectorRotator(bool _bWasDeployed, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* _deployer, class AClass_Object_Actor_Info_TeamInfo* Team, const struct FStruct_Vector& Loc, const struct FStruct_Rotator& Rot);
	void Function_PostLoadGame_PostLoadGame_PostLoadGame();
	void Function_LoopBDAnim(const struct FName& Sequence);
	void Function_PlayBDAnim(const struct FName& Sequence);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.VehicleSpawnPoint
// 0x0050 (0x0958 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_VehicleSpawnPoint : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	class UClass_Object_Field_Struct_State_Class*      VehicleClass;                                             // 0x0908(0x0004) (Edit)
	float                                              spawnDuration;                                            // 0x090C(0x0004) (Edit)
	float                                              abandonmentDesturctionStartRadius;                        // 0x0910(0x0004) (Edit)
	float                                              abandonmentDesturctionPeriod;                             // 0x0914(0x0004) (Edit)
	float                                              spawnOffsetHeight;                                        // 0x0918(0x0004) (Edit)
	unsigned long                                      bAllowSpawnedVehicleStealing : 1;                         // 0x091C(0x0004) (Edit)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       spawnedVehicle;                                           // 0x0920(0x0004) (Net)
	float                                              spawnStartTime;                                           // 0x0924(0x0004)
	int                                                Index;                                                    // 0x0928(0x0004)
	struct FStruct_Vector                              direction;                                                // 0x092C(0x000C)
	float                                              spawnAnimationLength;                                     // 0x0938(0x0004)
	struct FName                                       AnimationName;                                            // 0x093C(0x0004)
	float                                              dummy;                                                    // 0x0940(0x0004)
	struct FStruct_Vector                              spawnOffset;                                              // 0x0944(0x000C)
	struct FName                                       localAnimationName;                                       // 0x0950(0x0004)
	unsigned long                                      bTearOffAnimation : 1;                                    // 0x0954(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.VehicleSpawnPoint");
		return ptr;
	}


	void Function_postSpawnVehicle();
	void Function_preSpawnVehicle();
	void Function_onTeamChange_onTeamChange_onTeamChange();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_Tick_Tick(float DeltaSeconds);
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_spawnVehicle(const struct FStruct_Vector& SpawnLocation, const struct FStruct_Rotator& SpawnRotation);
};


// Class Object.Actor.Motor.VehicleMotor
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_Motor_VehicleMotor : public AClass_Object_Actor_Motor
{
public:
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       Vehicle;                                                  // 0x0400(0x0004)
	struct FStruct_Vector                              currentSteering;                                          // 0x0404(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor");
		return ptr;
	}


	void Function_displayWorldSpaceDebug(class AClass_Object_Actor_HUD* displayHUD);
	void Function_driveVehicle(float InForward, float InStrafe, const struct FStruct_Rotator& directionRotation, bool inThrust, bool inDive);
	void Function_Construct_ActorNameVectorRotator_Construct_ActorNameVectorRotator(class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
};


// Class Object.Actor.Motor.VehicleMotor.CarMotor
// 0x0004 (0x0414 - 0x0410)
class AClass_Object_Actor_Motor_VehicleMotor_CarMotor : public AClass_Object_Actor_Motor_VehicleMotor
{
public:
	class AClass_Object_Actor_Pawn_Rook_Vehicle_Car*   Car;                                                      // 0x0410(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor.CarMotor");
		return ptr;
	}


	void Function_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.Motor.VehicleMotor.AircraftMotor
// 0x0004 (0x0414 - 0x0410)
class AClass_Object_Actor_Motor_VehicleMotor_AircraftMotor : public AClass_Object_Actor_Motor_VehicleMotor
{
public:
	class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft* aircraft;                                                 // 0x0410(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor.AircraftMotor");
		return ptr;
	}


	void Function_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.Motor.VehicleMotor.AircraftMotor.PodMotor
// 0x0000 (0x0414 - 0x0414)
class AClass_Object_Actor_Motor_VehicleMotor_AircraftMotor_PodMotor : public AClass_Object_Actor_Motor_VehicleMotor_AircraftMotor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor.AircraftMotor.PodMotor");
		return ptr;
	}

};


// Class Object.Actor.Motor.VehicleMotor.CarMotor.BuggyMotor
// 0x0000 (0x0414 - 0x0414)
class AClass_Object_Actor_Motor_VehicleMotor_CarMotor_BuggyMotor : public AClass_Object_Actor_Motor_VehicleMotor_CarMotor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor.CarMotor.BuggyMotor");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon");
		return ptr;
	}


	void Function_onThirdPersonFireCount_onThirdPersonFireCount_onThirdPersonFireCount();
};


// Class Object.Actor.Motor.TurretMotor
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_Motor_TurretMotor : public AClass_Object_Actor_Motor
{
public:
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Turret;                                                   // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.TurretMotor");
		return ptr;
	}


	void Function_doCustomFiredEffectProcessing();
	bool Function_customFiredEffectProcessing();
	class AClass_Object_Actor* Function_getEffectsBaseActor();
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Function_getWeapon();
	class AClass_Object_Actor_Pawn_Rook* Function_getPhysicalAttachment();
	void Function_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
	struct FStruct_Rotator Function_getFirstPersonEquippableRotation(class AClass_Object_Actor_Equipment_Equippable* subject);
	struct FStruct_Vector Function_getFirstPersonEquippableLocation(class AClass_Object_Actor_Equipment_Equippable* subject);
	void Function_getAlternateAimAdjustStart(const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* newAimAdjustStart);
	void Function_useEnergy(float Amount);
	float Function_getEnergy();
	void Function_onShotFiredNotification();
	struct FStruct_Vector Function_getProjectileSpawnLocation();
	void Function_setFirePressed(class AClass_Object_Actor_Equipment_Equippable* E, bool Pressed);
	bool Function_shouldFire(class AClass_Object_Actor_Equipment_Equippable* E);
	void Function_releaseFire();
	void Function_releaseAltFire();
	void Function_AltFire(bool fireOnce);
	void Function_Fire(bool fireOnce);
	void Function_SetViewRotation(const struct FStruct_Rotator& R);
	bool Function_aimAdjustViewRotation();
	struct FStruct_Rotator Function_GetViewRotation();
	struct FStruct_Rotator Function_getViewTarget();
	void Function_SetViewTarget(const struct FStruct_Rotator& R);
	void Function_setZoomed(bool bZoomed);
	void Function_Construct_ActorNameVectorRotator_Construct_ActorNameVectorRotator(class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.Turret
// 0x008C (0x0994 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	class AClass_Object_Actor_Motor_TurretMotor*       Motor;                                                    // 0x0908(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Driver;                                                   // 0x090C(0x0004) (Net)
	unsigned long                                      bGetOut : 1;                                              // 0x0910(0x0004)
	struct FStruct_Rotator                             initialRotation;                                          // 0x0914(0x000C) (Net)
	float                                              currentPitch;                                             // 0x0920(0x0004)
	float                                              currentYaw;                                               // 0x0924(0x0004)
	int                                                targetPitch;                                              // 0x0928(0x0004) (Net)
	int                                                targetYaw;                                                // 0x092C(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      weaponClass;                                              // 0x0930(0x0004) (Edit)
	struct FName                                       driverAnimation;                                          // 0x0934(0x0004) (Edit, NoClear)
	unsigned long                                      bCanBeManned : 1;                                         // 0x0938(0x0004) (Edit, NoClear)
	int                                                seatedCollisionHeight;                                    // 0x093C(0x0004) (Edit, NoClear)
	int                                                seatedCollisionRadius;                                    // 0x0940(0x0004) (Edit, NoClear)
	float                                              MaxViewPitch;                                             // 0x0944(0x0004) (Edit, NoClear)
	float                                              MaxViewYaw;                                               // 0x0948(0x0004) (Edit, NoClear)
	float                                              ViewRate;                                                 // 0x094C(0x0004) (Edit, NoClear)
	float                                              AIViewRate;                                               // 0x0950(0x0004) (Edit, NoClear)
	struct FName                                       rootBone;                                                 // 0x0954(0x0004) (Edit)
	struct FName                                       seatBone;                                                 // 0x0958(0x0004) (Edit)
	struct FName                                       pitchBone;                                                // 0x095C(0x0004) (Edit)
	int                                                yawOffset;                                                // 0x0960(0x0004) (Edit, NoClear)
	int                                                yawAxis;                                                  // 0x0964(0x0004) (Edit, NoClear)
	int                                                pitchAxis;                                                // 0x0968(0x0004) (Edit, NoClear)
	unsigned long                                      bFlipYawDisplay : 1;                                      // 0x096C(0x0004) (Edit, NoClear)
	unsigned long                                      bFlipPitchDisplay : 1;                                    // 0x096C(0x0004) (Edit, NoClear)
	int                                                oldCollisionHeight;                                       // 0x0970(0x0004)
	int                                                oldCollisionRadius;                                       // 0x0974(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon;                                                   // 0x0978(0x0004) (Net)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* oldDriverWeapon;                                          // 0x097C(0x0004)
	unsigned long                                      bWasBehindView : 1;                                       // 0x0980(0x0004)
	struct FStruct_TurretEntryData                     Entry;                                                    // 0x0984(0x000C) (Edit)
	class AClass_Object_Actor_UseableObject_TurretEntry* TurretEntry;                                              // 0x0990(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.Turret");
		return ptr;
	}


	float Function_getViewRate();
	void Function_onTeamChange_onTeamChange_onTeamChange();
	void Function_updateAim(float DeltaSeconds);
	bool Function_TryToControl(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* p);
	void Function_updateModelRotation();
	void Function_overrideCurrentRotation(const struct FStruct_Rotator& NewRotation);
	bool Function_canTargetPoint(const struct FStruct_Vector& targetLoc);
	void Function_ClientDriverLeave(class AClass_Object_Actor_Controller* C, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Driver, float finalPitch, float finalYaw);
	bool Function_DriverLeave(bool bForceLeave);
	void Function_DriverEnter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* p);
	void Function_ClientDriverEnter(class AClass_Object_Actor_Controller* C, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Driver);
	void Function_Tick_Tick(float DeltaSeconds);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_rematchGoals_rematchGoals();
	bool Function_cleanupAI_cleanupAI();
	void Function_initTurretAI();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getControllingCharacter_getControllingCharacter();
	class UClass_Object_IFiringMotor* Function_firingMotor_firingMotor();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostLoadGame_PostLoadGame_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.TeamInfo
// 0x01F8 (0x05F8 - 0x0400)
class AClass_Object_Actor_Info_TeamInfo : public AClass_Object_Actor_Info
{
public:
	TArray<struct FStruct_RoleData>                    combatRoleData;                                           // 0x0400(0x000C) (Edit, NeedCtorLink)
	struct FString                                     localizedName;                                            // 0x040C(0x000C) (Edit, Localized, NeedCtorLink)
	class UClass_Object_Material*                      ownershipMaterial;                                        // 0x0418(0x0004) (Edit, Net, NoClear)
	class UClass_Object_Material*                      baseDeviceIllumMaterial;                                  // 0x041C(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      altOwnershipMaterial;                                     // 0x0420(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      altBaseDeviceIllumMaterial;                               // 0x0424(0x0004) (Edit, NoClear)
	struct FStruct_Color                               territoryTendrilColor;                                    // 0x0428(0x0004) (Edit, NoClear)
	float                                              objectivesUpdateRate;                                     // 0x042C(0x0004)
	class AClass_Object_Actor_Info_ObjectivesList*     objectives;                                               // 0x0430(0x0004) (Net)
	int                                                Score;                                                    // 0x0434(0x0004) (Net)
	unsigned long                                      bWonLastRound : 1;                                        // 0x0438(0x0004) (Net)
	int                                                MAX_BASES;                                                // 0x043C(0x0004) (Const)
	TArray<class AClass_Object_Actor_Info_BaseInfo*>   bases;                                                    // 0x0440(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Info_BaseInfo*           respawnBases[0xA];                                        // 0x044C(0x0004) (Net)
	struct FString                                     respawnBaseNames[0xA];                                    // 0x0474(0x000C) (NeedCtorLink)
	struct FStruct_Vector                              respawnBaseLocations[0xA];                                // 0x04EC(0x000C)
	int                                                MAX_RESPAWN_VEHICLES;                                     // 0x0564(0x0004) (Const)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       respawnVehicles[0xA];                                     // 0x0568(0x0004) (Net)
	TArray<class AClass_Object_Actor_Pawn_Rook_BaseDevice_SensorTower*> sensorGrid;                                               // 0x0590(0x000C) (NeedCtorLink)
	float                                              sensorGridRate;                                           // 0x059C(0x0004) (Edit, Net)
	float                                              LastUpdateTime;                                           // 0x05A0(0x0004)
	TArray<class AClass_Object_Actor_Pawn_Rook*>       detectedEnemies;                                          // 0x05A4(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor_Pawn_Rook*>       detectedFriendlies;                                       // 0x05B0(0x000C) (NeedCtorLink)
	unsigned long                                      bSensorGridFunctional : 1;                                // 0x05BC(0x0004) (Net)
	int                                                numPlayerStarts;                                          // 0x05C0(0x0004)
	class UClass_Object_Material*                      buggySkin;                                                // 0x05C4(0x0004) (Edit)
	class UClass_Object_Material*                      podSkin;                                                  // 0x05C8(0x0004) (Edit)
	class UClass_Object_Material*                      tankSkin;                                                 // 0x05CC(0x0004) (Edit)
	class UClass_Object_Material*                      assaultShipSkin;                                          // 0x05D0(0x0004) (Edit)
	class AClass_Object_Actor_Info_TeamInfo*           onlyDamagedByTeam;                                        // 0x05D4(0x0004) (Edit, NoClear)
	unsigned long                                      bNoMoreCarryables : 1;                                    // 0x05D8(0x0004) (Net)
	struct FStruct_Color                               TeamColor;                                                // 0x05DC(0x0004) (Edit)
	struct FStruct_Color                               TeamHighlightColor;                                       // 0x05E0(0x0004) (Edit)
	struct FStruct_Color                               relativeFriendlyTeamColor;                                // 0x05E4(0x0004) (Edit)
	struct FStruct_Color                               relativeFriendlyHighlightColor;                           // 0x05E8(0x0004) (Edit)
	struct FStruct_Color                               relativeEnemyTeamColor;                                   // 0x05EC(0x0004) (Edit)
	struct FStruct_Color                               relativeEnemyHighlightColor;                              // 0x05F0(0x0004) (Edit)
	int                                                TeamIndex;                                                // 0x05F4(0x0004) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.TeamInfo");
		return ptr;
	}


	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	int Function_numTotalLives();
	int Function_numActivePlayers();
	int Function_NumPlayers();
	int Function_getNumRespawnBases();
	bool Function_validRespawnBaseIndex(int Index);
	void Function_removeBase(class AClass_Object_Actor_Info_BaseInfo* Base);
	void Function_addBase(class AClass_Object_Actor_Info_BaseInfo* Base);
	int Function_getNumVehicleRespawns();
	bool Function_validVehicleRespawnIndex(int Index);
	void Function_removeVehicleRespawn(class AClass_Object_Actor_Pawn_Rook_Vehicle* respawnVehicle);
	void Function_addVehicleRespawn(class AClass_Object_Actor_Pawn_Rook_Vehicle* respawnVehicle);
	void Function_updateTeamMemberSensorInfo(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc);
	void Function_updateSensors();
	bool Function_isFriendlyRook(class AClass_Object_Actor_Pawn_Rook* R);
	bool Function_sensorIsFriendlyRook(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_tickSensors();
	bool Function_sensorGridFunctional();
	void Function_removeTeamSensorSensorTower(class AClass_Object_Actor_Pawn_Rook_BaseDevice_SensorTower* oldTeamSensor);
	void Function_addTeamSensor(class AClass_Object_Actor_Pawn_Rook_BaseDevice_SensorTower* newTeamSensor);
	void Function_Tick_Tick(float Delta);
	class UClass_Object_Material* Function_GetArmorIconForRole(class UClass_Object_Field_Struct_State_Class* C);
	class UClass_Object_Primitive_Mesh* Function_getArmsMeshForRole(class UClass_Object_Field_Struct_State_Class* C);
	class AClass_Object_Actor_jetpack* Function_getJetpackForRole(class AClass_Object_Actor* ownerActor, class UClass_Object_Field_Struct_State_Class* C, bool bIsFemale);
	class UClass_Object_Primitive_Mesh* Function_getMeshForRole(class UClass_Object_Field_Struct_State_Class* C, bool bIsFemale);
	bool Function_IsFriendly(class AClass_Object_Actor_Info_TeamInfo* t);
	struct FString Function_GetHumanReadableName_GetHumanReadableName();
	void Function_evaluatePlayerStarts();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.SkinInfo
// 0x0028 (0x0428 - 0x0400)
class AClass_Object_Actor_Info_SkinInfo : public AClass_Object_Actor_Info
{
public:
	TArray<class UClass_Object_Material*>              meshSkins;                                                // 0x0400(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass_Object_Material*>              jetpackSkins;                                             // 0x040C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass_Object_Material*>              armsSkins;                                                // 0x0418(0x000C) (Edit, NeedCtorLink)
	class UClass_Object_Primitive_Mesh*                applicableMesh;                                           // 0x0424(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.SkinInfo");
		return ptr;
	}


	void STATIC_Function_loadAllSkins(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L);
	bool STATIC_Function_isApplicable(class UClass_Object_Primitive_Mesh* Mesh);
	void STATIC_Function_applyToArms(class AClass_Object_Actor* A);
	void STATIC_Function_applyToJetpack(class AClass_Object_Actor* j);
	void STATIC_Function_applyToCharacter(class AClass_Object_Actor* C);
};


// Class Object.Actor.Shield
// 0x002C (0x042C - 0x0400)
class AClass_Object_Actor_Shield : public AClass_Object_Actor
{
public:
	float                                              Health;                                                   // 0x0400(0x0004) (Net)
	float                                              offlineSeconds;                                           // 0x0404(0x0004)
	float                                              Max;                                                      // 0x0408(0x0004) (Edit, NoClear)
	float                                              rechargeRate;                                             // 0x040C(0x0004) (Edit, NoClear)
	float                                              offlineSecondsScale;                                      // 0x0410(0x0004) (Edit, NoClear)
	float                                              maxOfflineSeconds;                                        // 0x0414(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      effectMaterial;                                           // 0x0418(0x0004) (Edit, NoClear)
	float                                              effectDisplayTime;                                        // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      bActive : 1;                                              // 0x0420(0x0004)
	float                                              clientHealth;                                             // 0x0424(0x0004)
	float                                              shieldEffectTime;                                         // 0x0428(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Shield");
		return ptr;
	}


	bool Function_Active();
	void Function_DeActivate();
	void Function_Activate();
	int Function_ApplyDamage(float Damage, float otherHealth);
	void Function_recharge(float Delta);
	class UClass_Object_Material* Function_GetEffectMaterial();
	bool Function_EffectActive();
	void Function_Tick_Tick(float Delta);
	void Function_updateDamageEffect(float Delta);
	void Function_triggerDamageEffect();
	void Function_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.RepairRadius
// 0x0020 (0x0420 - 0x0400)
class AClass_Object_Actor_RepairRadius : public AClass_Object_Actor
{
public:
	class UClass_Object_IRepairClient*                 rc;                                                       // 0x0400(0x0004)
	TArray<class AClass_Object_Actor_Pawn_Rook*>       touchingLOS;                                              // 0x0404(0x000C) (NeedCtorLink)
	class AClass_Object_Actor*                         currentTendrilTarget;                                     // 0x0410(0x0004)
	TArray<class UClass_Object_DeleteableObject_RepairTendril*> tendrils;                                                 // 0x0414(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.RepairRadius");
		return ptr;
	}


	void Function_destroyTendrilByIdx(int idx);
	void Function_destroyTendril(class AClass_Object_Actor* Target);
	void Function_addTendril(class AClass_Object_Actor* Target, class AClass_Object_Actor_Emitter* effect);
	void Function_OnEffectInitialized(class AClass_Object_Actor* inInitializedEffect);
	void Function_OnEffectStopped(class AClass_Object_Actor* E, bool B);
	void Function_OnEffectStarted(class AClass_Object_Actor* inStartedEffect);
	void Function_removeTouchingLOS(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_addTouchingLOS(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Tick_Tick(float Delta);
	void Function_Destroyed_Destroyed();
	void Function_Construct_ActorNameVectorRotator_Construct_ActorNameVectorRotator(class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
	void Function_SetRepairRadius(int NewRepairRadius);
};


// Class Object.Actor.Pawn.Rook.Ragdoll
// 0x0058 (0x090C - 0x08B4)
class AClass_Object_Actor_Pawn_Rook_Ragdoll : public AClass_Object_Actor_Pawn_Rook
{
public:
	float                                              ragdollLifeSpan;                                          // 0x08B4(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      HavokParamsClass;                                         // 0x08B8(0x0004) (Edit, Net)
	unsigned long                                      bPlayedDeath : 1;                                         // 0x08BC(0x0004)
	float                                              jetpackDuration;                                          // 0x08C0(0x0004) (Edit)
	float                                              jetpackLinearForce;                                       // 0x08C4(0x0004) (Edit)
	float                                              jetpackTwirlyForce;                                       // 0x08C8(0x0004) (Edit)
	float                                              ragdollScale;                                             // 0x08CC(0x0004) (Edit)
	float                                              ragdollMaximumImpulse;                                    // 0x08D0(0x0004) (Edit)
	unsigned long                                      disableJetpackDeath : 1;                                  // 0x08D4(0x0004) (Edit)
	float                                              ragdollDeathLift;                                         // 0x08D8(0x0004) (Edit)
	unsigned long                                      jetpack : 1;                                              // 0x08DC(0x0004)
	float                                              jetpackTime;                                              // 0x08E0(0x0004)
	unsigned long                                      ragdollTouchedGround : 1;                                 // 0x08E4(0x0004)
	int                                                ragdollTickCount;                                         // 0x08E8(0x0004)
	struct FStruct_Vector                              TearOffLocation;                                          // 0x08EC(0x000C) (Net)
	unsigned long                                      bTearOffLocationValid : 1;                                // 0x08F8(0x0004) (Net)
	struct FStruct_Vector                              ragdollInheritedVelocity;                                 // 0x08FC(0x000C)
	TEnumAsByte<EMovementState>                        Movement;                                                 // 0x0908(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0909(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll");
		return ptr;
	}


	void Function_unifiedAddForceAtPosition_unifiedAddForceAtPosition(const struct FStruct_Vector& Force, const struct FStruct_Vector& Position);
	void Function_unifiedAddForce_unifiedAddForce(const struct FStruct_Vector& Force);
	void Function_unifiedAddImpulseAtPosition_unifiedAddImpulseAtPosition(const struct FStruct_Vector& Impulse, const struct FStruct_Vector& Position);
	void Function_unifiedAddImpulse_unifiedAddImpulse(const struct FStruct_Vector& Impulse);
	bool Function_StartHavokRagdoll();
	void Function_PlayDying_PlayDying(class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLoc);
	void Function_Tick_Tick(float DeltaTime);
};


// Class Object.Actor.Projectile
// 0x004C (0x044C - 0x0400)
class AClass_Object_Actor_Projectile : public AClass_Object_Actor
{
public:
	int                                                SpawnTick;                                                // 0x0400(0x0004)
	struct FStruct_Vector                              InitialVelocity;                                          // 0x0404(0x000C) (Net)
	unsigned long                                      bReceivedInitialVelocity : 1;                             // 0x0410(0x0004)
	unsigned long                                      bReplicateInitialVelocity : 1;                            // 0x0410(0x0004)
	float                                              AccelerationMagtitude;                                    // 0x0414(0x0004) (Edit)
	float                                              MaxVelocity;                                              // 0x0418(0x0004) (Edit)
	struct FName                                       DeathMessage;                                             // 0x041C(0x0004)
	float                                              damageAmt;                                                // 0x0420(0x0004) (Edit)
	struct FName                                       victim;                                                   // 0x0424(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               rookAttacker;                                             // 0x0428(0x0004)
	int                                                bounceCount;                                              // 0x042C(0x0004)
	class UClass_Object_Field_Struct_State_Class*      damageTypeClass;                                          // 0x0430(0x0004) (Edit)
	unsigned long                                      bScaleProjectile : 1;                                     // 0x0434(0x0004) (Edit)
	float                                              initialXDrawScale;                                        // 0x0438(0x0004) (Edit)
	float                                              xDrawScalePerSecond;                                      // 0x043C(0x0004) (Edit)
	unsigned long                                      bDeflectable : 1;                                         // 0x0440(0x0004) (Edit)
	float                                              Knockback;                                                // 0x0444(0x0004) (Edit)
	float                                              knockbackAliveScale;                                      // 0x0448(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile");
		return ptr;
	}


	void Function_makeHarmless();
	void Function_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	bool Function_projectileTouchProcessing(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_ProjectileTouch_ProjectileTouch(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	bool Function_ClientDetectDeflection(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	bool Function_ShouldDeflect(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, struct FStruct_Vector* deflectionNormal);
	bool Function_ShouldHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	void Function_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* HitWall);
	void Function_PostBounce(class AClass_Object_Actor_Projectile* newProjectile);
	class AClass_Object_Actor_Projectile* Function_bounce(const struct FStruct_Vector& HitNormal, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& TargetVelocity);
	bool Function_resolveImpactEffect(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal, class UClass_Object_Material** HitMaterial, struct FStruct_Vector* HitLocation, struct FStruct_Rotator* HitRotator, struct FStruct_Rotator* DecalRotator);
	void Function_endLife(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_triggerHitEffect(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal, const struct FName& HitEffect);
	void Function_PostNetReceive_PostNetReceive();
	void Function_Tick_Tick(float Delta);
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void STATIC_Function_PrecacheProjectileRenderData(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class UClass_Object_Field_Struct_State_Class* projectileClass);
	void Function_construct_RookActorNameVectorRotator(class AClass_Object_Actor_Pawn_Rook* attacker, class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
};


// Class Object.Actor.Controller
// 0x00A4 (0x04A4 - 0x0400)
class AClass_Object_Actor_Controller : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Pawn*                    Pawn;                                                     // 0x0400(0x0004) (Net)
	int                                                PlayerNum;                                                // 0x0404(0x0004) (Const)
	float                                              FovAngle;                                                 // 0x0408(0x0004)
	float                                              Handedness;                                               // 0x040C(0x0004) (Config, GlobalConfig)
	unsigned long                                      bIsPlayer : 1;                                            // 0x0410(0x0004)
	unsigned long                                      bGodMode : 1;                                             // 0x0410(0x0004)
	unsigned long                                      bUsePlayerHearing : 1;                                    // 0x0410(0x0004)
	unsigned char                                      bRun;                                                     // 0x0414(0x0001) (Input)
	unsigned char                                      bDuck;                                                    // 0x0415(0x0001) (Input)
	unsigned char                                      bFire;                                                    // 0x0416(0x0001) (Input)
	unsigned char                                      bAltFire;                                                 // 0x0417(0x0001) (Input)
	unsigned char                                      bJetpack;                                                 // 0x0418(0x0001) (Input)
	unsigned char                                      bSki;                                                     // 0x0419(0x0001) (Input)
	unsigned char                                      bJump;                                                    // 0x041A(0x0001) (Input)
	unsigned char                                      UnknownData00[0x1];                                       // 0x041B(0x0001) MISSED OFFSET
	class AClass_Object_Actor_Controller*              nextController;                                           // 0x041C(0x0004) (Const, Transient)
	TArray<struct FStruct_RouteCacheElement>           RouteCache;                                               // 0x0420(0x000C) (NeedCtorLink)
	unsigned long                                      RouteComplete : 1;                                        // 0x042C(0x0004)
	TEnumAsByte<EFindPathResult>                       lastFindPathResult;                                       // 0x0430(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	TArray<struct FStruct_TraversalLineCheck>          debugTraversalLineChecks;                                 // 0x0434(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      PlayerReplicationInfoClass;                               // 0x0440(0x0004) (Edit)
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PlayerReplicationInfo;                                    // 0x0444(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      PawnClass;                                                // 0x0448(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      PreviousPawnClass;                                        // 0x044C(0x0004)
	float                                              GroundPitchTime;                                          // 0x0450(0x0004)
	struct FStruct_Vector                              ViewX;                                                    // 0x0454(0x000C)
	struct FStruct_Vector                              ViewY;                                                    // 0x0460(0x000C)
	struct FStruct_Vector                              ViewZ;                                                    // 0x046C(0x000C)
	class AClass_Object_Actor*                         StartSpot;                                                // 0x0478(0x0004)
	struct FStruct_Vector                              MonitorStartLoc;                                          // 0x047C(0x000C)
	class AClass_Object_Actor_Pawn*                    MonitoredPawn;                                            // 0x0488(0x0004)
	float                                              MonitorMaxDistSq;                                         // 0x048C(0x0004)
	class AClass_Object_Actor*                         LastFailedReach;                                          // 0x0490(0x0004) (Const)
	float                                              FailedReachTime;                                          // 0x0494(0x0004) (Const)
	struct FStruct_Vector                              FailedReachLocation;                                      // 0x0498(0x000C) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller");
		return ptr;
	}


	bool Function_DontReuseTaunt(int t);
	bool Function_AutoTaunt();
	void Function_ServerGivePawn();
	void Function_ServerReStartPlayer();
	void Function_ChangedWeapon();
	bool Function_CheckFutureSight(float DeltaTime);
	void Function_SetPawnClass(const struct FString& inClass, const struct FString& inCharacter);
	void Function_NotifyKilled(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Killed, class AClass_Object_Actor_Pawn* Other);
	void Function_ShakeView(float shaketime, float RollMag, const struct FStruct_Vector& OffsetMag, float RollRate, const struct FStruct_Vector& OffsetRate, float OffsetTime);
	int Function_GetFacingDirection();
	void Function_RenderOverlays_RenderOverlays(class UClass_Object_Canvas* Canvas);
	void Function_ClientGameEnded();
	void Function_GameHasEnded();
	bool Function_WantsSmoothedView();
	void Function_AdjustView(float DeltaTime);
	void Function_Destroyed_Destroyed();
	bool Function_SameTeamAs(class AClass_Object_Actor_Controller* C);
	void Function_InitPlayerReplicationInfo();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_PostLoadGame_PostLoadGame();
	void Function_PreBeginPlay_PreBeginPlay();
	void Function_PawnIsInPain(class AClass_Object_Actor_Brush_Volume_PhysicsVolume* PainVolume);
	void Function_SetFall();
	void Function_NotifyTakeHit(class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, int Damage, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& Momentum);
	void Function_NotifyMissedJump();
	void Function_NotifyJumpApex();
	void Function_NotifyHitMover(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor_Mover* Wall);
	bool Function_NotifyBump(class AClass_Object_Actor* Other);
	bool Function_NotifyHitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	bool Function_NotifyLanded(const struct FStruct_Vector& HitNormal);
	bool Function_NotifyHeadVolumeChange(class AClass_Object_Actor_Brush_Volume_PhysicsVolume* NewVolume);
	bool Function_NotifyPhysicsVolumeChange(class AClass_Object_Actor_Brush_Volume_PhysicsVolume* NewVolume);
	void Function_LongFall();
	void Function_Restart();
	void Function_PawnDied(class AClass_Object_Actor_Pawn* p);
	void Function_WasKilledBy(class AClass_Object_Actor_Controller* Other);
	void Function_UnPossess();
	void Function_Possess(class AClass_Object_Actor_Pawn* aPawn);
	void Function_SoakStop(const struct FString& problem);
	void Function_ClientDying(class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_ClientSetRotation(const struct FStruct_Rotator& NewRotation);
	void Function_ClientSetLocation(const struct FStruct_Vector& NewLocation, const struct FStruct_Rotator& NewRotation);
	void Function_Reset_Reset();
	struct FStruct_Rotator Function_GetViewRotation();
	struct FString Function_GetHumanReadableName_GetHumanReadableName();
	void Function_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_HearNoise(float Loudness, class AClass_Object_Actor* NoiseMaker);
	void Function_AIHearSound(class AClass_Object_Actor* Actor, class UClass_Object_Sound* S, const struct FStruct_Vector& SoundLocation, const struct FStruct_Vector& Parameters, bool Attenuate);
	void Function_PendingStasis();
	void Function_MayFall();
	bool Function_InLatentExecution(int LatentActionNumber);
	void Function_RemoveController();
	void Function_AddController();
	void Function_DebugTraversalCheck(const struct FStruct_Vector& Start, const struct FStruct_Vector& End);
	void Function_PathDiagnostics();
	void Function_DrawPathDebug(class UClass_Object_Player_Viewport* Viewport, bool showQuadtree, bool showNodes, bool stepEnabled, bool showReach);
	void Function_ContinueFindPath(bool untilComplete);
	void Function_FindPath(const struct FStruct_Vector& Start, const struct FStruct_Vector& End, const struct FStruct_FindPathAIProperties& AIProperties, TArray<class AClass_Object_Actor*> ignore, bool printLogs, bool manualContinue);
	bool Function_IsFindPathComplete();
	void Function_DiscardFindPath();
	void Function_GetFindPathResult();
	void Function_displayWorldSpaceDebug(class AClass_Object_Actor_HUD* displayHUD);
	bool Function_LineOfSightTo(class AClass_Object_Actor* Other);
};


// Class Object.Actor.Controller.PlayerController
// 0x0320 (0x07C4 - 0x04A4)
class AClass_Object_Actor_Controller_PlayerController : public AClass_Object_Actor_Controller
{
public:
	class UClass_Object_Player*                        Player;                                                   // 0x04A4(0x0004) (Const)
	unsigned long                                      bLookUpStairs : 1;                                        // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bSnapToLevel : 1;                                         // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAlwaysMouseLook : 1;                                     // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bKeyboardLook : 1;                                        // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCenterView : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bBehindView : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bFrozen : 1;                                              // 0x04A8(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x04A8(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bUpdatePosition : 1;                                      // 0x04A8(0x0004)
	unsigned long                                      bIsTyping : 1;                                            // 0x04A8(0x0004)
	unsigned long                                      bFixedCamera : 1;                                         // 0x04A8(0x0004)
	unsigned long                                      bJumpStatus : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bUpdating : 1;                                            // 0x04A8(0x0004)
	unsigned long                                      bNeverSwitchOnPickup : 1;                                 // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bZooming : 1;                                             // 0x04A8(0x0004)
	unsigned long                                      bAlwaysLevel : 1;                                         // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bSetTurnRot : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bCheatFlying : 1;                                         // 0x04A8(0x0004)
	unsigned long                                      bFreeCamera : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bZeroRoll : 1;                                            // 0x04A8(0x0004)
	unsigned long                                      bCameraPositionLocked : 1;                                // 0x04A8(0x0004)
	unsigned long                                      bViewBot : 1;                                             // 0x04A8(0x0004)
	unsigned long                                      UseFixedVisibility : 1;                                   // 0x04A8(0x0004)
	unsigned long                                      bBlockCloseCamera : 1;                                    // 0x04A8(0x0004)
	unsigned long                                      bValidBehindCamera : 1;                                   // 0x04A8(0x0004)
	unsigned long                                      bForcePrecache : 1;                                       // 0x04A8(0x0004)
	unsigned long                                      bClientDemo : 1;                                          // 0x04A8(0x0004)
	unsigned long                                      bAllActorsRelevant : 1;                                   // 0x04A8(0x0004) (Const)
	unsigned long                                      bShortConnectTimeOut : 1;                                 // 0x04A8(0x0004)
	unsigned long                                      bPendingDestroy : 1;                                      // 0x04A8(0x0004)
	unsigned long                                      bNoVoiceMessages : 1;                                     // 0x04A8(0x0004) (Config, GlobalConfig)
	unsigned long                                      bNoVoiceTaunts : 1;                                       // 0x04AC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bNoAutoTaunts : 1;                                        // 0x04AC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAutoTaunt : 1;                                           // 0x04AC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bNoMatureLanguage : 1;                                    // 0x04AC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDynamicNetSpeed : 1;                                     // 0x04AC(0x0004) (Config, GlobalConfig)
	unsigned char                                      AnnouncerLevel;                                           // 0x04B0(0x0001) (Config, GlobalConfig)
	unsigned char                                      AnnouncerVolume;                                          // 0x04B1(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04B2(0x0002) MISSED OFFSET
	float                                              AimingHelp;                                               // 0x04B4(0x0004) (Config, GlobalConfig)
	float                                              MaxResponseTime;                                          // 0x04B8(0x0004) (Config, GlobalConfig)
	float                                              WaitDelay;                                                // 0x04BC(0x0004)
	float                                              aBaseX;                                                   // 0x04C0(0x0004) (Input)
	float                                              aBaseY;                                                   // 0x04C4(0x0004) (Input)
	float                                              aBaseZ;                                                   // 0x04C8(0x0004) (Input)
	float                                              aMouseX;                                                  // 0x04CC(0x0004) (Input)
	float                                              aMouseY;                                                  // 0x04D0(0x0004) (Input)
	float                                              aForward;                                                 // 0x04D4(0x0004) (Input)
	float                                              aTurn;                                                    // 0x04D8(0x0004) (Input)
	float                                              aStrafe;                                                  // 0x04DC(0x0004) (Input)
	float                                              aUp;                                                      // 0x04E0(0x0004) (Input)
	float                                              aLookUp;                                                  // 0x04E4(0x0004) (Input)
	unsigned char                                      bStrafe;                                                  // 0x04E8(0x0001) (Input)
	unsigned char                                      bSnapLevel;                                               // 0x04E9(0x0001) (Input)
	unsigned char                                      bLook;                                                    // 0x04EA(0x0001) (Input)
	unsigned char                                      bFreeLook;                                                // 0x04EB(0x0001) (Input)
	unsigned char                                      bTurn180;                                                 // 0x04EC(0x0001) (Input)
	unsigned char                                      bTurnToNearest;                                           // 0x04ED(0x0001) (Input)
	unsigned char                                      bXAxis;                                                   // 0x04EE(0x0001) (Input)
	unsigned char                                      bYAxis;                                                   // 0x04EF(0x0001) (Input)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickDir;                                           // 0x04F0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04F1(0x0003) MISSED OFFSET
	int                                                ShowFlags;                                                // 0x04F4(0x0004)
	int                                                ExShowFlags;                                              // 0x04F8(0x0004)
	int                                                Misc1;                                                    // 0x04FC(0x0004)
	int                                                Misc2;                                                    // 0x0500(0x0004)
	int                                                RendMap;                                                  // 0x0504(0x0004)
	float                                              OrthoZoom;                                                // 0x0508(0x0004)
	class AClass_Object_Actor*                         ViewTarget;                                               // 0x050C(0x0004) (Const)
	class AClass_Object_Actor_Controller*              RealViewTarget;                                           // 0x0510(0x0004) (Const)
	class AClass_Object_Actor_Controller_PlayerController* DemoViewer;                                               // 0x0514(0x0004)
	float                                              CameraDist;                                               // 0x0518(0x0004)
	struct FStruct_Vector                              OldCameraLoc;                                             // 0x051C(0x000C)
	struct FStruct_Rotator                             OldCameraRot;                                             // 0x0528(0x000C)
	TArray<class UClass_Object_CameraEffect*>          CameraEffects;                                            // 0x0534(0x000C) (Transient, NeedCtorLink)
	float                                              DesiredFOV;                                               // 0x0540(0x0004) (Config, GlobalConfig)
	float                                              DefaultFOV;                                               // 0x0544(0x0004) (Config, GlobalConfig)
	float                                              ZoomLevel;                                                // 0x0548(0x0004)
	struct FStruct_Vector                              FixedLocation;                                            // 0x054C(0x000C)
	struct FStruct_Rotator                             FixedRotation;                                            // 0x0558(0x000C)
	struct FStruct_Matrix                              RenderWorldToCamera;                                      // 0x0564(0x0040)
	struct FStruct_Vector                              FlashScale;                                               // 0x05A4(0x000C)
	struct FStruct_Vector                              FlashFog;                                                 // 0x05B0(0x000C)
	float                                              ConstantGlowScale;                                        // 0x05BC(0x0004)
	struct FStruct_Vector                              ConstantGlowFog;                                          // 0x05C0(0x000C)
	unsigned long                                      bManualFogUpdate : 1;                                     // 0x05CC(0x0004)
	struct FStruct_Color                               LastDistanceFogColor;                                     // 0x05D0(0x0004)
	float                                              LastDistanceFogStart;                                     // 0x05D4(0x0004)
	float                                              LastDistanceFogEnd;                                       // 0x05D8(0x0004)
	float                                              CurrentDistanceFogEnd;                                    // 0x05DC(0x0004)
	float                                              TimeSinceLastFogChange;                                   // 0x05E0(0x0004)
	int                                                LastZone;                                                 // 0x05E4(0x0004)
	struct FStruct_Rotator                             TargetViewRotation;                                       // 0x05E8(0x000C) (Net)
	struct FStruct_Rotator                             BlendedTargetViewRotation;                                // 0x05F4(0x000C)
	float                                              TargetEyeHeight;                                          // 0x0600(0x0004) (Net)
	struct FStruct_Vector                              TargetWeaponViewOffset;                                   // 0x0604(0x000C) (Net)
	class AClass_Object_Actor_HUD*                     myHUD;                                                    // 0x0610(0x0004)
	float                                              LastPlaySound;                                            // 0x0614(0x0004)
	float                                              LastPlaySpeech;                                           // 0x0618(0x0004)
	struct FString                                     Song;                                                     // 0x061C(0x000C) (NeedCtorLink)
	TEnumAsByte<EMusicTransition>                      Transition;                                               // 0x0628(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0629(0x0003) MISSED OFFSET
	class AClass_Object_Actor_Info_SavedMove*          SavedMoves;                                               // 0x062C(0x0004)
	class AClass_Object_Actor_Info_SavedMove*          FreeMoves;                                                // 0x0630(0x0004)
	class AClass_Object_Actor_Info_SavedMove*          PendingMove;                                              // 0x0634(0x0004)
	float                                              CurrentTimeStamp;                                         // 0x0638(0x0004)
	float                                              LastUpdateTime;                                           // 0x063C(0x0004)
	float                                              ServerTimeStamp;                                          // 0x0640(0x0004)
	float                                              TimeMargin;                                               // 0x0644(0x0004)
	float                                              ClientUpdateTime;                                         // 0x0648(0x0004)
	float                                              MaxTimeMargin;                                            // 0x064C(0x0004) (Config, GlobalConfig)
	int                                                WeaponUpdate;                                             // 0x0650(0x0004)
	struct FString                                     ProgressMessage[0x4];                                     // 0x0654(0x000C) (NeedCtorLink)
	struct FStruct_Color                               ProgressColor[0x4];                                       // 0x0684(0x0004)
	float                                              ProgressTimeOut;                                          // 0x0694(0x0004)
	struct FString                                     QuickSaveName;                                            // 0x0698(0x000C) (Localized, NeedCtorLink)
	struct FString                                     QuickSaveString;                                          // 0x06A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NoPauseMessage;                                           // 0x06B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ViewingFrom;                                              // 0x06BC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     OwnCamera;                                                // 0x06C8(0x000C) (Localized, NeedCtorLink)
	class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GameReplicationInfo;                                      // 0x06D4(0x0004) (Net)
	class AClass_Object_Actor_Info_ReplicationInfo_VotingReplicationInfoBase* VoteReplicationInfo;                                      // 0x06D8(0x0004)
	struct FString                                     StatsUsername;                                            // 0x06DC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     StatsPassword;                                            // 0x06E8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      LocalMessageClass;                                        // 0x06F4(0x0004)
	float                                              MaxShakeRoll;                                             // 0x06F8(0x0004)
	struct FStruct_Vector                              MaxShakeOffset;                                           // 0x06FC(0x000C)
	float                                              ShakeRollRate;                                            // 0x0708(0x0004)
	struct FStruct_Vector                              ShakeOffsetRate;                                          // 0x070C(0x000C)
	struct FStruct_Vector                              ShakeOffset;                                              // 0x0718(0x000C)
	float                                              ShakeRollTime;                                            // 0x0724(0x0004)
	struct FStruct_Vector                              ShakeOffsetTime;                                          // 0x0728(0x000C)
	struct FStruct_Vector                              CinematicShakeOffset;                                     // 0x0734(0x000C)
	struct FStruct_Rotator                             CinematicShakeRotate;                                     // 0x0740(0x000C)
	class AClass_Object_Actor_Pawn*                    TurnTarget;                                               // 0x074C(0x0004)
	int                                                EnemyTurnSpeed;                                           // 0x0750(0x0004) (Config)
	int                                                GroundPitch;                                              // 0x0754(0x0004)
	struct FStruct_Rotator                             TurnRot180;                                               // 0x0758(0x000C)
	struct FStruct_Vector                              OldFloor;                                                 // 0x0764(0x000C)
	class UClass_Object_CheatManager*                  CheatManager;                                             // 0x0770(0x0004) (Transient)
	class UClass_Object_Field_Struct_State_Class*      CheatClass;                                               // 0x0774(0x0004)
	class UClass_Object_PlayerInput*                   PlayerInput;                                              // 0x0778(0x0004) (Transient)
	class UClass_Object_Field_Struct_State_Class*      InputClass;                                               // 0x077C(0x0004) (Config)
	class UClass_Object_AdminBase*                     AdminManager;                                             // 0x0780(0x0004) (Transient)
	struct FStruct_Vector                              FailedPathStart;                                          // 0x0784(0x000C) (Const)
	class AClass_Object_Actor_Info_Security*           PlayerSecurity;                                           // 0x0790(0x0004)
	float                                              ForcePrecacheTime;                                        // 0x0794(0x0004)
	float                                              LoginDelay;                                               // 0x0798(0x0004) (Net)
	float                                              NextLoginTime;                                            // 0x079C(0x0004)
	float                                              LastPingUpdate;                                           // 0x07A0(0x0004)
	float                                              ExactPing;                                                // 0x07A4(0x0004)
	float                                              OldPing;                                                  // 0x07A8(0x0004)
	float                                              SpectateSpeed;                                            // 0x07AC(0x0004)
	float                                              DynamicPingThreshold;                                     // 0x07B0(0x0004) (Config, GlobalConfig)
	float                                              NextSpeedChange;                                          // 0x07B4(0x0004)
	int                                                ClientCap;                                                // 0x07B8(0x0004)
	unsigned long                                      bEnablePickupForceFeedback : 1;                           // 0x07BC(0x0004) (Edit, Config, GlobalConfig)
	unsigned long                                      bEnableWeaponForceFeedback : 1;                           // 0x07BC(0x0004) (Edit, Config, GlobalConfig)
	unsigned long                                      bEnableDamageForceFeedback : 1;                           // 0x07BC(0x0004) (Edit, Config, GlobalConfig)
	unsigned long                                      bEnableGUIForceFeedback : 1;                              // 0x07BC(0x0004) (Edit, Config, GlobalConfig)
	unsigned long                                      bForceFeedbackSupported : 1;                              // 0x07BC(0x0004) (Edit)
	float                                              FOVBias;                                                  // 0x07C0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.PlayerController");
		return ptr;
	}


	class AClass_Object_Actor_Pawn* Function_GetTravelPawn();
	void Function_LostChild_LostChild(class AClass_Object_Actor* Other);
	void Function_GainedChild_GainedChild(class AClass_Object_Actor* Other);
	void Function_AdminLogout();
	void Function_AdminReply(const struct FString& Reply);
	void Function_ReportAdmin();
	void Function_AdminCommand(const struct FString& CommandLine);
	void Function_ForceAdmin();
	void Function_AdminPromote(const struct FString& TargetPlayerName);
	void Function_ServerAdminLogin(const struct FString& CmdLine);
	void Function_AdminLogin(const struct FString& CmdLine);
	void Function_Admin(const struct FString& CommandLine);
	void Function_MakeAdmin();
	void Function_showEscapeMenu();
	void Function_UTrace();
	void Function_ServerUTrace();
	void Function_DemoClientSetHUD(class UClass_Object_Field_Struct_State_Class* newHUDClass, class UClass_Object_Field_Struct_State_Class* newScoringClass);
	void Function_ServerSetClientDemo();
	void Function_StartClientDemoRec();
	void Function_ChangeVoiceChatter(int IpAddr, int Handle, bool Add);
	void Function_LeaveVoiceChat();
	void Function_ClientLeaveVoiceChat();
	void Function_ClientChangeVoiceChatter(int IpAddr, int Handle, bool Add);
	void Function_ServerGetVoiceChatters(class AClass_Object_Actor_Controller_PlayerController* Player);
	void Function_ServerChangeVoiceChatter(class AClass_Object_Actor_Controller_PlayerController* Player, int IpAddr, int Handle, bool Add);
	bool Function_CanRestartPlayer();
	void Function_ClientCloseMenu(bool bCloseAll);
	void Function_ClientOpenMenu(const struct FString& menuClass, const struct FString& MenuName, bool bDisconnect, const struct FString& Msg1, const struct FString& Msg2, int Msg3);
	void Function_OpenMenu(const struct FString& theMenu);
	void Function_ChangeAlwaysMouseLook(bool B);
	void Function_ChangeStairLook(bool B);
	void Function_LoadPlayers();
	void Function_ServerViewSelf();
	void Function_ServerViewNextPlayer();
	bool Function_IsSpectating();
	void Function_ClearDoubleClick();
	void Function_UpdateRotation(float DeltaTime, float maxPitch);
	void Function_TurnAround();
	bool Function_TurnTowardNearestEnemy();
	void Function_ViewShake(float DeltaTime);
	void Function_CheckShake(float* MaxOffset, float* Offset, float* Rate, float* Time);
	int Function_BlendRot(float DeltaTime, int BlendC, int NewC);
	void Function_PlayerCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	struct FStruct_Rotator Function_GetViewRotation_GetViewRotation();
	void Function_CreateCameraEffect(class UClass_Object_Field_Struct_State_Class* EffectClass);
	void Function_RemoveCameraEffect(class UClass_Object_CameraEffect* ExEffect);
	void Function_AddCameraEffect(class UClass_Object_CameraEffect* NewEffect, bool RemoveExisting);
	void Function_CalcFirstPersonView(struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_CalcBehindView(float Dist, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_AdjustView_AdjustView(float DeltaTime);
	bool Function_NotifyLanded_NotifyLanded(const struct FStruct_Vector& HitNormal);
	void Function_PlayerMove(float DeltaTime);
	void Function_PlayerTick(float DeltaTime);
	void Function_TravelPostAccept_TravelPostAccept();
	void Function_ChangedWeapon_ChangedWeapon();
	void Function_ServerToggleBehindView();
	void Function_ToggleBehindView();
	void Function_BehindView(bool B);
	void Function_ClientRestart(class AClass_Object_Actor_Pawn* aPawn, const struct FName& currentState);
	void Function_Restart_Restart();
	void Function_SetProgressTime(float t);
	void Function_SetProgressMessage(int Index, const struct FString& S, const struct FStruct_Color& C);
	void Function_ClearProgressMessages();
	void Function_ProgressCommand(const struct FString& Cmd, const struct FString& Msg1, const struct FString& Msg2, int Seconds);
	void Function_SwitchLevel(const struct FString& URL);
	void Function_ChangeTeam(int n, bool bAdminOverride);
	void Function_ChangeName(const struct FString& S);
	void Function_SetName(const struct FString& S);
	void Function_Name(const struct FString& S);
	void Function_Suicide();
	void Function_ServerUse();
	void Function_Use();
	void Function_AltFire(float F);
	void Function_ActivateItem();
	void Function_PrevItem();
	void Function_SwitchWeapon(unsigned char F);
	void Function_NextWeapon();
	void Function_PrevWeapon();
	void Function_ServerThrowWeapon();
	void Function_ThrowWeapon();
	void Function_ActivateInventoryItem(class UClass_Object_Field_Struct_State_Class* InvItem);
	void Function_ShowMenu();
	void Function_Pause();
	bool Function_SetPause(bool bPause);
	void Function_QuickLoad();
	bool Function_SaveGameExists(const struct FString& SaveGameName);
	void Function_QuickSave();
	void Function_LocalTravel(const struct FString& URL);
	void Function_RestartLevel();
	void Function_Speech(const struct FName& Type, int Index, const struct FString& Callsign);
	void Function_Jump(float F);
	void Function_Typing(bool bTyping);
	void Function_ShakeView_ShakeView(float shaketime, float RollMag, const struct FStruct_Vector& OffsetMag, float RollRate, const struct FStruct_Vector& OffsetRate, float OffsetTime);
	void Function_ClientShake(const struct FStruct_Vector& ShakeRoll, const struct FStruct_Vector& OffsetMag, const struct FStruct_Vector& ShakeRate, float OffsetTime);
	void Function_ClientAdjustGlow(float Scale, const struct FStruct_Vector& fog);
	void Function_ClientFlash(float Scale, const struct FStruct_Vector& fog);
	void Function_SetFOVAngle(float NewFOV);
	void Function_ServerRestartGame();
	void Function_HandleWalking();
	void Function_ReplicateMove(float DeltaTime, const struct FStruct_Vector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FStruct_Rotator& DeltaRot);
	int Function_CompressAccel(int C);
	class AClass_Object_Actor_Info_SavedMove* Function_GetFreeMove();
	void Function_ClientUpdatePosition();
	void Function_ServerUpdatePing(int NewPing);
	void Function_LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AClass_Object_Actor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	void Function_ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AClass_Object_Actor* NewBase);
	void Function_ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AClass_Object_Actor* NewBase);
	void Function_VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AClass_Object_Actor* NewBase);
	void Function_MoveAutonomous(float DeltaTime, bool NewbRun, bool NewbDuck, bool NewbPressedJump, bool NewbDoubleJump, bool NewbJetpack, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FStruct_Vector& newAccel, const struct FStruct_Rotator& DeltaRot);
	void Function_ProcessMove(float DeltaTime, const struct FStruct_Vector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FStruct_Rotator& DeltaRot);
	void Function_ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump);
	void Function_ServerDrive(float InForward, float InStrafe, float InUp, bool InJump);
	void Function_ServerMove(float TimeStamp, const struct FStruct_Vector& InAccel, const struct FStruct_Vector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbJumpStatus, bool NewbDoubleJump, TEnumAsByte<EDoubleClickDir> DoubleClickMove, unsigned char ClientRoll, int View, bool NewbJetpack, unsigned char OldTimeDelta, int OldAccel);
	void Function_ShortServerMove(float TimeStamp, const struct FStruct_Vector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbJumpStatus, unsigned char ClientRoll, int View, bool NewbJetpack);
	void Function_RocketServerMove(float TimeStamp, const struct FStruct_Vector& InAccel, const struct FStruct_Vector& ClientLoc, unsigned char ClientRoll, int View);
	void Function_ForceDeathUpdate();
	void Function_ClientVoiceMessage(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Sender, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Recipient, const struct FName& messagetype, unsigned char messageID);
	void Function_ClientSetBehindView(bool B, bool bInteractive);
	void Function_ClientSetFixedCamera(bool B);
	void Function_PreClientTravel();
	void Function_ShowGun();
	bool Function_IsDead();
	void Function_SetWeaponHand(const struct FString& S);
	void Function_SetHand(int IntValue);
	void Function_ServerSetHandedness(float hand);
	void Function_TeamSay(const struct FString& msg);
	void Function_Say(const struct FString& msg);
	void Function_ForceReload();
	void Function_SetMouseAccel(float F);
	void Function_SetMouseSmoothing(int Mode);
	void Function_SetSensitivity(float F);
	void Function_Mutate(const struct FString& MutateString);
	void Function_FOV(float F);
	void Function_ResetFOV();
	void Function_SetFOV(float NewFOV);
	void Function_FixFOV();
	void Function_EndZoom();
	void Function_StopZoom();
	void Function_StartZoom();
	void Function_ToggleZoom();
	void Function_ClientSetMusic(const struct FString& NewSong, TEnumAsByte<EMusicTransition> NewTransition);
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_OnFinishedPrecaching();
	void Function_ClientReliablePlaySound(class UClass_Object_Sound* ASound, bool bVolumeControl);
	void Function_ClientPlaySound(class UClass_Object_Sound* ASound, bool bVolumeControl, float inAtten);
	void Function_PlayAnnouncement(class UClass_Object_Sound* ASound, unsigned char AnnouncementLevel, bool bForce);
	void Function_PlayBeepSound();
	void Function_TeamMessage(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type);
	void Function_ClientMessage(const struct FString& S, const struct FName& Type);
	void Function_ReceiveLocalizedMessage(class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void Function_ViewFlash(float DeltaTime);
	float Function_UpdateFlashComponent(float Current, float Step, float goal);
	void Function_ClientStopForceFeedback(const struct FString& EffectName);
	void Function_StopForceFeedback(const struct FString& EffectName);
	void Function_ClientPlayForceFeedback(const struct FString& EffectName);
	void Function_ClientSetHUD(class UClass_Object_Field_Struct_State_Class* newHUDType, class UClass_Object_Field_Struct_State_Class* newScoringType);
	void Function_PawnDied_PawnDied(class AClass_Object_Actor_Pawn* p);
	void Function_UnPossess_UnPossess();
	void Function_Possess_Possess(class AClass_Object_Actor_Pawn* aPawn);
	int Function_GetFacingDirection_GetFacingDirection();
	void Function_GivePawn(class AClass_Object_Actor_Pawn* NewPawn);
	void Function_AskForPawn();
	void Function_ClientGotoState(const struct FName& NewState, const struct FName& NewLabel);
	void Function_InitInputSystem();
	void Function_CleanOutSavedMoves();
	void Function_Reset_Reset_Reset();
	void Function_SpawnDefaultHUD();
	void Function_ServerVerifyViewTarget();
	void Function_ClientSetViewTarget(class AClass_Object_Actor* A);
	void Function_AddCheats();
	void Function_PendingStasis_PendingStasis();
	void Function_ClientCapBandwidth(int Cap);
	void Function_ServerGivePawn_ServerGivePawn();
	void Function_ServerSpectateSpeed(float F);
	void Function_SetSpectateSpeed(float F);
	bool Function_CheckCullDistance(const struct FStruct_Vector& Location, float CullDistance);
	void Function_ShowSubtitle(const struct FString& Subtitle, float lifetime);
	void Function_SetCinematicMode(bool bCinematic);
	bool Function_IsFriendlyPRI(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* OtherPRI);
	bool Function_IsFriendly(class AClass_Object_Actor* Other);
	void Function_onMessage_onMessage(class UClass_Object_Message* msg);
	void Function_GameSaved();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
	int Function_ClientHearSound(class AClass_Object_Actor* Actor, class UClass_Object_Sound* S, const struct FStruct_Vector& SoundLocation, const struct FStruct_Vector& Parameters, float InnerRadius, int flags, float FadeInTime, bool Attenuate);
	void Function_ServerValidationResponse(const struct FString& R);
	void Function_ClientValidate(const struct FString& C);
	struct FString Function_PasteFromClipboard();
	void Function_CopyToClipboard(const struct FString& Text);
	struct FString Function_GetURLProtocol();
	struct FString Function_GetDefaultURL(const struct FString& Option);
	void Function_ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bItems);
	void Function_SetViewTarget(class AClass_Object_Actor* NewViewTarget);
	void Function_ResetKeyboard();
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Function_GetEntryLevel();
	struct FString Function_ConsoleCommand_ConsoleCommand(const struct FString& Command);
	struct FString Function_GetServerNetworkAddress();
	struct FString Function_GetPlayerNetworkAddress();
	void Function_SetNetSpeed(int NewSpeed);
};


// Class Object.Actor.Controller.PlayerController.PlayerCharacterController
// 0x03EC (0x0BB0 - 0x07C4)
class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController : public AClass_Object_Actor_Controller_PlayerController
{
public:
	unsigned char                                      bObjectives;                                              // 0x07C4(0x0001) (Input)
	unsigned char                                      bZoom;                                                    // 0x07C5(0x0001) (Input)
	unsigned char                                      bQuickChat;                                               // 0x07C6(0x0001) (Input)
	unsigned char                                      bDropWeapon;                                              // 0x07C7(0x0001) (Input)
	unsigned char                                      bLoadoutSelection;                                        // 0x07C8(0x0001) (Input)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07C9(0x0003) MISSED OFFSET
	class AClass_Object_Actor_Pawn_Rook*               Rook;                                                     // 0x07CC(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character;                                                // 0x07D0(0x0004)
	TArray<class UClass_Object_DeleteableObject_SavedMove*> TribesSavedMoves;                                         // 0x07D4(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_DeleteableObject_SavedMove*> TribesFreeMoves;                                          // 0x07E0(0x000C) (NeedCtorLink)
	class UClass_Object_DeleteableObject_SavedMove*    TribesPendingMove;                                        // 0x07EC(0x0004)
	struct FStruct_Vector                              replayFromStartLocation;                                  // 0x07F0(0x000C)
	struct FStruct_Vector                              replayFromEndLocation;                                    // 0x07FC(0x000C)
	float                                              replayFromAccumulator;                                    // 0x0808(0x0004)
	struct FStruct_Vector                              replayFromVelocity;                                       // 0x080C(0x000C)
	float                                              replayFromEnergy;                                         // 0x0818(0x0004)
	TEnumAsByte<EMovementState>                        replayFromMovement;                                       // 0x081C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x081D(0x0003) MISSED OFFSET
	int                                                replicateMoveCalls;                                       // 0x0820(0x0004)
	int                                                combinedMoves;                                            // 0x0824(0x0004)
	int                                                correctedMoves;                                           // 0x0828(0x0004)
	int                                                dualMoves;                                                // 0x082C(0x0004)
	float                                              ExactPing;                                                // 0x0830(0x0004)
	float                                              TimeMarginSlack;                                          // 0x0834(0x0004) (Config, GlobalConfig)
	float                                              lastReplicationCallTime;                                  // 0x0838(0x0004)
	unsigned long                                      bDebugSpeedhack : 1;                                      // 0x083C(0x0004)
	float                                              SpeedhackLastAppTime;                                     // 0x0840(0x0004)
	float                                              SpeedhackLastComparison;                                  // 0x0844(0x0004)
	float                                              SpeedhackComparison;                                      // 0x0848(0x0004)
	struct FString                                     currentHUDClass;                                          // 0x084C(0x000C) (NeedCtorLink)
	int                                                debugLogLevel;                                            // 0x0858(0x0004)
	struct FStruct_ClientAdjustment                    PendingAdjustment;                                        // 0x085C(0x0038)
	class UClass_Object_TribesHUDManager*              HUDManager;                                               // 0x0894(0x0004) (Transient)
	struct FString                                     spectatorHUDClass;                                        // 0x0898(0x000C) (Edit, NeedCtorLink)
	struct FString                                     countdownHUDClass;                                        // 0x08A4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     gameEndHUDClass;                                          // 0x08B0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     respawnHUDClass;                                          // 0x08BC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     vehicleHUDClass;                                          // 0x08C8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     turretHUDClass;                                           // 0x08D4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     waitRoundEndHUDClass;                                     // 0x08E0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     waitGameStartHUDClass;                                    // 0x08EC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     commandHUDClass;                                          // 0x08F8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             MutedPlayerList;                                          // 0x0904(0x000C) (NeedCtorLink)
	struct FString                                     GUIPackage;                                               // 0x0910(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SPEscapeMenuClass;                                        // 0x091C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MPEscapeMenuClass;                                        // 0x0928(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MPStatsClass;                                             // 0x0934(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MPWeaponStatsClass;                                       // 0x0940(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MPGameStatsClass;                                         // 0x094C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MPAdminClass;                                             // 0x0958(0x000C) (Edit, NeedCtorLink)
	struct FString                                     HelpScreenClass;                                          // 0x0964(0x000C) (Edit, NeedCtorLink)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_CinematicOverlay* CinematicOverlay;                                         // 0x0970(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	class AClass_Object_Actor_SensorListNode*          detectedFriendlyList;                                     // 0x0974(0x0004) (Net)
	class AClass_Object_Actor_SensorListNode*          detectedEnemyList;                                        // 0x0978(0x0004) (Net)
	unsigned long                                      commandHUDVisible : 1;                                    // 0x097C(0x0004)
	float                                              radarZoomScale;                                           // 0x0980(0x0004)
	class UClass_Object_RefCount_ClientSideCharacter*  clientSideChar;                                           // 0x0984(0x0004) (Transient)
	TArray<class AClass_Object_Actor*>                 RenderedRooks;                                            // 0x0988(0x000C) (NeedCtorLink)
	unsigned long                                      bForcedRespawn : 1;                                       // 0x0994(0x0004)
	struct FString                                     inventoryStationMenuClass;                                // 0x0998(0x000C) (Edit, NeedCtorLink)
	int                                                animationDebugCounter;                                    // 0x09A4(0x0004)
	int                                                movementDebugCounter;                                     // 0x09A8(0x0004)
	TEnumAsByte<EAlertnessModeType>                    alertnessMode;                                            // 0x09AC(0x0001) (EditConst)
	unsigned char                                      UnknownData02[0x3];                                       // 0x09AD(0x0003) MISSED OFFSET
	float                                              alertnessDecayTime;                                       // 0x09B0(0x0004)
	TEnumAsByte<EGroundMovementModeType>               groundMovementMode;                                       // 0x09B4(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x09B5(0x0003) MISSED OFFSET
	class UClass_Object_Loadout*                       currentLoadout;                                           // 0x09B8(0x0004)
	TArray<float>                                      radarZoomScales;                                          // 0x09BC(0x000C) (Config, NeedCtorLink)
	int                                                radarZoomIndex;                                           // 0x09C8(0x0004) (Config)
	TArray<float>                                      zoomedFOVs;                                               // 0x09CC(0x000C) (Config, NeedCtorLink)
	TArray<float>                                      zoomedMouseScale;                                         // 0x09D8(0x000C) (Config, NeedCtorLink)
	TArray<float>                                      zoomMagnificationLevels;                                  // 0x09E4(0x000C) (Config, NeedCtorLink)
	float                                              zoomSpeed;                                                // 0x09F0(0x0004) (Config)
	int                                                ZoomLevel;                                                // 0x09F4(0x0004) (Config)
	float                                              maxSpectatorZoom;                                         // 0x09F8(0x0004)
	float                                              minSpectatorZoom;                                         // 0x09FC(0x0004)
	TArray<int>                                        ChatWindowSizes;                                          // 0x0A00(0x000C) (Config, NeedCtorLink)
	int                                                ChatWindowSizeIndex;                                      // 0x0A0C(0x0004) (Config)
	TArray<int>                                        SPChatWindowSizes;                                        // 0x0A10(0x000C) (Config, NeedCtorLink)
	int                                                SPChatWindowSizeIndex;                                    // 0x0A1C(0x0004) (Config)
	struct FStruct_Vector                              InvExtCamOffset;                                          // 0x0A20(0x000C) (Config)
	unsigned long                                      bTeamMarkerColors : 1;                                    // 0x0A2C(0x0004) (Config)
	unsigned long                                      bHideFirstPersonWeapon : 1;                               // 0x0A2C(0x0004) (Config)
	class AClass_Object_Actor*                         lastIdentified;                                           // 0x0A30(0x0004)
	float                                              lastIdentifiedDuration;                                   // 0x0A34(0x0004)
	struct FStruct_Vector                              lastIdentifiedHitLocation;                                // 0x0A38(0x000C)
	float                                              m_identifyTime;                                           // 0x0A44(0x0004)
	float                                              m_identifyFrequency;                                      // 0x0A48(0x0004)
	float                                              m_identifyRange;                                          // 0x0A4C(0x0004)
	float                                              IdentifyRadius;                                           // 0x0A50(0x0004)
	struct FString                                     ResolutionString;                                         // 0x0A54(0x000C) (NeedCtorLink)
	int                                                ResolutionX;                                              // 0x0A60(0x0004)
	int                                                ResolutionY;                                              // 0x0A64(0x0004)
	class AClass_Object_Actor*                         lastHurt;                                                 // 0x0A68(0x0004)
	class UClass_Object_Field_Struct_State_Class*      lastWeaponClass;                                          // 0x0A6C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow_InventoryStationInteraction* inventoryStationInterface;                                // 0x0A70(0x0004)
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* InventoryStation;                                         // 0x0A74(0x0004)
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_ResupplyStation* currentResupply;                                          // 0x0A78(0x0004)
	unsigned long                                      inventoryStationWaitingForCharacter : 1;                  // 0x0A7C(0x0004)
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* inventoryStationWaitingForCharacterInput;                 // 0x0A80(0x0004)
	unsigned long                                      bWasUsingDeployable : 1;                                  // 0x0A84(0x0004)
	struct FStruct_Vector                              damageFlashColor;                                         // 0x0A88(0x000C) (Edit, NoClear)
	float                                              damageFlashScale;                                         // 0x0A94(0x0004) (Edit, NoClear)
	float                                              maxFlashThreshold;                                        // 0x0A98(0x0004) (Edit, NoClear)
	float                                              minFlashThreshold;                                        // 0x0A9C(0x0004) (Edit, NoClear)
	float                                              damageFlashMultiplier;                                    // 0x0AA0(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_BaseCamera_PlayerControllerCamera* controllingCamera;                                        // 0x0AA4(0x0004)
	class AClass_Object_Actor_Info_RoundInfo*          RoundInfo;                                                // 0x0AA8(0x0004) (Net)
	class AClass_Object_Actor_Info_BaseInfo*           spawnBase;                                                // 0x0AAC(0x0004)
	float                                              respawnDelay;                                             // 0x0AB0(0x0004) (Net)
	int                                                livesLeft;                                                // 0x0AB4(0x0004)
	unsigned long                                      bWaitingForRoundEnd : 1;                                  // 0x0AB8(0x0004)
	unsigned long                                      bUseEnabled : 1;                                          // 0x0AB8(0x0004)
	float                                              objectivesUpdateRate;                                     // 0x0ABC(0x0004)
	class AClass_Object_Actor_Info_ObjectivesList*     objectives;                                               // 0x0AC0(0x0004) (Net)
	class AClass_Object_Actor_UseableObject*           CurrentUseableObject;                                     // 0x0AC4(0x0004)
	class AClass_Object_Actor_UseableObject*           PromptingUseableObject;                                   // 0x0AC8(0x0004)
	class UClass_Object_Field_Struct_State_Class*      PromptingObjectClass;                                     // 0x0ACC(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      PromptingDataClass;                                       // 0x0AD0(0x0004) (Net)
	struct FStruct_Vector                              PromptingObjectLocation;                                  // 0x0AD4(0x000C) (Net)
	unsigned char                                      PromptingObjectPromptIndex;                               // 0x0AE0(0x0001) (Net)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0AE1(0x0003) MISSED OFFSET
	unsigned long                                      PromptingObjectCanBeUsed : 1;                             // 0x0AE4(0x0004) (Net)
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* CurrentUseableInventoryAccess;                            // 0x0AE8(0x0004) (Net)
	struct FString                                     lowPriorityPromptText;                                    // 0x0AEC(0x000C) (NeedCtorLink)
	float                                              lowPriorityPromptTimeout;                                 // 0x0AF8(0x0004)
	class AClass_Object_Actor_GenericExternalCamera_TalkingHeadCamera* currentTalkingHeadCam;                                    // 0x0AFC(0x0004)
	class AClass_Object_Actor_Script*                  talkingHeadScript;                                        // 0x0B00(0x0004)
	unsigned long                                      bCountDown : 1;                                           // 0x0B04(0x0004)
	float                                              countDown;                                                // 0x0B08(0x0004)
	int                                                ChatCount;                                                // 0x0B0C(0x0004)
	float                                              LastValidChatTime;                                        // 0x0B10(0x0004)
	float                                              ChatSpamMutedTime;                                        // 0x0B14(0x0004)
	int                                                MaxMessageTextLength;                                     // 0x0B18(0x0004) (Config)
	unsigned long                                      ChatSpamGuardEnabled : 1;                                 // 0x0B1C(0x0004) (Config)
	int                                                ChatSpamMaxMessages;                                      // 0x0B20(0x0004) (Config)
	float                                              ChatSpamThresholdTime;                                    // 0x0B24(0x0004) (Config)
	float                                              ChatSpamMutePeriod;                                       // 0x0B28(0x0004) (Config)
	struct FString                                     vehiclePositionSwitchOneKey;                              // 0x0B2C(0x000C) (NeedCtorLink)
	struct FString                                     vehiclePositionSwitchTwoKey;                              // 0x0B38(0x000C) (NeedCtorLink)
	struct FString                                     vehiclePositionSwitchThreeKey;                            // 0x0B44(0x000C) (NeedCtorLink)
	struct FString                                     gameStatsKey;                                             // 0x0B50(0x000C) (NeedCtorLink)
	struct FString                                     myStatsKey;                                               // 0x0B5C(0x000C) (NeedCtorLink)
	struct FString                                     adminKey;                                                 // 0x0B68(0x000C) (NeedCtorLink)
	struct FString                                     respawnKey;                                               // 0x0B74(0x000C) (NeedCtorLink)
	TArray<struct FStruct_SkinPreferenceMapping>       skinPreferences;                                          // 0x0B80(0x000C) (NeedCtorLink)
	unsigned long                                      bJustRespawned : 1;                                       // 0x0B8C(0x0004)
	class UClass_Object_Field_Struct_State_Class*      armorClassBeforeInventoryAccess;                          // 0x0B90(0x0004)
	class UClass_Object_PlayerCamera*                  Camera;                                                   // 0x0B94(0x0004)
	struct FName                                       introCameraOldState;                                      // 0x0B98(0x0004)
	class AClass_Object_Actor_Script*                  introCameraScript;                                        // 0x0B9C(0x0004)
	unsigned long                                      bOldBehindView : 1;                                       // 0x0BA0(0x0004)
	TArray<class AClass_Object_Actor_PointOfInterest*> PointsOfInterest;                                         // 0x0BA4(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.PlayerController.PlayerCharacterController");
		return ptr;
	}


	void Function_dumpVehicleData();
	void Function_ResetSpeedhack();
	bool Function_isInCutscene();
	void Function_PlayPainSound(TEnumAsByte<EClientPainType> Type);
	void Function_ServerViewNextSpectatorStart();
	void Function_ServerViewNextMPObject();
	void Function_GivePawn_GivePawn(class AClass_Object_Actor_Pawn* NewPawn);
	void Function_SetCinematicMode_SetCinematicMode(bool bCinematic);
	void Function_ShowSubtitle_ShowSubtitle(const struct FString& Subtitle, float lifetime);
	void Function_ClientSetBehindView_ClientSetBehindView(bool B, bool bInteractive);
	void Function_ServerToggleBehindView_ServerToggleBehindView();
	void Function_InventoryCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_PlayerCalcView_PlayerCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_movementReport();
	void Function_debugMovementReplication(int Level);
	void Function_serverDebugMovementReplication(int Level);
	void Function_ToggleQuickChat();
	void Function_UnMute(const struct FString& PlayerName);
	void Function_Mute(const struct FString& PlayerName);
	bool Function_IsMuted(const struct FString& PlayerName);
	void Function_Use_Use();
	void Function_Tick_Tick(float Delta);
	class UClass_Object_Field_Struct_State_Class* Function_GetLastWeapon();
	class AClass_Object_Actor_Info_TeamInfo* Function_getOtherTeam();
	class AClass_Object_Actor_Info_TeamInfo* Function_getOwnTeam();
	void Function_debugSwitchSpawnBase();
	void Function_NotifyTakeHit_NotifyTakeHit(class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, int Damage, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& Momentum);
	void Function_ClientDamagedFrom(TEnumAsByte<EDirectionType> direction, int DamageAmount);
	void Function_serverActivatePack();
	void Function_activatePack();
	void Function_SpectatePlayer(const struct FString& PlayerName);
	void Function_spectate(const struct FString& PlayerName);
	void Function_switchTeam(bool bAdminOverride);
	class AClass_Object_Actor_Info_TeamInfo* Function_getTeamInfo(int Index);
	void Function_ChangeTeam_ChangeTeam(int i, bool bAdminOverride);
	void Function_setIsFemale(bool B);
	void Function_ProcessZoom(float Delta, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_ShowHelpScreen();
	void Function_TeamQuickChat(const struct FString& Message, const struct FString& ChatTag, bool bLocal, const struct FString& animName);
	void Function_QuickChat(const struct FString& Message, const struct FString& ChatTag, bool bLocal, const struct FString& animName);
	void Function_TeamSay_TeamSay(const struct FString& msg);
	void Function_Say_Say(const struct FString& msg);
	void Function_ApplyMessageRestrictions(struct FString* msg);
	bool Function_IsChatSpam();
	void Function_TribesTeamTalk();
	void Function_TribesTalk();
	void Function_equipCarryable();
	void Function_equipDeployable();
	void Function_ScrollChatWindow(int numLines);
	void Function_CycleChatWindowSize();
	void Function_CycleRadarZoomScale();
	void Function_cycleZoomLevel(bool bReverse);
	void Function_setZoomLevel(int Index);
	void Function_forceCycleZoomLevel(bool bReverse);
	void Function_SwitchToFallbackWeapon();
	void Function_SetWeapon(class UClass_Object_Field_Struct_State_Class* weaponClass);
	void Function_SwitchWeapon_SwitchWeapon(unsigned char F);
	void Function_ShiftWeapon(int Offset);
	void Function_serverNextWeapon();
	void Function_NextWeapon_NextWeapon();
	void Function_serverPrevWeapon();
	void Function_PrevWeapon_PrevWeapon();
	void Function_serverEquipCarryable();
	void Function_serverEquipDeployable();
	void Function_serverSelectWeapon(class AClass_Object_Actor_Equipment_Equippable_Weapon* W);
	void Function_Timer_Timer();
	void Function_enterCombat();
	void Function_tribesServerDrive(TEnumAsByte<EDigitalAxisInput> InForward, TEnumAsByte<EDigitalAxisInput> InStrafe, int packedRotation, bool inThrust, bool inDive);
	void Function_tribesProcessDrive(float InForward, float InStrafe, const struct FStruct_Rotator& directionRotation, bool inThrust, bool inDive);
	void Function_stateServerSwitchVehiclePosition(unsigned char Position);
	void Function_serverSwitchVehiclePosition(unsigned char Position);
	void Function_switchVehiclePosition(unsigned char Position);
	void Function_serverVehicleTurretMove(int packedMoveRotation, int packedVehicleSpaceRotation);
	void Function_replicateTurretMove(float DeltaTime, float aTurn, float aLookUp);
	void Function_clientAdjustTurretPosition(float TimeStamp, int serverPitch, int serverYaw, int serverTargetPitch, int serverTargetYaw, const struct FName& NewState);
	void Function_serverTurretMove(float TimeStamp, float turn, float Lookup, int clientPitch, int clientYaw, float importantDelta, float importantTurn, float importantLookup);
	void Function_processTurretMove(float DeltaTime, float aTurn, float aLookUp);
	void Function_serverInventoryStationSwitchVehiclePosition(unsigned char Position, const struct FStruct_InventoryStationLoadout& selectedLoadout);
	void Function_inventoryStationSwitchVehiclePosition(unsigned char Position, const struct FStruct_InventoryStationLoadout& selectedLoadout);
	void Function_serverFinishEquippingPreRestart(class UClass_Object_Field_Struct_State_Class* selectedRole, const struct FString& userSkin, int activeWeaponSlot, class UClass_Object_Field_Struct_State_Class* selectedPack, class UClass_Object_Field_Struct_State_Class* grenades, class UClass_Object_Field_Struct_State_Class* weaponSlot1, class UClass_Object_Field_Struct_State_Class* weaponSlot2, class UClass_Object_Field_Struct_State_Class* weaponSlot3, class UClass_Object_Field_Struct_State_Class* weaponSlot4, class UClass_Object_Field_Struct_State_Class* weaponSlot5, class UClass_Object_Field_Struct_State_Class* weaponSlot6, class UClass_Object_Field_Struct_State_Class* weaponSlot7, class UClass_Object_Field_Struct_State_Class* weaponSlot8, class UClass_Object_Field_Struct_State_Class* weaponSlot9, class UClass_Object_Field_Struct_State_Class* weaponSlot10);
	void Function_serverFinishInventoryStationAccess(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* inputInventoryStation, class UClass_Object_Field_Struct_State_Class* selectedRole, const struct FString& userSkin, int activeWeaponSlot, class UClass_Object_Field_Struct_State_Class* selectedPack, class UClass_Object_Field_Struct_State_Class* grenades, class UClass_Object_Field_Struct_State_Class* weaponSlot1, class UClass_Object_Field_Struct_State_Class* weaponSlot2, class UClass_Object_Field_Struct_State_Class* weaponSlot3, class UClass_Object_Field_Struct_State_Class* weaponSlot4, class UClass_Object_Field_Struct_State_Class* weaponSlot5, class UClass_Object_Field_Struct_State_Class* weaponSlot6, class UClass_Object_Field_Struct_State_Class* weaponSlot7, class UClass_Object_Field_Struct_State_Class* weaponSlot8, class UClass_Object_Field_Struct_State_Class* weaponSlot9, class UClass_Object_Field_Struct_State_Class* weaponSlot10);
	void Function_serverFinishQuickInventoryStationAccess(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* inputInventoryStation, class UClass_Object_Field_Struct_State_Class* selectedRole, const struct FString& userSkin, int activeWeaponSlot, class UClass_Object_Field_Struct_State_Class* selectedPack, class UClass_Object_Field_Struct_State_Class* grenades, class UClass_Object_Field_Struct_State_Class* weaponSlot1, class UClass_Object_Field_Struct_State_Class* weaponSlot2, class UClass_Object_Field_Struct_State_Class* weaponSlot3, class UClass_Object_Field_Struct_State_Class* weaponSlot4, class UClass_Object_Field_Struct_State_Class* weaponSlot5, class UClass_Object_Field_Struct_State_Class* weaponSlot6, class UClass_Object_Field_Struct_State_Class* weaponSlot7, class UClass_Object_Field_Struct_State_Class* weaponSlot8, class UClass_Object_Field_Struct_State_Class* weaponSlot9, class UClass_Object_Field_Struct_State_Class* weaponSlot10);
	void Function_clientTerminateInventoryStationAccess();
	void Function_serverTerminateInventoryStationAccess();
	void Function_clientInventoryStationAccess(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* inputInventoryStation);
	void Function_clientInventoryStationWait();
	void Function_clientFinishInventoryStationAccess();
	void Function_serverToggleReady();
	void Function_serverSpectate(const struct FString& PlayerName);
	void Function_ServerCancelRespawn();
	void Function_ServerPlayerSelectRespawn();
	void Function_ServerKillPlayer();
	void Function_ServerRestartPlayerAtBase(class AClass_Object_Actor_Info_BaseInfo* Base, bool bKeepPawn);
	void Function_ServerRestartPlayerKeepPawn();
	void Function_ServerReStartPlayer_ServerReStartPlayer();
	void Function_ServerRestartPlayerInVehicle(int vehicleRespawnIndex, bool bKeepPawn);
	void Function_TribesMoveAutonomous(float DeltaTime, const struct FStruct_Rotator& moveRotation, float forward, float strafe, bool ski, bool thrust, bool Jump);
	void Function_ClientUpdatePosition_ClientUpdatePosition();
	void Function_LongClientAdjustPosition_LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AClass_Object_Actor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	void Function_TribesLongClientAdjustPosition(float TimeStamp, float Accumulator, float energy, const struct FName& NewState, TEnumAsByte<EMovementState> Movement, float StartLocX, float StartLocY, float StartLocZ, float EndLocX, float EndLocY, float EndLocZ, float NewVelX, float NewVelY, float NewVelZ);
	void Function_TribesAdjustState(float TimeStamp, const struct FName& NewState);
	bool Function_CommonClientAdjustPosition(float TimeStamp, const struct FName& NewState);
	void Function_TribesClientAdjustPositionEx(float TimeStamp, float Accumulator, float energy, const struct FName& NewState, TEnumAsByte<EMovementState> Movement, float StartLocX, float StartLocY, float StartLocZ, float EndLocX, float EndLocY, float EndLocZ, float NewVelX, float NewVelY, float NewVelZ);
	void Function_TribesShortClientAdjustPositionEx(float TimeStamp, float Accumulator, float energy, const struct FName& NewState, TEnumAsByte<EMovementState> Movement, float StartLocX, float StartLocY, float StartLocZ, float EndLocX, float EndLocY, float EndLocZ);
	void Function_TribesProcessMove(float forward, float strafe, float Jump, float ski, float thrust);
	void Function_SendClientAdjustment();
	void Function_TribesServerMove(float TimeStamp, const struct FStruct_Vector& ClientLoc, int View, TEnumAsByte<EDigitalAxisInput> digitalForward, TEnumAsByte<EDigitalAxisInput> digitalStrafe, bool ski, bool thrust, bool Jump, unsigned char CompressedImportantTimeDelta, int ImportantMoveData);
	void Function_TribesStateServerMove(float TimeStamp);
	void Function_TribesDualServerMove(float TimeStamp0, unsigned char buttonInput, TEnumAsByte<EDigitalAxisInput> forward0, TEnumAsByte<EDigitalAxisInput> strafe0, int View0, float TimeStamp, TEnumAsByte<EDigitalAxisInput> forward, TEnumAsByte<EDigitalAxisInput> strafe, int View, const struct FStruct_Vector& ClientLoc, unsigned char CompressedImportantTimeDelta, int ImportantMoveData);
	void Function_TribesShortServerMove(float TimeStamp, const struct FStruct_Vector& ClientLoc, int View);
	void Function_CallServerMove(const struct FStruct_Vector& ClientLoc, class UClass_Object_DeleteableObject_SavedMove* NewMove, unsigned char CompressedImportantTimeDelta, int ImportantMoveData);
	void Function_TribesReplicateMove(float forward, float strafe, bool ski, bool thrust, bool Jump);
	void Function_CleanOutSavedMoves_CleanOutSavedMoves();
	void Function_AppendSavedMove(class UClass_Object_DeleteableObject_SavedMove* M);
	void Function_PopSavedMove();
	void Function_AppendFreeMove(class UClass_Object_DeleteableObject_SavedMove* M);
	void Function_PopFreeMove();
	class UClass_Object_DeleteableObject_SavedMove* Function_TribesGetFreeMove();
	void Function_clientSetCheats(class UClass_Object_Field_Struct_State_Class* C);
	void Function_AddCheats_AddCheats();
	void Function_checkForFireButton();
	void Function_doIdentify(float Delta);
	void Function_UpdateScreenRes();
	class AClass_Object_Actor* Function_GetIdentify();
	void Function_PlayerTick_PlayerTick(float DeltaTime);
	void Function_showAdmin();
	void Function_showGameStats();
	void Function_showWeaponStats();
	void Function_showMyStats();
	void Function_toggleEscapePanel(const struct FString& menuClass);
	void Function_showEscapeMenu_showEscapeMenu();
	bool Function_SkipOpeningCutscene();
	bool Function_isSinglePlayer();
	void Function_whack();
	void Function_effectLog();
	void Function_updatePhysicsConfiguration();
	void Function_setGroundMovement(const struct FString& Mode);
	void Function_setAlertness(const struct FString& Mode);
	void Function_playFlinchAnimation();
	void Function_isLoopingArmAnimation();
	void Function_stopArmAnimation();
	void Function_loopArmAnimation(const struct FString& Animation);
	void Function_isLoopingUpperBodyAnimation();
	void Function_isPlayingUpperBodyAnimation();
	void Function_stopUpperBodyAnimation();
	void Function_loopUpperBodyAnimation(const struct FString& Animation);
	void Function_playUpperBodyAnimation(const struct FString& Animation);
	void Function_playFireAnimation(const struct FString& Weapon);
	void Function_isLoopingAnimation();
	void Function_isPlayingAnimation();
	void Function_stopAnimation();
	void Function_loopAnimation(const struct FString& Animation);
	void Function_playAnimation(const struct FString& Animation);
	void Function_movementDebug();
	void Function_debugMovement();
	void Function_animationDebug();
	void Function_debugAnimation();
	bool Function_inDebugHud();
	void Function_setDebugHud(bool Visible);
	void Function_toggleDebugHUD();
	void Function_Force(const struct FString& Name);
	void Function_Movement(const struct FString& Name);
	void Function_tournamentvote(bool vote);
	void Function_teamdamagevote(bool vote);
	void Function_adminvote(const struct FString& Name);
	void Function_mapvote(const struct FString& Map, const struct FString& GameType);
	void Function_kickvote(const struct FString& Name);
	void Function_DisplayDebug_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_serverEquipFallbackWeapon();
	void Function_checkAutoWeaponSwitch();
	void Function_clientTribesSetHUD(const struct FString& newHUDType);
	void Function_ClientSetHUD_ClientSetHUD(class UClass_Object_Field_Struct_State_Class* newHUDType, class UClass_Object_Field_Struct_State_Class* newScoringType);
	bool Function_WorldToScreen(struct FStruct_Vector* inputVector);
	struct FStruct_Vector Function_calculateScreenPosition(class UClass_Object_Field_Struct_State_Class* ObjectClass, const struct FStruct_Vector& objectPos);
	void Function_PawnDied_PawnDied_PawnDied(class AClass_Object_Actor_Pawn* p);
	void Function_UnPossess_UnPossess_UnPossess();
	void Function_Possess_Possess_Possess(class AClass_Object_Actor_Pawn* aPawn);
	void Function_ClientRestart_ClientRestart(class AClass_Object_Actor_Pawn* aPawn, const struct FName& currentState);
	void Function_equipCharacter();
	void Function_newLoadout(class UClass_Object_Loadout* L);
	bool Function_HasCurrentLoadout();
	void Function_PostNetReceive_PostNetReceive();
	void Function_PostLoadGame_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_initHUDObjects();
	void Function_respawn(bool bAllowExit);
	void Function_SelectTeleport();
	void Function_jetpack(float F);
	void Function_releaseAltFire(float F);
	void Function_AltFire_AltFire(float F);
	void Function_releaseFire(float F);
	void Function_Fire(float F);
	void Function_playerDisconnected();
	void Function_updateCasts();
	void Function_hideTalkingHead(class AClass_Object_Actor_Script* requestingScript);
	void Function_showTalkingHead(class AClass_Object_Actor_GenericExternalCamera_TalkingHeadCamera* thc, class AClass_Object_Actor_Script* requestingScript);
	void Function_ResetInputState();
	float STATIC_Function_digitalToAnalogue(TEnumAsByte<EDigitalAxisInput> digitalInput, float MaxValue);
	TEnumAsByte<EDigitalAxisInput> STATIC_Function_analogueToDigital(float analogueInput, float MaxValue);
	bool Function_CanUseQuickInventoryLoadoutMenu();
	void Function_UpdateUseableObject();
	void Function_serverSetRadarZoomScale(float newRadarZoomScale);
	void Function_serverCommandHUDHidden();
	void Function_serverCommandHUDShown();
	struct FStruct_DynamicTurretRotationProcessingOutput STATIC_Function_dynamicTurretRotationProcessing(const struct FStruct_Rotator& moveRotation, const struct FStruct_Rotator& mountRotation, float minimumPitch, float maximumPitch, bool yawConstrained, bool yawPositiveDirection, float yawStart, float yawRange);
	void Function_clientWeaponUseEnergy(float quantity);
	class AClass_Object_Actor_Info_TeamInfo* Function_GetControllerTeam();
	bool Function_IsFriendly_IsFriendly(class AClass_Object_Actor* Other);
	bool Function_IsFriendlyPRI_IsFriendlyPRI(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* OtherPRI);
	int Function_addSkinPreferenceRecord(class UClass_Object_Primitive_Mesh* Mesh, const struct FString& skinPath);
	int Function_getSkinPreferenceRecord(class UClass_Object_Primitive_Mesh* Mesh);
	void Function_saveSkinPreference(class UClass_Object_Primitive_Mesh* Mesh, const struct FString& skinPath);
	struct FString Function_GetSkinPreference(class UClass_Object_Primitive_Mesh* Mesh);
	void Function_updateCharacterUserSkin();
	void Function_serverSetSkin(const struct FString& skinPath, class UClass_Object_Primitive_Mesh* Mesh);
	void Function_clientSetSkinPreference(class UClass_Object_Primitive_Mesh* Mesh, const struct FString& skinPath);
	void Function_clientGetSkinPreference(class UClass_Object_Primitive_Mesh* Mesh);
	void Function_clientLoadSkinClasses();
	void Function_removeDetectedEnemy(class AClass_Object_Actor_SensorListNode* sln);
	void Function_addDetectedEnemy(class AClass_Object_Actor_Pawn_Rook* detectedEnemy);
	void Function_removeDetectedFriendly(class AClass_Object_Actor_SensorListNode* sln);
	void Function_addDetectedFriendly(class AClass_Object_Actor_Pawn_Rook* detectedFriendly);
	bool Function_isRookRelevant(class AClass_Object_Actor_Pawn_Rook* sensedRook);
	int Function_calculateHeight(float rookZ);
	void Function_DestroySensorList(class AClass_Object_Actor_SensorListNode* Head);
	void Function_DestroySensorLists();
	void Function_SetForcedRespawn(bool bForced);
	void Function_serverSetForcedRespawn(bool bForced);
	void Function_ClientGotoState_ClientGotoState(const struct FName& NewState, const struct FName& NewLabel);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_updateCachedKeyBindings();
	void Function_GameSaved_GameSaved();
	bool Function_CheckSpeedHack(float DeltaTime);
};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character
// 0x02C0 (0x0BCC - 0x090C)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character : public AClass_Object_Actor_Pawn_Rook_Ragdoll
{
public:
	float                                              MovementSpeed;                                            // 0x090C(0x0004) (Const)
	float                                              movementVerticalSpeed;                                    // 0x0910(0x0004) (Const)
	float                                              movementHorizontalSpeed;                                  // 0x0914(0x0004) (Const)
	float                                              movementTangentialSpeed;                                  // 0x0918(0x0004) (Const)
	float                                              movementDirectionalSpeed;                                 // 0x091C(0x0004) (Const)
	float                                              movementAltitude;                                         // 0x0920(0x0004) (Const)
	unsigned long                                      movementCollided : 1;                                     // 0x0924(0x0004) (Const)
	unsigned long                                      movementClose : 1;                                        // 0x0924(0x0004) (Const)
	unsigned long                                      movementTouching : 1;                                     // 0x0924(0x0004) (Const)
	unsigned long                                      movementGrounded : 1;                                     // 0x0924(0x0004) (Const)
	unsigned long                                      movementAirborne : 1;                                     // 0x0924(0x0004) (Const)
	unsigned long                                      movementWater : 1;                                        // 0x0924(0x0004) (Const)
	unsigned long                                      movementUnderWater : 1;                                   // 0x0924(0x0004) (Const)
	unsigned long                                      movementZeroGravity : 1;                                  // 0x0924(0x0004) (Const)
	unsigned long                                      movementElevator : 1;                                     // 0x0924(0x0004) (Const)
	unsigned long                                      movementResting : 1;                                      // 0x0924(0x0004) (Const)
	unsigned long                                      movementDynamic : 1;                                      // 0x0924(0x0004) (Const)
	unsigned long                                      movementPushing : 1;                                      // 0x0924(0x0004) (Const)
	struct FStruct_Vector                              movementNormal;                                           // 0x0928(0x000C) (Const)
	float                                              movementWaterPenetration;                                 // 0x0934(0x0004) (Const)
	float                                              movementSplashChaos;                                      // 0x0938(0x0004) (Const)
	float                                              movementImpulseChaos;                                     // 0x093C(0x0004) (Const)
	float                                              movementSphereRadius;                                     // 0x0940(0x0004) (Const)
	float                                              movementSphyllRadius;                                     // 0x0944(0x0004) (Const)
	float                                              movementSphyllHalfHeight;                                 // 0x0948(0x0004) (Const)
	int                                                movementGroundState;                                      // 0x094C(0x0004) (Const)
	int                                                movementCollisionMaterial;                                // 0x0950(0x0004) (Const)
	unsigned long                                      movementThrusting : 1;                                    // 0x0954(0x0004) (Const)
	unsigned long                                      movementOldThrusting : 1;                                 // 0x0954(0x0004) (Const)
	struct FStruct_Vector                              movementDisplacement;                                     // 0x0958(0x000C) (Const)
	float                                              movementDisplacementRate;                                 // 0x0964(0x0004) (Const)
	struct FStruct_Vector                              movementStrafe;                                           // 0x0968(0x000C) (Const)
	struct FStruct_Vector                              movementOldVelocity;                                      // 0x0974(0x000C) (Const)
	unsigned long                                      movementSkiInput : 1;                                     // 0x0980(0x0004) (Const)
	float                                              movementKnockbackScale;                                   // 0x0984(0x0004) (Edit)
	float                                              movementExtraMass;                                        // 0x0988(0x0004) (Edit)
	unsigned long                                      movementFrozen : 1;                                       // 0x098C(0x0004) (Edit)
	float                                              lastMovementDamageTime;                                   // 0x0990(0x0004)
	float                                              lastMovementCollisionTime;                                // 0x0994(0x0004)
	unsigned long                                      blockMovementDamage : 1;                                  // 0x0998(0x0004)
	class UClass_Object_Material*                      collisionMaterialObject;                                  // 0x099C(0x0004)
	unsigned char                                      movementSimProxyPitch;                                    // 0x09A0(0x0001) (Const)
	TEnumAsByte<EMovementDirectionalInput>             movementSimProxyInputX;                                   // 0x09A1(0x0001) (Const, Net)
	TEnumAsByte<EMovementDirectionalInput>             movementSimProxyInputY;                                   // 0x09A2(0x0001) (Const, Net)
	unsigned char                                      UnknownData00[0x1];                                       // 0x09A3(0x0001) MISSED OFFSET
	unsigned long                                      movementSimProxyInputThrust : 1;                          // 0x09A4(0x0004) (Const, Net)
	unsigned long                                      movementSimProxyInputJump : 1;                            // 0x09A4(0x0004) (Const, Net)
	unsigned long                                      movementSimProxyInputSki : 1;                             // 0x09A4(0x0004) (Const, Net)
	float                                              walkAnimationSpeed;                                       // 0x09A8(0x0004) (Edit)
	float                                              runAnimationSpeed;                                        // 0x09AC(0x0004) (Edit)
	float                                              sprintAnimationSpeed;                                     // 0x09B0(0x0004) (Edit)
	struct FName                                       neutralAimAnimationRootBone;                              // 0x09B4(0x0004) (Edit)
	struct FName                                       alertAimAnimationRootBone;                                // 0x09B8(0x0004) (Edit)
	struct FName                                       combatAimAnimationRootBone;                               // 0x09BC(0x0004) (Edit)
	struct FName                                       upperBodyAnimationRootBone;                               // 0x09C0(0x0004) (Edit)
	struct FName                                       armAnimationRootBone;                                     // 0x09C4(0x0004) (Edit)
	class UClass_Object_DeleteableObject_AnimationManager* AnimationManager;                                         // 0x09C8(0x0004) (Transient)
	TArray<class UClass_Object_DeleteableObject_AnimationState*> animationStates;                                          // 0x09CC(0x000C) (Transient, NeedCtorLink)
	TArray<class UClass_Object_DeleteableObject_AnimationChannel*> animationChannels;                                        // 0x09D8(0x000C) (Transient, NeedCtorLink)
	class UClass_Object_DeleteableObject_AnimationLayer* primaryAnimationLayer;                                    // 0x09E4(0x0004) (Transient)
	class UClass_Object_DeleteableObject_AnimationLayer* secondaryAnimationLayer;                                  // 0x09E8(0x0004) (Transient)
	class UClass_Object_DeleteableObject_AnimationSpring* animationHeightSpring;                                    // 0x09EC(0x0004) (Transient)
	class UClass_Object_DeleteableObject_AnimationSpring* animationVelocitySpring;                                  // 0x09F0(0x0004) (Transient)
	unsigned long                                      m_bManualAnimation : 1;                                   // 0x09F4(0x0004) (Net)
	unsigned long                                      m_bOldManualAnimation : 1;                                // 0x09F4(0x0004)
	float                                              vehicleTeamCrushingDamageModifier;                        // 0x09F8(0x0004) (Edit)
	struct FString                                     VoiceSetPackageName;                                      // 0x09FC(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     CharacterNameLocalisationTag;                             // 0x0A08(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     CharacterName;                                            // 0x0A14(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     playerNameMP;                                             // 0x0A20(0x000C) (NeedCtorLink)
	float                                              packDrawScale;                                            // 0x0A2C(0x0004) (Edit)
	class UClass_Object_Material*                      invicibilityMaterial;                                     // 0x0A30(0x0004) (Edit)
	TEnumAsByte<EPhysics>                              previousPhysics;                                          // 0x0A34(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0A35(0x0003) MISSED OFFSET
	unsigned long                                      bTempInvincible : 1;                                      // 0x0A38(0x0004) (Net)
	unsigned long                                      bLocalTempInvincible : 1;                                 // 0x0A38(0x0004)
	unsigned long                                      bHiddenVehicleOccupant : 1;                               // 0x0A38(0x0004)
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TribesReplicationInfo;                                    // 0x0A3C(0x0004)
	class AClass_Object_Actor_Motor_CharacterMotor*    Motor;                                                    // 0x0A40(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon;                                                   // 0x0A44(0x0004) (Net)
	struct FName                                       weaponBone;                                               // 0x0A48(0x0004)
	unsigned long                                      weaponPlayingArmAnimation : 1;                            // 0x0A4C(0x0004)
	float                                              weaponNotHeldTime;                                        // 0x0A50(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* altWeapon;                                                // 0x0A54(0x0004) (Net)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* fallbackWeapon;                                           // 0x0A58(0x0004) (Net)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* weaponSlots[0x3];                                         // 0x0A5C(0x0004) (Net)
	struct FName                                       eyeBoneName;                                              // 0x0A68(0x0004)
	int                                                eyeBoneIndex;                                             // 0x0A6C(0x0004) (Const)
	struct FStruct_Vector                              eyeBoneOffset;                                            // 0x0A70(0x000C) (Const)
	class AClass_Object_Actor_Controller*              lastPossessor;                                            // 0x0A7C(0x0004)
	float                                              HeadHeight;                                               // 0x0A80(0x0004) (Net, NoClear)
	unsigned long                                      bGodMode : 1;                                             // 0x0A84(0x0004)
	class UClass_Object_Field_Struct_State_Class*      loadoutClass;                                             // 0x0A88(0x0004) (Edit, NoClear, EditInline, EditInlineUse)
	class UClass_Object_Field_Struct_State_Class*      armorClass;                                               // 0x0A8C(0x0004) (Edit, Net, NoClear)
	class UClass_Object_Loadout*                       Loadout;                                                  // 0x0A90(0x0004)
	unsigned long                                      bDisallowEquipmentDropOnDeath : 1;                        // 0x0A94(0x0004) (Edit)
	class AClass_Object_Actor_Equipment*               m_equipmentHead;                                          // 0x0A98(0x0004) (Net)
	class AClass_Object_Actor_Equipment*               potentialEquipment;                                       // 0x0A9C(0x0004) (Net)
	unsigned long                                      bDontAllowCarryablePickups : 1;                           // 0x0AA0(0x0004) (Edit, NoClear)
	unsigned long                                      bDontInteractWithTerritories : 1;                         // 0x0AA0(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* carryableReference;                                       // 0x0AA4(0x0004) (Net)
	TArray<class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable*> carryables;                                               // 0x0AA8(0x000C) (NeedCtorLink)
	int                                                numCarryables;                                            // 0x0AB4(0x0004) (Net)
	class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_MPCarryableThrower* pseudoWeapon;                                             // 0x0AB8(0x0004) (Net)
	int                                                numPermanentCarryables;                                   // 0x0ABC(0x0004) (Net)
	int                                                lastCarryableNumber;                                      // 0x0AC0(0x0004)
	unsigned long                                      bCanZoom : 1;                                             // 0x0AC4(0x0004) (Edit)
	unsigned long                                      bZoomed : 1;                                              // 0x0AC4(0x0004)
	unsigned long                                      bDontAllowCommandScreen : 1;                              // 0x0AC4(0x0004) (Edit, NoClear)
	TEnumAsByte<EJetCompetencyLevels>                  jetCompetency;                                            // 0x0AC8(0x0001) (Edit, NoClear)
	TEnumAsByte<ESkiCompetencyLevels>                  skiCompetency;                                            // 0x0AC9(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0ACA(0x0002) MISSED OFFSET
	unsigned long                                      bApplyHealthFilter : 1;                                   // 0x0ACC(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      CombatRole;                                               // 0x0AD0(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      localCombatRole;                                          // 0x0AD4(0x0004)
	struct FName                                       needToPlayArmAnim;                                        // 0x0AD8(0x0004)
	unsigned long                                      bDisableSkiing : 1;                                       // 0x0ADC(0x0004) (Edit)
	unsigned long                                      bDisableJetting : 1;                                      // 0x0ADC(0x0004) (Edit)
	struct FName                                       jetpackBone;                                              // 0x0AE0(0x0004)
	class AClass_Object_Actor_jetpack*                 jetpack;                                                  // 0x0AE4(0x0004)
	class AClass_Object_Actor_Arms*                    Arms;                                                     // 0x0AE8(0x0004)
	unsigned long                                      regenerationActive : 1;                                   // 0x0AEC(0x0004)
	int                                                regenerationRateHealthPerSecond;                          // 0x0AF0(0x0004)
	unsigned long                                      shieldActive : 1;                                         // 0x0AF4(0x0004)
	float                                              shieldFractionDamageBlocked;                              // 0x0AF8(0x0004)
	class AClass_Object_Actor_Equipment_Pack*          Pack;                                                     // 0x0AFC(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      heldPackClass;                                            // 0x0B00(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      localPackClass;                                           // 0x0B04(0x0004)
	struct FName                                       packLeftBone;                                             // 0x0B08(0x0004)
	struct FName                                       packRightBone;                                            // 0x0B0C(0x0004)
	class AClass_Object_Actor_StaticMeshAttachment*    leftPack;                                                 // 0x0B10(0x0004)
	class AClass_Object_Actor_StaticMeshAttachment*    rightPack;                                                // 0x0B14(0x0004)
	unsigned long                                      bActivatingEffect : 1;                                    // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalActivatingEffect : 1;                               // 0x0B18(0x0004)
	unsigned long                                      bActiveEffect : 1;                                        // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalActiveEffect : 1;                                   // 0x0B18(0x0004)
	unsigned long                                      bDeactivatingEffect : 1;                                  // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalDeactivatingEffect : 1;                             // 0x0B18(0x0004)
	unsigned long                                      bActivatingEffectStarted : 1;                             // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalActivatingEffectStarted : 1;                        // 0x0B18(0x0004)
	unsigned long                                      bActiveEffectStarted : 1;                                 // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalActiveEffectStarted : 1;                            // 0x0B18(0x0004)
	unsigned long                                      bUnactivatingEffect : 1;                                  // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalUnactivatingEffect : 1;                             // 0x0B18(0x0004)
	unsigned long                                      bUnactiveEffect : 1;                                      // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalUnactiveEffect : 1;                                 // 0x0B18(0x0004)
	unsigned long                                      bUndeactivatingEffect : 1;                                // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalUndeactivatingEffect : 1;                           // 0x0B18(0x0004)
	unsigned long                                      bUnactivatingEffectStarted : 1;                           // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalUnactivatingEffectStarted : 1;                      // 0x0B18(0x0004)
	unsigned long                                      bUnactiveEffectStarted : 1;                               // 0x0B18(0x0004) (Net)
	unsigned long                                      bLocalUnactiveEffectStarted : 1;                          // 0x0B18(0x0004)
	unsigned long                                      bSpawningAtVehicle : 1;                                   // 0x0B18(0x0004) (Net)
	class AClass_Object_Actor_Equipment_Equippable_Deployable* Deployable;                                               // 0x0B1C(0x0004) (Net)
	float                                              healthInjectionRatePerSecond;                             // 0x0B20(0x0004)
	float                                              healthInjectionAmount;                                    // 0x0B24(0x0004) (Net)
	class AClass_Object_Actor_CharacterVisualisation*  visualisation;                                            // 0x0B28(0x0004)
	class UClass_Object_Field_Struct_State_Class*      grapplerClass;                                            // 0x0B2C(0x0004)
	class AClass_Object_Actor_Projectile_GrapplerProjectile* proj;                                                     // 0x0B30(0x0004) (Net)
	class AClass_Object_Actor_GrapplerRope*            rope;                                                     // 0x0B34(0x0004)
	float                                              ropeNaturalLength;                                        // 0x0B38(0x0004) (Net)
	TArray<class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character*> grapplerCharacters;                                       // 0x0B3C(0x000C) (NeedCtorLink)
	unsigned long                                      bAttached : 1;                                            // 0x0B48(0x0004) (Net)
	unsigned long                                      bLocalAttached : 1;                                       // 0x0B48(0x0004)
	unsigned long                                      bReelIn : 1;                                              // 0x0B48(0x0004) (Net)
	class AClass_Object_Actor_Pawn*                    lastHitObject;                                            // 0x0B4C(0x0004) (Net)
	unsigned long                                      bObjectHit : 1;                                           // 0x0B50(0x0004) (Net)
	unsigned long                                      bLocalObjectHit : 1;                                      // 0x0B50(0x0004)
	unsigned long                                      bHitRegistered : 1;                                       // 0x0B50(0x0004)
	unsigned long                                      bIsLocalCharacter : 1;                                    // 0x0B50(0x0004)
	struct FString                                     movementConfiguration;                                    // 0x0B54(0x000C) (NeedCtorLink)
	float                                              energy;                                                   // 0x0B60(0x0004)
	float                                              energyMinimum;                                            // 0x0B64(0x0004)
	float                                              energyMaximum;                                            // 0x0B68(0x0004)
	float                                              energyRechargeRate;                                       // 0x0B6C(0x0004)
	float                                              energyRechargeScale;                                      // 0x0B70(0x0004)
	float                                              energyWeaponDepleted;                                     // 0x0B74(0x0004)
	unsigned long                                      bZoomOutOnSpawn : 1;                                      // 0x0B78(0x0004)
	class UClass_Object_Field_Struct_State_Class*      userSkinClass;                                            // 0x0B7C(0x0004)
	float                                              localHealth;                                              // 0x0B80(0x0004)
	TEnumAsByte<EClientPainType>                       clientPainType;                                           // 0x0B84(0x0001) (Net)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0B85(0x0003) MISSED OFFSET
	struct FStruct_QuickChatInfo                       QCAnimData;                                               // 0x0B88(0x0010) (Net, NeedCtorLink)
	struct FStruct_QuickChatInfo                       LocalQCAnimData;                                          // 0x0B98(0x0010) (NeedCtorLink)
	struct FStruct_QuickChatInfo                       QCTalkData;                                               // 0x0BA8(0x0010) (Net, NeedCtorLink)
	struct FStruct_QuickChatInfo                       LocalQCTalkData;                                          // 0x0BB8(0x0010) (NeedCtorLink)
	unsigned char                                      dummy[0x4];                                               // 0x0BC8(0x0001) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character");
		return ptr;
	}


	void Function_teleportTo(const struct FStruct_Vector& newLoc, const struct FStruct_Rotator& NewRot);
	void Function_KilledBy_KilledBy_KilledBy(class AClass_Object_Actor_Pawn* EventInstigator);
	bool Function_ShouldActorsBlockSplash_ShouldActorsBlockSplash();
	bool Function_isTouchingEnergyBarrier();
	int Function_getMaxAmmo(class UClass_Object_Field_Struct_State_Class* wc);
	int Function_getModifiedAmmo(int baseAmmo);
	bool Function_isFemale();
	void Function_setZoomed(bool B);
	bool Function_isZoomed();
	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	bool Function_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	void Function_updateUserSkin();
	class UClass_Object_Field_Struct_State_Class* Function_GetRadarInfoClass_GetRadarInfoClass_GetRadarInfoClass();
	void Function_SetNaturalRopeLength(float Length);
	void Function_GetOtherGrappleData(int Index, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character** Other, float* naturalLength);
	void Function_GetOtherGrappleCount(int* Count);
	bool Function_GetGrappleData(class AClass_Object_Actor** attachedTo, struct FStruct_Vector* attachedPoint, float* naturalLength);
	void Function_detachGrapple(bool bNoRemove);
	void Function_BreakGrapple();
	void Function_playAttachedAnim();
	void Function_PlayDying_PlayDying_PlayDying(class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLoc);
	void Function_attachGrapple();
	void Function_updateRopeDrawScale();
	bool Function_ropeObstructionTrace(float traceLength);
	bool Function_shouldBreakRope();
	void Function_createRope();
	void Function_updateGrapplerRopeThirdPerson();
	void Function_updateGrapplerRopeEquippedFirstPerson();
	void Function_tickGrappler(float Delta);
	void Function_removeGrapplerCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_addGrapplerCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_PlayQuickChatSpeech();
	void Function_PlayDynamicSpeech(class UClass_Object_Sound* DynamicSpeech, const struct FName& dialogueLocTag);
	void Function_playPlayerScriptedSpeech(class UClass_Object_Sound* scriptedSpeech, const struct FName& dialogueLocTag);
	void Function_PlayScriptedSpeech(const struct FName& lipsyncLocTag, const struct FName& dialogueLocTag, bool bPositional);
	float Function_unifiedGetGravity_unifiedGetGravity();
	void Function_unifiedAddForceAtPosition_unifiedAddForceAtPosition_unifiedAddForceAtPosition(const struct FStruct_Vector& Force, const struct FStruct_Vector& Position);
	void Function_unifiedAddForce_unifiedAddForce_unifiedAddForce(const struct FStruct_Vector& Force);
	void Function_unifiedAddImpulseAtPosition_unifiedAddImpulseAtPosition_unifiedAddImpulseAtPosition(const struct FStruct_Vector& Impulse, const struct FStruct_Vector& Position);
	void Function_unifiedAddImpulse_unifiedAddImpulse_unifiedAddImpulse(const struct FStruct_Vector& Impulse);
	void Function_unifiedAddVelocity_unifiedAddVelocity(const struct FStruct_Vector& deltaVelocity);
	void Function_unifiedSetVelocity_unifiedSetVelocity(const struct FStruct_Vector& newVelocity);
	void Function_unifiedSetPosition_unifiedSetPosition(const struct FStruct_Vector& newPosition);
	void Function_unifiedSetAcceleration_unifiedSetAcceleration(const struct FStruct_Vector& newAcceleration);
	void Function_BaseChange_BaseChange_BaseChange();
	void Function_activatePack();
	class AClass_Object_Actor_Controller* Function_GetKillerController_GetKillerController();
	void Function_giveDefaultWeapon();
	int Function_numHealthKitsCarried();
	int Function_numWeaponsCarried();
	void Function_destroyEquipment();
	void Function_dropEquipment();
	class AClass_Object_Actor_Equipment* Function_prevEquipment(class AClass_Object_Actor_Equipment* From, class UClass_Object_Field_Struct_State_Class* Type);
	class AClass_Object_Actor_Equipment* Function_nextEquipment(class AClass_Object_Actor_Equipment* From, class UClass_Object_Field_Struct_State_Class* Type);
	void Function_removeEquipment(class AClass_Object_Actor_Equipment* Item);
	void Function_addEquipment(class AClass_Object_Actor_Equipment* Item);
	class AClass_Object_Actor_Equipment* Function_newEquipment(class UClass_Object_Field_Struct_State_Class* ItemClass);
	void Function_removeFromWeaponSlot(class AClass_Object_Actor_Equipment_Equippable_Weapon* W);
	void Function_putInWeaponSlot(class AClass_Object_Actor_Equipment_Equippable_Weapon* W);
	void Function_addPack(class AClass_Object_Actor_Equipment_Pack* newPack);
	class AClass_Object_Actor_Equipment_Pack* Function_newPack(class UClass_Object_Field_Struct_State_Class* packClass);
	void Function_addGrenades(class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_HandGrenade* newGrenades);
	class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_HandGrenade* Function_newGrenades(class UClass_Object_Field_Struct_State_Class* grenadeClass);
	class AClass_Object_Actor_Equipment* Function_equipmentTail();
	class AClass_Object_Actor_Equipment* Function_equipmentHead();
	void Function_PlayDeathSound(bool bCratered, bool bFlame);
	void Function_PlayHurtSound(int actualDamage);
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	TEnumAsByte<EHitPosition> Function_CalculateHitPosition(const struct FStruct_Vector& HitLocation);
	float Function_getTeamDamagePercentage_getTeamDamagePercentage();
	bool Function_InGodMode_InGodMode();
	void Function_setTeam_setTeam(class AClass_Object_Actor_Info_TeamInfo* Info);
	class UClass_Object_Field_Struct_State_Class* Function_teamClass();
	class AClass_Object_Actor_Info_TeamInfo* Function_Team_Team();
	void Function_CheckBob_CheckBob(float DeltaTime, const struct FStruct_Vector& Y);
	void Function_setVelocity(const struct FStruct_Vector& newVelocity);
	void Function_addImpulse(const struct FStruct_Vector& Impulse);
	void Function_Bump_Bump(class AClass_Object_Actor* Other);
	void Function_calculateExtents();
	void Function_wake();
	void Function_forceMovementState(TEnumAsByte<EMovementState> State);
	void Function_playFlinchAnimation();
	void Function_stopArmAnimation();
	struct FString Function_getArmAnimation();
	bool Function_isLoopingArmAnimation();
	void Function_loopArmAnimation(const struct FString& Animation);
	void Function_stopUpperBodyAnimation();
	bool Function_isLoopingUpperBodyAnimation();
	bool Function_isPlayingUpperBodyAnimation();
	void Function_loopUpperBodyAnimation(const struct FString& Animation);
	void Function_playUpperBodyAnimation(const struct FString& Animation);
	void Function_playFireAnimation(const struct FString& Weapon);
	void Function_stopAnimation();
	bool Function_isLoopingAnimation();
	bool Function_isPlayingAnimation();
	void Function_loopAnimation(const struct FString& Animation);
	void Function_playAnimation(const struct FString& Animation);
	void Function_resetMovementAnimations();
	void Function_allocateAnimationChannels(TEnumAsByte<EAnimationChannelIndex> Size);
	void Function_setAnimationState(TEnumAsByte<EAnimationStateEnum> Slot, class UClass_Object_DeleteableObject_AnimationState* State);
	void Function_allocateAnimationStates(TEnumAsByte<EAnimationStateEnum> Size);
	void Function_setupAnimationSprings();
	void Function_setupAnimationLayers();
	void Function_setupAnimationChannels();
	void Function_setupAnimationStates();
	void Function_setupAnimationManager();
	void Function_destroyAnimationSystem();
	void Function_initializeAnimationSystem();
	void Function_exitManualAnimationState();
	void Function_enterManualAnimationState();
	void Function_OnChangeEffects(TEnumAsByte<EMovementState> previousMovementState, TEnumAsByte<EMovementState> currentMovementState, bool previousAirborne, bool currentAirborne, bool previousWater, bool currentWater, bool previousUnderWater, bool currentUnderWater, int previousMaterial, int currentMaterial, bool previousSkiInput, bool currentSkiInput);
	void Function_OnChangeMovement(TEnumAsByte<EMovementState> Previous, TEnumAsByte<EMovementState> Current);
	void Function_OnChangeSkiInput(bool Previous, bool Current);
	void Function_OnChangeCollisionMaterial(int Previous, int Current);
	void Function_OnChangeUnderwater(bool Previous, bool Current);
	void Function_OnChangeWater(bool Previous, bool Current);
	void Function_OnChangeAirborne(bool Previous, bool Current);
	void Function_OnMovementJump();
	void Function_OnMovementCrushingDamage(float Damage, class AClass_Object_Actor_Pawn* Source);
	void Function_OnMovementCollisionDamage(float Damage);
	void Function_OnMovementCollision(const struct FStruct_Vector& point, const struct FStruct_Vector& Normal, const struct FStruct_Vector& Impulse, int Material);
	void Function_StartGroundBasedLoopingEffect(const struct FString& EffectName, const struct FString& Tag);
	struct FString Function_DamageTag(float Damage);
	struct FString Function_VelocityTag(const struct FStruct_Vector& Velocity);
	void Function_StopMovementEffects();
	float Function_Gravity();
	void Function_Died_Died_Died(class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_DisplayDebug_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	int Function_numDroppableCarryables();
	void Function_composeCarryables(bool bDropAll);
	void Function_clearCarryables();
	void Function_pickupCarryable(class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* C);
	void Function_dropCarryables();
	void Function_switchEquipment();
	void Function_dropWeapon();
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Function_GetAltWeapon();
	void Function_useHealthKit();
	void Function_clientWeaponUseEnergy(float quantity);
	bool Function_weaponUseEnergy(float quantity);
	void Function_changeHealth(float Delta);
	void Function_changeEnergy(float Delta);
	bool Function_useEnergy(float quantity);
	float Function_getAirSpace();
	bool Function_isInAir();
	void Function_setupVisionBone();
	void Function_UnPossessed_UnPossessed();
	void Function_PossessedBy_PossessedBy(class AClass_Object_Actor_Controller* C);
	void Function_checkManualAnimation();
	void Function_Tick_Tick_Tick(float Delta);
	void Function_createThirdPersonMesh(class UClass_Object_Field_Struct_State_Class* packClass);
	void Function_destroyThirdPersonMesh();
	void Function_stopPackEffect(const struct FName& EffectEvent);
	void Function_playPackEffect(const struct FName& EffectEvent);
	void Function_updatePackEffects();
	void Function_PlayQCAnimation(const struct FString& AnimationName);
	void Function_PlayQCSpeech(const struct FString& Tag);
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_TravelPostAccept_TravelPostAccept();
	void Function_TravelPreAccept_TravelPreAccept();
	void Function_initialiseEquipment();
	void Function_PostLoadGame_PostLoadGame_PostLoadGame();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_OnHitObject(class AClass_Object_Actor_Pawn* victim);
	void Function_OnViewerLostPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
	void Function_OnViewerSawPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
	void Function_setArmsMesh(class UClass_Object_Primitive_Mesh* armsMesh);
	void Function_showJetpack();
	void Function_hideJetpack();
	void Function_setJetpack(class AClass_Object_Actor_jetpack* newJetpack);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_updateCasts();
	bool Function_bIsInMount(class AClass_Object_Actor_Pawn* vehicleOrTurret);
	void Function_exitMount(class AClass_Object_Actor_Pawn* vehicleOrTurret);
	class AClass_Object_Actor_Pawn_Rook* Function_getMount();
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_getDrivenVehicle();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getControllingCharacter_getControllingCharacter();
	class UClass_Object_IFiringMotor* Function_firingMotor_firingMotor();
	float Function_getHealthInjectionAmount();
	void Function_stopHealthInjection();
	void Function_clampHealthInjection();
	void Function_healthInjection(float healthPerSecond, float healthAmount);
	void Function_serverDoInventoryRefill(float healthPerSecond);
	void Function_PlayMovementSpeech(const struct FName& EventName);
	class UClass_Object_Material* Function_GetOverlayMaterial_GetOverlayMaterial_GetOverlayMaterial(int Index);
	void Function_removeTempInvincibility();
	void Function_Timer_Timer();
	struct FString Function_GetHumanReadableName_GetHumanReadableName_GetHumanReadableName();
	bool Function_canBeSensed_canBeSensed();
	void Function_equipFallbackWeapon();
	void Function_spawnFallbackWeapon();
	void Function_destroyFallbackWeapon();
	void Function_PrecacheSpeech_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
	void Function_debugMovement(bool Flag);
	void Function_forceMovement(const struct FString& Name);
	void Function_prefixMovement(const struct FString& Name);
	float Function_energyRequiredToJet(const struct FStruct_Vector& A, const struct FStruct_Vector& B, float Velocity, bool Jump);
};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.PlayerCharacter
// 0x0000 (0x0BCC - 0x0BCC)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.PlayerCharacter");
		return ptr;
	}


	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.PlayerCharacter.MultiplayerCharacter
// 0x0000 (0x0BCC - 0x0BCC)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter_MultiplayerCharacter : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.PlayerCharacter.MultiplayerCharacter");
		return ptr;
	}

};


// Class Object.Actor.Info.MusicManagerBase
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info_MusicManagerBase : public AClass_Object_Actor_Info
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MusicManagerBase");
		return ptr;
	}


	void Function_TriggerScriptMusic(const struct FString& MusicName, float FadeTime);
	void Function_TriggerDynamicMusic(TEnumAsByte<EDynamicMusicType> Type);
	void Function_TriggerIntroMusic();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.MusicManagerBase.MusicInfo
// 0x0064 (0x0464 - 0x0400)
class AClass_Object_Actor_Info_MusicManagerBase_MusicInfo : public AClass_Object_Actor_Info_MusicManagerBase
{
public:
	struct FString                                     IntroMusic;                                               // 0x0400(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ExplorationMusic;                                         // 0x040C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CombatMusic;                                              // 0x0418(0x000C) (Edit, NeedCtorLink)
	struct FString                                     TensionMusic;                                             // 0x0424(0x000C) (Edit, NeedCtorLink)
	struct FStruct_DynamicMusicOptions                 CombatMusicOptions;                                       // 0x0430(0x000C) (Edit)
	struct FStruct_DynamicMusicOptions                 TensionMusicOptions;                                      // 0x043C(0x000C) (Edit)
	float                                              IntroMusicFadeOutTime;                                    // 0x0448(0x0004) (Edit)
	TEnumAsByte<EMusicType>                            CurrentMusicType;                                         // 0x044C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x044D(0x0003) MISSED OFFSET
	float                                              CurrentSongTimer;                                         // 0x0450(0x0004)
	float                                              CurrentSongFadeTime;                                      // 0x0454(0x0004)
	unsigned long                                      TriggeredIntroMusic : 1;                                  // 0x0458(0x0004)
	float                                              CurrentMusicLength;                                       // 0x045C(0x0004) (Transient)
	int                                                CurrentSongHandle;                                        // 0x0460(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MusicManagerBase.MusicInfo");
		return ptr;
	}


	void Function_StopCurrentMusic(float FadeTime);
	float Function_GetMusicDuration(const struct FString& MusicName);
	void Function_StartMusic(const struct FString& MusicName, float FadeTime);
	void Function_StartMusicType(TEnumAsByte<EMusicType> Music, float FadeTime);
	void Function_RestartSavegameMusic();
	bool Function_PlayingMusic();
	bool Function_ShouldProcessFadeOut();
	void Function_ProcessDynamicMusic(TEnumAsByte<EMusicType> MusicType, const struct FString& MusicName, float FadeInTime, float FadeOutTime, float MinLifetime);
	void Function_TriggerScriptMusic_TriggerScriptMusic(const struct FString& MusicName, float FadeTime);
	void Function_TriggerDynamicMusic_TriggerDynamicMusic(TEnumAsByte<EDynamicMusicType> Type);
	void Function_TriggerIntroMusic_TriggerIntroMusic();
	void Function_Tick_Tick(float Delta);
};


// Class Object.Actor.InventoryStationPlatform
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_InventoryStationPlatform : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_InventoryStation* ownerInventoryStation;                                    // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.InventoryStationPlatform");
		return ptr;
	}


	class AClass_Object_Actor* Function_getHurtRadiusParent_getHurtRadiusParent();
	void Function_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.InventoryStation
// 0x0098 (0x09A0 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_InventoryStation : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	int                                                numberAccessPoints;                                       // 0x0908(0x0004) (Edit)
	struct FName                                       baseSocketName;                                           // 0x090C(0x0004) (Edit)
	class AClass_Object_Actor_InventoryStationPlatform* accessPointOne;                                           // 0x0910(0x0004) (Net)
	class AClass_Object_Actor_InventoryStationPlatform* accessPointTwo;                                           // 0x0914(0x0004) (Net)
	class AClass_Object_Actor_InventoryStationPlatform* accessPointThree;                                         // 0x0918(0x0004) (Net)
	class AClass_Object_Actor_InventoryStationPlatform* accessPointFour;                                          // 0x091C(0x0004) (Net)
	class AClass_Object_Actor_InventoryStationPlatform* localAccessPoints[0x4];                                   // 0x0920(0x0004)
	TArray<class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess*> accesses;                                                 // 0x0930(0x000C) (NeedCtorLink)
	TArray<struct FName>                               accessPoses;                                              // 0x093C(0x000C) (NeedCtorLink)
	TArray<struct FName>                               extensionPoses;                                           // 0x0948(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      accessClass;                                              // 0x0954(0x0004) (Edit)
	float                                              accessRadius;                                             // 0x0958(0x0004) (Edit)
	float                                              accessHeight;                                             // 0x095C(0x0004) (Edit)
	int                                                targetAccessIndex;                                        // 0x0960(0x0004)
	int                                                targetExtensionIndex;                                     // 0x0964(0x0004)
	int                                                packedIndices;                                            // 0x0968(0x0004) (Net)
	int                                                localPackedIndices;                                       // 0x096C(0x0004)
	unsigned long                                      repeatSwitch : 1;                                         // 0x0970(0x0004) (Net)
	unsigned long                                      localRepeatSwitch : 1;                                    // 0x0970(0x0004)
	int                                                loadoutChangeIndex;                                       // 0x0974(0x0004) (Net)
	int                                                localLoadoutChangeIndex;                                  // 0x0978(0x0004)
	unsigned long                                      loadoutChangeSwitch : 1;                                  // 0x097C(0x0004) (Net)
	unsigned long                                      localLoadoutChangeSwitch : 1;                             // 0x097C(0x0004)
	unsigned long                                      bDamaged : 1;                                             // 0x097C(0x0004)
	float                                              receiveDamageRadius;                                      // 0x0980(0x0004) (Edit)
	float                                              delaySeconds;                                             // 0x0984(0x0004) (Edit)
	float                                              armRetractDelayFraction;                                  // 0x0988(0x0004) (Edit)
	float                                              armTurnDelayFraction;                                     // 0x098C(0x0004) (Edit)
	float                                              armExtendDelayFraction;                                   // 0x0990(0x0004) (Edit)
	TArray<struct FStruct_QueueElement>                accessQueue;                                              // 0x0994(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.InventoryStation");
		return ptr;
	}


	bool Function_getCurrentLoadoutWeapons(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, struct FStruct_InventoryStationLoadout* weaponLoadout);
	float Function_getReceiveDamageRadius_getReceiveDamageRadius();
	class AClass_Object_Actor* Function_getHurtRadiusParent_getHurtRadiusParent();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_accessFinished(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, bool returnToUsualMovment);
	bool Function_directUsage();
	bool Function_isOnCharactersTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* testCharacter);
	void Function_positioningFinished();
	void Function_changeApplied(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access);
	class AClass_Object_Actor_InventoryStationPlatform* Function_getAccessPoint(int accessPointIndex);
	bool Function_isAccessible(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_proceedToNextQueueMember();
	void Function_accessNoLongerRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_accessRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor, class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access, int armorIndex);
	int Function_getAccessIndex(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access);
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.EnergyBarrier
// 0x0000 (0x0908 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_EnergyBarrier : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.EnergyBarrier");
		return ptr;
	}


	bool Function_canBePassed(const struct FName& teamName);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.Turret.DeployedTurret
// 0x0004 (0x0998 - 0x0994)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret_DeployedTurret : public AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret
{
public:
	class AClass_Object_Actor_Controller*              deployerController;                                       // 0x0994(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.Turret.DeployedTurret");
		return ptr;
	}


	class AClass_Object_Actor_Controller* Function_GetKillerController_GetKillerController();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Motor.CharacterMotor
// 0x001C (0x041C - 0x0400)
class AClass_Object_Actor_Motor_CharacterMotor : public AClass_Object_Actor_Motor
{
public:
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character;                                                // 0x0400(0x0004)
	struct FName                                       switchingToState;                                         // 0x0404(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* switchToWeapon;                                           // 0x0408(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* lastUsedWeapon;                                           // 0x040C(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Deployable* switchToDeployable;                                       // 0x0410(0x0004)
	float                                              unequipDuration;                                          // 0x0414(0x0004)
	unsigned long                                      bFirePressed : 1;                                         // 0x0418(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.CharacterMotor");
		return ptr;
	}


	void Function_getAlternateAimAdjustStart(const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* newAimAdjustStart);
	void Function_doCustomFiredEffectProcessing();
	bool Function_customFiredEffectProcessing();
	class AClass_Object_Actor* Function_getEffectsBaseActor();
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Function_getWeapon();
	class AClass_Object_Actor_Pawn_Rook* Function_getPhysicalAttachment();
	void Function_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
	struct FStruct_Rotator Function_getFirstPersonEquippableRotation(class AClass_Object_Actor_Equipment_Equippable* subject);
	struct FStruct_Vector Function_getFirstPersonEquippableLocation(class AClass_Object_Actor_Equipment_Equippable* subject);
	void Function_onShotFiredNotification();
	float Function_getEnergy();
	void Function_useEnergy(float Amount);
	struct FStruct_Vector Function_getProjectileSpawnLocation();
	void Function_setZoomed(bool bZoomed);
	bool Function_setDeployable(class AClass_Object_Actor_Equipment_Equippable_Deployable* D);
	bool Function_SetWeapon(class AClass_Object_Actor_Equipment_Equippable_Weapon* W);
	bool Function_canUnequip();
	void Function_setFirePressed(class AClass_Object_Actor_Equipment_Equippable* E, bool Pressed);
	bool Function_shouldFire(class AClass_Object_Actor_Equipment_Equippable* E);
	void Function_releaseFire();
	void Function_releaseAltFire();
	void Function_AltFire(bool fireOnce);
	void Function_Fire(bool fireOnce);
	bool Function_aimAdjustViewRotation();
	struct FStruct_Rotator Function_GetViewRotation();
	int Function_getMoveYawDelta();
	struct FStruct_Rotator Function_getMoveRotation();
	void Function_SetViewRotation(const struct FStruct_Rotator& R);
	void Function_setAIMoveRotation(const struct FStruct_Rotator& R);
	void Function_setMoveRotation(const struct FStruct_Rotator& R);
	void Function_moveCharacter(float forward, float strafe, float Jump, float ski, float thrust, TEnumAsByte<EGroundMovementLevels> groundMovementLevel);
	void Function_Construct_ActorNameVectorRotator_Construct_ActorNameVectorRotator(class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.SwitchStation
// 0x0008 (0x0910 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_SwitchStation : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	float                                              useableObjectCollisionHeight;                             // 0x0908(0x0004) (Edit)
	float                                              useableObjectCollisionRadius;                             // 0x090C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.SwitchStation");
		return ptr;
	}


	void Function_useSwitch(class AClass_Object_Actor_Pawn* User);
	bool Function_CanBeUsedBy_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* CharacterUser);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.EmergencyStation
// 0x002C (0x0934 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_EmergencyStation : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	float                                              accessPointOffset;                                        // 0x0908(0x0004) (Edit, NoClear)
	float                                              accessRadius;                                             // 0x090C(0x0004) (Edit, NoClear)
	float                                              accessHeight;                                             // 0x0910(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      activeLightSkin;                                          // 0x0914(0x0004) (Edit, NoClear)
	int                                                activeLightSkinSlot;                                      // 0x0918(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      repairPackClass;                                          // 0x091C(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      accessClass;                                              // 0x0920(0x0004) (Edit, NoClear)
	float                                              respawnDelay;                                             // 0x0924(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_UseableObject_EmergencyStationAccess* access;                                                   // 0x0928(0x0004)
	unsigned long                                      bForceIconVisible : 1;                                    // 0x092C(0x0004)
	TEnumAsByte<EeBakeAnimationState>                  AnimationState;                                           // 0x0930(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0931(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.EmergencyStation");
		return ptr;
	}


	bool Function_isFunctional_isFunctional();
	bool Function_canBeSensed_canBeSensed();
	bool Function_isOnCharactersTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* testCharacter);
	void Function_repairPackTaken();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	bool Function_isRepairPackAvailable();
	void Function_Tick_Tick(float DeltaSeconds);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter
// 0x002C (0x0BF8 - 0x0BCC)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character
{
public:
	class UClass_Object_Field_Struct_State_Class*      jetpackClass;                                             // 0x0BCC(0x0004) (Edit)
	class UClass_Object_Primitive_Mesh*                armsMesh;                                                 // 0x0BD0(0x0004) (Edit)
	float                                              healthModifier;                                           // 0x0BD4(0x0004) (Edit)
	TEnumAsByte<EFiringWhileMovingStates>              firingWhileMovingState;                                   // 0x0BD8(0x0001) (Edit)
	TEnumAsByte<ECombatRangeCategories>                combatRangeCategory;                                      // 0x0BD9(0x0001) (Edit)
	TEnumAsByte<ECombatMovementCategories>             combatMovementCategory;                                   // 0x0BDA(0x0001) (Edit)
	TEnumAsByte<EDodgingCategories>                    dodgingCategory;                                          // 0x0BDB(0x0001) (Edit)
	TEnumAsByte<EPainReactionCategories>               painReactionCategory;                                     // 0x0BDC(0x0001) (Edit)
	TEnumAsByte<EGrenadeUseCategories>                 grenadeUseCategory;                                       // 0x0BDD(0x0001) (Edit)
	TEnumAsByte<ESpeedPackUseCategories>               speedPackUseCategory;                                     // 0x0BDE(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0BDF(0x0001) MISSED OFFSET
	float                                              tauntAnimFrequency;                                       // 0x0BE0(0x0004) (Edit, NoClear)
	unsigned long                                      bCanSeeIntoWater : 1;                                     // 0x0BE4(0x0004) (Edit)
	unsigned long                                      bUsePackActiveEffect : 1;                                 // 0x0BE4(0x0004) (Edit)
	unsigned long                                      bTaunt : 1;                                               // 0x0BE4(0x0004) (Edit, NoClear)
	unsigned long                                      bLogEnergyUsage : 1;                                      // 0x0BE4(0x0004)
	float                                              noAttackUntil;                                            // 0x0BE8(0x0004)
	float                                              noMovementUntil;                                          // 0x0BEC(0x0004)
	float                                              firstBumpTime;                                            // 0x0BF0(0x0004)
	class AClass_Object_Actor*                         lastBumpActor;                                            // 0x0BF4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter");
		return ptr;
	}


	void Function_playTauntAnim();
	bool Function_scaleByWeaponRefireRate(class AClass_Object_Actor_Equipment_Equippable_Weapon* _weapon);
	bool Function_weaponUseEnergy_weaponUseEnergy(float quantity);
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_initialiseEquipment_initialiseEquipment();
	void Function_rematchGoals_rematchGoals();
	bool Function_cleanupAI_cleanupAI();
	void Function_initCharacterAI();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_Bump_Bump_Bump(class AClass_Object_Actor* Other);
	void Function_Tick_Tick_Tick_Tick(float Delta);
};


// Class Object.MovementObject
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_MovementObject : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.MovementObject");
		return ptr;
	}


	void Function_calculateExtents();
	void Function_wake();
	void Function_addForce(const struct FStruct_Vector& Force);
	void Function_setAcceleration(const struct FStruct_Vector& newAcceleration);
	void Function_addImpulse(const struct FStruct_Vector& Impulse);
	void Function_AddVelocity(const struct FStruct_Vector& Velocity);
	void Function_setVelocity(const struct FStruct_Vector& Velocity);
	float Function_getAccumulator();
	void Function_setAccumulator(float Accumulator);
	struct FStruct_Vector Function_getEndPosition();
	struct FStruct_Vector Function_getStartPosition();
	void Function_setStartPosition(const struct FStruct_Vector& newPosition);
	void Function_setEndPosition(const struct FStruct_Vector& newPosition);
	void Function_setPosition(const struct FStruct_Vector& newPosition);
	void Function_forceMovementState(int State);
	void Function_setInput(float forward, float strafe, float Jump, float ski, float jetpack, int GroundState);
};


// Class Object.MovementObject.ConcreteMovementObject
// 0x0010 (0x0038 - 0x0028)
class UClass_Object_MovementObject_ConcreteMovementObject : public UClass_Object_MovementObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.MovementObject.ConcreteMovementObject");
		return ptr;
	}

};


// Class Object.MovementObject.ConcreteMovementObject.CharacterMovementObject
// 0x0638 (0x0670 - 0x0038)
class UClass_Object_MovementObject_ConcreteMovementObject_CharacterMovementObject : public UClass_Object_MovementObject_ConcreteMovementObject
{
public:
	unsigned char                                      UnknownData00[0x638];                                     // 0x0038(0x0638) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.MovementObject.ConcreteMovementObject.CharacterMovementObject");
		return ptr;
	}

};


// Class Object.DeleteableObject
// 0x000C (0x0034 - 0x0028)
class UClass_Object_DeleteableObject : public UClass_Object
{
public:
	TArray<int>                                        LatentStackLocations;                                     // 0x0028(0x000C) (Const, Transient, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject");
		return ptr;
	}


	void Function_Delete();
};


// Class Object.DeleteableObject.AnimationState
// 0x0070 (0x00A4 - 0x0034)
class UClass_Object_DeleteableObject_AnimationState : public UClass_Object_DeleteableObject
{
public:
	struct FString                                     Name;                                                     // 0x0034(0x000C) (NeedCtorLink)
	TEnumAsByte<EAnimationType>                        Type;                                                     // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              BlendInTime;                                              // 0x0044(0x0004)
	float                                              blendTightness;                                           // 0x0048(0x0004)
	struct FString                                     Centre;                                                   // 0x004C(0x000C) (NeedCtorLink)
	struct FString                                     Left;                                                     // 0x0058(0x000C) (NeedCtorLink)
	struct FString                                     Right;                                                    // 0x0064(0x000C) (NeedCtorLink)
	struct FString                                     forward;                                                  // 0x0070(0x000C) (NeedCtorLink)
	struct FString                                     back;                                                     // 0x007C(0x000C) (NeedCtorLink)
	struct FString                                     Up;                                                       // 0x0088(0x000C) (NeedCtorLink)
	struct FString                                     Down;                                                     // 0x0094(0x000C) (NeedCtorLink)
	float                                              speed;                                                    // 0x00A0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AnimationState");
		return ptr;
	}

};


// Class Object.DeleteableObject.AnimationSpring
// 0x0014 (0x0048 - 0x0034)
class UClass_Object_DeleteableObject_AnimationSpring : public UClass_Object_DeleteableObject
{
public:
	float                                              tightness;                                                // 0x0034(0x0004)
	float                                              maximum;                                                  // 0x0038(0x0004)
	float                                              Value;                                                    // 0x003C(0x0004)
	float                                              Target;                                                   // 0x0040(0x0004)
	float                                              normalized;                                               // 0x0044(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AnimationSpring");
		return ptr;
	}


	void Function_construct_FloatFloat(float springTightness, float maximumDelta);
	void Function_Snap(float Target);
	int Function_Update(float Delta);
};


// Class Object.DeleteableObject.AnimationManager
// 0x0038 (0x006C - 0x0034)
class UClass_Object_DeleteableObject_AnimationManager : public UClass_Object_DeleteableObject
{
public:
	unsigned long                                      firstUpdate : 1;                                          // 0x0034(0x0004)
	unsigned long                                      animationEnabled : 1;                                     // 0x0034(0x0004)
	TEnumAsByte<EAnimationStateEnum>                   currentAnimationState;                                    // 0x0038(0x0001)
	TEnumAsByte<EAnimationStateEnum>                   desiredAnimationState;                                    // 0x0039(0x0001)
	TEnumAsByte<EAnimationStateEnum>                   adjustedAnimationState;                                   // 0x003A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003B(0x0001) MISSED OFFSET
	float                                              currentAnimationStateTime;                                // 0x003C(0x0004)
	float                                              desiredAnimationStateTime;                                // 0x0040(0x0004)
	float                                              adjustedAnimationStateTime;                               // 0x0044(0x0004)
	TEnumAsByte<EAnimationStateEnum>                   primaryAnimationLayerState;                               // 0x0048(0x0001)
	TEnumAsByte<EAlertnessLevels>                      primaryAnimationLayerAlertness;                           // 0x0049(0x0001)
	TEnumAsByte<EAnimationStateEnum>                   secondaryAnimationLayerState;                             // 0x004A(0x0001)
	TEnumAsByte<EAlertnessLevels>                      secondaryAnimationLayerAlertness;                         // 0x004B(0x0001)
	TEnumAsByte<EAlertnessLevels>                      currentAlertnessLevel;                                    // 0x004C(0x0001)
	TEnumAsByte<EAlertnessLevels>                      adjustedAlertnessLevel;                                   // 0x004D(0x0001)
	TEnumAsByte<EAlertnessLevels>                      animationAlertnessLevel;                                  // 0x004E(0x0001)
	unsigned char                                      UnknownData01[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	unsigned long                                      currentAiming : 1;                                        // 0x0050(0x0004)
	unsigned long                                      previousAiming : 1;                                       // 0x0050(0x0004)
	unsigned long                                      fireAnimationActive : 1;                                  // 0x0050(0x0004)
	unsigned long                                      extraAnimationActive : 1;                                 // 0x0050(0x0004)
	unsigned long                                      upperBodyAnimationActive : 1;                             // 0x0050(0x0004)
	unsigned long                                      armAnimationActive : 1;                                   // 0x0050(0x0004)
	unsigned long                                      flinchAnimationActive : 1;                                // 0x0050(0x0004)
	unsigned long                                      extraAnimationPending : 1;                                // 0x0050(0x0004)
	unsigned long                                      extraAnimationPendingIsLoop : 1;                          // 0x0050(0x0004)
	float                                              extraAnimationPendingTime;                                // 0x0054(0x0004)
	struct FString                                     extraAnimationPendingName;                                // 0x0058(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner;                                           // 0x0064(0x0004)
	class UClass_Object_Primitive_Mesh*                previousMesh;                                             // 0x0068(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AnimationManager");
		return ptr;
	}


	void Function_playFlinchAnimation();
	void Function_stopArmAnimation();
	struct FString Function_getArmAnimation();
	bool Function_isLoopingArmAnimation();
	void Function_loopArmAnimation(const struct FString& Animation);
	void Function_stopUpperBodyAnimation();
	bool Function_isLoopingUpperBodyAnimation();
	bool Function_isPlayingUpperBodyAnimation();
	void Function_loopUpperBodyAnimation(const struct FString& Animation);
	void Function_playUpperBodyAnimation(const struct FString& Animation);
	void Function_playFireAnimation(const struct FString& Weapon);
	void Function_stopAnimation();
	bool Function_isLoopingAnimation();
	bool Function_isPlayingAnimation();
	void Function_loopAnimation(const struct FString& Animation);
	void Function_playAnimation(const struct FString& Animation);
	void Function_StartAnimating(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	void Function_StopAnimating(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
};


// Class Object.DeleteableObject.AnimationLayer
// 0x0030 (0x0064 - 0x0034)
class UClass_Object_DeleteableObject_AnimationLayer : public UClass_Object_DeleteableObject
{
public:
	class UClass_Object_DeleteableObject_AnimationState* currentAnimationState;                                    // 0x0034(0x0004)
	int                                                alertnessLevel;                                           // 0x0038(0x0004)
	int                                                baseIndex;                                                // 0x003C(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* primaryAlpha;                                             // 0x0040(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* centerAlpha;                                              // 0x0044(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* forwardAlpha;                                             // 0x0048(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* backAlpha;                                                // 0x004C(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* leftAlpha;                                                // 0x0050(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* rightAlpha;                                               // 0x0054(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* upAlpha;                                                  // 0x0058(0x0004)
	class UClass_Object_DeleteableObject_AnimationInterpolator* downAlpha;                                                // 0x005C(0x0004)
	unsigned long                                      firstUpdate : 1;                                          // 0x0060(0x0004)
	unsigned long                                      redundant : 1;                                            // 0x0060(0x0004)
	unsigned long                                      dominant : 1;                                             // 0x0060(0x0004)
	unsigned long                                      hurryUp : 1;                                              // 0x0060(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AnimationLayer");
		return ptr;
	}


	void Function_Construct_Void_Construct_Void();
};


// Class Object.DeleteableObject.AnimationInterpolator
// 0x0018 (0x004C - 0x0034)
class UClass_Object_DeleteableObject_AnimationInterpolator : public UClass_Object_DeleteableObject
{
public:
	unsigned long                                      interpolating : 1;                                        // 0x0034(0x0004)
	float                                              interpolatedValue;                                        // 0x0038(0x0004)
	float                                              startValue;                                               // 0x003C(0x0004)
	float                                              destinationValue;                                         // 0x0040(0x0004)
	float                                              interpolationTime;                                        // 0x0044(0x0004)
	float                                              interpolationTimeAccumulator;                             // 0x0048(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AnimationInterpolator");
		return ptr;
	}

};


// Class Object.DeleteableObject.AnimationChannel
// 0x001C (0x0050 - 0x0034)
class UClass_Object_DeleteableObject_AnimationChannel : public UClass_Object_DeleteableObject
{
public:
	struct FString                                     Sequence;                                                 // 0x0034(0x000C) (NeedCtorLink)
	struct FString                                     processed;                                                // 0x0040(0x000C) (NeedCtorLink)
	float                                              Alpha;                                                    // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AnimationChannel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel
// 0x006C (0x0094 - 0x0028)
class UClass_Object_HavokVehicleWheel : public UClass_Object
{
public:
	float                                              SuspensionStrength;                                       // 0x0028(0x0004) (Edit)
	float                                              SuspensionDampingCompression;                             // 0x002C(0x0004) (Edit)
	float                                              SuspensionDampingRelaxation;                              // 0x0030(0x0004) (Edit)
	float                                              MaxBrakingTorque;                                         // 0x0034(0x0004) (Edit)
	unsigned long                                      HasHandbrake : 1;                                         // 0x0038(0x0004) (Edit)
	float                                              WheelTorqueRatio;                                         // 0x003C(0x0004) (Edit)
	float                                              WheelRadius;                                              // 0x0040(0x0004) (Edit)
	float                                              WheelWidth;                                               // 0x0044(0x0004) (Edit)
	int                                                WheelAxleNumber;                                          // 0x0048(0x0004) (Edit)
	float                                              WheelMass;                                                // 0x004C(0x0004) (Edit)
	float                                              WheelFriction;                                            // 0x0050(0x0004) (Edit)
	float                                              WheelViscosityFriction;                                   // 0x0054(0x0004) (Edit)
	TEnumAsByte<EHavokSteerType>                       SteerType;                                                // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x005C(0x0004) (Edit)
	struct FStruct_Vector                              BoneOffset;                                               // 0x0060(0x000C) (Edit)
	float                                              SuspensionTravel;                                         // 0x006C(0x0004) (Edit)
	float                                              SuspensionOffset;                                         // 0x0070(0x0004) (Edit)
	struct FName                                       SupportBoneName;                                          // 0x0074(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 SupportBoneAxis;                                          // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FStruct_Vector                              WheelPosition;                                            // 0x007C(0x000C)
	float                                              SupportPivotDistance;                                     // 0x0088(0x0004)
	float                                              SuspensionPosition;                                       // 0x008C(0x0004)
	float                                              CurrentRotation;                                          // 0x0090(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel
// 0x0010 (0x00A4 - 0x0094)
class UClass_Object_HavokVehicleWheel_HavokCarWheel : public UClass_Object_HavokVehicleWheel
{
public:
	class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar* Car;                                                      // 0x0094(0x0004)
	float                                              manualWheelPositionX;                                     // 0x0098(0x0004) (Edit)
	float                                              manualWheelPositionY;                                     // 0x009C(0x0004) (Edit)
	float                                              manualWheelPositionZ;                                     // 0x00A0(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle
// 0x0380 (0x0C34 - 0x08B4)
class AClass_Object_Actor_Pawn_Rook_Vehicle : public AClass_Object_Actor_Pawn_Rook
{
public:
	float                                              lastStateReceiveTime;                                     // 0x08B4(0x0004)
	TArray<struct FStruct_VehiclePosition>             positions;                                                // 0x08B8(0x000C) (Edit, NeedCtorLink)
	int                                                driverIndex;                                              // 0x08C4(0x0004)
	float                                              inverseCosUprightAngle;                                   // 0x08C8(0x0004) (Edit)
	TArray<struct FStruct_VehicleEntryData>            Entries;                                                  // 0x08CC(0x000C) (Edit, NeedCtorLink)
	TArray<class AClass_Object_Actor_UseableObject_VehicleEntry*> vehicleEntries;                                           // 0x08D8(0x000C) (NeedCtorLink)
	TArray<struct FStruct_VehicleFlipTriggerData>      flipTriggers;                                             // 0x08E4(0x000C) (Edit, NeedCtorLink)
	TArray<class AClass_Object_Actor_UseableObject_VehicleFlipTrigger*> vehicleFlipTriggers;                                      // 0x08F0(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      motorClass;                                               // 0x08FC(0x0004)
	class UClass_Object_Field_Struct_State_Class*      destroyedExplosionClass;                                  // 0x0900(0x0004) (Edit)
	float                                              StrafeInput;                                              // 0x0904(0x0004)
	float                                              ThrottleInput;                                            // 0x0908(0x0004)
	struct FStruct_Rotator                             RotationInput;                                            // 0x090C(0x000C)
	float                                              ThrustInput;                                              // 0x0918(0x0004)
	unsigned long                                      DiveInput : 1;                                            // 0x091C(0x0004)
	unsigned long                                      customInertiaTensor : 1;                                  // 0x091C(0x0004) (Edit)
	struct FStruct_Vector                              customInertiaTensorDiagonal;                              // 0x0920(0x000C) (Edit)
	float                                              minimumCollisionDamageMagnitude;                          // 0x092C(0x0004) (Edit)
	float                                              collisionDamageMagnitudeScale;                            // 0x0930(0x0004) (Edit)
	unsigned long                                      bCollisionDamageEnabled : 1;                              // 0x0934(0x0004) (Edit)
	float                                              settledUpsideDownCosAngle;                                // 0x0938(0x0004) (Edit)
	float                                              settledUpsideDownSpeed;                                   // 0x093C(0x0004) (Edit)
	unsigned long                                      bVehicleCameraTrace : 1;                                  // 0x0940(0x0004) (Edit)
	struct FStruct_Vector                              vehicleCameraTraceExtents;                                // 0x0944(0x000C) (Edit)
	unsigned long                                      bSettledUpsideDown : 1;                                   // 0x0950(0x0004)
	float                                              healthModifier;                                           // 0x0954(0x0004) (Edit)
	TArray<TEnumAsByte<EVehiclePositionType>>          doNotEjectOnFlip;                                         // 0x0958(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      clientInterpolationHard : 1;                              // 0x0964(0x0004) (Edit)
	unsigned long                                      Spawning : 1;                                             // 0x0964(0x0004) (Net)
	unsigned long                                      bFlipping : 1;                                            // 0x0964(0x0004)
	class UClass_Object_Field_Struct_State_Class*      currentSwitchClass;                                       // 0x0968(0x0004)
	TArray<struct FStruct_ExitData>                    exits;                                                    // 0x096C(0x000C) (Edit, NeedCtorLink)
	float                                              clientInterpolationSnapDistance;                          // 0x0978(0x0004) (Edit)
	float                                              clientInterpolationPeriod;                                // 0x097C(0x0004) (Edit)
	TArray<struct FName>                               animationFinishThenLoop;                                  // 0x0980(0x000C) (NeedCtorLink)
	float                                              maximumNetUpdateInterval;                                 // 0x098C(0x0004) (Edit)
	float                                              maximumNextNetUpdateTime;                                 // 0x0990(0x0004)
	float                                              flipRotationStrength;                                     // 0x0994(0x0004) (Edit)
	float                                              flipRotationDamping;                                      // 0x0998(0x0004) (Edit)
	float                                              flipPushUpImpulse;                                        // 0x099C(0x0004) (Edit)
	float                                              flipPushUpDuration;                                       // 0x09A0(0x0004) (Edit)
	float                                              flipMaximumRotationDuration;                              // 0x09A4(0x0004) (Edit)
	float                                              flipRotateTime;                                           // 0x09A8(0x0004)
	float                                              flipRotationTimeOut;                                      // 0x09AC(0x0004)
	unsigned long                                      bShowPhysicsDebug : 1;                                    // 0x09B0(0x0004)
	unsigned long                                      bGodMode : 1;                                             // 0x09B0(0x0004)
	unsigned long                                      bDisablePositionSwitching : 1;                            // 0x09B0(0x0004) (Edit)
	unsigned long                                      abandonmentDestruction : 1;                               // 0x09B0(0x0004)
	float                                              abandonmentDestructionPeriod;                             // 0x09B4(0x0004)
	float                                              currentAbandonmentDuration;                               // 0x09B8(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           lastOccupantTeam;                                         // 0x09BC(0x0004)
	float                                              TopSpeed;                                                 // 0x09C0(0x0004) (Edit)
	unsigned long                                      stayUprightEnabled : 1;                                   // 0x09C4(0x0004) (Edit)
	float                                              stayUprightDamping;                                       // 0x09C8(0x0004) (Edit)
	float                                              stayUprightStrength;                                      // 0x09CC(0x0004) (Edit)
	int                                                driverMinimumPitch;                                       // 0x09D0(0x0004) (Edit)
	int                                                driverMaximumPitch;                                       // 0x09D4(0x0004) (Edit)
	float                                              minimumObstacleLookAhead;                                 // 0x09D8(0x0004)
	float                                              obstacleLookAheadVeloocityScale;                          // 0x09DC(0x0004)
	float                                              distanceToMaximumDurationScale;                           // 0x09E0(0x0004)
	float                                              driveYawCoefficient;                                      // 0x09E4(0x0004)
	float                                              drivePitchCoefficient;                                    // 0x09E8(0x0004)
	float                                              cornerSlowDownDistance;                                   // 0x09EC(0x0004)
	float                                              cornerSlowDownMinimumCosAngle;                            // 0x09F0(0x0004)
	float                                              cornerSlowDownSpeedCoefficient;                           // 0x09F4(0x0004)
	unsigned long                                      stopForEnemies : 1;                                       // 0x09F8(0x0004)
	float                                              cameraDistance;                                           // 0x09FC(0x0004) (Edit)
	struct FStruct_Vector                              TPCameraLookAt;                                           // 0x0A00(0x000C) (Edit)
	float                                              TPCameraDistance;                                         // 0x0A0C(0x0004) (Edit)
	unsigned long                                      bDrawDriverInTP : 1;                                      // 0x0A10(0x0004) (Edit)
	struct FStruct_Vector                              cachedCameraLocation;                                     // 0x0A14(0x000C)
	struct FName                                       rootBone;                                                 // 0x0A20(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      driverWeaponClass;                                        // 0x0A24(0x0004) (Edit)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* driverWeapon;                                             // 0x0A28(0x0004) (Net)
	float                                              waterDamagePerSecond;                                     // 0x0A2C(0x0004) (Edit)
	struct FStruct_Vector                              localMoveDestination;                                     // 0x0A30(0x000C)
	unsigned long                                      dampingPlusEnabled : 1;                                   // 0x0A3C(0x0004)
	float                                              dampingPlusXY;                                            // 0x0A40(0x0004)
	float                                              dampingPlusPositiveZ;                                     // 0x0A44(0x0004)
	float                                              dampingPlusNegativeZ;                                     // 0x0A48(0x0004)
	unsigned long                                      retriggerEffectEvents : 1;                                // 0x0A4C(0x0004)
	struct FStruct_ClientOccupantEnterData             minorPositionEntrySignals[0x4];                           // 0x0A50(0x0010) (Net)
	struct FStruct_ClientPositionData                  clientPositions[0xA];                                     // 0x0A90(0x0004) (Net)
	struct FStruct_ClientPositionData                  localClientPositions[0xA];                                // 0x0AB8(0x0004)
	int                                                throttleForwardEffectIndex;                               // 0x0AE0(0x0004)
	int                                                throttleBackEffectIndex;                                  // 0x0AE4(0x0004)
	int                                                strafeLeftEffectIndex;                                    // 0x0AE8(0x0004)
	int                                                strafeRightEffectIndex;                                   // 0x0AEC(0x0004)
	int                                                engineIdlingEffectIndex;                                  // 0x0AF0(0x0004)
	int                                                thrustingEffectIndex;                                     // 0x0AF4(0x0004)
	int                                                throttleForwardOrThrustEffectIndex;                       // 0x0AF8(0x0004)
	int                                                strafeLeftOrThrustEffectIndex;                            // 0x0AFC(0x0004)
	int                                                strafeRightOrThrustEffectIndex;                           // 0x0B00(0x0004)
	TArray<struct FStruct_VehicleEffect>               Effects;                                                  // 0x0B04(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Motor_VehicleMotor*      Motor;                                                    // 0x0B10(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           localTeam;                                                // 0x0B14(0x0004)
	class UClass_Object_Field_Struct_State_Class*      destructionObjectClass;                                   // 0x0B18(0x0004) (Edit)
	unsigned long                                      bHasBeenOccupied : 1;                                     // 0x0B1C(0x0004) (Net)
	unsigned long                                      bCanBeStolen : 1;                                         // 0x0B1C(0x0004)
	class UClass_Object_Material*                      ManifestLayoutMaterial;                                   // 0x0B20(0x0004) (Edit)
	struct FString                                     driverPrompt;                                             // 0x0B24(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     gunnerPrompt;                                             // 0x0B30(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     leftGunnerPrompt;                                         // 0x0B3C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     rightGunnerPrompt;                                        // 0x0B48(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     inventoryStationPrompt;                                   // 0x0B54(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     fullVehiclePrompt;                                        // 0x0B60(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     vehicleProhibitedObjectPrompt;                            // 0x0B6C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     flipPrompt;                                               // 0x0B78(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     cannotStealPrompt;                                        // 0x0B84(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     enemyOccupiedPrompt;                                      // 0x0B90(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     enemyInventoryStationPrompt;                              // 0x0B9C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     heavyAttemptedToPilot;                                    // 0x0BA8(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              heavyAttemptedToPilotSwitchPromptDuration;                // 0x0BB4(0x0004) (Edit)
	struct FString                                     localizedName;                                            // 0x0BB8(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bInvincible : 1;                                          // 0x0BC4(0x0004) (Net)
	float                                              loseInitialInvincibilityTime;                             // 0x0BC8(0x0004)
	float                                              initialInvincibilityDuration;                             // 0x0BCC(0x0004) (Edit)
	class UClass_Object_Material*                      invicibilityMaterial;                                     // 0x0BD0(0x0004) (Edit)
	float                                              velocityInheritOnExitScale;                               // 0x0BD4(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      CrushingDamageTypeClass;                                  // 0x0BD8(0x0004) (Edit)
	struct FStruct_DesiredHavokState                   currentDesiredHavokState;                                 // 0x0BDC(0x0038)
	int                                                Padding[0x8];                                             // 0x0C14(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle");
		return ptr;
	}


	struct FStruct_Rotator STATIC_Function_unpackPitchAndYaw(int pitchAndYaw);
	int STATIC_Function_packPitchAndYaw(const struct FStruct_Rotator& pitchAndYaw);
	void Function_DisplayDebug_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_settledUpsideDownChanged();
	struct FString Function_GetHumanReadableName_GetHumanReadableName_GetHumanReadableName();
	bool Function_canCharacterRespawnAt();
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* Function_getUnusedInventoryStation();
	struct FStruct_Rotator STATIC_Function_interpolateRotation(const struct FStruct_Rotator& Current, const struct FStruct_Rotator& Target, float Rate, float DeltaSeconds);
	void Function_doCustomFiredEffectProcessing();
	bool Function_customFiredEffectProcessing();
	bool Function_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	class UClass_Object_Material* Function_GetOverlayMaterial_GetOverlayMaterial_GetOverlayMaterial(int Index);
	struct FString STATIC_Function_GetPrompt(unsigned char PromptIndex);
	unsigned char Function_getPositionPromptIndex(TEnumAsByte<EVehiclePositionType> positionType);
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* Function_getCorrespondingInventoryStation();
	bool Function_canSwitchPosition(int currentPositionIndex, unsigned char selectedPosition);
	void Function_UnPossessed_UnPossessed();
	void Function_occupantSwitchPosition(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant, int targetPositionIndex);
	int Function_getMinorPositionEntryIndex(int positionIndex);
	void Function_switchPosition(int currentPositionIndex, unsigned char selectedPosition);
	int Function_getTargetPositionIndex(unsigned char selectedPosition);
	void Function_finishedSpawnFromVehicleSpawnPoint();
	void Function_startedSpawnFromVehicleSpawnPoint();
	void Function_switchClass(class UClass_Object_Field_Struct_State_Class* switchClass);
	bool Function_flip();
	void Function_playerMoveProcessing(float DeltaTime);
	void Function_collisionDamage(float magnitude);
	void Function_BaseChange_BaseChange_BaseChange();
	void Function_PlayDying_PlayDying(class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLoc);
	class AClass_Object_Actor* Function_getEffectsBaseActor();
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Function_getWeapon();
	class AClass_Object_Actor_Pawn_Rook* Function_getPhysicalAttachment();
	void Function_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
	struct FStruct_Rotator Function_getFirstPersonEquippableRotation(class AClass_Object_Actor_Equipment_Equippable* subject);
	void Function_getAlternateAimAdjustStart(const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* newAimAdjustStart);
	struct FStruct_Vector Function_getFirstPersonEquippableLocation(class AClass_Object_Actor_Equipment_Equippable* subject);
	bool Function_aimAdjustViewRotation();
	float Function_getEnergy();
	void Function_onShotFiredNotification();
	struct FStruct_Vector Function_getProjectileSpawnLocation();
	void Function_showPhysicsDebug(bool Show);
	void Function_drawActorCollision(class AClass_Object_Actor* Actor, class AClass_Object_Actor_HUD* displayHUD, const struct FStruct_Color& Color);
	void Function_displayWorldSpaceDebug_displayWorldSpaceDebug(class AClass_Object_Actor_HUD* displayHUD);
	void Function_toggleShowPhysicsDebug();
	bool Function_isEffectCauserActive(int effectCauserIndex);
	void Function_updateDynamicEffectStates();
	void Function_updateEffectsStates();
	void Function_useEnergy(float Amount);
	bool Function_isUpright();
	bool Function_isSettledUpsideDown();
	void Function_aboutToSettleUpsideDown();
	void Function_Tick_Tick(float DeltaSeconds);
	bool Function_isOccupied();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	struct FStruct_Vector Function_EyePosition_EyePosition();
	bool Function_SpecialCalcView_SpecialCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	bool Function_specialCalcViewProcessing(int positionIndex, class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	struct FStruct_Vector Function_getCameraLookAt(const struct FStruct_Rotator& CameraRotation, int positionIndex);
	void Function_otherClientOccupantLeave(int positionI, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* oldOccupant);
	bool Function_DriverLeave(bool bForceLeave, int positionIndex);
	void Function_ClientDriverLeave(class AClass_Object_Actor_Controller* C, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* oldDriver);
	void Function_attachToVehicle(int positionIndex);
	void Function_occupantLeaveAnimationProcessing(int positionIndex);
	void Function_otherClientOccupantEnter(int positionI);
	void Function_occupantEnterAnimationProcessing(int positionIndex);
	void Function_occupantEnter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* p, int positionIndex);
	bool Function_canBeRepairedBy_canBeRepairedBy(class AClass_Object_Actor_Pawn_Rook* otherGuy);
	bool Function_isMajorPosition(TEnumAsByte<EVehiclePositionType> Type);
	void Function_clientOccupantEnter(const struct FStruct_ClientOccupantEnterData& data);
	int Function_getPositionIndex(TEnumAsByte<EVehiclePositionType> Position);
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getDriver();
	class AClass_Object_Actor_Info_TeamInfo* Function_getOccupantTeam();
	struct FStruct_Vector Function_getAimLocation(class AClass_Object_Actor_Pawn* Target);
	bool Function_canTargetPoint(const struct FStruct_Vector& targetLoc);
	int Function_tryToOccupy(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character, TEnumAsByte<EVehiclePositionType> Position, TArray<TEnumAsByte<EVehiclePositionType>> secondaryPositions);
	bool Function_isInventoryPosition(TEnumAsByte<EVehiclePositionType> positionType);
	int Function_canOccupy(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character, TEnumAsByte<EVehiclePositionType> Position, TArray<TEnumAsByte<EVehiclePositionType>> secondaryPositions, unsigned char* PromptIndex);
	bool Function_canArmorOccupy(TEnumAsByte<EVehiclePositionType> Position, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	bool Function_isOccupant(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	int Function_getAvailablePositionIndex(int positionIndex, TArray<TEnumAsByte<EVehiclePositionType>> secondaryPositions, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	bool Function_canArmourBePassenger(class UClass_Object_Field_Struct_State_Class* armour);
	bool Function_canArmourBeDriver(class UClass_Object_Field_Struct_State_Class* armour);
	bool Function_TryToDrive(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	int Function_getOccupantPositionIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant);
	void Function_vehicleCeaseFire();
	void Function_setFirePressed(class AClass_Object_Actor_Equipment_Equippable* E, bool Pressed);
	bool Function_shouldFire(class AClass_Object_Actor_Equipment_Equippable* E);
	void Function_releaseAltFire();
	void Function_releaseFire();
	void Function_AltFire(bool fireOnce);
	void Function_Fire(bool fireOnce);
	void Function_vehicleFire();
	void Function_VehicleUpdateParams();
	void Function_VehicleStateReceived();
	void Function_EncroachedBy_EncroachedBy_EncroachedBy(class AClass_Object_Actor* Other);
	void Function_aboutToDie();
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	bool Function_InGodMode_InGodMode();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	struct FStruct_Vector Function_getVehicleUseablePoint(int pointI);
	void Function_addEffect(const struct FName& EffectName, bool dynamicUpdate, int* EffectIndex);
	void Function_initialiseEffects();
	void Function_PostLoadGame_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	bool Function_EncroachingOn_EncroachingOn_EncroachingOn(class AClass_Object_Actor* Other);
	void Function_setTeam_setTeam(class AClass_Object_Actor_Info_TeamInfo* newTeam);
	class UClass_Object_Material* Function_getTeamSkin();
	void Function_updateTeamSkin();
	void Function_generateAIDeathSpeechEvents(int deadIndex);
	void Function_copyVehicleAIValuesToTurret(class AClass_Object_Actor_Pawn_Rook* Turret);
	void Function_rematchGoals_rematchGoals();
	bool Function_cleanupAI_cleanupAI();
	void Function_initGunnerAI(int Index);
	void Function_initDriverAI(int Index);
	void Function_initVehicleAI();
	void Function_FaceRotation_FaceRotation(const struct FStruct_Rotator& NewRotation, float DeltaTime);
	void Function_getOut(TEnumAsByte<EVehiclePositionType> Type);
	void Function_applyOutput();
	void Function_pushStateToClient();
	bool Function_needToPushStateToClient();
	void Function_setSkin(class UClass_Object_Material* Skin);
	void Function_enableAbandonmentDestruction(float periodSeconds);
	float Function_getTeamDamagePercentage_getTeamDamagePercentage();
	void Function_processInput();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getControllingCharacter_getControllingCharacter();
	struct FStruct_Rotator Function_getViewRotationFromMotor();
	class UClass_Object_IFiringMotor* Function_firingMotor_firingMotor();
	void Function_spawnCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	int Function_getAngle(unsigned char lowByte, unsigned char highByte);
	unsigned char Function_getHighByte(int Angle);
	unsigned char Function_getLowByte(int Angle);
	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void STATIC_Function_PrecacheVehicleMeshes(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class UClass_Object_Field_Struct_State_Class* VehicleClass);
	bool Function_isHavokCompletelyInitialised();
	class AClass_Object_Actor* Function_vehicleTransitionTrace(const struct FStruct_Vector& TraceEnd, const struct FStruct_Vector& TraceStart, struct FStruct_Vector* HitLocation, struct FStruct_Vector* HitNormal);
	bool Function_vehicleTrace(const struct FStruct_Vector& TraceEnd, const struct FStruct_Vector& TraceStart, const struct FStruct_Vector& Extent, struct FStruct_Vector* HitLocation, struct FStruct_Vector* HitNormal);
	class AClass_Object_Actor* Function_cameraTrace(const struct FStruct_Vector& TraceEnd, const struct FStruct_Vector& TraceStart, bool bTraceActors, const struct FStruct_Vector& Extent, struct FStruct_Vector* HitLocation, struct FStruct_Vector* HitNormal);
	void Function_performFlip();
	void Function_forceNetDirty();
	void Function_GraphData(const struct FString& DataName, float DataValue);
};


// Class Object.Actor.Pawn.Rook.Vehicle.Car
// 0x0034 (0x0C68 - 0x0C34)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car : public AClass_Object_Actor_Pawn_Rook_Vehicle
{
public:
	float                                              StopThreshold;                                            // 0x0C34(0x0004) (Edit)
	float                                              upsideDownDamagePerSecond;                                // 0x0C38(0x0004) (Edit)
	float                                              SteeringMaxAngle;                                         // 0x0C3C(0x0004) (Edit)
	float                                              strafeSteerAngleOffset;                                   // 0x0C40(0x0004) (Edit)
	int                                                Gear;                                                     // 0x0C44(0x0004)
	unsigned long                                      effectDeccelerating : 1;                                  // 0x0C48(0x0004)
	unsigned long                                      effectAccelerating : 1;                                   // 0x0C48(0x0004)
	int                                                outputCarDirection;                                       // 0x0C4C(0x0004)
	float                                              carSteer;                                                 // 0x0C50(0x0004)
	float                                              stopSteeringSize;                                         // 0x0C54(0x0004)
	float                                              stopVelocitySize;                                         // 0x0C58(0x0004)
	float                                              driveThrottleCoefficient;                                 // 0x0C5C(0x0004)
	float                                              maximumYawChange;                                         // 0x0C60(0x0004)
	float                                              minimumNavigationThrottle;                                // 0x0C64(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car");
		return ptr;
	}


	void Function_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_applyOutput_applyOutput();
	void Function_updateGear();
	void Function_processInput_processInput();
	void Function_Tick_Tick_Tick(float DeltaSeconds);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar
// 0x0170 (0x0DD8 - 0x0C68)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car
{
public:
	TArray<struct FStruct_WheelOutput>                 wheelsOutput;                                             // 0x0C68(0x000C) (NeedCtorLink)
	unsigned long                                      systemHandbrake : 1;                                      // 0x0C74(0x0004)
	int                                                hkVehicleDataPtr;                                         // 0x0C78(0x0004) (Const, Transient)
	TArray<class UClass_Object_Field_Struct_State_Class*> wheelClasses;                                             // 0x0C7C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> havokCarWheelClasses;                                     // 0x0C88(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_HavokVehicleWheel*>     Wheels;                                                   // 0x0C94(0x000C) (NeedCtorLink, EditInline)
	TArray<float>                                      GearRatios;                                               // 0x0CA0(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              ChassisMass;                                              // 0x0CAC(0x0004) (Edit)
	float                                              MaxSpeedFullSteeringAngle;                                // 0x0CB0(0x0004) (Edit)
	float                                              FrictionEqualizer;                                        // 0x0CB4(0x0004) (Edit)
	float                                              TorqueRollFactor;                                         // 0x0CB8(0x0004) (Edit)
	float                                              TorquePitchFactor;                                        // 0x0CBC(0x0004) (Edit)
	float                                              TorqueYawFactor;                                          // 0x0CC0(0x0004) (Edit)
	float                                              TorqueExtraFactor;                                        // 0x0CC4(0x0004) (Edit)
	float                                              ChassisUnitInertiaYaw;                                    // 0x0CC8(0x0004) (Edit)
	float                                              ChassisUnitInertiaRoll;                                   // 0x0CCC(0x0004) (Edit)
	float                                              ChassisUnitInertiaPitch;                                  // 0x0CD0(0x0004) (Edit)
	float                                              EngineTorque;                                             // 0x0CD4(0x0004) (Edit)
	float                                              EngineMinRPM;                                             // 0x0CD8(0x0004) (Edit)
	float                                              EngineOptRPM;                                             // 0x0CDC(0x0004) (Edit)
	float                                              EngineMaxRPM;                                             // 0x0CE0(0x0004) (Edit)
	float                                              EngineTorqueFactorAtMinRPM;                               // 0x0CE4(0x0004) (Edit)
	float                                              EngineTorqueFactorAtMaxRPM;                               // 0x0CE8(0x0004) (Edit)
	float                                              EngineResistanceFactorAtMinRPM;                           // 0x0CEC(0x0004) (Edit)
	float                                              EngineResistanceFactorAtOptRPM;                           // 0x0CF0(0x0004) (Edit)
	float                                              EngineResistanceFactorAtMaxRPM;                           // 0x0CF4(0x0004) (Edit)
	float                                              GearDownshiftRPM;                                         // 0x0CF8(0x0004) (Edit)
	float                                              GearUpshiftRPM;                                           // 0x0CFC(0x0004) (Edit)
	float                                              GearClutchDelayTime;                                      // 0x0D00(0x0004) (Edit)
	float                                              GearReverseRatio;                                         // 0x0D04(0x0004) (Edit)
	float                                              AerodynamicsAirDensity;                                   // 0x0D08(0x0004) (Edit)
	float                                              AerodynamicsFrontalArea;                                  // 0x0D0C(0x0004) (Edit)
	float                                              AerodynamicsDragCoeff;                                    // 0x0D10(0x0004) (Edit)
	float                                              AerodynamicsLiftCoeff;                                    // 0x0D14(0x0004) (Edit)
	struct FStruct_Vector                              ExtraGravity;                                             // 0x0D18(0x000C) (Edit)
	float                                              SpinDamping;                                              // 0x0D24(0x0004) (Edit)
	float                                              CollisionSpinDamping;                                     // 0x0D28(0x0004) (Edit)
	float                                              CollisionThreshold;                                       // 0x0D2C(0x0004) (Edit)
	float                                              applyHandbrakeSpeed;                                      // 0x0D30(0x0004) (Edit)
	float                                              occupiedApplyHandbrakeSpeed;                              // 0x0D34(0x0004) (Edit)
	int                                                leftFrontSkiddingEffectIndex;                             // 0x0D38(0x0004)
	int                                                leftRearSkiddingEffectIndex;                              // 0x0D3C(0x0004)
	int                                                rightFrontSkiddingEffectIndex;                            // 0x0D40(0x0004)
	int                                                rightRearSkiddingEffectIndex;                             // 0x0D44(0x0004)
	struct FStruct_HavokCarReplicationState            ReplicationCarState;                                      // 0x0D48(0x003C) (Net)
	struct FStruct_HavokCarReplicationState            OldReplicationCarState;                                   // 0x0D84(0x003C)
	unsigned long                                      commonWheelMass : 1;                                      // 0x0DC0(0x0004) (Edit)
	unsigned long                                      commonWheelFriction : 1;                                  // 0x0DC0(0x0004) (Edit)
	unsigned long                                      commonWheelViscosityFriction : 1;                         // 0x0DC0(0x0004) (Edit)
	unsigned long                                      commonSuspensionStrength : 1;                             // 0x0DC0(0x0004) (Edit)
	unsigned long                                      commonSuspensionDampingCompression : 1;                   // 0x0DC0(0x0004) (Edit)
	unsigned long                                      commonSuspensionDampingRelaxation : 1;                    // 0x0DC0(0x0004) (Edit)
	unsigned long                                      commonSuspensionTravel : 1;                               // 0x0DC0(0x0004) (Edit)
	int                                                leftFrontWheelIndex;                                      // 0x0DC4(0x0004) (Edit)
	int                                                leftRearWheelIndex;                                       // 0x0DC8(0x0004) (Edit)
	int                                                rightFrontWheelIndex;                                     // 0x0DCC(0x0004) (Edit)
	int                                                rightRearWheelIndex;                                      // 0x0DD0(0x0004) (Edit)
	float                                              skidEffectEnergyThreshold;                                // 0x0DD4(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar");
		return ptr;
	}


	bool Function_isSettledUpsideDown_isSettledUpsideDown();
	void Function_switchClass_switchClass(class UClass_Object_Field_Struct_State_Class* switchClass);
	void Function_updateSkidEffect(int wheelIndex, int EffectIndex);
	void Function_updateDynamicEffectStates_updateDynamicEffectStates();
	bool Function_isEffectCauserActive_isEffectCauserActive(int effectCauserIndex);
	void Function_VehicleStateReceived_VehicleStateReceived();
	void Function_pushStateToClient_pushStateToClient();
	bool Function_needToPushStateToClient_needToPushStateToClient();
	void Function_HavokVehicleHasChanged();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_switchWheelClasses(TArray<class UClass_Object_Field_Struct_State_Class*>* newWheelClasses);
	void Function_havokCarSwitchClass(class UClass_Object_Field_Struct_State_Class* havokCarClass);
	void Function_RemakeVehicle();
	void Function_UpdateVehicle(float DeltaTime);
	void Function_Tick_Tick_Tick_Tick(float DeltaSeconds);
	void Function_initialiseEffects_initialiseEffects();
	void Function_FaceRotation_FaceRotation_FaceRotation(const struct FStruct_Rotator& NewRotation, float DeltaTime);
	void Function_EncroachedBy_EncroachedBy_EncroachedBy_EncroachedBy(class AClass_Object_Actor* Other);
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.Pawn.Rook.VehicleMountedTurret
// 0x0084 (0x0938 - 0x08B4)
class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret : public AClass_Object_Actor_Pawn_Rook
{
public:
	struct FName                                       pivotBone;                                                // 0x08B4(0x0004)
	struct FName                                       pitchPivotBone;                                           // 0x08B8(0x0004)
	TEnumAsByte<EVehiclePositionType>                  positionType;                                             // 0x08BC(0x0001) (Net)
	TEnumAsByte<EVehiclePositionType>                  localPositionType;                                        // 0x08BD(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x08BE(0x0002) MISSED OFFSET
	int                                                positionIndex;                                            // 0x08C0(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       ownerVehicle;                                             // 0x08C4(0x0004) (Net)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon;                                                   // 0x08C8(0x0004) (Net)
	float                                              maximumPitch;                                             // 0x08CC(0x0004) (Net)
	float                                              minimumPitch;                                             // 0x08D0(0x0004) (Net)
	float                                              yawStart;                                                 // 0x08D4(0x0004) (Net)
	float                                              yawRange;                                                 // 0x08D8(0x0004) (Net)
	unsigned long                                      yawConstrained : 1;                                       // 0x08DC(0x0004) (Net)
	unsigned long                                      yawPositiveDirection : 1;                                 // 0x08DC(0x0004) (Net)
	struct FStruct_Rotator                             worldSpaceNoRollRotation;                                 // 0x08E0(0x000C)
	struct FStruct_Rotator                             vehicleSpaceRotation;                                     // 0x08EC(0x000C) (Net)
	struct FStruct_Rotator                             vehicleSpaceClientDisplayRotation;                        // 0x08F8(0x000C)
	struct FStruct_Rotator                             turretOffsetRotation;                                     // 0x0904(0x000C) (Net)
	struct FName                                       turretBone;                                               // 0x0910(0x0004) (Net)
	float                                              maximumClientDisplayTurnRate;                             // 0x0914(0x0004) (Net)
	struct FStruct_Rotator                             vehicleSpaceRotationAI;                                   // 0x0918(0x000C)
	float                                              maximumAITurnRate;                                        // 0x0924(0x0004)
	int                                                thirdPersonRotationType;                                  // 0x0928(0x0004)
	struct FStruct_Vector                              cachedCameraLocation;                                     // 0x092C(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.VehicleMountedTurret");
		return ptr;
	}


	void Function_DisplayDebug_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_getAlternateAimAdjustStart(const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* newAimAdjustStart);
	struct FName Function_getKillerLabel_getKillerLabel();
	void Function_doCustomFiredEffectProcessing();
	bool Function_customFiredEffectProcessing();
	class AClass_Object_Actor* Function_getEffectsBaseActor();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	bool Function_canTargetPoint(const struct FStruct_Vector& targetLoc);
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Function_getWeapon();
	class AClass_Object_Actor_Pawn_Rook* Function_getPhysicalAttachment();
	bool Function_aimAdjustViewRotation();
	void Function_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
	struct FStruct_Rotator Function_getFirstPersonEquippableRotation(class AClass_Object_Actor_Equipment_Equippable* subject);
	struct FStruct_Vector Function_getFirstPersonEquippableLocation(class AClass_Object_Actor_Equipment_Equippable* subject);
	void Function_onShotFiredNotification();
	struct FStruct_Rotator Function_GetViewRotation_GetViewRotation();
	struct FStruct_Rotator Function_getDefaultOccupantRotation();
	void Function_SetViewRotation_SetViewRotation(const struct FStruct_Rotator& R);
	struct FStruct_Vector Function_getProjectileSpawnLocation();
	void Function_setFirePressed(class AClass_Object_Actor_Equipment_Equippable* E, bool Pressed);
	bool Function_shouldFire(class AClass_Object_Actor_Equipment_Equippable* E);
	void Function_releaseAltFire();
	void Function_releaseFire();
	void Function_AltFire(bool fireOnce);
	void Function_Fire(bool fireOnce);
	void Function_turretCeaseFire();
	void Function_turretFire();
	struct FStruct_Vector Function_EyePosition_EyePosition();
	bool Function_SpecialCalcView_SpecialCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_getOut();
	void Function_ProcessMove(const struct FStruct_Rotator& worldSpaceNoRollRotation_, const struct FStruct_Rotator& vehicleSpaceRotation_);
	float Function_getEnergy();
	void Function_useEnergy(float Amount);
	void Function_Tick_Tick(float DeltaSeconds);
	void Function_Initialise(class UClass_Object_Field_Struct_State_Class* turretWeaponClass, const struct FName& inTurretBone, float inMaximumPitch, float inMinimumPitch, bool inYawConstrained, float inYawStart, float inYawRange, bool inYawPositiveDirection, float inMaximumClientDisplayTurnRate, float inMaximumAITurnRate);
	void Function_updateParams(float inMaximumPitch, float inMinimumPitch, float inYawStart, float inYawRange);
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_clientOccupantEnter(class AClass_Object_Actor_Controller_PlayerController* PC, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* newDriver, int positionIndex);
	void Function_FaceRotation_FaceRotation(const struct FStruct_Rotator& NewRotation, float DeltaTime);
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getDriver();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_getControllingCharacter_getControllingCharacter();
	class UClass_Object_IFiringMotor* Function_firingMotor_firingMotor();
	void Function_setPositionType(TEnumAsByte<EVehiclePositionType> newPositionType);
};


// Class Object.DeleteableObject.VehicleEffectObserver
// 0x000C (0x0040 - 0x0034)
class UClass_Object_DeleteableObject_VehicleEffectObserver : public UClass_Object_DeleteableObject
{
public:
	class AClass_Object_Actor_Emitter*                 Emitter;                                                  // 0x0034(0x0004)
	class AClass_Object_Actor_SoundInstance*           Sound;                                                    // 0x0038(0x0004)
	float                                              originalParticlesPerSecond;                               // 0x003C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.VehicleEffectObserver");
		return ptr;
	}


	void Function_OnEffectInitialized(class AClass_Object_Actor* inInitializedEffect);
	void Function_OnEffectStopped(class AClass_Object_Actor* inStoppedEffect, bool Completed);
	void Function_OnEffectStarted(class AClass_Object_Actor* inStartedEffect);
	void Function_cleanup();
};


// Class Object.HavokObject
// 0x0004 (0x002C - 0x0028)
class UClass_Object_HavokObject : public UClass_Object
{
public:
	unsigned long                                      hkInitCalled : 1;                                         // 0x0028(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject");
		return ptr;
	}

};


// Class Object.HavokObject.HavokRigidBody
// 0x005C (0x0088 - 0x002C)
class UClass_Object_HavokObject_HavokRigidBody : public UClass_Object_HavokObject
{
public:
	int                                                hkEntityPtr;                                              // 0x002C(0x0004) (Const, Transient)
	int                                                hkUprightConstraintPtr;                                   // 0x0030(0x0004) (Const, Transient)
	unsigned long                                      bHighDetailOnly : 1;                                      // 0x0034(0x0004) (Edit, NoClear)
	unsigned long                                      bClientOnly : 1;                                          // 0x0034(0x0004) (Edit, NoClear)
	float                                              hkMass;                                                   // 0x0038(0x0004) (Edit, NoClear)
	unsigned long                                      hkStabilizedInertia : 1;                                  // 0x003C(0x0004) (Edit, NoClear)
	float                                              hkFriction;                                               // 0x0040(0x0004) (Edit, NoClear)
	float                                              hkRestitution;                                            // 0x0044(0x0004) (Edit, NoClear)
	float                                              hkLinearDamping;                                          // 0x0048(0x0004) (Edit, NoClear)
	float                                              hkAngularDamping;                                         // 0x004C(0x0004) (Edit, NoClear)
	unsigned long                                      hkActive : 1;                                             // 0x0050(0x0004) (Edit, NoClear)
	unsigned long                                      hkKeyframed : 1;                                          // 0x0050(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              hkLinearVel;                                              // 0x0054(0x000C) (Edit, NoClear)
	struct FStruct_Vector                              hkAngularVel;                                             // 0x0060(0x000C) (Edit, NoClear)
	int                                                hkCollisionLayer;                                         // 0x006C(0x0004) (Edit, NoClear)
	int                                                hkCollisionSystemGroup;                                   // 0x0070(0x0004) (Edit)
	int                                                hkCollisionSubpartID;                                     // 0x0074(0x0004) (Edit)
	int                                                hkCollisionSubpartIgnoreID;                               // 0x0078(0x0004) (Edit)
	TEnumAsByte<EOrientationConstraint>                hkForceUpright;                                           // 0x007C(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              hkForceUprightStrength;                                   // 0x0080(0x0004) (Edit, NoClear)
	float                                              hkForceUprightDamping;                                    // 0x0084(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody");
		return ptr;
	}

};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData
// 0x0004 (0x008C - 0x0088)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData : public UClass_Object_HavokObject_HavokRigidBody
{
public:
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       ownerVehicle;                                             // 0x0088(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.TreadVehicle
// 0x010C (0x0D74 - 0x0C68)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_TreadVehicle : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car
{
public:
	struct FStruct_TreadVehicleReplicationState        replicationTreadVehicleState;                             // 0x0C68(0x003C) (Net)
	struct FStruct_TreadVehicleReplicationState        oldReplicationTreadVehicleState;                          // 0x0CA4(0x003C)
	struct FStruct_Vector                              treadPositionOffset;                                      // 0x0CE0(0x000C) (Edit)
	float                                              treadRadius;                                              // 0x0CEC(0x0004) (Edit)
	float                                              treadLength;                                              // 0x0CF0(0x0004) (Edit)
	float                                              throttleToVelocityFactor;                                 // 0x0CF4(0x0004) (Edit)
	float                                              throttleSteerToVelocityScaleFactor;                       // 0x0CF8(0x0004) (Edit)
	float                                              steerToVelocityFactor;                                    // 0x0CFC(0x0004) (Edit)
	float                                              treadGainFactor;                                          // 0x0D00(0x0004) (Edit)
	float                                              treadGainFactorStopping;                                  // 0x0D04(0x0004) (Edit)
	float                                              maximumTreadVelocityDelta;                                // 0x0D08(0x0004) (Edit)
	int                                                leftTreadChannel;                                         // 0x0D0C(0x0004)
	struct FName                                       leftForwardTreadAnimation;                                // 0x0D10(0x0004) (Edit)
	struct FName                                       leftReverseTreadAnimation;                                // 0x0D14(0x0004) (Edit)
	int                                                rightTreadChannel;                                        // 0x0D18(0x0004)
	struct FName                                       rightForwardTreadAnimation;                               // 0x0D1C(0x0004) (Edit)
	struct FName                                       rightReverseTreadAnimation;                               // 0x0D20(0x0004) (Edit)
	float                                              leftTreadSpinSpeed;                                       // 0x0D24(0x0004)
	float                                              rightTreadSpinSpeed;                                      // 0x0D28(0x0004)
	float                                              spinSpeedToAnimationRate;                                 // 0x0D2C(0x0004) (Edit)
	float                                              animationRateToTexturePanRate;                            // 0x0D30(0x0004) (Edit)
	float                                              forceApplicationHeightOffset;                             // 0x0D34(0x0004) (Edit)
	float                                              lowFriction;                                              // 0x0D38(0x0004) (Edit)
	float                                              treadVehicleGravityScale;                                 // 0x0D3C(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_Shader* leftTreadShader;                                          // 0x0D40(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_TexMatrix* leftTreadTexPanner;                                       // 0x0D44(0x0004)
	int                                                leftTreadMaterialIndex;                                   // 0x0D48(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_Shader* rightTreadShader;                                         // 0x0D4C(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_TexMatrix* rightTreadTexPanner;                                      // 0x0D50(0x0004)
	int                                                rightTreadMaterialIndex;                                  // 0x0D54(0x0004) (Edit)
	unsigned long                                      softThrottleSteering : 1;                                 // 0x0D58(0x0004)
	float                                              switchOffSoftThrottleSteeringTime;                        // 0x0D5C(0x0004)
	float                                              softThrottleSteeringScale;                                // 0x0D60(0x0004) (Edit)
	float                                              softThrottleSteeringStayOnPeriod;                         // 0x0D64(0x0004) (Edit)
	float                                              centreOfMassHeightOffset;                                 // 0x0D68(0x0004) (Edit)
	unsigned long                                      leftTreadContact : 1;                                     // 0x0D6C(0x0004)
	unsigned long                                      rightTreadContact : 1;                                    // 0x0D6C(0x0004)
	int                                                treadVehiclePadding;                                      // 0x0D70(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.TreadVehicle");
		return ptr;
	}


	void Function_VehicleStateReceived_VehicleStateReceived();
	void Function_pushStateToClient_pushStateToClient();
	bool Function_needToPushStateToClient_needToPushStateToClient();
	void Function_Tick_Tick_Tick_Tick(float DeltaSeconds);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_processInput_processInput_processInput();
};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.TreadVehicle.Tank
// 0x00F0 (0x0E64 - 0x0D74)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_TreadVehicle_Tank : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car_TreadVehicle
{
public:
	struct FStruct_Vector                              cannonOffset;                                             // 0x0D74(0x000C)
	struct FStruct_Vector                              turretOffset;                                             // 0x0D80(0x000C)
	struct FStruct_Rotator                             cannonWorldSpaceNoRollRotation;                           // 0x0D8C(0x000C)
	struct FStruct_Rotator                             cannonVehicleSpaceRotation;                               // 0x0D98(0x000C) (Net)
	float                                              cannonMinimumPitch;                                       // 0x0DA4(0x0004) (Edit)
	float                                              cannonMaximumPitch;                                       // 0x0DA8(0x0004) (Edit)
	float                                              boostAvailableTime;                                       // 0x0DAC(0x0004)
	float                                              timeBetweenBoosts;                                        // 0x0DB0(0x0004) (Edit)
	float                                              boostAngle;                                               // 0x0DB4(0x0004) (Edit)
	float                                              boostStrength;                                            // 0x0DB8(0x0004) (Edit)
	float                                              boostUpStrength;                                          // 0x0DBC(0x0004) (Edit)
	float                                              boostUpDuration;                                          // 0x0DC0(0x0004) (Edit)
	unsigned long                                      boostInProgress : 1;                                      // 0x0DC4(0x0004)
	float                                              boostSecondStageTime;                                     // 0x0DC8(0x0004)
	class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret* Turret;                                                   // 0x0DCC(0x0004)
	class UClass_Object_Field_Struct_State_Class*      turretClass;                                              // 0x0DD0(0x0004)
	struct FName                                       turretBone;                                               // 0x0DD4(0x0004)
	struct FStruct_Vector                              gunnerCameraOffset;                                       // 0x0DD8(0x000C) (Edit)
	struct FStruct_Vector                              gunnerWeaponOffset;                                       // 0x0DE4(0x000C) (Edit)
	class UClass_Object_Field_Struct_State_Class*      gunnerWeaponClass;                                        // 0x0DF0(0x0004) (Edit)
	float                                              gunnerMaximumPitch;                                       // 0x0DF4(0x0004) (Edit)
	float                                              gunnerMinimumPitch;                                       // 0x0DF8(0x0004) (Edit)
	float                                              gunnerClientTurnRate;                                     // 0x0DFC(0x0004) (Edit)
	float                                              gunnerAITurnRate;                                         // 0x0E00(0x0004) (Edit)
	float                                              cannonAITurnRate;                                         // 0x0E04(0x0004) (Edit)
	float                                              cannonClientTurnRate;                                     // 0x0E08(0x0004) (Edit)
	struct FStruct_Rotator                             cannonTargetRotation;                                     // 0x0E0C(0x000C)
	struct FStruct_Rotator                             cannonDisplayVehicleSpaceRotation;                        // 0x0E18(0x000C)
	unsigned long                                      localBoostEventSignal : 1;                                // 0x0E24(0x0004)
	unsigned long                                      boostEventSignal : 1;                                     // 0x0E24(0x0004) (Net)
	unsigned long                                      gripping : 1;                                             // 0x0E24(0x0004) (Const)
	unsigned long                                      bCanHitTarget : 1;                                        // 0x0E24(0x0004)
	struct FStruct_Rotator                             currentViewRotation;                                      // 0x0E28(0x000C)
	int                                                boostChannel;                                             // 0x0E34(0x0004)
	float                                              boostOpenAnimationLength;                                 // 0x0E38(0x0004)
	unsigned long                                      openAnimationPlayed : 1;                                  // 0x0E3C(0x0004)
	unsigned long                                      closeAnimationPlayed : 1;                                 // 0x0E3C(0x0004)
	float                                              boostCloseTime;                                           // 0x0E40(0x0004)
	float                                              boostEffectDuration;                                      // 0x0E44(0x0004) (Edit)
	int                                                gripAnimationChannel;                                     // 0x0E48(0x0004)
	struct FName                                       gripAnimation;                                            // 0x0E4C(0x0004)
	float                                              gripAnimationBlendTime;                                   // 0x0E50(0x0004) (Edit)
	float                                              landingEffectAirTime;                                     // 0x0E54(0x0004) (Edit)
	int                                                landingChannel;                                           // 0x0E58(0x0004)
	float                                              lastTreadContactTime;                                     // 0x0E5C(0x0004)
	int                                                throttleForwardAndGroundContactIndex;                     // 0x0E60(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.TreadVehicle.Tank");
		return ptr;
	}


	struct FStruct_Vector Function_unifiedGetNaturalCOMPosition_unifiedGetNaturalCOMPosition();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed();
	bool Function_ShouldProjectileHit_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	struct FStruct_Rotator Function_getAimAdjustedViewRotation(class AClass_Object_Actor_Controller_PlayerController* PC, const struct FStruct_Vector& fireLocation, int positionIndex);
	void Function_Tick_Tick_Tick_Tick_Tick(float DeltaSeconds);
	void Function_SetViewRotation_SetViewRotation(const struct FStruct_Rotator& R);
	struct FStruct_Rotator Function_GetViewRotation_GetViewRotation();
	void Function_playerMoveProcessing_playerMoveProcessing(float DeltaTime);
	void Function_applyOutput_applyOutput_applyOutput();
	struct FStruct_Vector Function_getProjectileSpawnLocation_getProjectileSpawnLocation();
	void Function_getThirdPersonEquippableAttachment_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
	class UClass_Object_Material* Function_getTeamSkin_getTeamSkin();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	bool Function_isEffectCauserActive_isEffectCauserActive(int effectCauserIndex);
	void Function_initialiseEffects_initialiseEffects();
	void Function_setGripping(bool grippingEnabled);
};


// Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft
// 0x0174 (0x0DA8 - 0x0C34)
class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft : public AClass_Object_Actor_Pawn_Rook_Vehicle
{
public:
	struct FName                                       idleAnimation;                                            // 0x0C34(0x0004) (Edit)
	struct FName                                       leftAnimation;                                            // 0x0C38(0x0004) (Edit)
	struct FName                                       rightAnimation;                                           // 0x0C3C(0x0004) (Edit)
	struct FName                                       forwardAnimation;                                         // 0x0C40(0x0004) (Edit)
	struct FName                                       backAnimation;                                            // 0x0C44(0x0004) (Edit)
	struct FName                                       upAnimation;                                              // 0x0C48(0x0004) (Edit)
	struct FName                                       downAnimation;                                            // 0x0C4C(0x0004) (Edit)
	struct FName                                       spawningAnimation;                                        // 0x0C50(0x0004) (Edit)
	struct FName                                       gearUpAnimation;                                          // 0x0C54(0x0004) (Edit)
	float                                              spawningBlendTime;                                        // 0x0C58(0x0004) (Edit)
	float                                              blendTime;                                                // 0x0C5C(0x0004) (Edit)
	float                                              gearTraceLength;                                          // 0x0C60(0x0004) (Edit)
	float                                              gearUpBlendTime;                                          // 0x0C64(0x0004) (Edit)
	float                                              strafeThrustForce;                                        // 0x0C68(0x0004) (Edit)
	float                                              strafeForce;                                              // 0x0C6C(0x0004) (Edit)
	float                                              forwardThrustForce;                                       // 0x0C70(0x0004) (Edit)
	float                                              forwardForce;                                             // 0x0C74(0x0004) (Edit)
	float                                              upThrustForce;                                            // 0x0C78(0x0004) (Edit)
	float                                              reverseForce;                                             // 0x0C7C(0x0004) (Edit)
	float                                              reverseThrustForce;                                       // 0x0C80(0x0004) (Edit)
	float                                              strafeCombinedReduction;                                  // 0x0C84(0x0004) (Edit)
	float                                              forwardCombinedReduction;                                 // 0x0C88(0x0004) (Edit)
	float                                              diveThrustForce;                                          // 0x0C8C(0x0004) (Edit)
	float                                              diveCombinedReduction;                                    // 0x0C90(0x0004) (Edit)
	float                                              thrustCombinedReduction;                                  // 0x0C94(0x0004) (Edit)
	float                                              downDiveForceScale;                                       // 0x0C98(0x0004) (Edit)
	float                                              aheadDiveForceScale;                                      // 0x0C9C(0x0004) (Edit)
	float                                              ForceScale;                                               // 0x0CA0(0x0004) (Edit)
	float                                              clientControlJointStrength;                               // 0x0CA4(0x0004) (Edit)
	float                                              controlJointStrength;                                     // 0x0CA8(0x0004) (Edit)
	float                                              clientDriverControlJointStrength;                         // 0x0CAC(0x0004) (Edit)
	float                                              flightControlDamping;                                     // 0x0CB0(0x0004) (Edit)
	float                                              diveCounterGravityForceScale;                             // 0x0CB4(0x0004) (Edit)
	float                                              coastingCounterGravityForceScale;                         // 0x0CB8(0x0004) (Edit)
	float                                              coastingDamping;                                          // 0x0CBC(0x0004) (Edit)
	float                                              angularBankScale;                                         // 0x0CC0(0x0004) (Edit)
	float                                              linearBankScale;                                          // 0x0CC4(0x0004) (Edit)
	int                                                turningRightEffectIndex;                                  // 0x0CC8(0x0004)
	int                                                turningLeftEffectIndex;                                   // 0x0CCC(0x0004)
	int                                                divingEffectIndex;                                        // 0x0CD0(0x0004)
	float                                              flightRotationEffectMagnitude;                            // 0x0CD4(0x0004) (Edit)
	struct FStruct_Rotator                             viewRotationAI;                                           // 0x0CD8(0x000C)
	unsigned long                                      ThrustingEffectState : 1;                                 // 0x0CE4(0x0004)
	TEnumAsByte<EAccelerationEffectStateEnum>          AccelerationEffectState;                                  // 0x0CE8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0CE9(0x0003) MISSED OFFSET
	unsigned long                                      divingForceApplied : 1;                                   // 0x0CEC(0x0004)
	struct FStruct_Vector                              outputControlForce;                                       // 0x0CF0(0x000C)
	float                                              outputFlightYawAngle;                                     // 0x0CFC(0x0004)
	float                                              outputFlightPitchAngle;                                   // 0x0D00(0x0004)
	float                                              counterGravityForceScale;                                 // 0x0D04(0x0004) (Edit)
	unsigned long                                      strafeLeft : 1;                                           // 0x0D08(0x0004)
	unsigned long                                      strafeRight : 1;                                          // 0x0D08(0x0004)
	unsigned long                                      strafeForward : 1;                                        // 0x0D08(0x0004)
	unsigned long                                      strafeBack : 1;                                           // 0x0D08(0x0004)
	unsigned long                                      strafeUp : 1;                                             // 0x0D08(0x0004)
	unsigned long                                      strafeDown : 1;                                           // 0x0D08(0x0004)
	unsigned long                                      LandingGearUp : 1;                                        // 0x0D08(0x0004)
	struct FStruct_Rotator                             currentCameraRotation;                                    // 0x0D0C(0x000C)
	struct FStruct_Vector                              replicatedControlForce;                                   // 0x0D18(0x000C)
	struct FStruct_AircraftState                       replicationAircraftState;                                 // 0x0D24(0x0024) (Net)
	struct FStruct_AircraftState                       oldReplicationAircraftState;                              // 0x0D48(0x0024)
	unsigned long                                      constrainAircraftPitch : 1;                               // 0x0D6C(0x0004) (Edit)
	float                                              minimumAircraftPitch;                                     // 0x0D70(0x0004) (Edit)
	float                                              maximumAircraftPitch;                                     // 0x0D74(0x0004) (Edit)
	unsigned long                                      hardConstrainAircraftPitch : 1;                           // 0x0D78(0x0004) (Edit)
	float                                              hardAircraftPitchRange;                                   // 0x0D7C(0x0004) (Edit)
	float                                              zAxisFlightRotation;                                      // 0x0D80(0x0004) (Const)
	float                                              navigationMaximumPitch;                                   // 0x0D84(0x0004)
	float                                              navigationMinimumPitch;                                   // 0x0D88(0x0004)
	float                                              navigationTurnRate;                                       // 0x0D8C(0x0004)
	float                                              rotateMinimumPitch;                                       // 0x0D90(0x0004)
	float                                              rotateMaximumPitch;                                       // 0x0D94(0x0004)
	float                                              thrustThresholdPitch;                                     // 0x0D98(0x0004)
	float                                              throttleScale;                                            // 0x0D9C(0x0004)
	int                                                Padding[0x2];                                             // 0x0DA0(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float DeltaSeconds);
	bool Function_specialCalcViewProcessing_specialCalcViewProcessing(int positionIndex, class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_ClientDriverLeave_ClientDriverLeave(class AClass_Object_Actor_Controller* C, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* oldDriver);
	void Function_clientOccupantEnter_clientOccupantEnter(const struct FStruct_ClientOccupantEnterData& data);
	bool Function_isEffectCauserActive_isEffectCauserActive(int effectCauserIndex);
	void Function_initialiseEffects_initialiseEffects();
	void Function_updateEffectsStates_updateEffectsStates();
	void Function_VehicleStateReceived_VehicleStateReceived();
	struct FStruct_Vector Function_getControlJointAttachLocation();
	void Function_applyOutput_applyOutput();
	void Function_pushStateToClient_pushStateToClient();
	bool Function_needToPushStateToClient_needToPushStateToClient();
	void Function_processInput_processInput();
	void Function_updateCameraRotation(float DeltaSeconds);
	void Function_SetViewRotation_SetViewRotation(const struct FStruct_Rotator& R);
	struct FStruct_Rotator Function_GetViewRotation_GetViewRotation();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_setCounterGravityForceScale(float Scale);
	void Function_setFlightControlStrength(float Strength);
	void Function_setFlightRotation(int yawAngle, int pitchAngle);
	void Function_setFlightForce(const struct FStruct_Vector& Force);
	struct FStruct_Vector Function_calculateOutputControlForce(const struct FStruct_Rotator& referenceRotation, float currentThrottleInput, float currentStrafeInput, float currentThrustInput, bool currentDiveInput);
};


// Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.Pod
// 0x002C (0x0DD4 - 0x0DA8)
class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_Pod : public AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft
{
public:
	TArray<struct FName>                               muzzleSockets;                                            // 0x0DA8(0x000C) (NeedCtorLink)
	int                                                currentMuzzleIndex;                                       // 0x0DB4(0x0004) (Net)
	int                                                engineDustEffectIndex;                                    // 0x0DB8(0x0004)
	struct FStruct_Vector                              engineDustEffectLocation;                                 // 0x0DBC(0x000C)
	float                                              engineDustTraceLength;                                    // 0x0DC8(0x0004) (Edit)
	float                                              engineDustGroundOffset;                                   // 0x0DCC(0x0004) (Edit)
	class UClass_Object_DeleteableObject_VehicleEffectObserver* muzzleFlashObserver;                                      // 0x0DD0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.Pod");
		return ptr;
	}


	void Function_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_doCustomFiredEffectProcessing_doCustomFiredEffectProcessing();
	bool Function_customFiredEffectProcessing_customFiredEffectProcessing();
	void Function_getAlternateAimAdjustStart_getAlternateAimAdjustStart(const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* newAimAdjustStart);
	bool Function_aimAdjustViewRotation_aimAdjustViewRotation();
	void Function_updateDynamicEffectStates_updateDynamicEffectStates();
	bool Function_isEffectCauserActive_isEffectCauserActive_isEffectCauserActive(int effectCauserIndex);
	void Function_initialiseEffects_initialiseEffects_initialiseEffects();
	class AClass_Object_Actor* Function_getEffectsBaseActor_getEffectsBaseActor();
	struct FStruct_Vector Function_getControlJointAttachLocation_getControlJointAttachLocation();
	struct FStruct_Rotator Function_getFirstPersonEquippableRotation_getFirstPersonEquippableRotation(class AClass_Object_Actor_Equipment_Equippable* subject);
	struct FStruct_Vector Function_getFirstPersonEquippableLocation_getFirstPersonEquippableLocation(class AClass_Object_Actor_Equipment_Equippable* subject);
	void Function_onShotFiredNotification_onShotFiredNotification();
	struct FStruct_Vector Function_getProjectileSpawnLocation_getProjectileSpawnLocation();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	class UClass_Object_Material* Function_getTeamSkin_getTeamSkin();
};


// Class Object.Actor.HavokActor
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_HavokActor : public AClass_Object_Actor
{
public:
	unsigned long                                      bAcceptsShotImpulse : 1;                                  // 0x0400(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor");
		return ptr;
	}


	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
};


// Class Object.Actor.HavokActor.HavokConstraint
// 0x0074 (0x0478 - 0x0404)
class AClass_Object_Actor_HavokActor_HavokConstraint : public AClass_Object_Actor_HavokActor
{
public:
	int                                                hkConstraintPtr;                                          // 0x0404(0x0004) (Const, Transient)
	unsigned long                                      hkInitCalled : 1;                                         // 0x0408(0x0004) (Const, Transient)
	class AClass_Object_Actor*                         hkAttachedActorA;                                         // 0x040C(0x0004) (Edit)
	struct FName                                       hkAttachedSubPartA;                                       // 0x0410(0x0004) (Edit, NoClear)
	class AClass_Object_Actor*                         hkAttachedActorB;                                         // 0x0414(0x0004) (Edit)
	struct FName                                       hkAttachedSubPartB;                                       // 0x0418(0x0004) (Edit, NoClear)
	unsigned long                                      bDisableCollisions : 1;                                   // 0x041C(0x0004) (Edit, NoClear)
	float                                              fMaxForceToBreak;                                         // 0x0420(0x0004) (Edit, NoClear)
	float                                              fSpecificStrength;                                        // 0x0424(0x0004) (Edit, NoClear)
	float                                              fSpecificDamping;                                         // 0x0428(0x0004) (Edit, NoClear)
	TEnumAsByte<EAutoComputeConstraint>                AutoComputeLocals;                                        // 0x042C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x042D(0x0003) MISSED OFFSET
	struct FStruct_Vector                              LocalPosA;                                                // 0x0430(0x000C) (Edit)
	struct FStruct_Vector                              LocalAxisA;                                               // 0x043C(0x000C) (Edit)
	struct FStruct_Vector                              LocalPerpAxisA;                                           // 0x0448(0x000C) (Edit)
	struct FStruct_Vector                              LocalPosB;                                                // 0x0454(0x000C) (Edit)
	struct FStruct_Vector                              LocalAxisB;                                               // 0x0460(0x000C) (Edit)
	struct FStruct_Vector                              LocalPerpAxisB;                                           // 0x046C(0x000C) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint");
		return ptr;
	}


	void Function_ComputeLocalValues();
	void Function_ActivateAttachedBodies();
	void Function_UpdateConstraintDetails();
	void Function_RecreateConstraint();
};


// Class Object.Actor.HavokActor.HavokConstraint.Havok6DOFConstraint
// 0x0014 (0x048C - 0x0478)
class AClass_Object_Actor_HavokActor_HavokConstraint_Havok6DOFConstraint : public AClass_Object_Actor_HavokActor_HavokConstraint
{
public:
	unsigned long                                      bConstrainAngular : 1;                                    // 0x0478(0x0004) (Edit)
	unsigned long                                      bConstrainLinear : 1;                                     // 0x0478(0x0004) (Edit)
	int                                                pivotAIndex;                                              // 0x047C(0x0004) (Const, Transient)
	int                                                pivotBIndex;                                              // 0x0480(0x0004) (Const, Transient)
	int                                                basisAIndex;                                              // 0x0484(0x0004) (Const, Transient)
	int                                                basisBIndex;                                              // 0x0488(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.Havok6DOFConstraint");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.HavokConstraint.Havok6DOFConstraint.FlightControlJoint
// 0x0000 (0x048C - 0x048C)
class AClass_Object_Actor_HavokActor_HavokConstraint_Havok6DOFConstraint_FlightControlJoint : public AClass_Object_Actor_HavokActor_HavokConstraint_Havok6DOFConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.Havok6DOFConstraint.FlightControlJoint");
		return ptr;
	}


	void Function_setTargetRotation(const struct FStruct_Quat& newTargetRotation);
};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar.Buggy
// 0x0088 (0x0E60 - 0x0DD8)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar_Buggy : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar
{
public:
	struct FName                                       turretBone;                                               // 0x0DD8(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      inventoryStationAccessClass;                              // 0x0DDC(0x0004) (Edit)
	struct FStruct_Vector                              inventoryStationOffset;                                   // 0x0DE0(0x000C) (Edit)
	TArray<class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess*> InventoryStationAccess;                                   // 0x0DEC(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret* Turret;                                                   // 0x0DF8(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      turretClass;                                              // 0x0DFC(0x0004)
	struct FStruct_Vector                              gunnerCameraOffset;                                       // 0x0E00(0x000C) (Edit)
	struct FStruct_Vector                              gunnerWeaponOffset;                                       // 0x0E0C(0x000C) (Edit)
	class UClass_Object_Field_Struct_State_Class*      gunnerWeaponClass;                                        // 0x0E18(0x0004) (Edit)
	float                                              gunnerMaximumPitch;                                       // 0x0E1C(0x0004) (Edit)
	float                                              gunnerMinimumPitch;                                       // 0x0E20(0x0004) (Edit)
	float                                              gunnerAITurnRate;                                         // 0x0E24(0x0004) (Edit)
	float                                              gunnerClientTurnRate;                                     // 0x0E28(0x0004) (Edit)
	int                                                numberInventoryStationPositions;                          // 0x0E2C(0x0004) (Edit)
	int                                                maximumNumberInventoryStationPositions;                   // 0x0E30(0x0004)
	class UClass_Object_Field_Struct_State_Class*      boostClass;                                               // 0x0E34(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      frontBoostWheelClass;                                     // 0x0E38(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      rearBoostWheelClass;                                      // 0x0E3C(0x0004) (Edit)
	TArray<class UClass_Object_Field_Struct_State_Class*> spawnDefaultWeapons;                                      // 0x0E40(0x000C) (Edit, NeedCtorLink)
	struct FStruct_Vector                              forceDeactivatePosition;                                  // 0x0E4C(0x000C)
	float                                              forceDeactivateTime;                                      // 0x0E58(0x0004)
	unsigned long                                      isRegisteredRespawnVehicle : 1;                           // 0x0E5C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar.Buggy");
		return ptr;
	}


	bool Function_getCurrentLoadoutWeapons(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, struct FStruct_InventoryStationLoadout* weaponLoadout);
	bool Function_InventoryCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_Tick_Tick_Tick_Tick_Tick(float DeltaSeconds);
	bool Function_ShouldProjectileHit_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	void Function_VehicleUpdateParams_VehicleUpdateParams();
	void Function_accessFinished(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, bool returnToUsualMovment);
	void Function_kickInventoryStationUsers();
	void Function_aboutToSettleUpsideDown_aboutToSettleUpsideDown();
	void Function_aboutToDie_aboutToDie();
	bool Function_canCharacterRespawnAt_canCharacterRespawnAt();
	void Function_updateRespawnState();
	void Function_settledUpsideDownChanged_settledUpsideDownChanged();
	void Function_inventoryStationEnterProcessing(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant, int positionIndex);
	int Function_getAccessIndex(int positionIndex);
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* Function_getUnusedInventoryStation_getUnusedInventoryStation();
	void Function_occupantSwitchPosition_occupantSwitchPosition(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant, int targetPositionIndex);
	void Function_occupantEnter_occupantEnter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant, int positionIndex);
	bool Function_isOnCharactersTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* testCharacter);
	bool Function_directUsage();
	void Function_accessNoLongerRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_changeApplied(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access);
	bool Function_isFunctional();
	bool Function_isAccessible(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_accessRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor, class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access, int armorIndex);
	bool Function_DriverLeave_DriverLeave(bool bForceLeave, int positionIndex);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	class UClass_Object_Material* Function_getTeamSkin_getTeamSkin();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_spawnCharacter_spawnCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character);
	int Function_getMinorPositionEntryIndex_getMinorPositionEntryIndex(int positionIndex);
};


// Class Object.Actor.HavokActor.DynamicObject
// 0x0060 (0x0464 - 0x0404)
class AClass_Object_Actor_HavokActor_DynamicObject : public AClass_Object_Actor_HavokActor
{
public:
	float                                              Mass;                                                     // 0x0404(0x0004) (Edit, NoClear)
	float                                              Elasticity;                                               // 0x0408(0x0004) (Edit, NoClear)
	float                                              friction;                                                 // 0x040C(0x0004) (Edit, NoClear)
	float                                              LinearDamping;                                            // 0x0410(0x0004) (Edit, NoClear)
	float                                              AngularDamping;                                           // 0x0414(0x0004) (Edit, NoClear)
	float                                              Health;                                                   // 0x0418(0x0004) (Edit, NoClear)
	unsigned long                                      Invulnerable : 1;                                         // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      Blocking : 1;                                             // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      Stationary : 1;                                           // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      Enabled : 1;                                              // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      Shadows : 1;                                              // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      Volatile : 1;                                             // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      Freeze : 1;                                               // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      FadeOut : 1;                                              // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      LimitedLife : 1;                                          // 0x041C(0x0004) (Edit, NoClear)
	float                                              lifetime;                                                 // 0x0420(0x0004) (Edit, NoClear)
	unsigned long                                      Explosion : 1;                                            // 0x0424(0x0004) (Edit, NoClear)
	float                                              ExplosionForce;                                           // 0x0428(0x0004) (Edit, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> Children;                                                 // 0x042C(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> Explosions;                                               // 0x0438(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<class UClass_Object_Material_Modifier_ColorModifier*> Style;                                                    // 0x0444(0x000C) (NeedCtorLink)
	unsigned long                                      StyleCreated : 1;                                         // 0x0450(0x0004)
	unsigned long                                      FadingOut : 1;                                            // 0x0450(0x0004)
	float                                              FadeOutAlpha;                                             // 0x0454(0x0004)
	float                                              FadeOutTime;                                              // 0x0458(0x0004)
	float                                              FadeOutLength;                                            // 0x045C(0x0004)
	unsigned long                                      NextVersionPending : 1;                                   // 0x0460(0x0004)
	unsigned long                                      NextVersionCalled : 1;                                    // 0x0460(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject");
		return ptr;
	}


	void Function_GetExplosionSocketName(int Index, struct FString* Name);
	void Function_GetChildSocketName(int Index, struct FString* Name);
	void Function_Initialize(float Scale, class UClass_Object_Primitive_StaticMesh* Mesh);
	void Function_LoadSkinsFromMaterials();
	void Function_unifiedAddTorque_unifiedAddTorque(const struct FStruct_Vector& torque);
	void Function_unifiedAddForceAtPosition_unifiedAddForceAtPosition(const struct FStruct_Vector& Force, const struct FStruct_Vector& Position);
	void Function_unifiedAddForce_unifiedAddForce(const struct FStruct_Vector& Force);
	void Function_unifiedAddImpulseAtPosition_unifiedAddImpulseAtPosition(const struct FStruct_Vector& Impulse, const struct FStruct_Vector& Position);
	void Function_unifiedAddImpulse_unifiedAddImpulse(const struct FStruct_Vector& Impulse);
	void Function_SetAlpha(unsigned char Amount);
	void Function_CreateAlphaStyle();
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* EventInstigator, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	bool Function_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	void Function_Died(class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	TEnumAsByte<EScalabilitySetting> Function_GetScalabilitySetting();
	void Function_SpawnChild(int Index);
	void Function_SpawnChildren();
	void Function_Remove();
	void Function_Explode();
	void Function_NextVersion();
	void Function_StartFadeOut();
	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_Tick_Tick(float DeltaTime);
	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void STATIC_Function_PrecacheDynamicObjectRenderData(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class UClass_Object_Field_Struct_State_Class* DynClass);
	void Function_PreBeginPlay_PreBeginPlay();
	void Function_setNativeActorData(float Scale);
	void Function_Construct_ActorNameVectorRotatorFloat(class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation, float Scale);
};


// Class Object.GUI
// 0x0038 (0x0060 - 0x0028)
class UClass_Object_GUI : public UClass_Object
{
public:
	class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* Controller;                                               // 0x0028(0x0004) (Edit, EditConst, NoClear, EditInline)
	int                                                QBTN_Ok;                                                  // 0x002C(0x0004) (Const)
	int                                                QBTN_Cancel;                                              // 0x0030(0x0004) (Const)
	int                                                QBTN_Retry;                                               // 0x0034(0x0004) (Const)
	int                                                QBTN_Continue;                                            // 0x0038(0x0004) (Const)
	int                                                QBTN_Yes;                                                 // 0x003C(0x0004) (Const)
	int                                                QBTN_No;                                                  // 0x0040(0x0004) (Const)
	int                                                QBTN_Abort;                                               // 0x0044(0x0004) (Const)
	int                                                QBTN_Ignore;                                              // 0x0048(0x0004) (Const)
	int                                                QBTN_OkCancel;                                            // 0x004C(0x0004) (Const)
	int                                                QBTN_AbortRetry;                                          // 0x0050(0x0004) (Const)
	int                                                QBTN_YesNo;                                               // 0x0054(0x0004) (Const)
	int                                                QBTN_YesNoCancel;                                         // 0x0058(0x0004) (Const)
	int                                                QBTN_TimeOut;                                             // 0x005C(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI");
		return ptr;
	}


	bool STATIC_Function_IsDigit(const struct FString& Test, bool bAllowDecimal);
	struct FString Function_MakeColorCode(const struct FStruct_Color& clr);
	struct FString Function_StripCodes(const struct FString& InStr);
	void Function_CopyConfig(class UClass_Object_GUI_GUIComponent* Ctrl);
	struct FStruct_GUIListElem STATIC_Function_CreateElement(const struct FString& NewItem, class UClass_Object* Obj, const struct FString& str, int intData, bool bData);
};


// Class Object.GUI.GUIComponent
// 0x01FC (0x025C - 0x0060)
class UClass_Object_GUI_GUIComponent : public UClass_Object_GUI
{
public:
	TArray<struct FStruct_sDynamicPositionSpec>        MovePositions;                                            // 0x0060(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bRepositioning : 1;                                       // 0x006C(0x0004) (Edit, EditConst, NoClear)
	struct FStruct_sTransitionSpec                     TransitionSpec;                                           // 0x0070(0x0028) (Edit, EditConst, NoClear, EditInline)
	int                                                CyclePosition;                                            // 0x0098(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bRepeatCycling : 1;                                       // 0x009C(0x0004) (Edit, Config, NoClear)
	int                                                MoveGroup;                                                // 0x00A0(0x0004) (Edit, EditConst, NoClear)
	class UClass_Object_GUI_GUIComponent*              MenuOwner;                                                // 0x00A4(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	TEnumAsByte<EeMenuState>                           MenuState;                                                // 0x00A8(0x0001) (Edit, EditConst, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	TArray<class UClass_Object_GUI_GUIComponent*>      UndoHistory;                                              // 0x00AC(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	int                                                UndoLevel;                                                // 0x00B8(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bSaved : 1;                                               // 0x00BC(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bInited : 1;                                              // 0x00BC(0x0004) (Edit, EditConst, NoClear)
	struct FString                                     StyleName;                                                // 0x00C0(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	float                                              WinTop;                                                   // 0x00CC(0x0004) (Edit, Config)
	float                                              WinLeft;                                                  // 0x00D0(0x0004) (Edit, Config, NoClear)
	float                                              WinWidth;                                                 // 0x00D4(0x0004) (Edit, Config)
	float                                              WinHeight;                                                // 0x00D8(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bScaled : 1;                                              // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bBoundToParent : 1;                                       // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bScaleToParent : 1;                                       // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bCanBeShown : 1;                                          // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAcceptsInput : 1;                                        // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bCaptureTabs : 1;                                         // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bCaptureMouse : 1;                                        // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bSwallowAllKeyEvents : 1;                                 // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bHitTestOnClientBounds : 1;                               // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAllowHTMLTextFormatting : 1;                             // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bDrawStyle : 1;                                           // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bNeverFocus : 1;                                          // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bRepeatClick : 1;                                         // 0x00DC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bRequireReleaseClick : 1;                                 // 0x00DC(0x0004) (Edit, Config, NoClear)
	struct FString                                     Hint;                                                     // 0x00E0(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	int                                                MouseCursorIndex;                                         // 0x00EC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bHideMouseCursor : 1;                                     // 0x00F0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bTabStop : 1;                                             // 0x00F0(0x0004) (Edit, Config, NoClear)
	int                                                TabOrder;                                                 // 0x00F4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bFocusOnWatch : 1;                                        // 0x00F8(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bMaintainFocus : 1;                                       // 0x00F8(0x0004) (Edit, Config, NoClear)
	float                                              RenderWeight;                                             // 0x00FC(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bMouseOverSound : 1;                                      // 0x0100(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIComponent*              FocusInstead;                                             // 0x0104(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bPersistent : 1;                                          // 0x0108(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bVisible : 1;                                             // 0x0108(0x0004) (Edit, EditConst, NoClear)
	TEnumAsByte<EClickSound>                           OnClickSound;                                             // 0x010C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	class UClass_Object_GUI_GUIStyles*                 Style;                                                    // 0x0110(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, NoClear, EditInline)
	float                                              Bounds[0x4];                                              // 0x0114(0x0004)
	float                                              ClientBounds[0x4];                                        // 0x0124(0x0004)
	unsigned long                                      bActiveInput : 1;                                         // 0x0134(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bDirty : 1;                                               // 0x0134(0x0004) (Edit, EditConst, NoClear)
	int                                                TimerIndex;                                               // 0x0138(0x0004) (Const)
	unsigned long                                      bTimerRepeat : 1;                                         // 0x013C(0x0004) (Edit, EditConst, NoClear)
	float                                              TimerCountdown;                                           // 0x0140(0x0004) (Edit, EditConst, NoClear)
	float                                              TimerInterval;                                            // 0x0144(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bPlayerMoveAllowed : 1;                                   // 0x0148(0x0004) (Edit, EditConst)
	unsigned long                                      bAllowPressedEffect : 1;                                  // 0x0148(0x0004)
	float                                              SaveX;                                                    // 0x014C(0x0004)
	float                                              SaveY;                                                    // 0x0150(0x0004)
	struct FStruct_Color                               SaveColor;                                                // 0x0154(0x0004)
	class UClass_Object_Font*                          SaveFont;                                                 // 0x0158(0x0004)
	unsigned char                                      SaveStyle;                                                // 0x015C(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	class UClass_Object_GUI_GUIComponent*              LinkOverrides[0x4];                                       // 0x0160(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent*              Links[0x4];                                               // 0x0170(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton_GUIRadioButton* RadioGroup;                                               // 0x0180(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FScriptDelegate                             __OnUpdateComponent__Delegate;                            // 0x0184(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPreDraw__Delegate;                                    // 0x018C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDraw__Delegate;                                       // 0x0194(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClientDraw__Delegate;                                 // 0x019C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMenuStateChanged__Delegate;                           // 0x01A4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnHide__Delegate;                                       // 0x01AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnShow__Delegate;                                       // 0x01B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnActivate__Delegate;                                   // 0x01BC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeActivate__Delegate;                                 // 0x01C4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnChange__Delegate;                                     // 0x01CC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRePositionCompleted__Delegate;                        // 0x01D4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnHitTest__Delegate;                                    // 0x01DC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRender__Delegate;                                     // 0x01E4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __onMessage__Delegate;                                    // 0x01EC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClick__Delegate;                                      // 0x01F4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDblClick__Delegate;                                   // 0x01FC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRightClick__Delegate;                                 // 0x0204(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMousePressed__Delegate;                               // 0x020C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMouseRelease__Delegate;                               // 0x0214(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnWatched__Delegate;                                    // 0x021C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFocused__Delegate;                                    // 0x0224(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLostFocus__Delegate;                                  // 0x022C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCapturedMouseMove__Delegate;                          // 0x0234(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnKeyType__Delegate;                                    // 0x023C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnKeyEvent__Delegate;                                   // 0x0244(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRawXController__Delegate;                             // 0x024C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnXControllerEvent__Delegate;                           // 0x0254(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent");
		return ptr;
	}


	struct FString STATIC_Function_StripColorCodes(const struct FString& InString);
	void Function_OnChangeLayout();
	void Function_ChangeStyle(const struct FString& NewStyle);
	void Function_RedoLayout();
	void Function_UndoLayout();
	void Function_LoadLayoutFromHistory();
	void Function_SaveLayoutToHistory();
	void Function_SaveLayout(bool FlushToDisk);
	void Function_SetRadioGroup(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton_GUIRadioButton* Group);
	float Function_ActualTop();
	float Function_ActualLeft();
	float Function_ActualHeight();
	float Function_ActualWidth();
	void Function_SetLinkOverrides(class UClass_Object_GUI_GUIComponent* cUp, class UClass_Object_GUI_GUIComponent* cDown, class UClass_Object_GUI_GUIComponent* cLeft, class UClass_Object_GUI_GUIComponent* cRight);
	void Function_SetLinks(class UClass_Object_GUI_GUIComponent* cUp, class UClass_Object_GUI_GUIComponent* cDown, class UClass_Object_GUI_GUIComponent* cLeft, class UClass_Object_GUI_GUIComponent* cRight);
	void Function_SetHint(const struct FString& NewHint);
	void Function_FillOwner();
	class AClass_Object_Actor_Controller_PlayerController* Function_PlayerOwner();
	void Function_Free(bool bForce);
	void Function_OnResolutionChanged(int OldResolutionX, int OldResolutionY, int ResolutionX, int ResolutionY);
	void Function_RegisterNotifyResolutionChanged();
	bool Function_IsAtPosition(const struct FName& PositionLabel);
	void Function_RePositionTo(const struct FStruct_sDynamicPositionSpec& newPosition);
	void Function_RePosition(const struct FName& PositionLabel, bool bInstantly);
	void Function_RePositionCompleted();
	void Function_StopCycling();
	void Function_CyclePositions();
	void Function_Activate();
	void Function_DeActivate();
	void Function_SetActive(bool bActive);
	void Function_Show();
	void Function_Hide();
	void Function_SetVisibility(bool newVisible);
	void Function_LoseFocus();
	void Function_SetFocusInstead(class UClass_Object_GUI_GUIComponent* Other);
	void Function_MenuStateChange(TEnumAsByte<EeMenuState> NewState);
	bool Function_IsInClientBounds();
	bool Function_IsInBounds();
	void Function_EnableComponent();
	void Function_DisableComponent();
	void Function_SetEnabled(bool newEnabled);
	void Function_Press();
	void Function_Focus();
	void Function_Watched();
	void Function_DblClick();
	void Function_Click();
	void Function_MouseReleased();
	void Function_MousePressed();
	void Function_SetDirty();
	void Function_InitDelegates();
	void Function_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
	void Function_Construct_GUIController(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
	void Function_KillTimer();
	void Function_SetTimer(float Interval, bool bRepeat);
	void Function_Timer();
	bool Function_OnXControllerEvent(unsigned char Id, TEnumAsByte<EeXControllerCodes> iCode);
	bool Function_OnRawXController(unsigned char Id, unsigned char* Key, unsigned char* State, float* Axis);
	bool Function_OnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	bool Function_OnKeyType(const struct FString& Unicode, unsigned char* Key);
	bool Function_OnCapturedMouseMove(float deltaX, float deltaY);
	void Function_OnLostFocus(class UClass_Object_GUI_GUIComponent* Self);
	void Function_OnFocused(class UClass_Object_GUI_GUIComponent* Self);
	void Function_OnWatched(class UClass_Object_GUI_GUIComponent* Self);
	void Function_OnMouseRelease(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnMousePressed(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnRightClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnDblClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_onMessage(const struct FString& msg, float MsgLife);
	void Function_OnRender(class UClass_Object_Canvas* Canvas);
	void Function_OnHitTest(float MouseX, float MouseY);
	void Function_OnRePositionCompleted(class UClass_Object_GUI_GUIComponent* Sender, const struct FName& NewPosLabel);
	void Function_OnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnDeActivate();
	void Function_OnActivate();
	void Function_OnShow();
	void Function_OnHide();
	void Function_OnMenuStateChanged(class UClass_Object_GUI_GUIComponent* Sender, TEnumAsByte<EeMenuState> NewState);
	void Function_OnClientDraw(class UClass_Object_Canvas* Canvas);
	bool Function_OnDraw(class UClass_Object_Canvas* Canvas);
	bool Function_OnPreDraw(class UClass_Object_Canvas* Canvas);
	bool Function_OnUpdateComponent(class UClass_Object_Canvas* Canvas);
};


// Class Object.GUI.GUIComponent.GUIProgressBar
// 0x0014 (0x0270 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIProgressBar : public UClass_Object_GUI_GUIComponent
{
public:
	class UClass_Object_Material*                      BarMaterial;                                              // 0x025C(0x0004) (Edit, Config, NoClear)
	struct FStruct_Color                               BarColor;                                                 // 0x0260(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EMenuRenderStyle>                      BarRenderStyle;                                           // 0x0264(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0265(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0268(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeProgressDirection>                   BarDirection;                                             // 0x026C(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData01[0x3];                                       // 0x026D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIProgressBar");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIActorContainerBase
// 0x0028 (0x0284 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIActorContainerBase : public UClass_Object_GUI_GUIComponent
{
public:
	struct FName                                       ActorName;                                                // 0x025C(0x0004) (Edit, Config, NoClear)
	class AClass_Object_Actor*                         Actor;                                                    // 0x0260(0x0004) (Edit, EditConst, NoClear, EditInline)
	struct FStruct_Vector                              Offset;                                                   // 0x0264(0x000C) (Edit, Config, NoClear)
	struct FStruct_Rotator                             Rotation;                                                 // 0x0270(0x000C) (Edit, Config, NoClear)
	TEnumAsByte<EDrawType>                             DrawType;                                                 // 0x027C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x027D(0x0003) MISSED OFFSET
	class UClass_Object_Material*                      Texture;                                                  // 0x0280(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIActorContainerBase");
		return ptr;
	}


	void Function_SaveLayout_SaveLayout(bool FlushToDisk);
	void Function_OnModify();
	void Function_PositionActor();
	void Function_OnChangeLayout_OnChangeLayout();
	bool Function_InternalOnDraw(class UClass_Object_Canvas* Canvas);
	void Function_Hide_Hide();
	void Function_Show_Show();
	void Function_SpawnActor();
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIListBase
// 0x0038 (0x0294 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIListBase : public UClass_Object_GUI_GUIComponent
{
public:
	struct FStruct_Color                               SelectedBKColor;                                          // 0x025C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      SelectedImage;                                            // 0x0260(0x0004) (Edit, Config, NoClear)
	int                                                Top;                                                      // 0x0264(0x0004) (Edit, EditConst)
	int                                                Index;                                                    // 0x0268(0x0004) (Edit, EditConst, NoClear)
	int                                                ItemsPerPage;                                             // 0x026C(0x0004) (Edit, EditConst, NoClear)
	int                                                ItemHeight;                                               // 0x0270(0x0004) (Edit, EditConst, NoClear)
	int                                                ItemWidth;                                                // 0x0274(0x0004) (Edit, EditConst, NoClear)
	int                                                ItemCount;                                                // 0x0278(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bHotTrack : 1;                                            // 0x027C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bVisibleWhenEmpty : 1;                                    // 0x027C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bReadOnly : 1;                                            // 0x027C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase* MyScrollBar;                                              // 0x0280(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FScriptDelegate                             __OnDrawItem__Delegate;                                   // 0x0284(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnAdjustTop__Delegate;                                  // 0x028C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIListBase");
		return ptr;
	}


	void Function_SetTopItem(int Item);
	void Function_MakeVisible(float Perc);
	void Function_Clear();
	int Function_setIndex(int NewIndex, bool bDontPropChange, bool bDontReAlign);
	void Function_Sort();
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
	void Function_OnAdjustTop(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnDrawItem(class UClass_Object_Canvas* Canvas, int Item, float X, float Y, float W, float H, bool bSelected);
};


// Class Object.GUI.GUIComponent.GUIListBase.GUICircularList
// 0x0008 (0x029C - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIListBase_GUICircularList : public UClass_Object_GUI_GUIComponent_GUIListBase
{
public:
	unsigned long                                      bCenterInBounds : 1;                                      // 0x0294(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bFillBounds : 1;                                          // 0x0294(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bIgnoreBackClick : 1;                                     // 0x0294(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAllowSelectEmpty : 1;                                    // 0x0294(0x0004) (Edit, Config, NoClear)
	int                                                FixedItemsPerPage;                                        // 0x0298(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIListBase.GUICircularList");
		return ptr;
	}


	void Function_PgDown();
	void Function_PgUp();
	void Function_End();
	void Function_Home();
	void Function_ScrollRight();
	void Function_ScrollLeft();
	void Function_WheelDown();
	void Function_WheelUp();
	bool Function_InternalOnXControllerEvent(unsigned char Id, TEnumAsByte<EeXControllerCodes> iCode);
	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_Click_Click();
	float Function_CalculateOffset(float MouseX);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent
// 0x002C (0x0288 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent : public UClass_Object_GUI_GUIComponent
{
public:
	TArray<class UClass_Object_GUI_GUIComponent*>      Controls;                                                 // 0x025C(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent*>      Components;                                               // 0x0268(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      PropagateVisibility : 1;                                  // 0x0274(0x0004) (Edit, Config, NoClear)
	unsigned long                                      PropagateActivity : 1;                                    // 0x0274(0x0004) (Edit, Config, NoClear)
	TArray<struct FStruct_ControlSpec>                 ControlSpecs;                                             // 0x0278(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      PropagateState : 1;                                       // 0x0284(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent");
		return ptr;
	}


	void Function_LogControls();
	void Function_SwapControlIndicies(int X, int Y);
	void Function_InternalBringBackward(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_InternalBringForward(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_BringToBack(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_BringToFront(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_BringBackward(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_BringForward(class UClass_Object_GUI_GUIComponent* Ctrl);
	void Function_ReweightComponents();
	void Function_ReorderComponents();
	void Function_Free_Free(bool bForce);
	void Function_DeActivate_DeActivate();
	void Function_Activate_Activate();
	void Function_Hide_Hide();
	void Function_Show_Show();
	void Function_EnableComponent_EnableComponent();
	void Function_DisableComponent_DisableComponent();
	void Function_TabControl(int Offset);
	void Function_RemapComponents();
	void Function_MapControls();
	bool Function_TestControls(int Mode, int SourceIndex, int TargetIndex);
	float Function_FindDist(class UClass_Object_GUI_GUIComponent* Source, class UClass_Object_GUI_GUIComponent* Target);
	void Function_FindCenterPoint(class UClass_Object_GUI_GUIComponent* What, float* X, float* Y);
	void Function_SaveLayout_SaveLayout(bool FlushToDisk);
	int Function_FindControlIndex(class UClass_Object_GUI_GUIComponent* Who);
	int Function_FindComponentIndex(class UClass_Object_GUI_GUIComponent* Who);
	void Function_SetRadioGroup_SetRadioGroup(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton_GUIRadioButton* Group);
	bool Function_RemoveComponent(class UClass_Object_GUI_GUIComponent* Comp, bool bRemap);
	class UClass_Object_GUI_GUIComponent* Function_AppendComponent(class UClass_Object_GUI_GUIComponent* NewComp);
	class UClass_Object_GUI_GUIComponent* Function_InsertComponent(class UClass_Object_GUI_GUIComponent* NewComp, int Index);
	class UClass_Object_GUI_GUIComponent* Function_AddComponent(const struct FString& ComponentClass, const struct FString& ComponentName, bool bInitNewComponent);
	class UClass_Object_GUI_GUIComponent* Function_FindComponent(const struct FString& theName, bool bExact, bool bAssert);
	bool Function_RemoveControl(class UClass_Object_GUI_GUIComponent* Ctrl);
	class UClass_Object_GUI_GUIComponent* Function_CreateControl(const struct FString& theClass, const struct FString& theName);
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
	void Function_InitializeControls();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase
// 0x000C (0x0294 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase_GUIVertScrollBar* MyScrollBar;                                              // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIListBase*  MyActiveList;                                             // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bVisibleWhenEmpty : 1;                                    // 0x0290(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bReadOnly : 1;                                            // 0x0290(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase");
		return ptr;
	}


	void Function_Clear();
	int Function_Num();
	void Function_SetHint_SetHint(const struct FString& NewHint);
	void Function_SetActiveList(class UClass_Object_GUI_GUIComponent_GUIListBase* LocalList);
	void Function_InitBaseList(class UClass_Object_GUI_GUIComponent_GUIListBase* LocalList);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase.GUIScrollTextBox
// 0x001C (0x02B0 - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIScrollTextBox : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase
{
public:
	class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList_GUIScrollText* MyScrollText;                                             // 0x0294(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	unsigned long                                      bRepeat : 1;                                              // 0x0298(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bNoTeletype : 1;                                          // 0x0298(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bStripColors : 1;                                         // 0x0298(0x0004) (Edit, Config, NoClear)
	float                                              InitialDelay;                                             // 0x029C(0x0004) (Edit, Config, NoClear)
	float                                              CharDelay;                                                // 0x02A0(0x0004) (Edit, Config, NoClear)
	float                                              EOLDelay;                                                 // 0x02A4(0x0004) (Edit, Config, NoClear)
	float                                              RepeatDelay;                                              // 0x02A8(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeTextAlign>                           TextAlign;                                                // 0x02AC(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02AD(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase.GUIScrollTextBox");
		return ptr;
	}


	void Function_AddText(const struct FString& NewText);
	struct FString Function_StripColors(const struct FString& MyString);
	bool Function_IsNumber(const struct FString& Num);
	void Function_InternalOnAdjustTop(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_Stop();
	void Function_Restart();
	void Function_SetContent(const struct FString& NewContent, const struct FString& sep);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIListBase.GUIVertList
// 0x0000 (0x0294 - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList : public UClass_Object_GUI_GUIComponent_GUIListBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIListBase.GUIVertList");
		return ptr;
	}


	void Function_PgDn();
	void Function_PgUp();
	void Function_End();
	void Function_Home();
	void Function_Down();
	void Function_Up();
	void Function_WheelDown();
	void Function_WheelUp();
	bool Function_InternalOnXControllerEvent(unsigned char Id, TEnumAsByte<EeXControllerCodes> iCode);
	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	bool Function_InternalOnKeyType(const struct FString& Unicode, unsigned char* Key);
	void Function_Click_Click();
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIListBase.GUIVertList.GUIList
// 0x0038 (0x02CC - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList : public UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList
{
public:
	TEnumAsByte<EeSortType>                            TypeOfSort;                                               // 0x0294(0x0001) (Edit, Config, NoClear)
	TEnumAsByte<EeListElemDisplay>                     DisplayItem;                                              // 0x0295(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0296(0x0002) MISSED OFFSET
	unsigned long                                      bSortForward : 1;                                         // 0x0298(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bListIsDirty : 1;                                         // 0x0298(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bNeverSort : 1;                                           // 0x0298(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bNativeSort : 1;                                          // 0x0298(0x0004) (Edit, NoClear)
	TEnumAsByte<EeTextAlign>                           TextAlign;                                                // 0x029C(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData01[0x3];                                       // 0x029D(0x0003) MISSED OFFSET
	TArray<struct FStruct_GUIListElem>                 Elements;                                                 // 0x02A0(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	struct FScriptDelegate                             __CompareItem__Delegate;                                  // 0x02AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ElementsEqual__Delegate;                                // 0x02B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SwapIndices__Delegate;                                  // 0x02BC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ReorderByIndices__Delegate;                             // 0x02C4(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIListBase.GUIVertList.GUIList");
		return ptr;
	}


	int Function_FindIndex(const struct FString& Test, bool bExact, bool bExtra, class UClass_Object* TestObject);
	struct FString Function_FindExtra(const struct FString& ExtraText, bool bExact, bool bDontSetIndex);
	struct FString Function_find(const struct FString& Text, bool bExact, bool bDontSetIndex);
	int Function_FindElement(const struct FStruct_GUIListElem& theElem);
	bool Function_GetExtraBoolData();
	int Function_GetExtraIntData();
	struct FString Function_GetExtra();
	class UClass_Object* Function_GetObject();
	struct FString Function_Get();
	void Function_Clear_Clear();
	void Function_RemoveItem(const struct FString& Item);
	void Function_Remove(int i, int Count);
	void Function_LoadFrom(class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList* Source, bool bClearFirst);
	struct FStruct_GUIListElem Function_GetElement();
	struct FStruct_GUIListElem Function_GetAtIndex(int i);
	void Function_SetExtraIntAtIndex(int i, int NewExtra);
	int Function_GetExtraIntAtIndex(int i);
	void Function_SetExtraAtIndex(int i, const struct FString& NewExtra);
	struct FString Function_GetExtraAtIndex(int i);
	class UClass_Object* Function_GetObjectAtIndex(int i);
	void Function_SetItemAtIndex(int i, const struct FString& NewItem);
	struct FString Function_GetItemAtIndex(int i);
	void Function_Swap(int indexA, int indexB, bool bIsSorting);
	void Function_Insert(int Index, const struct FString& NewItem, class UClass_Object* Obj, const struct FString& str, int intData, bool bData);
	void Function_ReplaceElement(int Index, const struct FStruct_GUIListElem& theElem);
	void Function_Replace(int Index, const struct FString& NewItem, class UClass_Object* Obj, const struct FString& str, int intData, bool bData);
	int Function_InsertElement(int NewIndex, const struct FStruct_GUIListElem& theElem, bool bInsertSorted, bool bDontReAlign);
	int Function_AddElement(const struct FStruct_GUIListElem& theElem, bool bDontReplace, bool bDontReAlign);
	void Function_Add(const struct FString& NewItem, class UClass_Object* Obj, const struct FString& str, int intData, bool bData, bool bDontReplace, bool bDontReAlign);
	struct FString Function_SelectedText(int offsetIndex);
	bool Function_EqualsBool(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_EqualsInt(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_EqualsExtra(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_EqualsObject(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_EqualsItem(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_IPCompare(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_BooleanCompare(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_NumericCompare(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_AlphabeticalCompareExtra(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_AlphabeticalCompareItem(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_AlphabeticalCompare(const struct FString& ElemA, const struct FString& ElemB);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_ReverseList();
	void Function_Sort_Sort();
	void Function_ReorderItems(int indices);
	void Function_qSort();
	void Function_ReorderByIndices(int indices);
	void Function_SwapIndices(int indexA, int indexB);
	bool Function_ElementsEqual(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	bool Function_CompareItem(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
};


// Class Object.GUI.GUIComponent.GUIListBase.GUIVertList.GUIList.GUIScrollText
// 0x0064 (0x0330 - 0x02CC)
class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList_GUIScrollText : public UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList
{
public:
	struct FString                                     Content;                                                  // 0x02CC(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FString                                     Separator;                                                // 0x02D8(0x000C) (Edit, EditConst, NeedCtorLink)
	int                                                VisibleLines;                                             // 0x02E4(0x0004) (Edit, EditConst)
	int                                                VisibleChars;                                             // 0x02E8(0x0004) (Edit, EditConst)
	int                                                oldWidth;                                                 // 0x02EC(0x0004) (Edit, EditConst)
	TEnumAsByte<EeScrollState>                         ScrollState;                                              // 0x02F0(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F1(0x0003) MISSED OFFSET
	unsigned long                                      bNewContent : 1;                                          // 0x02F4(0x0004) (Edit, EditConst)
	unsigned long                                      bStopped : 1;                                             // 0x02F4(0x0004) (Edit, EditConst)
	struct FString                                     NewText;                                                  // 0x02F8(0x000C) (NeedCtorLink)
	struct FString                                     ClickedString;                                            // 0x0304(0x000C) (NeedCtorLink)
	int                                                MaxHistory;                                               // 0x0310(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bRepeat : 1;                                              // 0x0314(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bNoTeletype : 1;                                          // 0x0314(0x0004) (Edit, EditConst, NoClear)
	unsigned long                                      bClickText : 1;                                           // 0x0314(0x0004) (Edit, Config, NoClear)
	float                                              InitialDelay;                                             // 0x0318(0x0004) (Edit, EditConst, NoClear)
	float                                              CharDelay;                                                // 0x031C(0x0004) (Edit, EditConst, NoClear)
	float                                              EOLDelay;                                                 // 0x0320(0x0004) (Edit, EditConst, NoClear)
	float                                              RepeatDelay;                                              // 0x0324(0x0004) (Edit, EditConst, NoClear)
	struct FScriptDelegate                             __OnEndOfLine__Delegate;                                  // 0x0328(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIListBase.GUIVertList.GUIList.GUIScrollText");
		return ptr;
	}


	void Function_EndScrolling();
	bool Function_InternalOnKeyEvent_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	bool Function_InternalOnKeyType_InternalOnKeyType(const struct FString& Unicode, unsigned char* Key);
	void Function_Click_Click_Click();
	void Function_Timer_Timer();
	bool Function_SkipChar();
	void Function_Restart();
	void Function_Stop();
	void Function_SetContent(const struct FString& NewContent, const struct FString& sep);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnEndOfLine();
	struct FString Function_GetWordUnderCursor();
};


// Class Object.GUI.GUIComponent.GUIListBase.GUIHorzList
// 0x0000 (0x0294 - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIListBase_GUIHorzList : public UClass_Object_GUI_GUIComponent_GUIListBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIListBase.GUIHorzList");
		return ptr;
	}


	void Function_PgDn();
	void Function_PgUp();
	void Function_End();
	void Function_Home();
	void Function_ScrollRight();
	void Function_ScrollLeft();
	void Function_WheelDown();
	bool Function_InternalOnXControllerEvent(unsigned char Id, TEnumAsByte<EeXControllerCodes> iCode);
	void Function_WheelUp();
	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	bool Function_InternalOnKeyType(const struct FString& Unicode, unsigned char* Key);
	void Function_Click_Click();
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUISlider
// 0x0070 (0x02CC - 0x025C)
class UClass_Object_GUI_GUIComponent_GUISlider : public UClass_Object_GUI_GUIComponent
{
public:
	float                                              MinValue;                                                 // 0x025C(0x0004) (Edit, Config)
	float                                              MaxValue;                                                 // 0x0260(0x0004) (Edit, Config, NoClear)
	struct FString                                     CaptionStyleName;                                         // 0x0264(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     LeftStyleName;                                            // 0x0270(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     RightStyleName;                                           // 0x027C(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     ButtonStyleName;                                          // 0x0288(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	float                                              Value;                                                    // 0x0294(0x0004) (Edit, Config, NoClear)
	float                                              Step;                                                     // 0x0298(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIStyles*                 CaptionStyle;                                             // 0x029C(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bIntSlider : 1;                                           // 0x02A0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bDisplayAsPercentage : 1;                                 // 0x02A0(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIStyles*                 LeftStyle;                                                // 0x02A4(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIStyles*                 RightStyle;                                               // 0x02A8(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIStyles*                 ButtonStyle;                                              // 0x02AC(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	float                                              SliderHeightPercent;                                      // 0x02B0(0x0004) (Edit, Config, NoClear)
	float                                              ButtonWidthPixels;                                        // 0x02B4(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeTextAlign>                           CaptionJustification;                                     // 0x02B8(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B9(0x0003) MISSED OFFSET
	float                                              UpdateFreq;                                               // 0x02BC(0x0004)
	float                                              LastChangeMessage;                                        // 0x02C0(0x0004)
	struct FScriptDelegate                             __OnDrawCaption__Delegate;                                // 0x02C4(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUISlider");
		return ptr;
	}


	void Function_Timer_Timer();
	void Function_InternalOnMousePressed(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_Click_Click();
	void Function_Adjust(float Amount);
	bool Function_InternalOnXControllerEvent(unsigned char Id, TEnumAsByte<EeXControllerCodes> iCode);
	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	bool Function_InternalCapturedMouseMove(float deltaX, float deltaY);
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_SetValue(float NewValue);
	struct FString Function_OnDrawCaption();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel
// 0x0000 (0x0288 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.GUISplitter
// 0x0034 (0x02BC - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_GUISplitter : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel
{
public:
	TEnumAsByte<EGUISplitterType>                      SplitOrientation;                                         // 0x0288(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	float                                              SplitPosition;                                            // 0x028C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bFixedSplitter : 1;                                       // 0x0290(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bDrawSplitter : 1;                                        // 0x0290(0x0004) (Edit, Config, NoClear)
	float                                              SplitAreaSize;                                            // 0x0294(0x0004) (Edit, Config, NoClear)
	struct FString                                     DefaultPanels[0x2];                                       // 0x0298(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	float                                              MaxPercentage;                                            // 0x02B0(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIComponent*              Panels[0x2];                                              // 0x02B4(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.GUISplitter");
		return ptr;
	}


	void Function_SplitterUpdatePositions();
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIMenuOption
// 0x0044 (0x02CC - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMenuOption : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	struct FString                                     ComponentClassName;                                       // 0x0288(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     Caption;                                                  // 0x0294(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	struct FString                                     LabelStyle;                                               // 0x02A0(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bHeightFromComponent : 1;                                 // 0x02AC(0x0004) (Edit, Config, NoClear)
	float                                              CaptionWidth;                                             // 0x02B0(0x0004) (Edit, Config, NoClear)
	float                                              ComponentWidth;                                           // 0x02B4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bFlipped : 1;                                             // 0x02B8(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeTextAlign>                           LabelJustification;                                       // 0x02BC(0x0001) (Edit, Config, NoClear)
	TEnumAsByte<EeTextAlign>                           ComponentJustification;                                   // 0x02BD(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02BE(0x0002) MISSED OFFSET
	unsigned long                                      bSquare : 1;                                              // 0x02C0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bVerticalLayout : 1;                                      // 0x02C0(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* MyLabel;                                                  // 0x02C4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent*              MyComponent;                                              // 0x02C8(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIMenuOption");
		return ptr;
	}


	void Function_InternalOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIDualSelectionLists
// 0x0094 (0x031C - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIDualSelectionLists : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* ListBoxA;                                                 // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* ListBoxB;                                                 // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ListBoxAH;                                                // 0x0290(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ListBoxBH;                                                // 0x0294(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton* AtoB;                                                     // 0x0298(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton* BtoA;                                                     // 0x029C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* LBA;                                                      // 0x02A0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* LBB;                                                      // 0x02A4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* LBAH;                                                     // 0x02A8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* LBBH;                                                     // 0x02AC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton* ABButton;                                                 // 0x02B0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton* BAButton;                                                 // 0x02B4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bSwitchListBoxLocations : 1;                              // 0x02B8(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bVerticalLayout : 1;                                      // 0x02B8(0x0004) (Edit, Config, NoClear)
	float                                              ListBoxSpacing;                                           // 0x02BC(0x0004) (Edit, Config, NoClear)
	float                                              HeaderPercent;                                            // 0x02C0(0x0004) (Edit, Config, NoClear)
	struct FString                                     BoxAHeader;                                               // 0x02C4(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	struct FString                                     BoxBHeader;                                               // 0x02D0(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	struct FString                                     LeftCaption;                                              // 0x02DC(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	struct FString                                     RightCaption;                                             // 0x02E8(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	struct FString                                     UpCaption;                                                // 0x02F4(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	struct FString                                     DownCaption;                                              // 0x0300(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Material*                      LeftImage;                                                // 0x030C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      RightImage;                                               // 0x0310(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      UpImage;                                                  // 0x0314(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      DownImage;                                                // 0x0318(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIDualSelectionLists");
		return ptr;
	}


	void Function_AssignComponents();
	void Function_CheckListSelection(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* ListBox);
	void Function_OnListClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_MoveBA(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_MoveAB(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnChangeLayout_OnChangeLayout();
	void Function_Activate_Activate_Activate();
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIComboBox
// 0x0030 (0x02B8 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* Edit;                                                     // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertScrollButton_GUIComboButton* MyShowListBtn;                                            // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* MyListBox;                                                // 0x0290(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList* List;                                                     // 0x0294(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                MaxVisibleItems;                                          // 0x0298(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bShowListOnFocus : 1;                                     // 0x029C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bReadOnly : 1;                                            // 0x029C(0x0004) (Edit, Config, NoClear)
	int                                                Index;                                                    // 0x02A0(0x0004)
	struct FString                                     TextStr;                                                  // 0x02A4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnListIndexChanged__Delegate;                           // 0x02B0(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIComboBox");
		return ptr;
	}


	void Function_ReadOnly(bool B);
	int Function_ItemCount();
	struct FString Function_find(const struct FString& Text, bool bExact, bool bDontSetIndex);
	class UClass_Object* Function_GetItemObject(int Index);
	struct FString Function_GetItem(int Index);
	void Function_RemoveItem(int Item, int Count);
	void Function_AddItem(const struct FString& Item, class UClass_Object* Extra, const struct FString& str, int theInt, bool theBool);
	void Function_Clear();
	int Function_GetIndex();
	void Function_setIndex(int i);
	bool Function_GetBool();
	int Function_GetInt();
	struct FString Function_GetExtra();
	class UClass_Object* Function_GetObject();
	struct FString Function_Get();
	struct FString Function_GetText();
	bool Function_SetFromExtra(const struct FString& ExtraText);
	void Function_SetText(const struct FString& NewText);
	void Function_OnListIndexChanged(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SubComponentChanged(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalCloseList();
	void Function_InternalOpenList();
	void Function_CloseAllCombos();
	void Function_SubComponentClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SubComponentFocusLost(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_Activate_Activate_Activate();
	void Function_Show_Show_Show();
	void Function_SetHint_SetHint(const struct FString& NewHint);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIStyles
// 0x00D8 (0x0138 - 0x0060)
class UClass_Object_GUI_GUIStyles : public UClass_Object_GUI
{
public:
	struct FString                                     KeyName;                                                  // 0x0060(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	TArray<TEnumAsByte<EMenuRenderStyle>>              RStyles;                                                  // 0x006C(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_Material*>              Images;                                                   // 0x0078(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<TEnumAsByte<EeImgStyle>>                    ImgStyle;                                                 // 0x0084(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FStruct_Color>                       FontColors;                                               // 0x0090(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FStruct_Color>                       ImgColors;                                                // 0x009C(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FStruct_sBorderOffset>               BorderOffsets;                                            // 0x00A8(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             FontNames;                                                // 0x00B4(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIFont*>           Fonts;                                                    // 0x00C0(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             BoldFontNames;                                            // 0x00CC(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIFont*>           BoldFonts;                                                // 0x00D8(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             ItalicFontNames;                                          // 0x00E4(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIFont*>           ItalicFonts;                                              // 0x00F0(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             BoldItalicFontNames;                                      // 0x00FC(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIFont*>           BoldItalicFonts;                                          // 0x0108(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	int                                                UnderlineWeight;                                          // 0x0114(0x0004) (Edit, Config, NoClear)
	struct FName                                       EffectCategory;                                           // 0x0118(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bExternalMultilining : 1;                                 // 0x011C(0x0004)
	unsigned long                                      bLastBold : 1;                                            // 0x011C(0x0004)
	unsigned long                                      bLastItalics : 1;                                         // 0x011C(0x0004)
	unsigned long                                      bLastUnderlined : 1;                                      // 0x011C(0x0004)
	class UClass_Object_Font*                          LastFont;                                                 // 0x0120(0x0004)
	struct FStruct_Color                               LastColor;                                                // 0x0124(0x0004)
	struct FScriptDelegate                             __OnDraw__Delegate;                                       // 0x0128(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDrawText__Delegate;                                   // 0x0130(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIStyles");
		return ptr;
	}


	void Function_Initialize();
	void Function_DrawText(class UClass_Object_Canvas* Canvas, TEnumAsByte<EeMenuState> MenuState, float Left, float Top, float Width, float height, TEnumAsByte<EeTextAlign> Align, const struct FString& Text, bool bParseCodes, bool bMultiLine);
	void Function_Draw(class UClass_Object_Canvas* Canvas, TEnumAsByte<EeMenuState> MenuState, float Left, float Top, float Width, float height);
	bool Function_OnDrawText(class UClass_Object_Canvas* Canvas, TEnumAsByte<EeMenuState> MenuState, float Left, float Top, float Width, float height, TEnumAsByte<EeTextAlign> Align, const struct FString& Text, bool bParseCodes, bool bMultiLine);
	bool Function_OnDraw(class UClass_Object_Canvas* Canvas, TEnumAsByte<EeMenuState> MenuState, float Left, float Top, float Width, float height);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIMultiColumnList
// 0x0018 (0x02A0 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMultiColumnList : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList* MCList;                                                   // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MCButton;                                                 // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              ColumnWidth;                                              // 0x0290(0x0004) (Edit, Config, NoClear)
	float                                              HeaderHeight;                                             // 0x0294(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bIgnoreHeader : 1;                                        // 0x0298(0x0004) (Edit, Config, NoClear)
	int                                                IndexID;                                                  // 0x029C(0x0004) (Edit, EditConst, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIMultiColumnList");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase.GUIMultiColumnListBox
// 0x0040 (0x02D4 - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase
{
public:
	TArray<class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMultiColumnList*> MultiColumnList;                                          // 0x0294(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             ListNames;                                                // 0x02A0(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	int                                                ActiveIndex;                                              // 0x02AC(0x0004) (Edit, Config, NoClear)
	int                                                ActiveRowIndex;                                           // 0x02B0(0x0004) (Edit, EditConst, NoClear)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ActiveButton;                                             // 0x02B4(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	TArray<struct FStruct_GUIListElem>                 ActiveRow;                                                // 0x02B8(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	int                                                LastClickedIndex;                                         // 0x02C4(0x0004) (Edit, Config)
	unsigned long                                      bResizable : 1;                                           // 0x02C8(0x0004) (Edit, Config, NoClear)
	float                                              DragSpacing;                                              // 0x02CC(0x0004) (Edit, Config, NoClear)
	int                                                ColumnBorder;                                             // 0x02D0(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase.GUIMultiColumnListBox");
		return ptr;
	}


	int Function_setIndex(int ind);
	void Function_Sort(const struct FString& byColumn);
	void Function_SwapMCLBIndices(int indexA, int indexB);
	int Function_PopulateRow(const struct FString& DontReplaceHeader);
	void Function_ClearRow();
	void Function_AddRowElement(const struct FStruct_GUIListElem& theElem);
	void Function_AddNewRowElement(const struct FString& ColumnHeader, class UClass_Object* Obj, const struct FString& str, int intData, bool bData);
	void Function_InternalOnAdjustTop(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_Clear_Clear();
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMultiColumnList* Function_FindColumn(const struct FString& theName, bool bExact);
	class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList* Function_GetColumn(const struct FString& Header);
	void Function_SetActiveColumn(const struct FString& theName, bool bExact);
	void Function_InitColumn(const struct FString& ListName);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
	void Function_ReorderItems(int indices);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase.GUIListBox
// 0x0004 (0x0298 - 0x0294)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase
{
public:
	class UClass_Object_GUI_GUIComponent_GUIListBase_GUIVertList_GUIList* List;                                                     // 0x0294(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIListBoxBase.GUIListBox");
		return ptr;
	}


	int Function_ItemCount();
	void Function_InternalOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIScrollBarBase
// 0x0004 (0x028C - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUIListBase*  MyList;                                                   // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIScrollBarBase");
		return ptr;
	}


	void Function_Refocus(class UClass_Object_GUI_GUIComponent* Who);
	void Function_AlignThumb();
	void Function_MoveGripBy(int Items);
	void Function_UpdateGripPosition(float NewPos);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIScrollBarBase.GUIHorzScrollBar
// 0x0018 (0x02A4 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase_GUIHorzScrollBar : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase
{
public:
	class UClass_Object_GUI_GUIComponent_GUIHorzScrollZone* MyScrollZone;                                             // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIHorzScrollButton* MyLeftButton;                                             // 0x0290(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIHorzScrollButton* MyRightButton;                                            // 0x0294(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIHorzGripButton* MyGripButton;                                             // 0x0298(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              GripLeft;                                                 // 0x029C(0x0004)
	float                                              GripWidth;                                                // 0x02A0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIScrollBarBase.GUIHorzScrollBar");
		return ptr;
	}


	void Function_AlignThumb_AlignThumb();
	void Function_WheelDown();
	void Function_WheelUp();
	void Function_RightTickClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_LeftTickClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_MoveGripBy_MoveGripBy(int Items);
	void Function_ZoneClick(float Delta);
	bool Function_GripMouseMove(float deltaX, float deltaY);
	void Function_UpdateGripPosition_UpdateGripPosition(float NewPos);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUITextComponent
// 0x0014 (0x0270 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUITextComponent : public UClass_Object_GUI_GUIComponent
{
public:
	struct FString                                     Caption;                                                  // 0x025C(0x000C) (Edit, Config, Localized, NeedCtorLink, NoClear)
	TEnumAsByte<EeTextAlign>                           TextAlign;                                                // 0x0268(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	unsigned long                                      bMultiLine : 1;                                           // 0x026C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bDontCenterVertically : 1;                                // 0x026C(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent");
		return ptr;
	}


	struct FString Function_GetCaption();
	void Function_SetCaption(const struct FString& NewCaption);
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton
// 0x000C (0x027C - 0x0270)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton : public UClass_Object_GUI_GUIComponent_GUITextComponent
{
public:
	int                                                Value;                                                    // 0x0270(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAllowMultiLine : 1;                                      // 0x0274(0x0004) (Edit, Config)
	int                                                ClickKeyCode;                                             // 0x0278(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton");
		return ptr;
	}


	bool Function_InternalOnXControllerEvent(unsigned char Id, TEnumAsByte<EeXControllerCodes> iCode);
	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton
// 0x000C (0x0288 - 0x027C)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton
{
public:
	class UClass_Object_Material*                      Graphic;                                                  // 0x027C(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeIconPosition>                        Position;                                                 // 0x0280(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	unsigned long                                      bCheckBox : 1;                                            // 0x0284(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bClientBound : 1;                                         // 0x0284(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bChecked : 1;                                             // 0x0284(0x0004) (Edit)
	unsigned long                                      bForceUpdate : 1;                                         // 0x0284(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton");
		return ptr;
	}


	void Function_Click_Click();
	void Function_SetChecked(bool bNewChecked);
	void Function_Show_Show();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIHorzGripButton
// 0x0004 (0x028C - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIHorzGripButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton
{
public:
	class UClass_Object_Material*                      GripButtonImage;                                          // 0x0288(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIHorzGripButton");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIHorzScrollButton
// 0x000C (0x0294 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIHorzScrollButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton
{
public:
	unsigned long                                      LeftButton : 1;                                           // 0x0288(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      LeftImage;                                                // 0x028C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      RightImage;                                               // 0x0290(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIHorzScrollButton");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIHorzScrollZone
// 0x0008 (0x0264 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIHorzScrollZone : public UClass_Object_GUI_GUIComponent
{
public:
	struct FScriptDelegate                             __OnScrollZoneClick__Delegate;                            // 0x025C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIHorzScrollZone");
		return ptr;
	}


	void Function_OnScrollZoneClick(float Delta);
	void Function_Click_Click();
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIScrollBarBase.GUIVertScrollBar
// 0x001C (0x02A8 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase_GUIVertScrollBar : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIScrollBarBase
{
public:
	class UClass_Object_GUI_GUIComponent_GUIVertScrollZone* MyScrollZone;                                             // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertScrollButton* MyUpButton;                                               // 0x0290(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertScrollButton* MyDownButton;                                             // 0x0294(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertGripButton* MyGripButton;                                             // 0x0298(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              GripTop;                                                  // 0x029C(0x0004)
	float                                              GripHeight;                                               // 0x02A0(0x0004)
	float                                              GrabOffset;                                               // 0x02A4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIScrollBarBase.GUIVertScrollBar");
		return ptr;
	}


	void Function_AlignThumb_AlignThumb();
	void Function_WheelDown();
	void Function_WheelUp();
	void Function_DownTickClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_UpTickClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_MoveGripBy_MoveGripBy(int Items);
	void Function_ZoneClick(float Delta);
	bool Function_GripMouseMove(float deltaX, float deltaY);
	void Function_GripClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_UpdateGripPosition_UpdateGripPosition(float NewPos);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIVertGripButton
// 0x0004 (0x028C - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertGripButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton
{
public:
	class UClass_Object_Material*                      GripButtonImage;                                          // 0x0288(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIVertGripButton");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIVertScrollButton
// 0x000C (0x0294 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertScrollButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton
{
public:
	unsigned long                                      UpButton : 1;                                             // 0x0288(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      UpImage;                                                  // 0x028C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      DownImage;                                                // 0x0290(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIVertScrollButton");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIVertScrollZone
// 0x0008 (0x0264 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIVertScrollZone : public UClass_Object_GUI_GUIComponent
{
public:
	struct FScriptDelegate                             __OnScrollZoneClick__Delegate;                            // 0x025C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIVertScrollZone");
		return ptr;
	}


	void Function_OnScrollZoneClick(float Delta);
	void Function_Click_Click();
	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIFloatEdit
// 0x0028 (0x02B0 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIFloatEdit : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* MyEditBox;                                                // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUISpinnerButton* MyPlus;                                                   // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUISpinnerButton* MyMinus;                                                  // 0x0290(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FString                                     Value;                                                    // 0x0294(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bLeftJustified : 1;                                       // 0x02A0(0x0004) (Edit, Config, NoClear)
	float                                              MinValue;                                                 // 0x02A4(0x0004) (Edit, Config, NoClear)
	float                                              MaxValue;                                                 // 0x02A8(0x0004) (Edit, Config, NoClear)
	float                                              Step;                                                     // 0x02AC(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIFloatEdit");
		return ptr;
	}


	void Function_EditOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_EditKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_SpinnerMinusClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SpinnerPlusClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SetValue(float V);
	void Function_CalcMaxLen();
	void Function_SetHint_SetHint(const struct FString& NewHint);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUINumericEdit
// 0x0024 (0x02AC - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUINumericEdit : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* MyEditBox;                                                // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUISpinnerButton* MyPlus;                                                   // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUISpinnerButton* MyMinus;                                                  // 0x0290(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                Value;                                                    // 0x0294(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bLeftJustified : 1;                                       // 0x0298(0x0004) (Edit, Config, NoClear)
	int                                                MinValue;                                                 // 0x029C(0x0004) (Edit, Config, NoClear)
	int                                                MaxValue;                                                 // 0x02A0(0x0004) (Edit, Config, NoClear)
	int                                                Step;                                                     // 0x02A4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bDisplayAsTime : 1;                                       // 0x02A8(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bReadOnly : 1;                                            // 0x02A8(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUINumericEdit");
		return ptr;
	}


	void Function_SetHint_SetHint(const struct FString& NewHint);
	void Function_EditOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_EditKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_SpinnerMinusClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SpinnerPlusClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SetValue(int V, bool bForceCallbacks);
	void Function_SetMaxValue(int inMax);
	void Function_SetMinValue(int inMin);
	void Function_CalcMaxLen();
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnConstruct_OnConstruct_OnConstruct(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* MyController);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIEditBox
// 0x0098 (0x0314 - 0x027C)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton
{
public:
	struct FStruct_Color                               CursorColor;                                              // 0x027C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      CursorImage;                                              // 0x0280(0x0004) (Edit, Config, NoClear)
	struct FStruct_Color                               HighlightColor;                                           // 0x0284(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      HighlightImage;                                           // 0x0288(0x0004) (Edit, Config, NoClear)
	struct FString                                     TextStr;                                                  // 0x028C(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     AllowedCharSet;                                           // 0x0298(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bMaskText : 1;                                            // 0x02A4(0x0004) (Edit, Config, NoClear)
	struct FString                                     MaskedChar;                                               // 0x02A8(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bIntOnly : 1;                                             // 0x02B4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bFloatOnly : 1;                                           // 0x02B4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bIncludeSign : 1;                                         // 0x02B4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bConvertSpaces : 1;                                       // 0x02B4(0x0004) (Edit, Config, NoClear)
	int                                                MaxWidth;                                                 // 0x02B8(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeTextCase>                            TextCase;                                                 // 0x02BC(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02BD(0x0003) MISSED OFFSET
	int                                                BorderOffsets[0x4];                                       // 0x02C0(0x0004) (Edit, Config, NoClear, EditInline)
	unsigned long                                      bReadOnly : 1;                                            // 0x02D0(0x0004) (Edit, Config, NoClear)
	struct FString                                     VisibleText;                                              // 0x02D4(0x000C) (Edit, EditConst, NeedCtorLink, NoClear)
	int                                                HighlightStart;                                           // 0x02E0(0x0004) (Edit, EditConst)
	int                                                HighlightEnd;                                             // 0x02E4(0x0004) (Edit, EditConst)
	int                                                CaretPos;                                                 // 0x02E8(0x0004) (Edit, EditConst)
	int                                                FirstVis;                                                 // 0x02EC(0x0004) (Edit, EditConst)
	int                                                LastLength;                                               // 0x02F0(0x0004) (Edit, EditConst)
	int                                                LastCaret;                                                // 0x02F4(0x0004) (Edit, EditConst)
	unsigned long                                      bMouseDownTrapped : 1;                                    // 0x02F8(0x0004)
	unsigned long                                      bMouseUpTrapped : 1;                                      // 0x02F8(0x0004)
	unsigned char                                      LastKey;                                                  // 0x02FC(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02FD(0x0003) MISSED OFFSET
	float                                              DelayTime;                                                // 0x0300(0x0004)
	struct FScriptDelegate                             __OnEntryCompleted__Delegate;                             // 0x0304(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnEntryCancelled__Delegate;                             // 0x030C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIEditBox");
		return ptr;
	}


	struct FString Function_ConvertIllegal(const struct FString& inputstr);
	bool Function_InternalOnKeyEvent_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	bool Function_InternalOnKeyType(const struct FString& Unicode, unsigned char* Key);
	void Function_DeleteChar();
	void Function_SetVisibleText();
	void Function_Change();
	struct FString Function_GetText();
	void Function_SetText(const struct FString& NewText);
	void Function_MouseReleased_MouseReleased();
	void Function_MousePressed_MousePressed();
	void Function_DblClick_DblClick();
	void Function_Show_Show();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnEntryCancelled(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnEntryCompleted(class UClass_Object_GUI_GUIComponent* Sender);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIVertScrollButton.GUIComboButton
// 0x0000 (0x0294 - 0x0294)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertScrollButton_GUIComboButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUIVertScrollButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUIVertScrollButton.GUIComboButton");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUICheckBoxButton
// 0x0000 (0x0288 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUICheckBoxButton");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUISpinnerButton
// 0x000C (0x0294 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUISpinnerButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton
{
public:
	unsigned long                                      PlusButton : 1;                                           // 0x0288(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      PlusImage;                                                // 0x028C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Material*                      MinusImage;                                               // 0x0290(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUISpinnerButton");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton
// 0x0008 (0x0284 - 0x027C)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton
{
public:
	class UClass_Object_Material*                      Icon;                                                     // 0x027C(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bUserControlled : 1;                                      // 0x0280(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bChecked : 1;                                             // 0x0280(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton");
		return ptr;
	}


	void Function_Click_Click();
	void Function_SetChecked(bool bNewChecked);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUILabel
// 0x0000 (0x0270 - 0x0270)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel : public UClass_Object_GUI_GUIComponent_GUITextComponent
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUILabel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUITextComponent.GUILabel.GUIHelpText
// 0x0014 (0x0284 - 0x0270)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel_GUIHelpText : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel
{
public:
	float                                              XOverlapPercent;                                          // 0x0270(0x0004) (Edit, Config, NoClear)
	float                                              YOverlapPercent;                                          // 0x0274(0x0004) (Edit, Config, NoClear)
	float                                              XBorderPercent;                                           // 0x0278(0x0004) (Edit, Config, NoClear)
	float                                              YBorderPercent;                                           // 0x027C(0x0004) (Edit, Config, NoClear)
	float                                              MaxWidth;                                                 // 0x0280(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUILabel.GUIHelpText");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.GUIDlg
// 0x0028 (0x02B0 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_GUIDlg : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* MyLabel;                                                  // 0x0288(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton*> MyButtons;                                                // 0x028C(0x000C) (NeedCtorLink)
	struct FString                                     Passback;                                                 // 0x0298(0x000C) (NeedCtorLink)
	int                                                Selection;                                                // 0x02A4(0x0004)
	float                                              ButtonPercentX;                                           // 0x02A8(0x0004) (Edit, Config, NoClear)
	float                                              ButtonPercentY;                                           // 0x02AC(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.GUIDlg");
		return ptr;
	}


	void Function_DeActivate_DeActivate_DeActivate();
	void Function_Timer_Timer();
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_AddButton(int inValue, const struct FString& inCaption);
	void Function_SetupDlg(const struct FString& theCaption, const struct FString& thePassback, int Options, float TimeOut);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUINumericEdit.GUITimeDisplay
// 0x0018 (0x02C4 - 0x02AC)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUINumericEdit_GUITimeDisplay : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUINumericEdit
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TimerLabel;                                               // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bShowWhileNotRunning : 1;                                 // 0x02B0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bRunning : 1;                                             // 0x02B0(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x02B0(0x0004) (Edit)
	int                                                StartTime;                                                // 0x02B4(0x0004) (Edit)
	int                                                ElapsedTime;                                              // 0x02B8(0x0004) (Edit)
	struct FScriptDelegate                             __OnTimeExpired__Delegate;                                // 0x02BC(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUINumericEdit.GUITimeDisplay");
		return ptr;
	}


	int Function_GetElapsedTime();
	int Function_GetStartTime();
	bool Function_IsRunning();
	void Function_TimerExpired();
	void Function_Timer_Timer();
	void Function_StopTimer();
	void Function_StartTimer(int Time, bool Loop, bool Reset);
	void Function_SetTime(int Time);
	void Function_OnTimeExpired();
	void Function_Show_Show_Show();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUICheckBoxButton.GUIRadioButton
// 0x0000 (0x0288 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton_GUIRadioButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIGFXButton.GUICheckBoxButton.GUIRadioButton");
		return ptr;
	}


	void Function_SelectRadioButton();
	void Function_SetRadioGroup_SetRadioGroup(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton_GUIRadioButton* Group);
	void Function_Click_Click_Click();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIFont
// 0x0030 (0x0090 - 0x0060)
class UClass_Object_GUI_GUIFont : public UClass_Object_GUI
{
public:
	struct FString                                     KeyName;                                                  // 0x0060(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bFixedSize : 1;                                           // 0x006C(0x0004) (Edit, Config, NoClear)
	float                                              AppliedKerning;                                           // 0x0070(0x0004) (Edit, Config, NoClear)
	float                                              AppliedLeading;                                           // 0x0074(0x0004) (Edit, Config, NoClear)
	TArray<struct FString>                             FontArrayNames;                                           // 0x0078(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_Font*>                  FontArrayFonts;                                           // 0x0084(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIFont");
		return ptr;
	}


	class UClass_Object_Font* Function_LoadFont(int i);
	class UClass_Object_Font* STATIC_Function_LoadFontStatic(int i);
	class UClass_Object_Font* Function_GetFont(int XRes);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage
// 0x0030 (0x02B8 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	TArray<class UClass_Object_GUI_GUIComponent*>      Timers;                                                   // 0x0288(0x000C) (Edit, Const, EditConst, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bIsOverlay : 1;                                           // 0x0294(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bIsHUD : 1;                                               // 0x0294(0x0004) (Edit, Config, NoClear)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* HelpText;                                                 // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     DialogClassName;                                          // 0x029C(0x000C) (Edit, Config, NeedCtorLink)
	struct FScriptDelegate                             __OnDlgReturned__Delegate;                                // 0x02A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPopupReturned__Delegate;                              // 0x02B0(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage");
		return ptr;
	}


	void Function_OnProgress(const struct FString& Str1, const struct FString& Str2);
	void Function_onGameplayMessage(class UClass_Object_Message* msg);
	void Function_DlgReturned(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_GUIDlg* Dialog);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_GUIDlg* Function_OpenDlg(const struct FString& Caption, int TheButtons, const struct FString& Passback, int TimeOut);
	void Function_Free_Free_Free(bool bForce);
	void Function_NotifyLevelChange();
	void Function_HandleParameters(const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_ChangeHint(const struct FString& NewHint);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_Hide_Hide_Hide();
	void Function_Show_Show_Show();
	void Function_DeActivate_DeActivate_DeActivate();
	void Function_Activate_Activate_Activate();
	void Function_OnPopupReturned(const struct FStruct_GUIListElem& returnObj, const struct FString& Passback);
	void Function_OnDlgReturned(int returnButton, const struct FString& Passback);
};


// Class Object.GUI.GUIComponent.GUIImage
// 0x001C (0x0278 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIImage : public UClass_Object_GUI_GUIComponent
{
public:
	class UClass_Object_Material*                      Image;                                                    // 0x025C(0x0004) (Edit, Config, NoClear)
	struct FStruct_Color                               ImageColor;                                               // 0x0260(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<EeImgStyle>                            ImageStyle;                                               // 0x0264(0x0001) (Edit, Config, NoClear)
	TEnumAsByte<EMenuRenderStyle>                      ImageRenderStyle;                                         // 0x0265(0x0001) (Edit, Config, NoClear)
	TEnumAsByte<EeImgAlign>                            ImageAlign;                                               // 0x0266(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0267(0x0001) MISSED OFFSET
	int                                                x1;                                                       // 0x0268(0x0004) (Edit, Config)
	int                                                y1;                                                       // 0x026C(0x0004) (Edit, Config)
	int                                                x2;                                                       // 0x0270(0x0004) (Edit, Config)
	int                                                y2;                                                       // 0x0274(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIImage");
		return ptr;
	}


	void Function_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
};


// Class Object.WindowManager
// 0x0004 (0x002C - 0x0028)
class UClass_Object_WindowManager : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.WindowManager");
		return ptr;
	}

};


// Class Object.Action
// 0x003C (0x0064 - 0x0028)
class UClass_Object_Action : public UClass_Object
{
public:
	struct FString                                     actionDisplayName;                                        // 0x0028(0x000C) (NeedCtorLink)
	struct FString                                     actionHelp;                                               // 0x0034(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      returnType;                                               // 0x0040(0x0004)
	struct FString                                     category;                                                 // 0x0044(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Script*                  parentScript;                                             // 0x0050(0x0004)
	unsigned long                                      acceptAllTypes : 1;                                       // 0x0054(0x0004)
	TArray<struct FStruct_ParameterResolveInfo>        resolveInfoList;                                          // 0x0058(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action");
		return ptr;
	}


	void Function_enumScripts(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, TArray<struct FName>* S);
	void Function_enumScriptLabels(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, TArray<struct FName>* S);
	void Function_editorDisplayString(struct FString* S);
	struct FString Function_propertyDisplayString(const struct FName& PropName);
	class UClass_Object_Variable* Function_execute();
	class UClass_Object_Variable* Function_tryFindVariable(const struct FString& VariableName);
	class UClass_Object_Variable* Function_findVariable(const struct FString& VariableName);
	class UClass_Object_Variable* Function_newTemporaryVariable(class UClass_Object_Field_Struct_State_Class* variableType, const struct FString& initValue);
	class UClass_Object_Variable* Function_newVariable(const struct FName& VariableName, class UClass_Object_Field_Struct_State_Class* variableType);
	void Function_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
	class AClass_Object_Actor* Function_findStaticByLabel(class UClass_Object_Field_Struct_State_Class* actorClass, const struct FName& Label);
	class AClass_Object_Actor* Function_findByLabel(class UClass_Object_Field_Struct_State_Class* actorClass, const struct FName& Label);
	void Function_logError(const struct FString& Reason);
	void Function_resolveParameters();
	void Function_SetActionPropertyText(const struct FString& PropName, const struct FString& PropValue);
	void Function_setParentScript(class AClass_Object_Actor_Script* S);
	void Function_Construct_Void_Construct_Void();
};


// Class Object.Action.ActionBool
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_Action_ActionBool : public UClass_Object_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionBool");
		return ptr;
	}


	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_makeVariable(const struct FString& val);
};


// Class Object.Action.ActionBool.ActionPropertyTest
// 0x0038 (0x009C - 0x0064)
class UClass_Object_Action_ActionBool_ActionPropertyTest : public UClass_Object_Action_ActionBool
{
public:
	struct FName                                       Label;                                                    // 0x0064(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      actorClass;                                               // 0x0068(0x0004) (Edit, AlwaysInit)
	struct FString                                     propertyPath;                                             // 0x006C(0x000C) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     Value;                                                    // 0x0078(0x000C) (Edit, NeedCtorLink)
	int                                                maxPasses;                                                // 0x0084(0x0004) (Edit, NoClear)
	class UClass_Object*                               testProperty;                                             // 0x0088(0x0004) (Transient, AlwaysInit)
	TArray<int>                                        offsets;                                                  // 0x008C(0x000C) (Transient, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EOpTest>                               opTest;                                                   // 0x0098(0x0001) (Edit, AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionBool.ActionPropertyTest");
		return ptr;
	}


	bool Function_doPropertyTest();
	void Function_findTestProperty();
	struct FString Function_getOperatorText();
	void Function_editorDisplayString_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_execute_execute();
};


// Class Object.Action.ActionPlayMojo
// 0x0004 (0x0068 - 0x0064)
class UClass_Object_Action_ActionPlayMojo : public UClass_Object_Action
{
public:
	struct FName                                       Cutscene;                                                 // 0x0064(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionPlayMojo");
		return ptr;
	}


	void Function_enumCutscenes(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<struct FName>* S);
	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_execute_execute();
};


// Class Object.Action.ActionCinematicExit
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_Action_ActionCinematicExit : public UClass_Object_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionCinematicExit");
		return ptr;
	}


	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	void STATIC_Function_cinematicExit(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level);
	class UClass_Object_Variable* Function_execute_execute();
};


// Class Object.Action.ActionCinematicEnter
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_Action_ActionCinematicEnter : public UClass_Object_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionCinematicEnter");
		return ptr;
	}


	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	void STATIC_Function_cinematicEnter(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level);
	class UClass_Object_Variable* Function_execute_execute();
};


// Class Object.Action.ActionFor
// 0x0018 (0x007C - 0x0064)
class UClass_Object_Action_ActionFor : public UClass_Object_Action
{
public:
	struct FName                                       counterName;                                              // 0x0064(0x0004) (Edit, AlwaysInit)
	float                                              beginValue;                                               // 0x0068(0x0004) (Edit)
	float                                              endValue;                                                 // 0x006C(0x0004) (Edit)
	TArray<class UClass_Object_Action*>                forActions;                                               // 0x0070(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionFor");
		return ptr;
	}


	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_execute_execute();
	void Function_setParentScript_setParentScript(class AClass_Object_Actor_Script* S);
	void Function_PrecacheSpeech_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
};


// Class Object.Action.ActionLoop
// 0x000C (0x0070 - 0x0064)
class UClass_Object_Action_ActionLoop : public UClass_Object_Action
{
public:
	TArray<class UClass_Object_Action*>                loopActions;                                              // 0x0064(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionLoop");
		return ptr;
	}


	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_execute_execute();
	void Function_setParentScript_setParentScript(class AClass_Object_Actor_Script* S);
	void Function_PrecacheSpeech_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
};


// Class Object.Action.ActionIf
// 0x0024 (0x0088 - 0x0064)
class UClass_Object_Action_ActionIf : public UClass_Object_Action
{
public:
	TArray<class UClass_Object_Action_ActionBool*>     testsOr;                                                  // 0x0064(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<class UClass_Object_Action*>                trueActions;                                              // 0x0070(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<class UClass_Object_Action*>                elseActions;                                              // 0x007C(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionIf");
		return ptr;
	}


	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_execute_execute();
	void Function_setParentScript_setParentScript(class AClass_Object_Actor_Script* S);
	void Function_PrecacheSpeech_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
};


// Class Object.Variable
// 0x0004 (0x002C - 0x0028)
class UClass_Object_Variable : public UClass_Object
{
public:
	class AClass_Object_Actor_Script*                  ownerScript;                                              // 0x0028(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Variable");
		return ptr;
	}


	bool Function_truth();
	bool Function_not();
	bool Function_or(const struct FString& rhs);
	bool Function_and(const struct FString& rhs);
	bool Function_greater(const struct FString& rhs);
	bool Function_greaterEqual(const struct FString& rhs);
	bool Function_notEqual(const struct FString& rhs);
	bool Function_equal(const struct FString& rhs);
	bool Function_lessEqual(const struct FString& rhs);
	bool Function_less(const struct FString& rhs);
	void Function_divide(const struct FString& rhs);
	void Function_multiply(const struct FString& rhs);
	void Function_subtract(const struct FString& rhs);
	void Function_Add(const struct FString& rhs);
	void STATIC_Function_bestVariableClass(const struct FString& val, class UClass_Object_Field_Struct_State_Class** varClass);
	void STATIC_Function_variableClassToNativeClass(class UClass_Object_Field_Struct_State_Class* varClass, struct FString* nativeClass);
	void STATIC_Function_nativeClassToVariableClass(const struct FString& nativeClass, class UClass_Object_Field_Struct_State_Class** varClass);
	class UClass_Object_Variable* STATIC_Function_findVariable(const struct FString& Name, class AClass_Object_Actor_Script* requestingScript);
	void STATIC_Function_logError(const struct FString& rval, const struct FString& Reason);
	void Function_construct_Script(class AClass_Object_Actor_Script* Owner);
};


// Class Object.Actor.Script
// 0x0068 (0x0468 - 0x0400)
class AClass_Object_Actor_Script : public AClass_Object_Actor
{
public:
	class UClass_Object_Field_Struct_State_Class*      MessageClass;                                             // 0x0400(0x0004) (Edit)
	class UClass_Object_Message*                       messageFilter;                                            // 0x0404(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<class UClass_Object_Action*>                Actions;                                                  // 0x0408(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      Enabled : 1;                                              // 0x0414(0x0004) (Edit)
	TEnumAsByte<EeScriptType>                          scriptType;                                               // 0x0418(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	float                                              cutscenePriority;                                         // 0x041C(0x0004) (Edit, NoClear)
	unsigned long                                      bIsExecuting : 1;                                         // 0x0420(0x0004)
	TArray<class UClass_Object_Action_WatcherBase*>    watchers;                                                 // 0x0424(0x000C) (NeedCtorLink)
	unsigned long                                      bExitScript : 1;                                          // 0x0430(0x0004)
	unsigned long                                      bExitLoop : 1;                                            // 0x0430(0x0004)
	class UClass_Object_Message*                       currentMessage;                                           // 0x0434(0x0004)
	TArray<class UClass_Object_Message*>               messageQueue;                                             // 0x0438(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Variable*>              variables;                                                // 0x0444(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Variable*>              tempVariables;                                            // 0x0450(0x000C) (NeedCtorLink)
	unsigned long                                      bTemporaryHiddenEdHack : 1;                               // 0x045C(0x0004) (Config, GlobalConfig)
	struct FScriptDelegate                             __stopTalkingHead__Delegate;                              // 0x0460(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Script");
		return ptr;
	}


	struct FString Function_editorDisplayFilter(class UClass_Object_Message* Input);
	struct FString Function_editorDisplayMessage(class UClass_Object_Field_Struct_State_Class* Input);
	void Function_enumValidMessages(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class UClass_Object_Field_Struct_State_Class*>* S);
	void Function_destroyTempVariables();
	void Function_executeActions();
	void Function_executeScriptFromScriptAction(bool blockCallingScript);
	void Function_executeFromExec();
	void Function_execute(class UClass_Object_Message* msg);
	class UClass_Object_Message* Function_triggeringMessage();
	void Function_onMessage_onMessage(class UClass_Object_Message* msg);
	void Function_exitLoop();
	bool Function_keepLooping();
	void Function_enterLoop();
	bool Function_continueExecution();
	void Function_Exit();
	void Function_setWatcherEnabled(const struct FName& watcherName, bool Enabled);
	void Function_addWatcher(class UClass_Object_Action_WatcherBase* newWatcher);
	class UClass_Object_Variable* Function_newTemporaryVariable(class UClass_Object_Field_Struct_State_Class* variableType, const struct FString& initValue);
	class UClass_Object_Variable* Function_newVariable(const struct FName& VariableName, class UClass_Object_Field_Struct_State_Class* variableType);
	class UClass_Object_Variable* Function_findVariable(const struct FName& VariableName);
	void Function_Timer_Timer();
	void Function_PrecacheSpeech_PrecacheSpeech(class UClass_Object_SpeechManager* Manager);
	void Function_SetInitialState_SetInitialState();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_stopTalkingHead(class AClass_Object_Actor_Script* requestingScript);
};


// Class Object.sMojoTrackGroup
// 0x0034 (0x005C - 0x0028)
class UClass_Object_sMojoTrackGroup : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x34];                                      // 0x0028(0x0034) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.sMojoTrackGroup");
		return ptr;
	}

};


// Class Object.sMojoTrack
// 0x001C (0x0044 - 0x0028)
class UClass_Object_sMojoTrack : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0028(0x001C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.sMojoTrack");
		return ptr;
	}

};


// Class Object.sMojoScene
// 0x006C (0x0094 - 0x0028)
class UClass_Object_sMojoScene : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x6C];                                      // 0x0028(0x006C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.sMojoScene");
		return ptr;
	}

};


// Class Object.ojoPlayerBase
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_ojoPlayerBase : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ojoPlayerBase");
		return ptr;
	}

};


// Class Object.ojoPlayerBase.sMojoPlayer
// 0x0024 (0x004C - 0x0028)
class UClass_Object_ojoPlayerBase_sMojoPlayer : public UClass_Object_ojoPlayerBase
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x0028(0x0024) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ojoPlayerBase.sMojoPlayer");
		return ptr;
	}

};


// Class Object.sMojoKey
// 0x0014 (0x003C - 0x0028)
class UClass_Object_sMojoKey : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0028(0x0014) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.sMojoKey");
		return ptr;
	}

};


// Class Object.Actor.Controller.TsMojoController
// 0x0020 (0x04C4 - 0x04A4)
class AClass_Object_Actor_Controller_TsMojoController : public AClass_Object_Actor_Controller
{
public:
	int                                                scene_ref_count;                                          // 0x04A4(0x0004)
	class AClass_Object_Actor_Controller*              original_controller;                                      // 0x04A8(0x0004)
	struct FStruct_Vector                              point;                                                    // 0x04AC(0x000C)
	unsigned long                                      localShouldWalk : 1;                                      // 0x04B8(0x0004)
	class AClass_Object_Actor_TsViewFocus*             targetViewFocus;                                          // 0x04BC(0x0004)
	class AClass_Object_Actor*                         moveViewFocus;                                            // 0x04C0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.TsMojoController");
		return ptr;
	}


	void Function_ResetState();
	bool Function_FinishedState();
	void Function_BeginMoveToPoint(const struct FStruct_Vector& p, const struct FStruct_Rotator& R, class AClass_Object_Actor* actorVF, const struct FStruct_Vector& pointVF, bool nullPointVF, bool shouldWalk);
	bool Function_WeaponFireAgain(float RefireRate, bool bFinishedFire);
	void Function_DecRef();
	void Function_AddRef();
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_TakeControlOf(class AClass_Object_Actor_Pawn* p);
};


// Class Object.NavigationSystem
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_NavigationSystem : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.NavigationSystem");
		return ptr;
	}

};


// Class Object.FLevelData
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_FLevelData : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.FLevelData");
		return ptr;
	}

};


// Class Object.FLevelData.FConcreteLevelData
// 0x0108 (0x0130 - 0x0028)
class UClass_Object_FLevelData_FConcreteLevelData : public UClass_Object_FLevelData
{
public:
	unsigned char                                      UnknownData00[0x108];                                     // 0x0028(0x0108) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.FLevelData.FConcreteLevelData");
		return ptr;
	}

};


// Class Object.Actor.PlacedNode
// 0x0020 (0x0420 - 0x0400)
class AClass_Object_Actor_PlacedNode : public AClass_Object_Actor
{
public:
	TArray<struct FName>                               doNotConnectTo;                                           // 0x0400(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      road : 1;                                                 // 0x040C(0x0004) (Edit)
	TArray<struct FStruct_ConnectToElement>            connectToData;                                            // 0x0410(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      pathNodeSnap : 1;                                         // 0x041C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.PlacedNode");
		return ptr;
	}

};


// Class Object.Actor.PlacedNode.PlacedOutdoorNode
// 0x0000 (0x0420 - 0x0420)
class AClass_Object_Actor_PlacedNode_PlacedOutdoorNode : public AClass_Object_Actor_PlacedNode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.PlacedNode.PlacedOutdoorNode");
		return ptr;
	}

};


// Class Object.Actor.PlacedNode.AirborneNode
// 0x0000 (0x0420 - 0x0420)
class AClass_Object_Actor_PlacedNode_AirborneNode : public AClass_Object_Actor_PlacedNode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.PlacedNode.AirborneNode");
		return ptr;
	}

};


// Class Object.Actor.Brush
// 0x006C (0x046C - 0x0400)
class AClass_Object_Actor_Brush : public AClass_Object_Actor
{
public:
	TEnumAsByte<ECsgOper>                              CsgOper;                                                  // 0x0400(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	class UClass_Object*                               UnusedLightMesh;                                          // 0x0404(0x0004) (Const)
	struct FStruct_Vector                              PostPivot;                                                // 0x0408(0x000C)
	struct FStruct_Scale                               MainScale;                                                // 0x0414(0x0014)
	struct FStruct_Scale                               PostScale;                                                // 0x0428(0x0014)
	struct FStruct_Scale                               TempScale;                                                // 0x043C(0x0014)
	struct FStruct_Color                               BrushColor;                                               // 0x0450(0x0004) (Edit, Config)
	int                                                PolyFlags;                                                // 0x0454(0x0004) (Edit)
	unsigned long                                      bColored : 1;                                             // 0x0458(0x0004) (Edit)
	class UClass_Object_Material*                      RenderMaterial;                                           // 0x045C(0x0004) (Edit)
	struct FStruct_Vector                              RenderMaterialWorldSize;                                  // 0x0460(0x000C) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush");
		return ptr;
	}

};


// Class Object.Actor.Brush.Volume
// 0x0020 (0x048C - 0x046C)
class AClass_Object_Actor_Brush_Volume : public AClass_Object_Actor_Brush
{
public:
	class AClass_Object_Actor*                         AssociatedActor;                                          // 0x046C(0x0004)
	struct FName                                       AssociatedActorTag;                                       // 0x0470(0x0004) (Edit)
	int                                                LocationPriority;                                         // 0x0474(0x0004) (Edit)
	struct FString                                     LocationName;                                             // 0x0478(0x000C) (Edit, Localized, NeedCtorLink)
	class AClass_Object_Actor_Keypoint_DecorationList* DecoList;                                                 // 0x0484(0x0004) (Edit)
	unsigned long                                      bReverseHavokTriangleWinding : 1;                         // 0x0488(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume");
		return ptr;
	}


	void Function_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_PostBeginPlay_PostBeginPlay();
	bool Function_Encompasses(class AClass_Object_Actor* Other);
};


// Class Object.Actor.Brush.Volume.NoPathNodeGenerationVolume
// 0x0000 (0x048C - 0x048C)
class AClass_Object_Actor_Brush_Volume_NoPathNodeGenerationVolume : public AClass_Object_Actor_Brush_Volume
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.NoPathNodeGenerationVolume");
		return ptr;
	}

};


// Class Object.Actor.PlacedNode.IndoorNode
// 0x0000 (0x0420 - 0x0420)
class AClass_Object_Actor_PlacedNode_IndoorNode : public AClass_Object_Actor_PlacedNode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.PlacedNode.IndoorNode");
		return ptr;
	}

};


// Class Object.Movement
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_Movement : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Movement");
		return ptr;
	}

};


// Class Object.Movement.ConcreteMovement
// 0x0020 (0x0048 - 0x0028)
class UClass_Object_Movement_ConcreteMovement : public UClass_Object_Movement
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Movement.ConcreteMovement");
		return ptr;
	}

};


// Class Object.Actor.Brush.Volume.PhysicsVolume
// 0x0084 (0x0510 - 0x048C)
class AClass_Object_Actor_Brush_Volume_PhysicsVolume : public AClass_Object_Actor_Brush_Volume
{
public:
	unsigned long                                      bPainCausing : 1;                                         // 0x048C(0x0004) (Edit)
	struct FStruct_Vector                              ZoneVelocity;                                             // 0x0490(0x000C) (Edit)
	struct FStruct_Vector                              Gravity;                                                  // 0x049C(0x000C) (Edit, Net)
	float                                              GroundFriction;                                           // 0x04A8(0x0004) (Edit)
	float                                              TerminalVelocity;                                         // 0x04AC(0x0004) (Edit)
	float                                              DamagePerSec;                                             // 0x04B0(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      DamageType;                                               // 0x04B4(0x0004) (Edit)
	int                                                Priority;                                                 // 0x04B8(0x0004) (Edit)
	class UClass_Object_Sound*                         EntrySound;                                               // 0x04BC(0x0004) (Edit)
	class UClass_Object_Sound*                         ExitSound;                                                // 0x04C0(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      EntryActor;                                               // 0x04C4(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      ExitActor;                                                // 0x04C8(0x0004) (Edit)
	float                                              FluidFriction;                                            // 0x04CC(0x0004) (Edit)
	struct FStruct_Vector                              ViewFlash;                                                // 0x04D0(0x000C) (Edit)
	struct FStruct_Vector                              ViewFog;                                                  // 0x04DC(0x000C) (Edit)
	unsigned long                                      bDestructive : 1;                                         // 0x04E8(0x0004) (Edit)
	unsigned long                                      bNoInventory : 1;                                         // 0x04E8(0x0004) (Edit)
	unsigned long                                      bMoveProjectiles : 1;                                     // 0x04E8(0x0004) (Edit)
	unsigned long                                      bBounceVelocity : 1;                                      // 0x04E8(0x0004) (Edit)
	unsigned long                                      bNeutralZone : 1;                                         // 0x04E8(0x0004) (Edit)
	unsigned long                                      bWaterVolume : 1;                                         // 0x04E8(0x0004)
	unsigned long                                      Active : 1;                                               // 0x04E8(0x0004) (Edit)
	class AClass_Object_Actor_Info*                    PainTimer;                                                // 0x04EC(0x0004)
	unsigned long                                      bDistanceFog : 1;                                         // 0x04F0(0x0004) (Edit)
	struct FStruct_Color                               DistanceFogColor;                                         // 0x04F4(0x0004) (Edit)
	float                                              DistanceFogStart;                                         // 0x04F8(0x0004) (Edit)
	float                                              DistanceFogEnd;                                           // 0x04FC(0x0004) (Edit)
	float                                              KExtraLinearDamping;                                      // 0x0500(0x0004) (Edit)
	float                                              KExtraAngularDamping;                                     // 0x0504(0x0004) (Edit)
	float                                              KBuoyancy;                                                // 0x0508(0x0004) (Edit)
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume* NextPhysicsVolume;                                        // 0x050C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.PhysicsVolume");
		return ptr;
	}


	void Function_CausePainTo(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_TimerPop(class AClass_Object_Actor_Info_VolumeTimer* t);
	void Function_PawnLeavingVolume(class AClass_Object_Actor_Pawn* Other);
	void Function_PawnEnteredVolume(class AClass_Object_Actor_Pawn* Other);
	void Function_ActorLeavingVolume(class AClass_Object_Actor* Other);
	void Function_ActorEnteredVolume(class AClass_Object_Actor* Other);
	void Function_PhysicsChangedFor(class AClass_Object_Actor* Other);
};


// Class Object.Actor.Brush.Volume.PhysicsVolume.ZeroGravityVolume
// 0x0000 (0x0510 - 0x0510)
class AClass_Object_Actor_Brush_Volume_PhysicsVolume_ZeroGravityVolume : public AClass_Object_Actor_Brush_Volume_PhysicsVolume
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.PhysicsVolume.ZeroGravityVolume");
		return ptr;
	}


	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
};


// Class Object.Actor.Brush.Volume.PhysicsVolume.ElevatorVolume
// 0x0004 (0x0514 - 0x0510)
class AClass_Object_Actor_Brush_Volume_PhysicsVolume_ElevatorVolume : public AClass_Object_Actor_Brush_Volume_PhysicsVolume
{
public:
	unsigned long                                      Active : 1;                                               // 0x0510(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.PhysicsVolume.ElevatorVolume");
		return ptr;
	}


	bool Function_canBePassed(const struct FName& teamName);
	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
};


// Class Object.Actor.Brush.Volume.BoundaryVolume
// 0x0010 (0x049C - 0x048C)
class AClass_Object_Actor_Brush_Volume_BoundaryVolume : public AClass_Object_Actor_Brush_Volume
{
public:
	unsigned long                                      Active : 1;                                               // 0x048C(0x0004) (Edit, Net)
	float                                              DampingScale;                                             // 0x0490(0x0004) (Edit)
	float                                              FrictionScale;                                            // 0x0494(0x0004) (Edit)
	unsigned long                                      LocalActive : 1;                                          // 0x0498(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.BoundaryVolume");
		return ptr;
	}


	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_RegisterBoundary(bool Enable);
	void Function_EnableBoundary(bool Enable);
	void Function_PostNetReceive_PostNetReceive();
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.SquadInfo
// 0x0040 (0x0440 - 0x0400)
class AClass_Object_Actor_SquadInfo : public AClass_Object_Actor
{
public:
	TArray<class UClass_Object_Field_Struct_State_Class*> goals;                                                    // 0x0400(0x000C) (Edit, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_Field_Struct_State_Class*> abilities;                                                // 0x040C(0x000C) (Edit, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_RefCount_Tyrion_ResourceBase*  SquadAI;                                                  // 0x0418(0x0004)
	TArray<class AClass_Object_Actor_Pawn*>            pawns;                                                    // 0x041C(0x000C) (NeedCtorLink)
	TEnumAsByte<EAI_LOD_Levels>                        AI_LOD_Level;                                             // 0x0428(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	float                                              tickTime;                                                 // 0x042C(0x0004)
	float                                              tickTimeOrg;                                              // 0x0430(0x0004)
	struct FStruct_Range                               tickTimeUpdateRange;                                      // 0x0434(0x0008)
	unsigned long                                      logTyrion : 1;                                            // 0x043C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SquadInfo");
		return ptr;
	}


	void Function_removeFromSquad(class AClass_Object_Actor_Pawn* p);
	void Function_addToSquad(class AClass_Object_Actor_Pawn* p);
	int Function_nActiveMembers(class AClass_Object_Actor_Pawn** livingPawn);
	void Function_rematchGoals();
	void Function_cleanupAI();
	void Function_memberDied(class AClass_Object_Actor_Pawn* member, class AClass_Object_Actor_Pawn* InstigatedBy, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_memberDestroyed(class AClass_Object_Actor_Pawn* member);
	void Function_makeDormant_makeDormant(bool onOff);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.IVisionNotification
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IVisionNotification : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IVisionNotification");
		return ptr;
	}


	void Function_OnViewerLostPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
	void Function_OnViewerSawPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
};


// Class Object.DeleteableObject.ShotNotifier
// 0x0010 (0x0044 - 0x0034)
class UClass_Object_DeleteableObject_ShotNotifier : public UClass_Object_DeleteableObject
{
public:
	TArray<class UClass_Object_IShotNotification*>     NotificationList;                                         // 0x0034(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn*                    Shooter;                                                  // 0x0040(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.ShotNotifier");
		return ptr;
	}


	bool Function_IsOnShotNotificationList(class UClass_Object_IShotNotification* PossibleRegistrant);
	void Function_UnregisterShotNotification(class UClass_Object_IShotNotification* Registrant);
	void Function_RegisterShotNotification(class UClass_Object_IShotNotification* Registrant);
	void Function_NotifyShotFired(class AClass_Object_Actor* Projectile);
	void Function_OnShotFired(class AClass_Object_Actor* Projectile);
	void Function_InitializeShotNotifier(class AClass_Object_Actor_Pawn* Shooter);
};


// Class Object.RefCount.HearingNotifier
// 0x0010 (0x0048 - 0x0038)
class UClass_Object_RefCount_HearingNotifier : public UClass_Object_RefCount
{
public:
	TArray<class UClass_Object_IHearingNotification*>  NotificationList;                                         // 0x0038(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn*                    listener;                                                 // 0x0044(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.HearingNotifier");
		return ptr;
	}


	bool Function_IsOnHearingNotificationList(class UClass_Object_IHearingNotification* PossibleRegistrant);
	void Function_UnregisterHearingNotification(class UClass_Object_IHearingNotification* Registrant);
	void Function_RegisterHearingNotification(class UClass_Object_IHearingNotification* Registrant);
	void Function_OnHearSound(class AClass_Object_Actor* SoundMaker, const struct FStruct_Vector& SoundOrigin, const struct FName& SoundCategory);
	void Function_InitializeHearingNotifier(class AClass_Object_Actor_Pawn* InListener);
};


// Class Object.LevelBase
// 0x0068 (0x0090 - 0x0028)
class UClass_Object_LevelBase : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0028(0x0068) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.LevelBase");
		return ptr;
	}

};


// Class Object.LevelBase.PendingLevel
// 0x001C (0x00AC - 0x0090)
class UClass_Object_LevelBase_PendingLevel : public UClass_Object_LevelBase
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0090(0x001C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.LevelBase.PendingLevel");
		return ptr;
	}

};


// Class Object.LevelBase.PendingLevel.NetPendingLevel
// 0x0000 (0x00AC - 0x00AC)
class UClass_Object_LevelBase_PendingLevel_NetPendingLevel : public UClass_Object_LevelBase_PendingLevel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.LevelBase.PendingLevel.NetPendingLevel");
		return ptr;
	}

};


// Class Object.Subsystem
// 0x0004 (0x002C - 0x0028)
class UClass_Object_Subsystem : public UClass_Object
{
public:
	int                                                ExecVtbl;                                                 // 0x0028(0x0004) (Const, Native)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem");
		return ptr;
	}

};


// Class Object.Subsystem.NetDriver
// 0x0070 (0x009C - 0x002C)
class UClass_Object_Subsystem_NetDriver : public UClass_Object_Subsystem
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x002C(0x0020) MISSED OFFSET
	float                                              ConnectionTimeout;                                        // 0x004C(0x0004) (Config)
	float                                              InitialConnectTimeout;                                    // 0x0050(0x0004) (Config)
	float                                              KeepAliveTime;                                            // 0x0054(0x0004) (Config)
	float                                              RelevantTimeout;                                          // 0x0058(0x0004) (Config)
	float                                              SpawnPrioritySeconds;                                     // 0x005C(0x0004) (Config)
	float                                              ServerTravelPause;                                        // 0x0060(0x0004) (Config)
	int                                                MaxClientRate;                                            // 0x0064(0x0004) (Config)
	int                                                MaxInternetClientRate;                                    // 0x0068(0x0004) (Config)
	int                                                NetServerMaxTickRate;                                     // 0x006C(0x0004) (Config)
	int                                                LanServerMaxTickRate;                                     // 0x0070(0x0004) (Config)
	unsigned long                                      AllowDownloads : 1;                                       // 0x0074(0x0004) (Config)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0078(0x0014) MISSED OFFSET
	int                                                MaxDownloadSize;                                          // 0x008C(0x0004) (Config)
	TArray<struct FString>                             DownloadManagers;                                         // 0x0090(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.NetDriver");
		return ptr;
	}

};


// Class Object.PackageMap
// 0x0048 (0x0070 - 0x0028)
class UClass_Object_PackageMap : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0028(0x0048) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PackageMap");
		return ptr;
	}

};


// Class Object.PackageMap.PackageMapLevel
// 0x0004 (0x0074 - 0x0070)
class UClass_Object_PackageMap_PackageMapLevel : public UClass_Object_PackageMap
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0070(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PackageMap.PackageMapLevel");
		return ptr;
	}

};


// Class Object.Download
// 0x042C (0x0454 - 0x0028)
class UClass_Object_Download : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x42C];                                     // 0x0028(0x042C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Download");
		return ptr;
	}

};


// Class Object.Download.ChannelDownload
// 0x0004 (0x0458 - 0x0454)
class UClass_Object_Download_ChannelDownload : public UClass_Object_Download
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0454(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Download.ChannelDownload");
		return ptr;
	}

};


// Class Object.Subsystem.NetDriver.DemoRecDriver
// 0x0094 (0x0130 - 0x009C)
class UClass_Object_Subsystem_NetDriver_DemoRecDriver : public UClass_Object_Subsystem_NetDriver
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x009C(0x000C) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                                       // 0x00A8(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData01[0x7C];                                      // 0x00B4(0x007C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.NetDriver.DemoRecDriver");
		return ptr;
	}

};


// Class Object.Player
// 0x0040 (0x0068 - 0x0028)
class UClass_Object_Player : public UClass_Object
{
public:
	int                                                vfOut;                                                    // 0x0028(0x0004) (Const, Native)
	int                                                vfExec;                                                   // 0x002C(0x0004) (Const, Native)
	class AClass_Object_Actor_Controller_PlayerController* Actor;                                                    // 0x0030(0x0004) (Const, Transient)
	class UClass_Object_Interactions_Interaction*      Console;                                                  // 0x0034(0x0004) (Transient)
	unsigned long                                      bWindowsMouseAvailable : 1;                               // 0x0038(0x0004) (Const, Transient)
	unsigned long                                      bShowWindowsMouse : 1;                                    // 0x0038(0x0004)
	unsigned long                                      bSuspendPrecaching : 1;                                   // 0x0038(0x0004)
	float                                              WindowsMouseX;                                            // 0x003C(0x0004) (Const, Transient)
	float                                              WindowsMouseY;                                            // 0x0040(0x0004) (Const, Transient)
	int                                                CurrentNetSpeed;                                          // 0x0044(0x0004)
	int                                                ConfiguredInternetSpeed;                                  // 0x0048(0x0004) (Config, GlobalConfig)
	int                                                ConfiguredLanSpeed;                                       // 0x004C(0x0004) (Config, GlobalConfig)
	unsigned char                                      SelectedCursor;                                           // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	class UClass_Object_Interactions_InteractionMaster* InteractionMaster;                                        // 0x0054(0x0004) (Transient)
	TArray<class UClass_Object_Interactions_Interaction*> LocalInteractions;                                        // 0x0058(0x000C) (Transient, NeedCtorLink)
	class UClass_Object_Interactions_Interaction_BaseGUIController* GUIController;                                            // 0x0064(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Player");
		return ptr;
	}

};


// Class Object.Player.NetConnection
// 0x3F10 (0x3F78 - 0x0068)
class UClass_Object_Player_NetConnection : public UClass_Object_Player
{
public:
	unsigned char                                      UnknownData00[0x3F10];                                    // 0x0068(0x3F10) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Player.NetConnection");
		return ptr;
	}

};


// Class Object.Player.NetConnection.DemoRecConnection
// 0x0000 (0x3F78 - 0x3F78)
class UClass_Object_Player_NetConnection_DemoRecConnection : public UClass_Object_Player_NetConnection
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Player.NetConnection.DemoRecConnection");
		return ptr;
	}

};


// Class Object.LevelBase.PendingLevel.DemoPlayPendingLevel
// 0x0000 (0x00AC - 0x00AC)
class UClass_Object_LevelBase_PendingLevel_DemoPlayPendingLevel : public UClass_Object_LevelBase_PendingLevel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.LevelBase.PendingLevel.DemoPlayPendingLevel");
		return ptr;
	}

};


// Class Object.Channel
// 0x003C (0x0064 - 0x0028)
class UClass_Object_Channel : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0028(0x003C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Channel");
		return ptr;
	}

};


// Class Object.Channel.FileChannel
// 0x0210 (0x0274 - 0x0064)
class UClass_Object_Channel_FileChannel : public UClass_Object_Channel
{
public:
	unsigned char                                      UnknownData00[0x210];                                     // 0x0064(0x0210) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Channel.FileChannel");
		return ptr;
	}

};


// Class Object.Channel.ActorChannel
// 0x0064 (0x00C8 - 0x0064)
class UClass_Object_Channel_ActorChannel : public UClass_Object_Channel
{
public:
	unsigned char                                      UnknownData00[0x64];                                      // 0x0064(0x0064) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Channel.ActorChannel");
		return ptr;
	}

};


// Class Object.Channel.ControlChannel
// 0x0004 (0x0068 - 0x0064)
class UClass_Object_Channel_ControlChannel : public UClass_Object_Channel
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Channel.ControlChannel");
		return ptr;
	}

};


// Class Object.PlayInfo
// 0x003C (0x0064 - 0x0028)
class UClass_Object_PlayInfo : public UClass_Object
{
public:
	TArray<struct FStruct_PlayInfoData>                Settings;                                                 // 0x0028(0x000C) (Const, NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> InfoClasses;                                              // 0x0034(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ClassStack;                                               // 0x0040(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             Groups;                                                   // 0x004C(0x000C) (Const, NeedCtorLink)
	struct FString                                     LastError;                                                // 0x0058(0x000C) (Const, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PlayInfo");
		return ptr;
	}


	void Function_Init();
	void Function_SplitStringToArray(const struct FString& str, const struct FString& Divider, TArray<struct FString>* AStr);
	int Function_FindIndex(const struct FString& SettingName);
	bool Function_StoreSetting(int Index, const struct FString& NewVal, const struct FString& RangeData);
	bool Function_SaveSettings();
	void Function_AddSetting(const struct FString& Group, const struct FString& PropertyName, const struct FString& Description, unsigned char SecLevel, unsigned char Weight, const struct FString& RenderType, const struct FString& Extras, const struct FString& ExtraPrivs);
	void Function_PopClass();
	void Function_AddClass(class UClass_Object_Field_Struct_State_Class* Class);
	void Function_Clear();
};


// Class Object.GameSpyManager
// 0x00D4 (0x00FC - 0x0028)
class UClass_Object_GameSpyManager : public UClass_Object
{
public:
	class UClass_Object_Subsystem_Engine_GameEngine*   Engine;                                                   // 0x0028(0x0004)
	unsigned long                                      bAvailable : 1;                                           // 0x002C(0x0004) (Const)
	unsigned long                                      bFailedAvailabilityCheck : 1;                             // 0x002C(0x0004) (Const)
	unsigned long                                      bInitAsServer : 1;                                        // 0x002C(0x0004) (Const)
	unsigned long                                      bInitAsClient : 1;                                        // 0x002C(0x0004) (Const)
	unsigned long                                      bInitialised : 1;                                         // 0x002C(0x0004) (Const)
	unsigned long                                      bFailedInitialisation : 1;                                // 0x002C(0x0004) (Const)
	unsigned long                                      bTrackingStats : 1;                                       // 0x002C(0x0004) (Const)
	unsigned long                                      bStatsInitalised : 1;                                     // 0x002C(0x0004) (Const)
	unsigned long                                      bUsingPresence : 1;                                       // 0x002C(0x0004) (Const)
	unsigned long                                      bPresenceInitalised : 1;                                  // 0x002C(0x0004) (Const)
	unsigned long                                      bServerUpdateFinished : 1;                                // 0x002C(0x0004) (Const)
	int                                                currentServerIndex;                                       // 0x0030(0x0004) (Const)
	TArray<unsigned char>                              ServerKeyIds;                                             // 0x0034(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ServerKeyNames;                                           // 0x0040(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              PlayerKeyIds;                                             // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             PlayerKeyNames;                                           // 0x0058(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              TeamKeyIds;                                               // 0x0064(0x000C) (NeedCtorLink)
	TArray<struct FString>                             TeamKeyNames;                                             // 0x0070(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              CustomServerKeyIds;                                       // 0x007C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CustomServerKeyNames;                                     // 0x0088(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              CustomPlayerKeyIds;                                       // 0x0094(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CustomPlayerKeyNames;                                     // 0x00A0(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              CustomTeamKeyIds;                                         // 0x00AC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CustomTeamKeyNames;                                       // 0x00B8(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              InitialKeyIds;                                            // 0x00C4(0x000C) (NeedCtorLink)
	struct FString                                     ProductVersionID;                                         // 0x00D0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ProductRegionID;                                          // 0x00DC(0x000C) (Config, Localized, GlobalConfig, NeedCtorLink)
	struct FString                                     BaseFilePlanetPatchURL;                                   // 0x00E8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FScriptDelegate                             __OnQueryPatchResult__Delegate;                           // 0x00F4(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GameSpyManager");
		return ptr;
	}


	void Function_OnQueryPatchResult(bool bNeeded, bool bMandatory, const struct FString& versionName, const struct FString& URL);
	void Function_QueryPatchCompleted(bool bNeeded, bool bMandatory, const struct FString& versionName, int FilePlanetID, const struct FString& URL);
	void Function_QueryPatch();
	struct FString Function_GetPatchDownloadURL(int FilePlanetID);
	struct FString Function_GetProductRegionID();
	struct FString Function_GetProductVersionID();
	void Function_ProfileCheckResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_ProfileCreateResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_EmailAlreadyTaken();
	struct FString Function_GetGameSpyPassword();
	struct FString Function_GetGameSpyProfileId();
	int Function_GetNumTeams();
	struct FString Function_GetValueForTeamKey(int Key, int Index);
	struct FString Function_GetValueForPlayerKey(int Key, int Index);
	struct FString Function_GetValueForKey(int Key);
	void Function_UpdateComplete(bool bLAN);
	void Function_UpdatedServerData(int ServerID, const struct FString& ipAddress, int Ping, bool bLAN, TArray<struct FString> serverData, TArray<struct FString> playerData, TArray<struct FString> teamData);
	void Function_SetTeamAffiliationResult(TEnumAsByte<ETeamAffiliationResult> Result, const struct FString& teamTag, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_SetTeamAffiliation(int profileId, int TeamID, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_HTTPGetRequestResult(bool succeeded, const struct FString& ResponseData);
	void Function_HTTPGetRequest(const struct FString& URL, bool bBlock);
	void Function_SetDataPrivateRWResult(int success);
	void Function_SetDataPrivateRW(int profileId, const struct FString& PrivateData);
	void Function_FindTeamResult(int TeamID);
	void Function_FindTeam(const struct FString& teamTag);
	void Function_AuthenticatedProfileResult(int profileId, int authenticated, const struct FString& Error);
	void Function_AuthenticateProfile(int profileId, const struct FString& Password);
	void Function_UniqueNickRegistrationResult(TEnumAsByte<EGameSpyResult> Result);
	void Function_RegisterUniqueNick(const struct FString& UniqueNick);
	void Function_DisconnectUserAccount();
	void Function_UserConnectionResult(TEnumAsByte<EGameSpyResult> Result, int profileId, const struct FString& UniqueNick);
	void Function_ConnectUserAccount(const struct FString& Nick, const struct FString& Email, const struct FString& Password);
	void Function_CheckUserAccount(const struct FString& Nick, const struct FString& Email, const struct FString& Password);
	void Function_CreateUserAccount(const struct FString& Nick, const struct FString& Email, const struct FString& Password);
	void Function_SendStatSnapshot(bool finalSnapshot);
	void Function_SetTeamStat(const struct FString& statName, const struct FString& statValue, int TeamID);
	void Function_SetPlayerStat(const struct FString& statName, const struct FString& statValue, int PlayerID);
	void Function_SetServerStat(const struct FString& statName, const struct FString& statValue);
	void Function_StatsRemoveTeam(int TeamID);
	void Function_StatsRemovePlayer(int PlayerID);
	void Function_StatsNewTeam(int TeamID, const struct FString& teamName);
	void Function_StatsNewPlayer(int PlayerID, const struct FString& PlayerName);
	struct FString Function_StatsGetStatResponse(class AClass_Object_Actor_Controller_PlayerController* PC);
	struct FString Function_StatsGetPID(class AClass_Object_Actor_Controller_PlayerController* PC);
	bool Function_StatsHasPIDAndResponse(class AClass_Object_Actor_Controller_PlayerController* PC);
	void Function_StatsNewGameStarted();
	bool Function_GetNextServer(int* ServerID, struct FString* ipAddress, TArray<struct FString>* serverData);
	int Function_GetNumPotentialServers();
	struct FString Function_GetServerPort(int ServerID);
	struct FString Function_GetServerIpAddress(int ServerID);
	void Function_CancelUpdate();
	void Function_UpdateServer(int ServerID, bool Refresh);
	void Function_UpdateServerByIP(const struct FString& ipAddress, int serverGamePort);
	void Function_ClearServerList();
	void Function_LANUpdateServerList();
	void Function_UpdateServerList(const struct FString& Filter);
	void Function_SendGameSpyGameModeChange();
	class UClass_Object_Player* Function_GetPlayerObject();
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Function_GetLevelInfo();
	void Function_InitGameSpyData();
	void Function_OnLevelChange();
	void Function_GameSpyInitialised();
	void Function_InitGameSpyClient();
};


// Class Object.Actor.HavokActor.HavokConstraint.HavokWeakOrientationConstraint
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_HavokActor_HavokConstraint_HavokWeakOrientationConstraint : public AClass_Object_Actor_HavokActor_HavokConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.HavokWeakOrientationConstraint");
		return ptr;
	}

};


// Class Object.Actor.Pawn.HavokVehicle
// 0x0174 (0x07E4 - 0x0670)
class AClass_Object_Actor_Pawn_HavokVehicle : public AClass_Object_Actor_Pawn
{
public:
	int                                                hkVehicleDataPtr;                                         // 0x0670(0x0004) (Const, Transient)
	TArray<class UClass_Object_HavokVehicleWheel*>     Wheels;                                                   // 0x0674(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<float>                                      GearRatios;                                               // 0x0680(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              Steering;                                                 // 0x068C(0x0004) (Edit)
	float                                              Throttle;                                                 // 0x0690(0x0004) (Edit)
	float                                              Rise;                                                     // 0x0694(0x0004) (Edit)
	class AClass_Object_Actor_Pawn*                    Driver;                                                   // 0x0698(0x0004)
	TArray<struct FStruct_Vector>                      ExitPositions;                                            // 0x069C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_Vector>                      EntryPositions;                                           // 0x06A8(0x000C) (Edit, NeedCtorLink)
	struct FStruct_Vector                              DrivePos;                                                 // 0x06B4(0x000C) (Edit)
	struct FStruct_Rotator                             DriveRot;                                                 // 0x06C0(0x000C) (Edit)
	struct FName                                       DriveAnim;                                                // 0x06CC(0x0004) (Edit)
	unsigned long                                      bDrawMeshInFP : 1;                                        // 0x06D0(0x0004) (Edit)
	unsigned long                                      bDrawDriverInTP : 1;                                      // 0x06D0(0x0004) (Edit)
	unsigned long                                      bZeroPCRotOnEntry : 1;                                    // 0x06D0(0x0004) (Edit)
	struct FStruct_Vector                              FPCamPos;                                                 // 0x06D4(0x000C) (Edit)
	struct FStruct_Vector                              TPCamLookat;                                              // 0x06E0(0x000C) (Edit)
	float                                              TPCamDistance;                                            // 0x06EC(0x0004) (Edit)
	int                                                MaxViewYaw;                                               // 0x06F0(0x0004) (Edit)
	int                                                MaxViewPitch;                                             // 0x06F4(0x0004) (Edit)
	float                                              ChassisMass;                                              // 0x06F8(0x0004) (Edit)
	float                                              SteeringMaxAngle;                                         // 0x06FC(0x0004) (Edit)
	float                                              MaxSpeedFullSteeringAngle;                                // 0x0700(0x0004) (Edit)
	float                                              FrictionEqualizer;                                        // 0x0704(0x0004) (Edit)
	float                                              TorqueRollFactor;                                         // 0x0708(0x0004) (Edit)
	float                                              TorquePitchFactor;                                        // 0x070C(0x0004) (Edit)
	float                                              TorqueYawFactor;                                          // 0x0710(0x0004) (Edit)
	float                                              TorqueExtraFactor;                                        // 0x0714(0x0004) (Edit)
	float                                              ChassisUnitInertiaYaw;                                    // 0x0718(0x0004) (Edit)
	float                                              ChassisUnitInertiaRoll;                                   // 0x071C(0x0004) (Edit)
	float                                              ChassisUnitInertiaPitch;                                  // 0x0720(0x0004) (Edit)
	float                                              EngineTorque;                                             // 0x0724(0x0004) (Edit)
	float                                              EngineMinRPM;                                             // 0x0728(0x0004) (Edit)
	float                                              EngineOptRPM;                                             // 0x072C(0x0004) (Edit)
	float                                              EngineMaxRPM;                                             // 0x0730(0x0004) (Edit)
	float                                              EngineTorqueFactorAtMinRPM;                               // 0x0734(0x0004) (Edit)
	float                                              EngineTorqueFactorAtMaxRPM;                               // 0x0738(0x0004) (Edit)
	float                                              EngineResistanceFactorAtMinRPM;                           // 0x073C(0x0004) (Edit)
	float                                              EngineResistanceFactorAtOptRPM;                           // 0x0740(0x0004) (Edit)
	float                                              EngineResistanceFactorAtMaxRPM;                           // 0x0744(0x0004) (Edit)
	float                                              GearDownshiftRPM;                                         // 0x0748(0x0004) (Edit)
	float                                              GearUpshiftRPM;                                           // 0x074C(0x0004) (Edit)
	float                                              GearClutchDelayTime;                                      // 0x0750(0x0004) (Edit)
	float                                              GearReverseRatio;                                         // 0x0754(0x0004) (Edit)
	float                                              TopSpeed;                                                 // 0x0758(0x0004) (Edit)
	float                                              AerodynamicsAirDensity;                                   // 0x075C(0x0004) (Edit)
	float                                              AerodynamicsFrontalArea;                                  // 0x0760(0x0004) (Edit)
	float                                              AerodynamicsDragCoeff;                                    // 0x0764(0x0004) (Edit)
	float                                              AerodynamicsLiftCoeff;                                    // 0x0768(0x0004) (Edit)
	struct FStruct_Vector                              ExtraGravity;                                             // 0x076C(0x000C) (Edit)
	float                                              SpinDamping;                                              // 0x0778(0x0004) (Edit)
	float                                              CollisionSpinDamping;                                     // 0x077C(0x0004) (Edit)
	float                                              CollisionThreshold;                                       // 0x0780(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      DestroyEffectClass;                                       // 0x0784(0x0004) (Edit)
	unsigned long                                      bGetOut : 1;                                              // 0x0788(0x0004)
	class AClass_Object_Actor_HavokVehicleFactory*     ParentFactory;                                            // 0x078C(0x0004)
	class AClass_Object_Actor_Projector_ShadowProjector* VehicleShadow;                                            // 0x0790(0x0004)
	struct FStruct_HavokCarState                       CarState;                                                 // 0x0794(0x004C) (Net)
	unsigned long                                      bNewCarState : 1;                                         // 0x07E0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.HavokVehicle");
		return ptr;
	}


	bool Function_SpecialCalcView_SpecialCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	bool Function_EncroachingOn_EncroachingOn_EncroachingOn(class AClass_Object_Actor* Other);
	void Function_Tick_Tick(float DeltaSeconds);
	void Function_Destroyed_Destroyed_Destroyed();
	bool Function_DriverLeave(bool bForceLeave);
	void Function_ClientDriverLeave(class AClass_Object_Actor_Controller_PlayerController* PC);
	void Function_DriverEnter(class AClass_Object_Actor_Pawn* p);
	void Function_ClientDriverEnter(class AClass_Object_Actor_Controller_PlayerController* PC);
	void Function_TryToDrive(class AClass_Object_Actor_Pawn* p);
	bool Function_HavokUpdateState_HavokUpdateState(struct FStruct_HavokRigidBodyState* NewState);
	void Function_HavokVehicleHasChanged();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_RemakeVehicle();
	void Function_UpdateVehicle(float DeltaTime);
	void Function_HavokVehicleStateReceived();
	void Function_FaceRotation_FaceRotation(const struct FStruct_Rotator& NewRotation, float DeltaTime);
	void Function_EncroachedBy_EncroachedBy_EncroachedBy(class AClass_Object_Actor* Other);
	void Function_PostTakeDamage_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_GraphData(const struct FString& DataName, float DataValue);
};


// Class Object.HavokObject.HavokSkeletalSystem
// 0x0030 (0x005C - 0x002C)
class UClass_Object_HavokObject_HavokSkeletalSystem : public UClass_Object_HavokObject
{
public:
	int                                                RigidBodySystemNumber;                                    // 0x002C(0x0004) (Const, Transient)
	int                                                RigidBodyRootBoneIndex;                                   // 0x0030(0x0004) (Const, Transient)
	int                                                RigidBodyLastBoneIndex;                                   // 0x0034(0x0004) (Const, Transient)
	int                                                CachedLastRigidBodyRootBoneIndex;                         // 0x0038(0x0004) (Const, Transient)
	unsigned long                                      useIntrusionDrivenUpdates : 1;                            // 0x003C(0x0004) (Edit, NoClear)
	int                                                hkPhantom;                                                // 0x0040(0x0004) (Const, Transient)
	struct FString                                     SkeletonPhysicsFile;                                      // 0x0044(0x000C) (Edit, NeedCtorLink, NoClear)
	unsigned long                                      hkActive : 1;                                             // 0x0050(0x0004) (Edit, NoClear)
	float                                              hkJointFriction;                                          // 0x0054(0x0004) (Edit, NoClear)
	float                                              TearOffImpulseScale;                                      // 0x0058(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokSkeletalSystem");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.HavokConstraint.HavokPrismaticConstraint
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_HavokActor_HavokConstraint_HavokPrismaticConstraint : public AClass_Object_Actor_HavokActor_HavokConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.HavokPrismaticConstraint");
		return ptr;
	}

};


// Class Object.HkMeshProxy
// 0x0058 (0x0080 - 0x0028)
class UClass_Object_HkMeshProxy : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0028(0x0058) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HkMeshProxy");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.HavokConstraint.HavokHingeConstraint
// 0x0024 (0x049C - 0x0478)
class AClass_Object_Actor_HavokActor_HavokConstraint_HavokHingeConstraint : public AClass_Object_Actor_HavokActor_HavokConstraint
{
public:
	TEnumAsByte<EHavokHingeType>                       hkHingeType;                                              // 0x0478(0x0001) (Edit)
	TEnumAsByte<EHavokHingeMotorType>                  hkHingeMotorType;                                         // 0x0479(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x047A(0x0002) MISSED OFFSET
	unsigned long                                      hkMotorActive : 1;                                        // 0x047C(0x0004) (Edit)
	float                                              hkDesiredAngVel;                                          // 0x0480(0x0004) (Edit)
	float                                              hkMaxForce;                                               // 0x0484(0x0004) (Edit)
	float                                              hkMotorDamping;                                           // 0x0488(0x0004) (Edit)
	float                                              hkDesiredAngleA;                                          // 0x048C(0x0004) (Edit)
	float                                              hkDesiredAngleB;                                          // 0x0490(0x0004) (Edit)
	unsigned long                                      hkUseDesiredAngleB : 1;                                   // 0x0494(0x0004) (Edit)
	float                                              hkCurrentAngle;                                           // 0x0498(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.HavokHingeConstraint");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.HavokConstraint.HavokConeLimitConstraint
// 0x0010 (0x0488 - 0x0478)
class AClass_Object_Actor_HavokActor_HavokConstraint_HavokConeLimitConstraint : public AClass_Object_Actor_HavokActor_HavokConstraint
{
public:
	float                                              hkHalfAngle;                                              // 0x0478(0x0004) (Edit)
	int                                                basisAIndex;                                              // 0x047C(0x0004) (Const, Transient)
	int                                                basisBIndex;                                              // 0x0480(0x0004) (Const, Transient)
	int                                                coneIndex;                                                // 0x0484(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.HavokConeLimitConstraint");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.HavokConstraint.HavokBSConstraint
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_HavokActor_HavokConstraint_HavokBSConstraint : public AClass_Object_Actor_HavokActor_HavokConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.HavokConstraint.HavokBSConstraint");
		return ptr;
	}

};


// Class Object.RenderConfig
// 0x00AC (0x00D4 - 0x0028)
class UClass_Object_RenderConfig : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0028(0x000C) MISSED OFFSET
	TEnumAsByte<ERenderDetailSetting>                  BumpmapDetail;                                            // 0x0034(0x0001) (Config)
	unsigned char                                      UnknownData01[0x2F];                                      // 0x0035(0x002F) MISSED OFFSET
	unsigned long                                      Allow20Shaders : 1;                                       // 0x0064(0x0004) (Config)
	TEnumAsByte<ERenderDetailSetting>                  DynamicShadowDetail;                                      // 0x0068(0x0001) (Config)
	TEnumAsByte<ERenderDetailSetting>                  FluidSurfaceDetail;                                       // 0x0069(0x0001) (Config)
	unsigned char                                      UnknownData02[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	unsigned long                                      DisableBspBumpDynamicSpecular : 1;                        // 0x006C(0x0004) (Config)
	unsigned long                                      UnknownData03 : 31;                                       // 0x006C(0x0001)
	unsigned long                                      DisableExtraAntiPortalClip : 1;                           // 0x0070(0x0004) (Config)
	TEnumAsByte<ERenderDetailSetting>                  GlowEffectDetail;                                         // 0x0074(0x0001) (Config)
	unsigned char                                      UnknownData04[0x4B];                                      // 0x0075(0x004B) MISSED OFFSET
	int                                                DisableTerrainMacro;                                      // 0x00C0(0x0004) (Config)
	int                                                DisableDecolayers;                                        // 0x00C4(0x0004) (Config)
	TEnumAsByte<ERenderDetailSetting>                  SkeletalLODLevel;                                         // 0x00C8(0x0001) (Config)
	TEnumAsByte<ERenderDetailSetting>                  TextureDetail;                                            // 0x00C9(0x0001) (Config)
	TEnumAsByte<ERenderDetailSetting>                  WorldDetail;                                              // 0x00CA(0x0001) (Config)
	TEnumAsByte<ERenderDetailSetting>                  FogDistance;                                              // 0x00CB(0x0001) (Config)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00CC(0x0008) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderConfig");
		return ptr;
	}

};


// Class Object.Actor.DecoVolumeObject
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_DecoVolumeObject : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DecoVolumeObject");
		return ptr;
	}

};


// Class Object.Actor.Keypoint
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Keypoint : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Keypoint");
		return ptr;
	}

};


// Class Object.Actor.Keypoint.DecorationList
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_Keypoint_DecorationList : public AClass_Object_Actor_Keypoint
{
public:
	TArray<struct FStruct_DecorationType>              Decorations;                                              // 0x0400(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Keypoint.DecorationList");
		return ptr;
	}

};


// Class Object.Primitive
// 0x002C (0x0054 - 0x0028)
class UClass_Object_Primitive : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0028(0x002C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive");
		return ptr;
	}

};


// Class Object.Primitive.MeshInstance
// 0x0000 (0x0054 - 0x0054)
class UClass_Object_Primitive_MeshInstance : public UClass_Object_Primitive
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.MeshInstance");
		return ptr;
	}

};


// Class Object.Primitive.MeshInstance.LodMeshInstance
// 0x0028 (0x007C - 0x0054)
class UClass_Object_Primitive_MeshInstance_LodMeshInstance : public UClass_Object_Primitive_MeshInstance
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0054(0x0028) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.MeshInstance.LodMeshInstance");
		return ptr;
	}

};


// Class Object.Primitive.MeshInstance.LodMeshInstance.VertMeshInstance
// 0x00CC (0x0148 - 0x007C)
class UClass_Object_Primitive_MeshInstance_LodMeshInstance_VertMeshInstance : public UClass_Object_Primitive_MeshInstance_LodMeshInstance
{
public:
	unsigned char                                      UnknownData00[0xCC];                                      // 0x007C(0x00CC) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.MeshInstance.LodMeshInstance.VertMeshInstance");
		return ptr;
	}

};


// Class Object.Primitive.Mesh
// 0x0004 (0x0058 - 0x0054)
class UClass_Object_Primitive_Mesh : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.Mesh");
		return ptr;
	}

};


// Class Object.Primitive.Mesh.LodMesh
// 0x00DC (0x0134 - 0x0058)
class UClass_Object_Primitive_Mesh_LodMesh : public UClass_Object_Primitive_Mesh
{
public:
	unsigned char                                      UnknownData00[0xDC];                                      // 0x0058(0x00DC) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.Mesh.LodMesh");
		return ptr;
	}

};


// Class Object.Primitive.Mesh.LodMesh.VertMesh
// 0x012C (0x0260 - 0x0134)
class UClass_Object_Primitive_Mesh_LodMesh_VertMesh : public UClass_Object_Primitive_Mesh_LodMesh
{
public:
	unsigned char                                      UnknownData00[0x12C];                                     // 0x0134(0x012C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.Mesh.LodMesh.VertMesh");
		return ptr;
	}

};


// Class Object.ParticleEmitter
// 0x0488 (0x04B0 - 0x0028)
class UClass_Object_ParticleEmitter : public UClass_Object
{
public:
	struct FStruct_Vector                              Acceleration;                                             // 0x0028(0x000C) (Edit)
	unsigned long                                      UseCollision : 1;                                         // 0x0034(0x0004) (Edit)
	struct FStruct_Vector                              ExtentMultiplier;                                         // 0x0038(0x000C) (Edit)
	struct FStruct_RangeVector                         DampingFactorRange;                                       // 0x0044(0x0018) (Edit)
	unsigned long                                      UseCollisionPlanes : 1;                                   // 0x005C(0x0004) (Edit)
	TArray<struct FStruct_Vector_Plane>                CollisionPlanes;                                          // 0x0060(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      UseMaxCollisions : 1;                                     // 0x006C(0x0004) (Edit)
	struct FStruct_Range                               MaxCollisions;                                            // 0x0070(0x0008) (Edit)
	int                                                SpawnFromOtherEmitter;                                    // 0x0078(0x0004) (Edit)
	int                                                SpawnAmount;                                              // 0x007C(0x0004) (Edit)
	struct FStruct_RangeVector                         SpawnedVelocityScaleRange;                                // 0x0080(0x0018) (Edit)
	unsigned long                                      UseSpawnedVelocityScale : 1;                              // 0x0098(0x0004) (Edit)
	unsigned long                                      UseColorScale : 1;                                        // 0x0098(0x0004) (Edit)
	TArray<struct FStruct_ParticleColorScale>          ColorScale;                                               // 0x009C(0x000C) (Edit, NeedCtorLink)
	float                                              ColorScaleRepeats;                                        // 0x00A8(0x0004) (Edit)
	struct FStruct_RangeVector                         ColorMultiplierRange;                                     // 0x00AC(0x0018) (Edit)
	struct FStruct_Vector_Plane                        FadeOutFactor;                                            // 0x00C4(0x0010) (Edit)
	float                                              FadeOutStartTime;                                         // 0x00D4(0x0004) (Edit)
	unsigned long                                      FadeOut : 1;                                              // 0x00D8(0x0004) (Edit)
	struct FStruct_Vector_Plane                        FadeInFactor;                                             // 0x00DC(0x0010) (Edit)
	float                                              FadeInEndTime;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      FadeIn : 1;                                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      UseActorForces : 1;                                       // 0x00F0(0x0004) (Edit)
	TEnumAsByte<EParticleCoordinateSystem>             CoordinateSystem;                                         // 0x00F4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	int                                                MaxParticles;                                             // 0x00F8(0x0004) (Edit, Const)
	unsigned long                                      ResetAfterChange : 1;                                     // 0x00FC(0x0004) (Edit)
	TEnumAsByte<EParticleEffectAxis>                   EffectAxis;                                               // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	unsigned long                                      RespawnDeadParticles : 1;                                 // 0x0104(0x0004) (Edit)
	unsigned long                                      AutoDestroy : 1;                                          // 0x0104(0x0004) (Edit)
	unsigned long                                      AutoReset : 1;                                            // 0x0104(0x0004) (Edit)
	unsigned long                                      Disabled : 1;                                             // 0x0104(0x0004) (Edit)
	unsigned long                                      DisableFogging : 1;                                       // 0x0104(0x0004) (Edit)
	struct FStruct_Range                               AutoResetTimeRange;                                       // 0x0108(0x0008) (Edit)
	struct FString                                     Name;                                                     // 0x0110(0x000C) (Edit, NeedCtorLink)
	struct FStruct_Vector                              StartLocationOffset;                                      // 0x011C(0x000C) (Edit)
	struct FStruct_RangeVector                         StartLocationRange;                                       // 0x0128(0x0018) (Edit)
	int                                                AddLocationFromOtherEmitter;                              // 0x0140(0x0004) (Edit)
	TEnumAsByte<EParticleStartLocationShape>           StartLocationShape;                                       // 0x0144(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	struct FStruct_Range                               SphereRadiusRange;                                        // 0x0148(0x0008) (Edit)
	struct FStruct_RangeVector                         StartLocationPolarRange;                                  // 0x0150(0x0018) (Edit)
	struct FStruct_Range                               StartMassRange;                                           // 0x0168(0x0008) (Edit)
	class UClass_Object_Primitive_StaticMesh*          MeshSpawningStaticMesh;                                   // 0x0170(0x0004) (Edit)
	TEnumAsByte<EParticleMeshSpawning>                 MeshSpawning;                                             // 0x0174(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0175(0x0003) MISSED OFFSET
	unsigned long                                      VelocityFromMesh : 1;                                     // 0x0178(0x0004) (Edit)
	struct FStruct_RangeVector                         VelocityScaleRange;                                       // 0x017C(0x0018) (Edit)
	struct FStruct_RangeVector                         MeshScaleRange;                                           // 0x0194(0x0018) (Edit)
	unsigned long                                      UniformMeshScale : 1;                                     // 0x01AC(0x0004) (Edit)
	unsigned long                                      UniformVelocityScale : 1;                                 // 0x01AC(0x0004) (Edit)
	unsigned long                                      UseColorFromMesh : 1;                                     // 0x01AC(0x0004) (Edit)
	unsigned long                                      SpawnOnlyInDirectionOfNormal : 1;                         // 0x01AC(0x0004) (Edit)
	struct FStruct_Vector                              MeshNormal;                                               // 0x01B0(0x000C) (Edit)
	struct FStruct_Range                               MeshNormalThresholdRange;                                 // 0x01BC(0x0008) (Edit)
	int                                                AlphaRef;                                                 // 0x01C4(0x0004) (Edit)
	unsigned long                                      AlphaTest : 1;                                            // 0x01C8(0x0004) (Edit)
	unsigned long                                      AcceptsProjectors : 1;                                    // 0x01C8(0x0004) (Edit)
	unsigned long                                      ZTest : 1;                                                // 0x01C8(0x0004) (Edit)
	unsigned long                                      ZWrite : 1;                                               // 0x01C8(0x0004) (Edit)
	unsigned long                                      UseRevolution : 1;                                        // 0x01C8(0x0004) (Edit)
	struct FStruct_RangeVector                         RevolutionCenterOffsetRange;                              // 0x01CC(0x0018) (Edit)
	struct FStruct_RangeVector                         RevolutionsPerSecondRange;                                // 0x01E4(0x0018) (Edit)
	unsigned long                                      UseRevolutionScale : 1;                                   // 0x01FC(0x0004) (Edit)
	TArray<struct FStruct_ParticleRevolutionScale>     RevolutionScale;                                          // 0x0200(0x000C) (Edit, NeedCtorLink)
	float                                              RevolutionScaleRepeats;                                   // 0x020C(0x0004) (Edit)
	TEnumAsByte<EParticleRotationSource>               UseRotationFrom;                                          // 0x0210(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	unsigned long                                      SpinParticles : 1;                                        // 0x0214(0x0004) (Edit)
	struct FStruct_Rotator                             RotationOffset;                                           // 0x0218(0x000C) (Edit)
	struct FStruct_Vector                              SpinCCWorCW;                                              // 0x0224(0x000C) (Edit)
	struct FStruct_RangeVector                         SpinsPerSecondRange;                                      // 0x0230(0x0018) (Edit)
	struct FStruct_RangeVector                         StartSpinRange;                                           // 0x0248(0x0018) (Edit)
	unsigned long                                      DampRotation : 1;                                         // 0x0260(0x0004) (Edit)
	struct FStruct_RangeVector                         RotationDampingFactorRange;                               // 0x0264(0x0018) (Edit)
	struct FStruct_Vector                              RotationNormal;                                           // 0x027C(0x000C) (Edit)
	unsigned long                                      UseSizeScale : 1;                                         // 0x0288(0x0004) (Edit)
	unsigned long                                      UseRegularSizeScale : 1;                                  // 0x0288(0x0004) (Edit)
	TArray<struct FStruct_ParticleTimeScale>           SizeScale;                                                // 0x028C(0x000C) (Edit, NeedCtorLink)
	float                                              SizeScaleRepeats;                                         // 0x0298(0x0004) (Edit)
	struct FStruct_RangeVector                         StartSizeRange;                                           // 0x029C(0x0018) (Edit)
	unsigned long                                      UniformSize : 1;                                          // 0x02B4(0x0004) (Edit)
	TEnumAsByte<ESkelLocationUpdate>                   UseSkeletalLocationAs;                                    // 0x02B8(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x02B9(0x0003) MISSED OFFSET
	class AClass_Object_Actor*                         SkeletalMeshActor;                                        // 0x02BC(0x0004) (Edit)
	struct FStruct_Vector                              SkeletalScale;                                            // 0x02C0(0x000C) (Edit)
	struct FStruct_Range                               RelativeBoneIndexRange;                                   // 0x02CC(0x0008) (Edit)
	TArray<struct FStruct_ParticleSound>               Sounds;                                                   // 0x02D4(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EParticleCollisionSound>               SpawningSound;                                            // 0x02E0(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x02E1(0x0003) MISSED OFFSET
	struct FStruct_Range                               SpawningSoundIndex;                                       // 0x02E4(0x0008) (Edit)
	struct FStruct_Range                               SpawningSoundProbability;                                 // 0x02EC(0x0008) (Edit)
	TEnumAsByte<EParticleCollisionSound>               CollisionSound;                                           // 0x02F4(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET
	struct FStruct_Range                               CollisionSoundIndex;                                      // 0x02F8(0x0008) (Edit)
	struct FStruct_Range                               CollisionSoundProbability;                                // 0x0300(0x0008) (Edit)
	float                                              ParticlesPerSecond;                                       // 0x0308(0x0004) (Edit)
	float                                              InitialParticlesPerSecond;                                // 0x030C(0x0004) (Edit)
	unsigned long                                      AutomaticInitialSpawning : 1;                             // 0x0310(0x0004) (Edit)
	unsigned long                                      ForceMinimumOneFrameLifetime : 1;                         // 0x0310(0x0004) (Edit)
	TEnumAsByte<EParticleDrawStyle>                    DrawStyle;                                                // 0x0314(0x0001) (Edit)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Texture;                                                  // 0x0318(0x0004) (Edit)
	int                                                TextureUSubdivisions;                                     // 0x031C(0x0004) (Edit)
	int                                                TextureVSubdivisions;                                     // 0x0320(0x0004) (Edit)
	unsigned long                                      BlendBetweenSubdivisions : 1;                             // 0x0324(0x0004) (Edit)
	unsigned long                                      UseSubdivisionScale : 1;                                  // 0x0324(0x0004) (Edit)
	TArray<float>                                      SubdivisionScale;                                         // 0x0328(0x000C) (Edit, NeedCtorLink)
	int                                                SubdivisionStart;                                         // 0x0334(0x0004) (Edit)
	int                                                SubdivisionEnd;                                           // 0x0338(0x0004) (Edit)
	unsigned long                                      UseRandomSubdivision : 1;                                 // 0x033C(0x0004) (Edit)
	float                                              SecondsBeforeInactive;                                    // 0x0340(0x0004) (Edit)
	float                                              MinSquaredVelocity;                                       // 0x0344(0x0004) (Edit)
	struct FStruct_Range                               InitialTimeRange;                                         // 0x0348(0x0008) (Edit)
	struct FStruct_Range                               LifetimeRange;                                            // 0x0350(0x0008) (Edit)
	struct FStruct_Range                               InitialDelayRange;                                        // 0x0358(0x0008) (Edit)
	unsigned long                                      TriggerDisabled : 1;                                      // 0x0360(0x0004) (Edit)
	unsigned long                                      ResetOnTrigger : 1;                                       // 0x0360(0x0004) (Edit)
	struct FStruct_Range                               SpawnOnTriggerRange;                                      // 0x0364(0x0008) (Edit)
	float                                              SpawnOnTriggerPPS;                                        // 0x036C(0x0004) (Edit)
	struct FStruct_RangeVector                         StartVelocityRange;                                       // 0x0370(0x0018) (Edit)
	struct FStruct_Range                               StartVelocityRadialRange;                                 // 0x0388(0x0008) (Edit)
	struct FStruct_Vector                              MaxAbsVelocity;                                           // 0x0390(0x000C) (Edit)
	struct FStruct_RangeVector                         VelocityLossRange;                                        // 0x039C(0x0018) (Edit)
	int                                                AddVelocityFromOtherEmitter;                              // 0x03B4(0x0004) (Edit)
	struct FStruct_RangeVector                         AddVelocityMultiplierRange;                               // 0x03B8(0x0018) (Edit)
	TEnumAsByte<EParticleVelocityDirection>            GetVelocityDirectionFrom;                                 // 0x03D0(0x0001) (Edit)
	unsigned char                                      UnknownData09[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	unsigned long                                      UseVelocityScale : 1;                                     // 0x03D4(0x0004) (Edit)
	unsigned long                                      InheritOwnersVelocity : 1;                                // 0x03D4(0x0004) (Edit)
	TArray<struct FStruct_ParticleVelocityScale>       VelocityScale;                                            // 0x03D8(0x000C) (Edit, NeedCtorLink)
	float                                              VelocityScaleRepeats;                                     // 0x03E4(0x0004) (Edit)
	float                                              WarmupTicksPerSecond;                                     // 0x03E8(0x0004) (Edit)
	float                                              RelativeWarmupTime;                                       // 0x03EC(0x0004) (Edit)
	class AClass_Object_Actor_Emitter*                 Owner;                                                    // 0x03F0(0x0004) (Transient)
	unsigned long                                      Initialized : 1;                                          // 0x03F4(0x0004) (Transient)
	unsigned long                                      Inactive : 1;                                             // 0x03F4(0x0004) (Transient)
	float                                              InactiveTime;                                             // 0x03F8(0x0004) (Transient)
	TArray<struct FStruct_Particle>                    Particles;                                                // 0x03FC(0x000C) (Transient, NeedCtorLink)
	int                                                ParticleIndex;                                            // 0x0408(0x0004) (Transient)
	int                                                ActiveParticles;                                          // 0x040C(0x0004) (Transient)
	float                                              PPSFraction;                                              // 0x0410(0x0004) (Transient)
	struct FStruct_Box                                 BoundingBox;                                              // 0x0414(0x001C) (Transient)
	struct FStruct_Vector                              RealExtentMultiplier;                                     // 0x0430(0x000C) (Transient)
	unsigned long                                      RealDisableFogging : 1;                                   // 0x043C(0x0004) (Transient)
	unsigned long                                      AllParticlesDead : 1;                                     // 0x043C(0x0004) (Transient)
	unsigned long                                      WarmedUp : 1;                                             // 0x043C(0x0004) (Transient)
	int                                                OtherIndex;                                               // 0x0440(0x0004) (Transient)
	float                                              InitialDelay;                                             // 0x0444(0x0004) (Transient)
	struct FStruct_Vector                              GlobalOffset;                                             // 0x0448(0x000C) (Transient)
	float                                              TimeTillReset;                                            // 0x0454(0x0004) (Transient)
	int                                                PS2Data;                                                  // 0x0458(0x0004) (Transient)
	int                                                MaxActiveParticles;                                       // 0x045C(0x0004) (Transient)
	int                                                CurrentCollisionSoundIndex;                               // 0x0460(0x0004) (Transient)
	int                                                CurrentSpawningSoundIndex;                                // 0x0464(0x0004) (Transient)
	int                                                CurrentMeshSpawningIndex;                                 // 0x0468(0x0004) (Transient)
	float                                              MaxSizeScale;                                             // 0x046C(0x0004) (Transient)
	int                                                KillPending;                                              // 0x0470(0x0004) (Transient)
	int                                                DeferredParticles;                                        // 0x0474(0x0004) (Transient)
	struct FStruct_Vector                              RealMeshNormal;                                           // 0x0478(0x000C) (Transient)
	TArray<struct FStruct_Vector>                      MeshVertsAndNormals;                                      // 0x0484(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentSpawnOnTrigger;                                    // 0x0490(0x0004) (Transient)
	int                                                RenderableParticles;                                      // 0x0494(0x0004) (Transient)
	struct FStruct_RangeVector                         RealVelocityLossRange;                                    // 0x0498(0x0018) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter");
		return ptr;
	}


	void Function_ResetParticles();
	void Function_Trigger();
	void Function_SpawnParticle(int Amount);
};


// Class Object.ParticleEmitter.TrailEmitter
// 0x003C (0x04EC - 0x04B0)
class UClass_Object_ParticleEmitter_TrailEmitter : public UClass_Object_ParticleEmitter
{
public:
	int                                                MaxPointsPerTrail;                                        // 0x04B0(0x0004) (Edit)
	float                                              DistanceThreshold;                                        // 0x04B4(0x0004) (Edit)
	unsigned long                                      UseCrossedSheets : 1;                                     // 0x04B8(0x0004) (Edit)
	int                                                MaxTrailTwistAngle;                                       // 0x04BC(0x0004) (Edit)
	TArray<struct FStruct_ParticleTrailData>           TrailData;                                                // 0x04C0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FStruct_ParticleTrailInfo>           TrailInfo;                                                // 0x04CC(0x000C) (Transient, NeedCtorLink)
	class UClass_Object_RenderResource_VertexStreamBase_VertexBuffer* VertexBuffer;                                             // 0x04D8(0x0004) (Transient)
	class UClass_Object_RenderResource_VertexStreamBase_IndexBuffer* IndexBuffer;                                              // 0x04DC(0x0004) (Transient)
	int                                                VerticesPerParticle;                                      // 0x04E0(0x0004) (Transient)
	int                                                IndicesPerParticle;                                       // 0x04E4(0x0004) (Transient)
	int                                                PrimitivesPerParticle;                                    // 0x04E8(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter.TrailEmitter");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Material_RenderedMaterial : public UClass_Object_Material
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.BitmapMaterial
// 0x0018 (0x0058 - 0x0040)
class UClass_Object_Material_RenderedMaterial_BitmapMaterial : public UClass_Object_Material_RenderedMaterial
{
public:
	TEnumAsByte<ETextureFormat>                        Format;                                                   // 0x0040(0x0001) (Edit, Const, EditConst)
	TEnumAsByte<ETexClampMode>                         UClampMode;                                               // 0x0041(0x0001) (Edit)
	TEnumAsByte<ETexClampMode>                         VClampMode;                                               // 0x0042(0x0001) (Edit)
	unsigned char                                      UBits;                                                    // 0x0043(0x0001) (Const)
	unsigned char                                      VBits;                                                    // 0x0044(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	int                                                USize;                                                    // 0x0048(0x0004) (Const)
	int                                                VSize;                                                    // 0x004C(0x0004) (Const)
	int                                                UClamp;                                                   // 0x0050(0x0004) (Edit, Const)
	int                                                VClamp;                                                   // 0x0054(0x0004) (Edit, Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.BitmapMaterial");
		return ptr;
	}


	int Function_GetVSize_GetVSize();
	int Function_GetUSize_GetUSize();
};


// Class Object.Material.RenderedMaterial.BitmapMaterial.Texture
// 0x0074 (0x00CC - 0x0058)
class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture : public UClass_Object_Material_RenderedMaterial_BitmapMaterial
{
public:
	class UClass_Object_Palette*                       Palette;                                                  // 0x0058(0x0004) (Edit)
	class UClass_Object_Material*                      Detail;                                                   // 0x005C(0x0004) (Edit)
	float                                              DetailScale;                                              // 0x0060(0x0004) (Edit)
	struct FStruct_Color                               MipZero;                                                  // 0x0064(0x0004) (Const)
	struct FStruct_Color                               MaxColor;                                                 // 0x0068(0x0004) (Const)
	int                                                InternalTime[0x2];                                        // 0x006C(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* DetailTexture;                                            // 0x0074(0x0004) (Deprecated)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* EnvironmentMap;                                           // 0x0078(0x0004) (Deprecated)
	TEnumAsByte<EEnvMapTransformType>                  EnvMapTransformType;                                      // 0x007C(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              Specular;                                                 // 0x0080(0x0004) (Deprecated)
	unsigned long                                      bMasked : 1;                                              // 0x0084(0x0004) (Edit)
	unsigned long                                      bAlphaTexture : 1;                                        // 0x0084(0x0004) (Edit)
	unsigned long                                      bTwoSided : 1;                                            // 0x0084(0x0004) (Edit)
	unsigned long                                      bHighColorQuality : 1;                                    // 0x0084(0x0004) (Edit)
	unsigned long                                      bHighTextureQuality : 1;                                  // 0x0084(0x0004) (Edit)
	unsigned long                                      bRealtime : 1;                                            // 0x0084(0x0004)
	unsigned long                                      bParametric : 1;                                          // 0x0084(0x0004)
	unsigned long                                      bRealtimeChanged : 1;                                     // 0x0084(0x0004) (Transient)
	unsigned long                                      bHasComp : 1;                                             // 0x0084(0x0004) (Const, EditConst)
	TEnumAsByte<ELODSet>                               LODSet;                                                   // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	int                                                NormalLOD;                                                // 0x008C(0x0004) (Edit)
	int                                                MinLOD;                                                   // 0x0090(0x0004)
	int                                                MaxLOD;                                                   // 0x0094(0x0004) (Transient)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* AnimNext;                                                 // 0x0098(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* AnimCurrent;                                              // 0x009C(0x0004) (Transient)
	unsigned char                                      PrimeCount;                                               // 0x00A0(0x0001) (Edit)
	unsigned char                                      PrimeCurrent;                                             // 0x00A1(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00A2(0x0002) MISSED OFFSET
	float                                              MinFrameRate;                                             // 0x00A4(0x0004) (Edit)
	float                                              MaxFrameRate;                                             // 0x00A8(0x0004) (Edit)
	float                                              Accumulator;                                              // 0x00AC(0x0004) (Transient)
	TArray<int>                                        Mips;                                                     // 0x00B0(0x000C) (Const, Native)
	TEnumAsByte<ETextureFormat>                        CompFormat;                                               // 0x00BC(0x0001) (Const, EditConst)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                RenderInterface;                                          // 0x00C0(0x0004) (Const, Transient)
	int                                                __LastUpdateTime[0x2];                                    // 0x00C4(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.BitmapMaterial.Texture");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.BitmapMaterial.Texture.Cubemap
// 0x001C (0x00E8 - 0x00CC)
class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture_Cubemap : public UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture
{
public:
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Faces[0x6];                                               // 0x00CC(0x0004) (Edit)
	int                                                CubemapRenderInterface;                                   // 0x00E4(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.BitmapMaterial.Texture.Cubemap");
		return ptr;
	}

};


// Class Object.Palette
// 0x000C (0x0034 - 0x0028)
class UClass_Object_Palette : public UClass_Object
{
public:
	TArray<struct FStruct_Color>                       Colors;                                                   // 0x0028(0x000C) (Const, Native)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Palette");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.TerrainMaterial
// 0x005C (0x009C - 0x0040)
class UClass_Object_Material_RenderedMaterial_TerrainMaterial : public UClass_Object_Material_RenderedMaterial
{
public:
	TArray<struct FStruct_TerrainMaterialLayer>        Layers;                                                   // 0x0040(0x000C) (Const, NeedCtorLink)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* MacroTexture;                                             // 0x004C(0x0004) (Const)
	struct FStruct_Matrix                              MacroTextureTransform;                                    // 0x0050(0x0040) (Const)
	unsigned long                                      ForceFogOverride : 1;                                     // 0x0090(0x0004) (Const)
	unsigned long                                      DisableLayer2xModulate : 1;                               // 0x0090(0x0004) (Const)
	unsigned char                                      RenderMethod;                                             // 0x0094(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	unsigned long                                      FirstPass : 1;                                            // 0x0098(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.TerrainMaterial");
		return ptr;
	}

};


// Class Object.Actor.Info.TerrainInfo
// 0x1108 (0x1508 - 0x0400)
class AClass_Object_Actor_Info_TerrainInfo : public AClass_Object_Actor_Info
{
public:
	int                                                TerrainSectorSize;                                        // 0x0400(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* TerrainMap;                                               // 0x0404(0x0004) (Edit)
	struct FStruct_Vector                              TerrainScale;                                             // 0x0408(0x000C) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* MacroTexture;                                             // 0x0414(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* FinalisedMacroTexture;                                    // 0x0418(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* RenderMacroTexture;                                       // 0x041C(0x0004) (Const)
	struct FStruct_Matrix                              MacroTextureTransform;                                    // 0x0420(0x0040) (Const, Native)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* LightmapTexture;                                          // 0x0460(0x0004) (Const)
	int                                                BuiltCurrentLightmap;                                     // 0x0464(0x0004) (Const)
	struct FStruct_TerrainLayer                        Layers[0x20];                                             // 0x0468(0x0078) (Edit)
	TArray<struct FStruct_DecorationLayer>             DecoLayers;                                               // 0x1368(0x000C) (Edit, NeedCtorLink)
	float                                              DecoLayerOffset;                                          // 0x1374(0x0004) (Edit)
	unsigned long                                      Inverted : 1;                                             // 0x1378(0x0004) (Edit)
	unsigned long                                      AlwaysVisible : 1;                                        // 0x1378(0x0004) (Edit)
	unsigned long                                      TileTerrain : 1;                                          // 0x1378(0x0004) (Edit)
	unsigned long                                      bDisableRebuildOnEdit : 1;                                // 0x1378(0x0004) (Edit, Transient)
	unsigned long                                      bKCollisionHalfRes : 1;                                   // 0x1378(0x0004) (Edit)
	int                                                JustLoaded;                                               // 0x137C(0x0004) (Transient)
	TArray<struct FStruct_DecorationLayerData>         DecoLayerData;                                            // 0x1380(0x000C) (Const, Native)
	TArray<class UClass_Object_TerrainSector*>         Sectors;                                                  // 0x138C(0x000C) (Const, Native)
	TArray<struct FStruct_Vector>                      Vertices;                                                 // 0x1398(0x000C) (Const, Native)
	int                                                HeightmapX;                                               // 0x13A4(0x0004) (Const, Native)
	int                                                HeightmapY;                                               // 0x13A8(0x0004) (Const, Native)
	int                                                SectorsX;                                                 // 0x13AC(0x0004) (Const, Native)
	int                                                SectorsY;                                                 // 0x13B0(0x0004) (Const, Native)
	class UClass_Object_Primitive_TerrainPrimitive*    Primitive;                                                // 0x13B4(0x0004) (Const, Native)
	TArray<struct FStruct_NormalPair>                  FaceNormals;                                              // 0x13B8(0x000C) (Const, Native)
	struct FStruct_Vector                              ToWorld[0x4];                                             // 0x13C4(0x000C) (Const, Native)
	struct FStruct_Vector                              ToHeightmap[0x4];                                         // 0x13F4(0x000C) (Const, Native)
	struct FStruct_Vector                              ToMacro[0x4];                                             // 0x1424(0x000C) (Const, Native)
	TArray<int>                                        SelectedVertices;                                         // 0x1454(0x000C) (Const, Native)
	int                                                ShowGrid;                                                 // 0x1460(0x0004) (Const, Native)
	TArray<int>                                        QuadVisibilityBitmap;                                     // 0x1464(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        EdgeTurnBitmap;                                           // 0x1470(0x000C) (Const, NeedCtorLink)
	TArray<class UClass_Object_Material*>              QuadDomMaterialBitmap;                                    // 0x147C(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        RenderCombinations;                                       // 0x1488(0x000C) (Const, Native)
	TArray<int>                                        VertexStreams;                                            // 0x1494(0x000C) (Const, Native)
	TArray<int>                                        ColorStreams;                                             // 0x14A0(0x000C) (Const, Native)
	TArray<struct FStruct_Color>                       VertexColors;                                             // 0x14AC(0x000C) (Const, Native)
	TArray<struct FStruct_Color>                       PaintedColor;                                             // 0x14B8(0x000C) (Const, Native)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* CollapsedLayers;                                          // 0x14C4(0x0004) (Const, Native)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* OldTerrainMap;                                            // 0x14C8(0x0004) (Const, Native)
	TArray<unsigned char>                              OldHeightmap;                                             // 0x14CC(0x000C) (Const, Native)
	int                                                DecolayerRenderer;                                        // 0x14D8(0x0004) (Const, Native)
	int                                                QuadTree;                                                 // 0x14DC(0x0004) (Const, Native)
	class UClass_Object*                               FinalisedData;                                            // 0x14E0(0x0004) (Const, Native)
	int                                                ActiveHardwareData;                                       // 0x14E4(0x0004) (Const, Native)
	TArray<int>                                        HardwareIndexBuffers;                                     // 0x14E8(0x000C) (Const, Native)
	int                                                VisibleSectorsCount;                                      // 0x14F4(0x0004) (Const, Native)
	int                                                RenderThingsCount;                                        // 0x14F8(0x0004) (Const, Native)
	int                                                VisibleSectors;                                           // 0x14FC(0x0004) (Const, Native)
	int                                                SectorProjectors;                                         // 0x1500(0x0004) (Const, Native)
	int                                                RenderThings;                                             // 0x1504(0x0004) (Const, Native)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.TerrainInfo");
		return ptr;
	}


	bool Function_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
};


// Class Object.Primitive.TerrainPrimitive
// 0x0004 (0x0058 - 0x0054)
class UClass_Object_Primitive_TerrainPrimitive : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.TerrainPrimitive");
		return ptr;
	}

};


// Class Object.TerrainSector
// 0x00AC (0x00D4 - 0x0028)
class UClass_Object_TerrainSector : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0xAC];                                      // 0x0028(0x00AC) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TerrainSector");
		return ptr;
	}

};


// Class Object.SVehicleWheel
// 0x00C8 (0x00F0 - 0x0028)
class UClass_Object_SVehicleWheel : public UClass_Object
{
public:
	float                                              Steer;                                                    // 0x0028(0x0004) (Edit)
	float                                              DriveForce;                                               // 0x002C(0x0004) (Edit)
	float                                              LongFriction;                                             // 0x0030(0x0004) (Edit)
	float                                              LatFriction;                                              // 0x0034(0x0004) (Edit)
	float                                              LongSlip;                                                 // 0x0038(0x0004) (Edit)
	float                                              LatSlip;                                                  // 0x003C(0x0004) (Edit)
	float                                              ChassisTorque;                                            // 0x0040(0x0004) (Edit)
	float                                              TrackVel;                                                 // 0x0044(0x0004) (Edit)
	unsigned long                                      bPoweredWheel : 1;                                        // 0x0048(0x0004) (Edit)
	unsigned long                                      bHandbrakeWheel : 1;                                      // 0x0048(0x0004) (Edit)
	unsigned long                                      bTrackWheel : 1;                                          // 0x0048(0x0004) (Edit)
	TEnumAsByte<ESteerType>                            SteerType;                                                // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x0050(0x0004) (Edit)
	struct FStruct_Vector                              BoneOffset;                                               // 0x0054(0x000C) (Edit)
	float                                              WheelRadius;                                              // 0x0060(0x0004) (Edit)
	float                                              Softness;                                                 // 0x0064(0x0004) (Edit)
	float                                              PenScale;                                                 // 0x0068(0x0004) (Edit)
	float                                              Restitution;                                              // 0x006C(0x0004) (Edit)
	float                                              Adhesion;                                                 // 0x0070(0x0004) (Edit)
	float                                              WheelInertia;                                             // 0x0074(0x0004) (Edit)
	float                                              SuspensionTravel;                                         // 0x0078(0x0004) (Edit)
	float                                              SuspensionOffset;                                         // 0x007C(0x0004) (Edit)
	float                                              HandbrakeSlipFactor;                                      // 0x0080(0x0004) (Edit)
	float                                              HandbrakeFrictionFactor;                                  // 0x0084(0x0004) (Edit)
	struct FName                                       SupportBoneName;                                          // 0x0088(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 SupportBoneAxis;                                          // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FStruct_InterpCurve                         LongFrictionFunc;                                         // 0x0090(0x000C) (Edit, NeedCtorLink)
	struct FStruct_InterpCurve                         LatSlipFunc;                                              // 0x009C(0x000C) (Edit, NeedCtorLink)
	struct FStruct_Vector                              WheelPosition;                                            // 0x00A8(0x000C)
	float                                              SupportPivotDistance;                                     // 0x00B4(0x0004)
	unsigned long                                      bWheelOnGround : 1;                                       // 0x00B8(0x0004)
	float                                              TireLoad;                                                 // 0x00BC(0x0004)
	struct FStruct_Vector                              WheelDir;                                                 // 0x00C0(0x000C)
	struct FStruct_Vector                              WheelAxle;                                                // 0x00CC(0x000C)
	float                                              SpinVel;                                                  // 0x00D8(0x0004)
	float                                              SlipAngle;                                                // 0x00DC(0x0004)
	float                                              SlipVel;                                                  // 0x00E0(0x0004)
	float                                              SuspensionPosition;                                       // 0x00E4(0x0004)
	float                                              CurrentRotation;                                          // 0x00E8(0x0004)
	int                                                KContact;                                                 // 0x00EC(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SVehicleWheel");
		return ptr;
	}

};


// Class Object.Actor.Pawn.SVehicle
// 0x0000 (0x0670 - 0x0670)
class AClass_Object_Actor_Pawn_SVehicle : public AClass_Object_Actor_Pawn
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.SVehicle");
		return ptr;
	}

};


// Class Object.Actor.StaticMeshActor
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_StaticMeshActor : public AClass_Object_Actor
{
public:
	unsigned long                                      bExactProjectileCollision : 1;                            // 0x0400(0x0004) (Edit)
	unsigned long                                      bIncludeInGroundNavigation : 1;                           // 0x0400(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.StaticMeshActor");
		return ptr;
	}

};


// Class Object.Primitive.StaticMeshInstance
// 0x003C (0x0090 - 0x0054)
class UClass_Object_Primitive_StaticMeshInstance : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0054(0x003C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.StaticMeshInstance");
		return ptr;
	}

};


// Class Object.Primitive.StaticMesh
// 0x0160 (0x01B4 - 0x0054)
class UClass_Object_Primitive_StaticMesh : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0054(0x00B0) MISSED OFFSET
	TArray<struct FStruct_StaticMeshMaterial>          Materials;                                                // 0x0104(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0110(0x001C) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                               // 0x012C(0x0004) (Edit)
	unsigned long                                      UnknownData02 : 31;                                       // 0x012C(0x0001)
	unsigned long                                      UseSimpleBoxCollision : 1;                                // 0x0130(0x0004) (Edit)
	unsigned long                                      UnknownData03 : 31;                                       // 0x0130(0x0001)
	unsigned long                                      UseVertexColor : 1;                                       // 0x0134(0x0004) (Edit)
	unsigned long                                      UnknownData04 : 31;                                       // 0x0134(0x0001)
	unsigned long                                      UseSimpleKarmaCollision : 1;                              // 0x0138(0x0004) (Edit)
	TEnumAsByte<EHavokCollisionType>                   HavokCollisionTypeStatic;                                 // 0x013C(0x0001) (Edit)
	TEnumAsByte<EHavokCollisionType>                   HavokCollisionTypeDynamic;                                // 0x013D(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x2];                                       // 0x013E(0x0002) MISSED OFFSET
	unsigned long                                      CastVolumetricShadows : 1;                                // 0x0140(0x0004) (Edit)
	unsigned char                                      UnknownData06[0x1C];                                      // 0x0144(0x001C) MISSED OFFSET
	unsigned long                                      DisableGlowEffect : 1;                                    // 0x0160(0x0004) (Edit)
	unsigned long                                      UnknownData07 : 31;                                       // 0x0160(0x0001)
	unsigned long                                      ForceMovementCollisionWithTriangles : 1;                  // 0x0164(0x0004) (Edit)
	unsigned char                                      UnknownData08[0x4C];                                      // 0x0168(0x004C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.StaticMesh");
		return ptr;
	}

};


// Class Object.ParticleEmitter.SpriteEmitter
// 0x001C (0x04CC - 0x04B0)
class UClass_Object_ParticleEmitter_SpriteEmitter : public UClass_Object_ParticleEmitter
{
public:
	TEnumAsByte<EParticleDirectionUsage>               UseDirectionAs;                                           // 0x04B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B1(0x0003) MISSED OFFSET
	struct FStruct_Vector                              ProjectionNormal;                                         // 0x04B4(0x000C) (Edit)
	struct FStruct_Vector                              RealProjectionNormal;                                     // 0x04C0(0x000C) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter.SpriteEmitter");
		return ptr;
	}

};


// Class Object.ParticleEmitter.SparkEmitter
// 0x003C (0x04EC - 0x04B0)
class UClass_Object_ParticleEmitter_SparkEmitter : public UClass_Object_ParticleEmitter
{
public:
	struct FStruct_Range                               LineSegmentsRange;                                        // 0x04B0(0x0008) (Edit)
	struct FStruct_Range                               TimeBeforeVisibleRange;                                   // 0x04B8(0x0008) (Edit)
	struct FStruct_Range                               TimeBetweenSegmentsRange;                                 // 0x04C0(0x0008) (Edit)
	TArray<struct FStruct_ParticleSparkData>           SparkData;                                                // 0x04C8(0x000C) (Transient, NeedCtorLink)
	class UClass_Object_RenderResource_VertexStreamBase_VertexBuffer* VertexBuffer;                                             // 0x04D4(0x0004) (Transient)
	class UClass_Object_RenderResource_VertexStreamBase_IndexBuffer* IndexBuffer;                                              // 0x04D8(0x0004) (Transient)
	int                                                NumSegments;                                              // 0x04DC(0x0004) (Transient)
	int                                                VerticesPerParticle;                                      // 0x04E0(0x0004) (Transient)
	int                                                IndicesPerParticle;                                       // 0x04E4(0x0004) (Transient)
	int                                                PrimitivesPerParticle;                                    // 0x04E8(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter.SparkEmitter");
		return ptr;
	}

};


// Class Object.AnimNotify
// 0x0004 (0x002C - 0x0028)
class UClass_Object_AnimNotify : public UClass_Object
{
public:
	int                                                Revision;                                                 // 0x0028(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify");
		return ptr;
	}

};


// Class Object.AnimNotify.AnimNotify_Scripted
// 0x0000 (0x002C - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_Scripted : public UClass_Object_AnimNotify
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_Scripted");
		return ptr;
	}


	void Function_Notify(class AClass_Object_Actor* Owner);
};


// Class Object.AnimNotify.AnimNotify_Script
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_Script : public UClass_Object_AnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x002C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_Script");
		return ptr;
	}

};


// Class Object.AnimNotify.AnimNotify_LIPSinc
// 0x0010 (0x003C - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_LIPSinc : public UClass_Object_AnimNotify
{
public:
	struct FName                                       LIPSincAnimName;                                          // 0x002C(0x0004) (Edit)
	float                                              Volume;                                                   // 0x0030(0x0004) (Edit)
	int                                                Radius;                                                   // 0x0034(0x0004) (Edit)
	float                                              Pitch;                                                    // 0x0038(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_LIPSinc");
		return ptr;
	}

};


// Class Object.AnimNotify.AnimNotify_Sound
// 0x000C (0x0038 - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_Sound : public UClass_Object_AnimNotify
{
public:
	class UClass_Object_Sound*                         Sound;                                                    // 0x002C(0x0004) (Edit)
	float                                              Volume;                                                   // 0x0030(0x0004) (Edit)
	int                                                Radius;                                                   // 0x0034(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_Sound");
		return ptr;
	}

};


// Class Object.AnimNotify.AnimNotify_DestroyEffect
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_DestroyEffect : public UClass_Object_AnimNotify
{
public:
	struct FName                                       DestroyTag;                                               // 0x002C(0x0004) (Edit)
	unsigned long                                      bExpireParticles : 1;                                     // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_DestroyEffect");
		return ptr;
	}

};


// Class Object.AnimNotify.AnimNotify_Effect
// 0x003C (0x0068 - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_Effect : public UClass_Object_AnimNotify
{
public:
	class UClass_Object_Field_Struct_State_Class*      EffectClass;                                              // 0x002C(0x0004) (Edit)
	struct FName                                       Bone;                                                     // 0x0030(0x0004) (Edit)
	struct FStruct_Vector                              OffsetLocation;                                           // 0x0034(0x000C) (Edit)
	struct FStruct_Rotator                             OffsetRotation;                                           // 0x0040(0x000C) (Edit)
	unsigned long                                      Attach : 1;                                               // 0x004C(0x0004) (Edit)
	struct FName                                       Tag;                                                      // 0x0050(0x0004) (Edit)
	float                                              DrawScale;                                                // 0x0054(0x0004) (Edit)
	struct FStruct_Vector                              DrawScale3D;                                              // 0x0058(0x000C) (Edit)
	class AClass_Object_Actor*                         LastSpawnedEffect;                                        // 0x0064(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_Effect");
		return ptr;
	}

};


// Class Object.Primitive.MeshInstance.LodMeshInstance.SkeletalMeshInstance
// 0x0370 (0x03EC - 0x007C)
class UClass_Object_Primitive_MeshInstance_LodMeshInstance_SkeletalMeshInstance : public UClass_Object_Primitive_MeshInstance_LodMeshInstance
{
public:
	unsigned char                                      UnknownData00[0x370];                                     // 0x007C(0x0370) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.MeshInstance.LodMeshInstance.SkeletalMeshInstance");
		return ptr;
	}

};


// Class Object.Primitive.Mesh.LodMesh.SkeletalMesh
// 0x0278 (0x03AC - 0x0134)
class UClass_Object_Primitive_Mesh_LodMesh_SkeletalMesh : public UClass_Object_Primitive_Mesh_LodMesh
{
public:
	unsigned char                                      UnknownData00[0x278];                                     // 0x0134(0x0278) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.Mesh.LodMesh.SkeletalMesh");
		return ptr;
	}

};


// Class Object.Animation
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_Animation : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Animation");
		return ptr;
	}

};


// Class Object.Primitive.MeshAnimation
// 0x0000 (0x0054 - 0x0054)
class UClass_Object_Primitive_MeshAnimation : public UClass_Object_Primitive
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.MeshAnimation");
		return ptr;
	}

};


// Class Object.Actor.Projector
// 0x0190 (0x0590 - 0x0400)
class AClass_Object_Actor_Projector : public AClass_Object_Actor
{
public:
	TEnumAsByte<EProjectorBlending>                    MaterialBlendingOp;                                       // 0x0400(0x0001) (Edit)
	TEnumAsByte<EProjectorBlending>                    FrameBufferBlendingOp;                                    // 0x0401(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0402(0x0002) MISSED OFFSET
	class UClass_Object_Material*                      ProjTexture;                                              // 0x0404(0x0004) (Edit)
	int                                                FOV;                                                      // 0x0408(0x0004) (Edit)
	int                                                MaxTraceDistance;                                         // 0x040C(0x0004) (Edit)
	unsigned long                                      bProjectBSP : 1;                                          // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectTerrain : 1;                                      // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectStaticMesh : 1;                                   // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectParticles : 1;                                    // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectActor : 1;                                        // 0x0410(0x0004) (Edit)
	unsigned long                                      bLevelStatic : 1;                                         // 0x0410(0x0004) (Edit)
	unsigned long                                      bClipBSP : 1;                                             // 0x0410(0x0004) (Edit)
	unsigned long                                      bClipStaticMesh : 1;                                      // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectOnUnlit : 1;                                      // 0x0410(0x0004) (Edit)
	unsigned long                                      bGradient : 1;                                            // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectOnBackfaces : 1;                                  // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectOnAlpha : 1;                                      // 0x0410(0x0004) (Edit)
	unsigned long                                      bProjectOnParallelBSP : 1;                                // 0x0410(0x0004)
	struct FName                                       ProjectTag;                                               // 0x0414(0x0004) (Edit)
	unsigned long                                      bDynamicAttach : 1;                                       // 0x0418(0x0004) (Edit)
	unsigned long                                      bNoProjectOnOwner : 1;                                    // 0x0418(0x0004) (Edit, NoClear)
	float                                              FadeInTime;                                               // 0x041C(0x0004) (Edit, NoClear)
	struct FStruct_Vector_Plane                        FrustumPlanes[0x6];                                       // 0x0420(0x0010) (Const, Transient)
	struct FStruct_Vector                              FrustumVertices[0x8];                                     // 0x0480(0x000C) (Const, Transient)
	struct FStruct_Box                                 Box;                                                      // 0x04E0(0x001C) (Const, Transient)
	struct FStruct_ProjectorRenderInfoPtr              RenderInfo;                                               // 0x04FC(0x0004) (Const, Transient)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* GradientTexture;                                          // 0x0500(0x0004)
	struct FStruct_Matrix                              GradientMatrix;                                           // 0x0504(0x0040) (Transient)
	struct FStruct_Matrix                              Matrix;                                                   // 0x0544(0x0040) (Transient)
	struct FStruct_Vector                              OldLocation;                                              // 0x0584(0x000C) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector");
		return ptr;
	}


	void Function_PreRenderCallback();
	void Function_UpdateMatrix();
	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_Initialise();
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_DetachActor(class AClass_Object_Actor* A);
	void Function_AttachActor(class AClass_Object_Actor* A);
	void Function_AbandonProjector(float lifetime);
	void Function_DetachProjector(bool Force);
	void Function_AttachProjector(float FadeInTime);
};


// Class Object.Actor.Projector.ShadowProjector
// 0x0020 (0x05B0 - 0x0590)
class AClass_Object_Actor_Projector_ShadowProjector : public AClass_Object_Actor_Projector
{
public:
	class AClass_Object_Actor*                         ShadowActor;                                              // 0x0590(0x0004) (Edit)
	struct FStruct_Vector                              LightDirection;                                           // 0x0594(0x000C) (Edit)
	float                                              LightDistance;                                            // 0x05A0(0x0004) (Edit)
	unsigned long                                      RootMotion : 1;                                           // 0x05A4(0x0004) (Edit)
	unsigned long                                      bBlobShadow : 1;                                          // 0x05A4(0x0004) (Edit)
	unsigned long                                      bShadowActive : 1;                                        // 0x05A4(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ShadowBitmapMaterial* ShadowTexture;                                            // 0x05A8(0x0004)
	int                                                Resolution;                                               // 0x05AC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ShadowProjector");
		return ptr;
	}


	void Function_Touch_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_PreRenderCallback_PreRenderCallback();
	void Function_Tick_Tick(float DeltaTime);
	void Function_UpdateShadow();
	void Function_CreateShadowBitmap();
	void Function_InitShadow();
	void Function_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_UpdateDetailSetting();
};


// Class Object.Material.RenderedMaterial.BitmapMaterial.ShadowBitmapMaterial
// 0x0030 (0x0088 - 0x0058)
class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ShadowBitmapMaterial : public UClass_Object_Material_RenderedMaterial_BitmapMaterial
{
public:
	int                                                TextureInterfaces[0x2];                                   // 0x0058(0x0004) (Const, Transient)
	class AClass_Object_Actor*                         ShadowActor;                                              // 0x0060(0x0004)
	struct FStruct_Vector                              LightDirection;                                           // 0x0064(0x000C)
	float                                              LightDistance;                                            // 0x0070(0x0004)
	float                                              LightFOV;                                                 // 0x0074(0x0004)
	unsigned long                                      Dirty : 1;                                                // 0x0078(0x0004)
	unsigned long                                      Invalid : 1;                                              // 0x0078(0x0004)
	unsigned long                                      bBlobShadow : 1;                                          // 0x0078(0x0004)
	float                                              CullDistance;                                             // 0x007C(0x0004)
	unsigned char                                      ShadowDarkness;                                           // 0x0080(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial* BlobShadow;                                               // 0x0084(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.BitmapMaterial.ShadowBitmapMaterial");
		return ptr;
	}


	void Function_SetResolution(int Resolution);
	struct FStruct_Vector Function_GetShadowLocation();
};


// Class Object.Actor.Info.Security
// 0x001C (0x041C - 0x0400)
class AClass_Object_Actor_Info_Security : public AClass_Object_Actor_Info
{
public:
	int                                                LastType;                                                 // 0x0400(0x0004)
	struct FString                                     LastParams[0x2];                                          // 0x0404(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.Security");
		return ptr;
	}


	void Function_ClientMessage(const struct FString& S);
	void Function_BadClient(int Code, const struct FString& data);
	void Function_Perform(int SecType, const struct FString& Param1, const struct FString& Param2, float TimeOut);
	void Function_ServerCallback(int SecType, const struct FString& data);
	void Function_ClientPerform(int SecType, const struct FString& Param1, const struct FString& Param2);
	void Function_NativePerform(int SecType, const struct FString& Param1, const struct FString& Param2);
};


// Class Object.Material.RenderedMaterial.BitmapMaterial.ScriptedTexture
// 0x001C (0x0074 - 0x0058)
class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture : public UClass_Object_Material_RenderedMaterial_BitmapMaterial
{
public:
	int                                                RenderTarget;                                             // 0x0058(0x0004) (Const, Transient)
	class UClass_Object_Player_Viewport*               RenderViewport;                                           // 0x005C(0x0004) (Const, Transient)
	class AClass_Object_Actor*                         Client;                                                   // 0x0060(0x0004)
	unsigned long                                      bSerializeClient : 1;                                     // 0x0064(0x0004) (Edit)
	unsigned long                                      bNotifyClientBeforeRendering : 1;                         // 0x0064(0x0004)
	int                                                Revision;                                                 // 0x0068(0x0004) (Transient)
	int                                                OldRevision;                                              // 0x006C(0x0004) (Const, Transient)
	int                                                Invalid;                                                  // 0x0070(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.BitmapMaterial.ScriptedTexture");
		return ptr;
	}


	void Function_DrawPortal(int X, int Y, int Width, int height, class AClass_Object_Actor* CamActor, const struct FStruct_Vector& CamLocation, const struct FStruct_Rotator& CamRotation, int FOV, bool ClearZ, bool RenderPlayer);
	void Function_DrawTile(float X, float Y, float XL, float YL, float U, float V, float UL, float VL, class UClass_Object_Material* Material, const struct FStruct_Color& Color);
	void Function_TextSize(const struct FString& Text, class UClass_Object_Font* Font, int* Width, int* height);
	void Function_DrawText(int StartX, int StartY, const struct FString& Text, class UClass_Object_Font* Font, const struct FStruct_Color& Color);
	void Function_SetSize(int Width, int height);
};


// Class Object.RenderResource
// 0x0004 (0x002C - 0x0028)
class UClass_Object_RenderResource : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource");
		return ptr;
	}

};


// Class Object.RenderResource.SkinVertexBuffer
// 0x000C (0x0038 - 0x002C)
class UClass_Object_RenderResource_SkinVertexBuffer : public UClass_Object_RenderResource
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x002C(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.SkinVertexBuffer");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase
// 0x000C (0x0038 - 0x002C)
class UClass_Object_RenderResource_VertexStreamBase : public UClass_Object_RenderResource
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x002C(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase.IndexBuffer
// 0x0000 (0x0038 - 0x0038)
class UClass_Object_RenderResource_VertexStreamBase_IndexBuffer : public UClass_Object_RenderResource_VertexStreamBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase.IndexBuffer");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase.VertexBuffer
// 0x000C (0x0044 - 0x0038)
class UClass_Object_RenderResource_VertexStreamBase_VertexBuffer : public UClass_Object_RenderResource_VertexStreamBase
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0038(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase.VertexBuffer");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase.VertexStreamPosNormTex
// 0x000C (0x0044 - 0x0038)
class UClass_Object_RenderResource_VertexStreamBase_VertexStreamPosNormTex : public UClass_Object_RenderResource_VertexStreamBase
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0038(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase.VertexStreamPosNormTex");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase.VertexStreamUV
// 0x000C (0x0044 - 0x0038)
class UClass_Object_RenderResource_VertexStreamBase_VertexStreamUV : public UClass_Object_RenderResource_VertexStreamBase
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0038(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase.VertexStreamUV");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase.VertexStreamCOLOR
// 0x000C (0x0044 - 0x0038)
class UClass_Object_RenderResource_VertexStreamBase_VertexStreamCOLOR : public UClass_Object_RenderResource_VertexStreamBase
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0038(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase.VertexStreamCOLOR");
		return ptr;
	}

};


// Class Object.RenderResource.VertexStreamBase.VertexStreamVECTOR
// 0x000C (0x0044 - 0x0038)
class UClass_Object_RenderResource_VertexStreamBase_VertexStreamVECTOR : public UClass_Object_RenderResource_VertexStreamBase
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0038(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RenderResource.VertexStreamBase.VertexStreamVECTOR");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.ProjectorMaterial
// 0x0094 (0x00D4 - 0x0040)
class UClass_Object_Material_RenderedMaterial_ProjectorMaterial : public UClass_Object_Material_RenderedMaterial
{
public:
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial* Gradient;                                                 // 0x0040(0x0004) (Const, Transient)
	class UClass_Object_Material*                      Projected;                                                // 0x0044(0x0004) (Const, Transient)
	class UClass_Object_Material*                      BaseMaterial;                                             // 0x0048(0x0004) (Const, Transient)
	unsigned char                                      BaseMaterialBlending;                                     // 0x004C(0x0001) (Const, Transient)
	unsigned char                                      FrameBufferBlending;                                      // 0x004D(0x0001) (Const, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	struct FStruct_Matrix                              Matrix;                                                   // 0x0050(0x0040) (Const, Transient)
	struct FStruct_Matrix                              GradientMatrix;                                           // 0x0090(0x0040) (Const, Transient)
	unsigned long                                      bProjected : 1;                                           // 0x00D0(0x0004) (Const, Transient)
	unsigned long                                      bProjectOnUnlit : 1;                                      // 0x00D0(0x0004) (Const, Transient)
	unsigned long                                      bGradient : 1;                                            // 0x00D0(0x0004) (Const, Transient)
	unsigned long                                      bProjectOnAlpha : 1;                                      // 0x00D0(0x0004) (Const, Transient)
	unsigned long                                      bProjectOnBackfaces : 1;                                  // 0x00D0(0x0004) (Const, Transient)
	unsigned long                                      bStaticProjector : 1;                                     // 0x00D0(0x0004) (Const, Transient)
	unsigned long                                      bTwoSided : 1;                                            // 0x00D0(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.ProjectorMaterial");
		return ptr;
	}

};


// Class Object.Primitive.ProjectorPrimitive
// 0x0000 (0x0054 - 0x0054)
class UClass_Object_Primitive_ProjectorPrimitive : public UClass_Object_Primitive
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.ProjectorPrimitive");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.ParticleMaterial
// 0x0290 (0x02D0 - 0x0040)
class UClass_Object_Material_RenderedMaterial_ParticleMaterial : public UClass_Object_Material_RenderedMaterial
{
public:
	int                                                ParticleBlending;                                         // 0x0040(0x0004) (Const)
	int                                                BlendBetweenSubdivisions;                                 // 0x0044(0x0004) (Const)
	int                                                RenderTwoSided;                                           // 0x0048(0x0004) (Const)
	int                                                UseTFactor;                                               // 0x004C(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial* BitmapMaterial;                                           // 0x0050(0x0004) (Const)
	int                                                AlphaTest;                                                // 0x0054(0x0004) (Const)
	int                                                AlphaRef;                                                 // 0x0058(0x0004) (Const)
	int                                                ZTest;                                                    // 0x005C(0x0004) (Const)
	int                                                ZWrite;                                                   // 0x0060(0x0004) (Const)
	int                                                Wireframe;                                                // 0x0064(0x0004) (Const)
	unsigned long                                      AcceptsProjectors : 1;                                    // 0x0068(0x0004) (Transient)
	int                                                NumProjectors;                                            // 0x006C(0x0004) (Const, Transient)
	struct FStruct_ParticleProjectorInfo               Projectors[0x8];                                          // 0x0070(0x004C) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.ParticleMaterial");
		return ptr;
	}

};


// Class Object.Actor.Emitter
// 0x0078 (0x0478 - 0x0400)
class AClass_Object_Actor_Emitter : public AClass_Object_Actor
{
public:
	TArray<class UClass_Object_ParticleEmitter*>       Emitters;                                                 // 0x0400(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      AutoDestroy : 1;                                          // 0x040C(0x0004) (Edit)
	unsigned long                                      AutoReset : 1;                                            // 0x040C(0x0004) (Edit)
	unsigned long                                      DisableFogging : 1;                                       // 0x040C(0x0004) (Edit)
	unsigned long                                      RotationAndVelocityFromOwner : 1;                         // 0x040C(0x0004) (Edit)
	struct FStruct_RangeVector                         GlobalOffsetRange;                                        // 0x0410(0x0018) (Edit)
	struct FStruct_Range                               TimeTillResetRange;                                       // 0x0428(0x0008) (Edit)
	int                                                Initialized;                                              // 0x0430(0x0004) (Transient)
	struct FStruct_Box                                 BoundingBox;                                              // 0x0434(0x001C) (Transient)
	float                                              EmitterRadius;                                            // 0x0450(0x0004) (Transient)
	float                                              EmitterHeight;                                            // 0x0454(0x0004) (Transient)
	unsigned long                                      ActorForcesEnabled : 1;                                   // 0x0458(0x0004) (Transient)
	struct FStruct_Vector                              GlobalOffset;                                             // 0x045C(0x000C) (Transient)
	float                                              TimeTillReset;                                            // 0x0468(0x0004) (Transient)
	unsigned long                                      UseParticleProjectors : 1;                                // 0x046C(0x0004) (Transient)
	class UClass_Object_Material_RenderedMaterial_ParticleMaterial* ParticleMaterial;                                         // 0x0470(0x0004) (Transient)
	unsigned long                                      DeleteParticleEmitters : 1;                               // 0x0474(0x0004) (Transient)
	unsigned long                                      bPlaying : 1;                                             // 0x0474(0x0004)
	unsigned long                                      bStoppedOverTime : 1;                                     // 0x0474(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter");
		return ptr;
	}


	void Function_PreAutoDestroyed();
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void Function_Kill();
	void Function_StopEmitters(bool bStopOverTime);
	void Function_PlayEmitters();
};


// Class Object.PackageCheckInfo
// 0x0020 (0x0048 - 0x0028)
class UClass_Object_PackageCheckInfo : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PackageCheckInfo");
		return ptr;
	}

};


// Class Object.Actor.Mover
// 0x0364 (0x0764 - 0x0400)
class AClass_Object_Actor_Mover : public AClass_Object_Actor
{
public:
	TEnumAsByte<EMoverEncroachType>                    MoverEncroachType;                                        // 0x0400(0x0001) (Edit)
	TEnumAsByte<EMoverGlideType>                       MoverGlideType;                                           // 0x0401(0x0001) (Edit)
	TEnumAsByte<EBumpType>                             BumpType;                                                 // 0x0402(0x0001) (Edit)
	unsigned char                                      KeyNum;                                                   // 0x0403(0x0001) (Edit)
	unsigned char                                      PrevKeyNum;                                               // 0x0404(0x0001)
	unsigned char                                      NumKeys;                                                  // 0x0405(0x0001) (Edit, Const)
	unsigned char                                      WorldRaytraceKey;                                         // 0x0406(0x0001) (Edit, Const)
	unsigned char                                      BrushRaytraceKey;                                         // 0x0407(0x0001) (Edit, Const)
	float                                              MoveTime;                                                 // 0x0408(0x0004) (Edit)
	float                                              StayOpenTime;                                             // 0x040C(0x0004) (Edit)
	float                                              OtherTime;                                                // 0x0410(0x0004) (Edit)
	int                                                EncroachDamage;                                           // 0x0414(0x0004) (Edit)
	unsigned long                                      bToggleDirection : 1;                                     // 0x0418(0x0004) (Edit)
	unsigned long                                      bTriggerOnceOnly : 1;                                     // 0x0418(0x0004) (Edit)
	unsigned long                                      bSlave : 1;                                               // 0x0418(0x0004) (Edit)
	unsigned long                                      bUseTriggered : 1;                                        // 0x0418(0x0004) (Edit)
	unsigned long                                      bDamageTriggered : 1;                                     // 0x0418(0x0004) (Edit)
	unsigned long                                      bDynamicLightMover : 1;                                   // 0x0418(0x0004) (Edit)
	unsigned long                                      bUseShortestRotation : 1;                                 // 0x0418(0x0004) (Edit)
	unsigned long                                      bIsLeader : 1;                                            // 0x0418(0x0004) (Edit)
	struct FName                                       PlayerBumpEvent;                                          // 0x041C(0x0004) (Edit)
	struct FName                                       BumpEvent;                                                // 0x0420(0x0004) (Edit)
	class AClass_Object_Actor*                         SavedTrigger;                                             // 0x0424(0x0004)
	float                                              DamageThreshold;                                          // 0x0428(0x0004) (Edit)
	int                                                numTriggerEvents;                                         // 0x042C(0x0004)
	class AClass_Object_Actor_Mover*                   Leader;                                                   // 0x0430(0x0004)
	class AClass_Object_Actor_Mover*                   Follower;                                                 // 0x0434(0x0004)
	struct FName                                       ReturnGroup;                                              // 0x0438(0x0004) (Edit)
	float                                              DelayTime;                                                // 0x043C(0x0004) (Edit)
	class UClass_Object_Sound*                         OpeningSound;                                             // 0x0440(0x0004) (Edit)
	class UClass_Object_Sound*                         OpenedSound;                                              // 0x0444(0x0004) (Edit)
	class UClass_Object_Sound*                         ClosingSound;                                             // 0x0448(0x0004) (Edit)
	class UClass_Object_Sound*                         ClosedSound;                                              // 0x044C(0x0004) (Edit)
	class UClass_Object_Sound*                         LoopSound;                                                // 0x0450(0x0004) (Edit)
	struct FName                                       OpeningEvent;                                             // 0x0454(0x0004) (Edit)
	struct FName                                       OpenedEvent;                                              // 0x0458(0x0004) (Edit)
	struct FName                                       ClosingEvent;                                             // 0x045C(0x0004) (Edit)
	struct FName                                       ClosedEvent;                                              // 0x0460(0x0004) (Edit)
	struct FName                                       LoopEvent;                                                // 0x0464(0x0004) (Edit)
	unsigned long                                      bOscillatingLoop : 1;                                     // 0x0468(0x0004) (Edit)
	unsigned long                                      bLockKeysRelativeToBase : 1;                              // 0x0468(0x0004) (Edit)
	struct FStruct_Vector                              KeyPos[0x18];                                             // 0x046C(0x000C)
	struct FStruct_Rotator                             KeyRot[0x18];                                             // 0x058C(0x000C)
	struct FStruct_Vector                              BasePos;                                                  // 0x06AC(0x000C)
	struct FStruct_Vector                              OldPos;                                                   // 0x06B8(0x000C)
	struct FStruct_Vector                              OldPrePivot;                                              // 0x06C4(0x000C)
	struct FStruct_Vector                              SavedPos;                                                 // 0x06D0(0x000C)
	struct FStruct_Rotator                             BaseRot;                                                  // 0x06DC(0x000C)
	struct FStruct_Rotator                             OldRot;                                                   // 0x06E8(0x000C)
	struct FStruct_Rotator                             SavedRot;                                                 // 0x06F4(0x000C)
	float                                              PhysAlpha;                                                // 0x0700(0x0004)
	float                                              PhysRate;                                                 // 0x0704(0x0004)
	class AClass_Object_Actor_NavigationPoint*         myMarker;                                                 // 0x0708(0x0004)
	unsigned long                                      bOpening : 1;                                             // 0x070C(0x0004)
	unsigned long                                      bDelaying : 1;                                            // 0x070C(0x0004)
	unsigned long                                      bClientPause : 1;                                         // 0x070C(0x0004)
	unsigned long                                      bClosed : 1;                                              // 0x070C(0x0004)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x070C(0x0004)
	unsigned long                                      bAutoDoor : 1;                                            // 0x070C(0x0004) (Edit)
	unsigned long                                      bNoAIRelevance : 1;                                       // 0x070C(0x0004) (Edit)
	struct FStruct_Vector                              SimOldPos;                                                // 0x0710(0x000C) (Net)
	int                                                SimOldRotPitch;                                           // 0x071C(0x0004) (Net)
	int                                                SimOldRotYaw;                                             // 0x0720(0x0004) (Net)
	int                                                SimOldRotRoll;                                            // 0x0724(0x0004) (Net)
	struct FStruct_Vector                              SimInterpolate;                                           // 0x0728(0x000C) (Net)
	struct FStruct_Vector                              RealPosition;                                             // 0x0734(0x000C) (Net)
	struct FStruct_Rotator                             RealRotation;                                             // 0x0740(0x000C) (Net)
	int                                                ClientUpdate;                                             // 0x074C(0x0004)
	int                                                StepDirection;                                            // 0x0750(0x0004)
	TArray<class AClass_Object_Actor_AntiPortalActor*> AntiPortals;                                              // 0x0754(0x000C) (NeedCtorLink)
	struct FName                                       AntiPortalTag;                                            // 0x0760(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Mover");
		return ptr;
	}


	void Function_BaseFinished();
	void Function_BaseStarted();
	void Function_MoverLooped();
	void Function_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_Bump_Bump(class AClass_Object_Actor* Other);
	void Function_DoBumpEvent(class AClass_Object_Actor* Other);
	void Function_DoPlayerBumpEvent(class AClass_Object_Actor* Other);
	bool Function_EncroachingOn_EncroachingOn(class AClass_Object_Actor* Other);
	void Function_MakeGroupReturn();
	void Function_MakeGroupStop();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_BeginPlay_BeginPlay();
	void Function_DoClose();
	void Function_DoOpen();
	void Function_FinishedOpening();
	void Function_FinishedClosing();
	void Function_FinishNotify();
	void Function_KeyFrameReached();
	void Function_SetKeyframe(unsigned char NewKeyNum, const struct FStruct_Vector& NewLocation, const struct FStruct_Rotator& NewRotation);
	void Function_InterpolateTo(unsigned char NewKeyNum, float Seconds);
	void Function_Timer_Timer();
	void Function_StartInterpolation_StartInterpolation();
};


// Class Object.Primitive.Model
// 0x06F0 (0x0744 - 0x0054)
class UClass_Object_Primitive_Model : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0x6F0];                                     // 0x0054(0x06F0) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.Model");
		return ptr;
	}

};


// Class Object.ParticleEmitter.MeshEmitter
// 0x0014 (0x04C4 - 0x04B0)
class UClass_Object_ParticleEmitter_MeshEmitter : public UClass_Object_ParticleEmitter
{
public:
	class UClass_Object_Primitive_StaticMesh*          StaticMesh;                                               // 0x04B0(0x0004) (Edit)
	unsigned long                                      UseMeshBlendMode : 1;                                     // 0x04B4(0x0004) (Edit)
	unsigned long                                      RenderTwoSided : 1;                                       // 0x04B4(0x0004) (Edit)
	unsigned long                                      UseParticleColor : 1;                                     // 0x04B4(0x0004) (Edit)
	struct FStruct_Vector                              MeshExtent;                                               // 0x04B8(0x000C) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter.MeshEmitter");
		return ptr;
	}

};


// Class Object.MeshObject
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_MeshObject : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.MeshObject");
		return ptr;
	}

};


// Class Object.Material.Modifier.OpacityModifier
// 0x0008 (0x004C - 0x0044)
class UClass_Object_Material_Modifier_OpacityModifier : public UClass_Object_Material_Modifier
{
public:
	class UClass_Object_Material*                      Opacity;                                                  // 0x0044(0x0004)
	unsigned long                                      bOverrideTexModifier : 1;                                 // 0x0048(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.OpacityModifier");
		return ptr;
	}

};


// Class Object.Material.Modifier.MaterialSequence
// 0x0020 (0x0064 - 0x0044)
class UClass_Object_Material_Modifier_MaterialSequence : public UClass_Object_Material_Modifier
{
public:
	TArray<struct FStruct_MaterialSequenceItem>        SequenceItems;                                            // 0x0044(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EMaterialSequenceTriggerActon>         TriggerAction;                                            // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned long                                      Loop : 1;                                                 // 0x0054(0x0004) (Edit)
	unsigned long                                      Paused : 1;                                               // 0x0054(0x0004) (Edit)
	float                                              CurrentTime;                                              // 0x0058(0x0004) (Transient)
	float                                              LastTime;                                                 // 0x005C(0x0004) (Transient)
	float                                              TotalTime;                                                // 0x0060(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.MaterialSequence");
		return ptr;
	}


	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
	void Function_Reset_Reset_Reset();
};


// Class Object.Material.Modifier.MaterialSwitch
// 0x0010 (0x0054 - 0x0044)
class UClass_Object_Material_Modifier_MaterialSwitch : public UClass_Object_Material_Modifier
{
public:
	int                                                Current;                                                  // 0x0044(0x0004) (Edit, Transient)
	TArray<class UClass_Object_Material*>              Materials;                                                // 0x0048(0x000C) (Edit, NeedCtorLink, EditInline, EditInlineUse)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.MaterialSwitch");
		return ptr;
	}


	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
	bool Function_Set(int Index);
	void Function_Reset_Reset_Reset();
};


// Class Object.Material.Modifier.FinalBlend
// 0x000C (0x0050 - 0x0044)
class UClass_Object_Material_Modifier_FinalBlend : public UClass_Object_Material_Modifier
{
public:
	TEnumAsByte<EFrameBufferBlending>                  FrameBufferBlending;                                      // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	unsigned long                                      ZWrite : 1;                                               // 0x0048(0x0004) (Edit)
	unsigned long                                      ZTest : 1;                                                // 0x0048(0x0004) (Edit)
	unsigned long                                      AlphaTest : 1;                                            // 0x0048(0x0004) (Edit)
	unsigned long                                      TwoSided : 1;                                             // 0x0048(0x0004) (Edit)
	unsigned char                                      AlphaRef;                                                 // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.FinalBlend");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.VertexColor
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Material_RenderedMaterial_VertexColor : public UClass_Object_Material_RenderedMaterial
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.VertexColor");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexCoordSource
// 0x0004 (0x0050 - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexCoordSource : public UClass_Object_Material_Modifier_TexModifier
{
public:
	int                                                SourceChannel;                                            // 0x004C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexCoordSource");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexEnvMap
// 0x0004 (0x0050 - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexEnvMap : public UClass_Object_Material_Modifier_TexModifier
{
public:
	TEnumAsByte<ETexEnvMapType>                        EnvMapType;                                               // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexEnvMap");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexOscillator
// 0x0074 (0x00C0 - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexOscillator : public UClass_Object_Material_Modifier_TexModifier
{
public:
	float                                              UOscillationRate;                                         // 0x004C(0x0004) (Edit)
	float                                              VOscillationRate;                                         // 0x0050(0x0004) (Edit)
	float                                              UOscillationPhase;                                        // 0x0054(0x0004) (Edit)
	float                                              VOscillationPhase;                                        // 0x0058(0x0004) (Edit)
	float                                              UOscillationAmplitude;                                    // 0x005C(0x0004) (Edit)
	float                                              VOscillationAmplitude;                                    // 0x0060(0x0004) (Edit)
	TEnumAsByte<ETexOscillationType>                   UOscillationType;                                         // 0x0064(0x0001) (Edit)
	TEnumAsByte<ETexOscillationType>                   VOscillationType;                                         // 0x0065(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET
	float                                              UOffset;                                                  // 0x0068(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x006C(0x0004) (Edit)
	struct FStruct_Matrix                              M;                                                        // 0x0070(0x0040)
	float                                              LastSu;                                                   // 0x00B0(0x0004)
	float                                              LastSv;                                                   // 0x00B4(0x0004)
	float                                              CurrentUJitter;                                           // 0x00B8(0x0004)
	float                                              CurrentVJitter;                                           // 0x00BC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexOscillator");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexOscillator.TexOscillatorTriggered
// 0x0010 (0x00D0 - 0x00C0)
class UClass_Object_Material_Modifier_TexModifier_TexOscillator_TexOscillatorTriggered : public UClass_Object_Material_Modifier_TexModifier_TexOscillator
{
public:
	TEnumAsByte<ERetriggerAction>                      RetriggerAction;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              StopAfterPeriod;                                          // 0x00C4(0x0004) (Edit)
	float                                              TriggeredTime;                                            // 0x00C8(0x0004) (Transient)
	unsigned long                                      Reverse : 1;                                              // 0x00CC(0x0004) (Transient)
	unsigned long                                      Triggered : 1;                                            // 0x00CC(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexOscillator.TexOscillatorTriggered");
		return ptr;
	}


	void Function_Reset_Reset_Reset();
	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
};


// Class Object.Material.Modifier.TexModifier.TexRotator
// 0x0080 (0x00CC - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexRotator : public UClass_Object_Material_Modifier_TexModifier
{
public:
	struct FStruct_Matrix                              M;                                                        // 0x004C(0x0040)
	TEnumAsByte<ETexRotationType>                      TexRotationType;                                          // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FStruct_Rotator                             Rotation;                                                 // 0x0090(0x000C) (Edit)
	unsigned long                                      ConstantRotation : 1;                                     // 0x009C(0x0004) (Deprecated)
	float                                              UOffset;                                                  // 0x00A0(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x00A4(0x0004) (Edit)
	struct FStruct_Rotator                             OscillationRate;                                          // 0x00A8(0x000C) (Edit)
	struct FStruct_Rotator                             OscillationAmplitude;                                     // 0x00B4(0x000C) (Edit)
	struct FStruct_Rotator                             OscillationPhase;                                         // 0x00C0(0x000C) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexRotator");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexScaler
// 0x0050 (0x009C - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexScaler : public UClass_Object_Material_Modifier_TexModifier
{
public:
	struct FStruct_Matrix                              M;                                                        // 0x004C(0x0040)
	float                                              UScale;                                                   // 0x008C(0x0004) (Edit)
	float                                              VScale;                                                   // 0x0090(0x0004) (Edit)
	float                                              UOffset;                                                  // 0x0094(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x0098(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexScaler");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexPanner
// 0x0050 (0x009C - 0x004C)
class UClass_Object_Material_Modifier_TexModifier_TexPanner : public UClass_Object_Material_Modifier_TexModifier
{
public:
	struct FStruct_Rotator                             PanDirection;                                             // 0x004C(0x000C) (Edit)
	float                                              PanRate;                                                  // 0x0058(0x0004) (Edit)
	struct FStruct_Matrix                              M;                                                        // 0x005C(0x0040)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexPanner");
		return ptr;
	}

};


// Class Object.Material.Modifier.TexModifier.TexPanner.TexPannerTriggered
// 0x0010 (0x00AC - 0x009C)
class UClass_Object_Material_Modifier_TexModifier_TexPanner_TexPannerTriggered : public UClass_Object_Material_Modifier_TexModifier_TexPanner
{
public:
	TEnumAsByte<ERetriggerAction>                      RetriggerAction;                                          // 0x009C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	float                                              StopAfterPeriod;                                          // 0x00A0(0x0004) (Edit)
	float                                              TriggeredTime;                                            // 0x00A4(0x0004) (Transient)
	unsigned long                                      Reverse : 1;                                              // 0x00A8(0x0004) (Transient)
	unsigned long                                      Triggered : 1;                                            // 0x00A8(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.TexModifier.TexPanner.TexPannerTriggered");
		return ptr;
	}


	void Function_Reset_Reset_Reset();
	void Function_Trigger_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
};


// Class Object.Material.RenderedMaterial.ConstantMaterial
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Material_RenderedMaterial_ConstantMaterial : public UClass_Object_Material_RenderedMaterial
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.ConstantMaterial");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.ConstantMaterial.FadeColor
// 0x0014 (0x0054 - 0x0040)
class UClass_Object_Material_RenderedMaterial_ConstantMaterial_FadeColor : public UClass_Object_Material_RenderedMaterial_ConstantMaterial
{
public:
	struct FStruct_Color                               Color1;                                                   // 0x0040(0x0004) (Edit)
	struct FStruct_Color                               Color2;                                                   // 0x0044(0x0004) (Edit)
	float                                              FadePeriod;                                               // 0x0048(0x0004) (Edit)
	float                                              FadePhase;                                                // 0x004C(0x0004) (Edit)
	TEnumAsByte<EColorFadeType>                        ColorFadeType;                                            // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.ConstantMaterial.FadeColor");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.ConstantMaterial.ConstantColor
// 0x0004 (0x0044 - 0x0040)
class UClass_Object_Material_RenderedMaterial_ConstantMaterial_ConstantColor : public UClass_Object_Material_RenderedMaterial_ConstantMaterial
{
public:
	struct FStruct_Color                               Color;                                                    // 0x0040(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.ConstantMaterial.ConstantColor");
		return ptr;
	}

};


// Class Object.Material.Combiner
// 0x0014 (0x0054 - 0x0040)
class UClass_Object_Material_Combiner : public UClass_Object_Material
{
public:
	TEnumAsByte<EColorOperation>                       CombineOperation;                                         // 0x0040(0x0001) (Edit)
	TEnumAsByte<EAlphaOperation>                       AlphaOperation;                                           // 0x0041(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	class UClass_Object_Material*                      Material1;                                                // 0x0044(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      Material2;                                                // 0x0048(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      Mask;                                                     // 0x004C(0x0004) (Edit, EditInline, EditInlineUse)
	unsigned long                                      InvertMask : 1;                                           // 0x0050(0x0004) (Edit)
	unsigned long                                      Modulate2X : 1;                                           // 0x0050(0x0004) (Edit)
	unsigned long                                      Modulate4X : 1;                                           // 0x0050(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Combiner");
		return ptr;
	}


	int Function_GetVSize_GetVSize();
	int Function_GetUSize_GetUSize();
};


// Class Object.Material.RenderedMaterial.Shader
// 0x0044 (0x0084 - 0x0040)
class UClass_Object_Material_RenderedMaterial_Shader : public UClass_Object_Material_RenderedMaterial
{
public:
	class UClass_Object_Material*                      Diffuse;                                                  // 0x0040(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      Opacity;                                                  // 0x0044(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      NormalMap;                                                // 0x0048(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture_Cubemap* PerPixelReflection;                                       // 0x004C(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      PerPixelReflectionMask;                                   // 0x0050(0x0004) (Edit, EditInline, EditInlineUse)
	TEnumAsByte<EPerPixelSpecular>                     PerPixelSpecular;                                         // 0x0054(0x0001) (Edit)
	TEnumAsByte<EPerPixelSpecularType>                 PerPixelSpecularType;                                     // 0x0055(0x0001) (Edit)
	unsigned char                                      PerPixelSpecularBrightness;                               // 0x0056(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0057(0x0001) MISSED OFFSET
	class UClass_Object_Material*                      Specular;                                                 // 0x0058(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      SpecularityMask;                                          // 0x005C(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      SelfIllumination;                                         // 0x0060(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      SelfIlluminationMask;                                     // 0x0064(0x0004) (Edit, EditInline, EditInlineUse)
	unsigned char                                      GlowBrightness;                                           // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	class UClass_Object_Material*                      GlowMapOverride;                                          // 0x006C(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      GlowMaskOverride;                                         // 0x0070(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material*                      Detail;                                                   // 0x0074(0x0004) (Edit, EditInline, EditInlineUse)
	float                                              DetailScale;                                              // 0x0078(0x0004) (Edit)
	TEnumAsByte<EOutputBlending>                       OutputBlending;                                           // 0x007C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	unsigned long                                      bAllowSelfIlluminationLOD : 1;                            // 0x0080(0x0004) (Edit)
	unsigned long                                      TwoSided : 1;                                             // 0x0080(0x0004) (Edit)
	unsigned long                                      Wireframe : 1;                                            // 0x0080(0x0004) (Edit)
	unsigned long                                      ModulateStaticLighting2X : 1;                             // 0x0080(0x0004)
	unsigned long                                      PerformLightingOnSpecularPass : 1;                        // 0x0080(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.Shader");
		return ptr;
	}


	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor* EventInstigator);
	void Function_Reset_Reset();
	int Function_GetVSize_GetVSize();
	int Function_GetUSize_GetUSize();
};


// Class Object.Material.Modifier.ColorModifier
// 0x0008 (0x004C - 0x0044)
class UClass_Object_Material_Modifier_ColorModifier : public UClass_Object_Material_Modifier
{
public:
	struct FStruct_Color                               Color;                                                    // 0x0044(0x0004) (Edit)
	unsigned long                                      RenderTwoSided : 1;                                       // 0x0048(0x0004) (Edit)
	unsigned long                                      AlphaBlend : 1;                                           // 0x0048(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.Modifier.ColorModifier");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.TexCoordMaterial
// 0x0008 (0x0048 - 0x0040)
class UClass_Object_Material_RenderedMaterial_TexCoordMaterial : public UClass_Object_Material_RenderedMaterial
{
public:
	int                                                Texture;                                                  // 0x0040(0x0004) (Const, Transient)
	int                                                TextureCoords;                                            // 0x0044(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.TexCoordMaterial");
		return ptr;
	}

};


// Class Object.Material.RenderedMaterial.BitmapMaterial.ProxyBitmapMaterial
// 0x0004 (0x005C - 0x0058)
class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ProxyBitmapMaterial : public UClass_Object_Material_RenderedMaterial_BitmapMaterial
{
public:
	int                                                TextureInterface;                                         // 0x0058(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.RenderedMaterial.BitmapMaterial.ProxyBitmapMaterial");
		return ptr;
	}

};


// Class Object.LevelBase.Level
// 0x111C (0x11AC - 0x0090)
class UClass_Object_LevelBase_Level : public UClass_Object_LevelBase
{
public:
	unsigned char                                      UnknownData00[0x111C];                                    // 0x0090(0x111C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.LevelBase.Level");
		return ptr;
	}

};


// Class Object.Interactions.InteractionMaster
// 0x001C (0x0044 - 0x0028)
class UClass_Object_Interactions_InteractionMaster : public UClass_Object_Interactions
{
public:
	class UClass_Object_Client*                        Client;                                                   // 0x0028(0x0004) (Transient)
	class UClass_Object_Interactions_Interaction*      BaseMenu;                                                 // 0x002C(0x0004) (Const, Transient)
	class UClass_Object_Interactions_Interaction*      Console;                                                  // 0x0030(0x0004) (Const, Transient)
	TArray<class UClass_Object_Interactions_Interaction*> GlobalInteractions;                                       // 0x0034(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bRequireRawJoystick : 1;                                  // 0x0040(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.InteractionMaster");
		return ptr;
	}


	struct FString Function_GetKeyFromBinding(const struct FString& BindingText, bool bLocalized, bool bReturnMultiple, bool bExactMatch);
	void Function_Process_Message(const struct FString& msg, float MsgLife, TArray<class UClass_Object_Interactions_Interaction*> InteractionArray);
	void Function_Process_Tick(TArray<class UClass_Object_Interactions_Interaction*> InteractionArray, float DeltaTime);
	void Function_Process_PostRender(TArray<class UClass_Object_Interactions_Interaction*> InteractionArray, class UClass_Object_Canvas* Canvas);
	void Function_Process_PreRender(TArray<class UClass_Object_Interactions_Interaction*> InteractionArray, class UClass_Object_Canvas* Canvas);
	bool Function_Process_KeyEvent(TArray<class UClass_Object_Interactions_Interaction*> InteractionArray, float Delta, TEnumAsByte<EInputKey>* Key, TEnumAsByte<EInputAction>* Action);
	bool Function_Process_KeyType(TArray<class UClass_Object_Interactions_Interaction*> InteractionArray, const struct FString& Unicode, TEnumAsByte<EInputKey>* Key);
	void Function_SetFocusTo(class UClass_Object_Interactions_Interaction* Inter, class UClass_Object_Player* ViewportOwner);
	void Function_RemoveInteraction(class UClass_Object_Interactions_Interaction* RemoveMe);
	class UClass_Object_Interactions_Interaction* Function_AddInteraction(const struct FString& InteractionName, class UClass_Object_Player* AttachTo);
	void Function_Travel(const struct FString& URL);
};


// Class Object.Subsystem.Input
// 0x0F84 (0x0FB0 - 0x002C)
class UClass_Object_Subsystem_Input : public UClass_Object_Subsystem
{
public:
	struct FStruct_Alias                               Aliases[0x28];                                            // 0x002C(0x0010) (Config, NeedCtorLink)
	struct FString                                     StrProperty0;                                             // 0x02AC(0x000C) (Config, NeedCtorLink)
	struct FString                                     LeftMouse;                                                // 0x02B8(0x000C) (Config, NeedCtorLink)
	struct FString                                     RightMouse;                                               // 0x02C4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Cancel;                                                   // 0x02D0(0x000C) (Config, NeedCtorLink)
	struct FString                                     MiddleMouse;                                              // 0x02DC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown05;                                                // 0x02E8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown06;                                                // 0x02F4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown07;                                                // 0x0300(0x000C) (Config, NeedCtorLink)
	struct FString                                     Backspace;                                                // 0x030C(0x000C) (Config, NeedCtorLink)
	struct FString                                     tab;                                                      // 0x0318(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown0A;                                                // 0x0324(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown0B;                                                // 0x0330(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown0C;                                                // 0x033C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Enter;                                                    // 0x0348(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown0E;                                                // 0x0354(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown0F;                                                // 0x0360(0x000C) (Config, NeedCtorLink)
	struct FString                                     Shift;                                                    // 0x036C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Ctrl;                                                     // 0x0378(0x000C) (Config, NeedCtorLink)
	struct FString                                     Alt;                                                      // 0x0384(0x000C) (Config, NeedCtorLink)
	struct FString                                     Pause;                                                    // 0x0390(0x000C) (Config, NeedCtorLink)
	struct FString                                     CapsLock;                                                 // 0x039C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown15;                                                // 0x03A8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown16;                                                // 0x03B4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown17;                                                // 0x03C0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown18;                                                // 0x03CC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown19;                                                // 0x03D8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown1A;                                                // 0x03E4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Escape;                                                   // 0x03F0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown1C;                                                // 0x03FC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown1D;                                                // 0x0408(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown1E;                                                // 0x0414(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown1F;                                                // 0x0420(0x000C) (Config, NeedCtorLink)
	struct FString                                     Space;                                                    // 0x042C(0x000C) (Config, NeedCtorLink)
	struct FString                                     PageUp;                                                   // 0x0438(0x000C) (Config, NeedCtorLink)
	struct FString                                     PageDown;                                                 // 0x0444(0x000C) (Config, NeedCtorLink)
	struct FString                                     End;                                                      // 0x0450(0x000C) (Config, NeedCtorLink)
	struct FString                                     Home;                                                     // 0x045C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Left;                                                     // 0x0468(0x000C) (Config, NeedCtorLink)
	struct FString                                     Up;                                                       // 0x0474(0x000C) (Config, NeedCtorLink)
	struct FString                                     Right;                                                    // 0x0480(0x000C) (Config, NeedCtorLink)
	struct FString                                     Down;                                                     // 0x048C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Select;                                                   // 0x0498(0x000C) (Config, NeedCtorLink)
	struct FString                                     Print;                                                    // 0x04A4(0x000C) (Config, NeedCtorLink)
	struct FString                                     execute;                                                  // 0x04B0(0x000C) (Config, NeedCtorLink)
	struct FString                                     PrintScrn;                                                // 0x04BC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Insert;                                                   // 0x04C8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Delete;                                                   // 0x04D4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Help;                                                     // 0x04E0(0x000C) (Config, NeedCtorLink)
	struct FString                                     _0;                                                       // 0x04EC(0x000C) (Config, NeedCtorLink)
	struct FString                                     _1;                                                       // 0x04F8(0x000C) (Config, NeedCtorLink)
	struct FString                                     _2;                                                       // 0x0504(0x000C) (Config, NeedCtorLink)
	struct FString                                     _3;                                                       // 0x0510(0x000C) (Config, NeedCtorLink)
	struct FString                                     _4;                                                       // 0x051C(0x000C) (Config, NeedCtorLink)
	struct FString                                     _5;                                                       // 0x0528(0x000C) (Config, NeedCtorLink)
	struct FString                                     _6;                                                       // 0x0534(0x000C) (Config, NeedCtorLink)
	struct FString                                     _7;                                                       // 0x0540(0x000C) (Config, NeedCtorLink)
	struct FString                                     _8;                                                       // 0x054C(0x000C) (Config, NeedCtorLink)
	struct FString                                     _9;                                                       // 0x0558(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown3A;                                                // 0x0564(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown3B;                                                // 0x0570(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown3C;                                                // 0x057C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown3D;                                                // 0x0588(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown3E;                                                // 0x0594(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown3F;                                                // 0x05A0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown40;                                                // 0x05AC(0x000C) (Config, NeedCtorLink)
	struct FString                                     A;                                                        // 0x05B8(0x000C) (Config, NeedCtorLink)
	struct FString                                     B;                                                        // 0x05C4(0x000C) (Config, NeedCtorLink)
	struct FString                                     C;                                                        // 0x05D0(0x000C) (Config, NeedCtorLink)
	struct FString                                     D;                                                        // 0x05DC(0x000C) (Config, NeedCtorLink)
	struct FString                                     E;                                                        // 0x05E8(0x000C) (Config, NeedCtorLink)
	struct FString                                     F;                                                        // 0x05F4(0x000C) (Config, NeedCtorLink)
	struct FString                                     G;                                                        // 0x0600(0x000C) (Config, NeedCtorLink)
	struct FString                                     H;                                                        // 0x060C(0x000C) (Config, NeedCtorLink)
	struct FString                                     i;                                                        // 0x0618(0x000C) (Config, NeedCtorLink)
	struct FString                                     j;                                                        // 0x0624(0x000C) (Config, NeedCtorLink)
	struct FString                                     k;                                                        // 0x0630(0x000C) (Config, NeedCtorLink)
	struct FString                                     L;                                                        // 0x063C(0x000C) (Config, NeedCtorLink)
	struct FString                                     M;                                                        // 0x0648(0x000C) (Config, NeedCtorLink)
	struct FString                                     n;                                                        // 0x0654(0x000C) (Config, NeedCtorLink)
	struct FString                                     O;                                                        // 0x0660(0x000C) (Config, NeedCtorLink)
	struct FString                                     p;                                                        // 0x066C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Q;                                                        // 0x0678(0x000C) (Config, NeedCtorLink)
	struct FString                                     R;                                                        // 0x0684(0x000C) (Config, NeedCtorLink)
	struct FString                                     S;                                                        // 0x0690(0x000C) (Config, NeedCtorLink)
	struct FString                                     t;                                                        // 0x069C(0x000C) (Config, NeedCtorLink)
	struct FString                                     U;                                                        // 0x06A8(0x000C) (Config, NeedCtorLink)
	struct FString                                     V;                                                        // 0x06B4(0x000C) (Config, NeedCtorLink)
	struct FString                                     W;                                                        // 0x06C0(0x000C) (Config, NeedCtorLink)
	struct FString                                     X;                                                        // 0x06CC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Y;                                                        // 0x06D8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Z;                                                        // 0x06E4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown5B;                                                // 0x06F0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown5C;                                                // 0x06FC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown5D;                                                // 0x0708(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown5E;                                                // 0x0714(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown5F;                                                // 0x0720(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad0;                                                  // 0x072C(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad1;                                                  // 0x0738(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad2;                                                  // 0x0744(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad3;                                                  // 0x0750(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad4;                                                  // 0x075C(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad5;                                                  // 0x0768(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad6;                                                  // 0x0774(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad7;                                                  // 0x0780(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad8;                                                  // 0x078C(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPad9;                                                  // 0x0798(0x000C) (Config, NeedCtorLink)
	struct FString                                     GreyStar;                                                 // 0x07A4(0x000C) (Config, NeedCtorLink)
	struct FString                                     GreyPlus;                                                 // 0x07B0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Separator;                                                // 0x07BC(0x000C) (Config, NeedCtorLink)
	struct FString                                     GreyMinus;                                                // 0x07C8(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumPadPeriod;                                             // 0x07D4(0x000C) (Config, NeedCtorLink)
	struct FString                                     GreySlash;                                                // 0x07E0(0x000C) (Config, NeedCtorLink)
	struct FString                                     F1;                                                       // 0x07EC(0x000C) (Config, NeedCtorLink)
	struct FString                                     F2;                                                       // 0x07F8(0x000C) (Config, NeedCtorLink)
	struct FString                                     F3;                                                       // 0x0804(0x000C) (Config, NeedCtorLink)
	struct FString                                     F4;                                                       // 0x0810(0x000C) (Config, NeedCtorLink)
	struct FString                                     F5;                                                       // 0x081C(0x000C) (Config, NeedCtorLink)
	struct FString                                     F6;                                                       // 0x0828(0x000C) (Config, NeedCtorLink)
	struct FString                                     F7;                                                       // 0x0834(0x000C) (Config, NeedCtorLink)
	struct FString                                     F8;                                                       // 0x0840(0x000C) (Config, NeedCtorLink)
	struct FString                                     F9;                                                       // 0x084C(0x000C) (Config, NeedCtorLink)
	struct FString                                     F10;                                                      // 0x0858(0x000C) (Config, NeedCtorLink)
	struct FString                                     F11;                                                      // 0x0864(0x000C) (Config, NeedCtorLink)
	struct FString                                     F12;                                                      // 0x0870(0x000C) (Config, NeedCtorLink)
	struct FString                                     F13;                                                      // 0x087C(0x000C) (Config, NeedCtorLink)
	struct FString                                     F14;                                                      // 0x0888(0x000C) (Config, NeedCtorLink)
	struct FString                                     F15;                                                      // 0x0894(0x000C) (Config, NeedCtorLink)
	struct FString                                     F16;                                                      // 0x08A0(0x000C) (Config, NeedCtorLink)
	struct FString                                     F17;                                                      // 0x08AC(0x000C) (Config, NeedCtorLink)
	struct FString                                     F18;                                                      // 0x08B8(0x000C) (Config, NeedCtorLink)
	struct FString                                     F19;                                                      // 0x08C4(0x000C) (Config, NeedCtorLink)
	struct FString                                     F20;                                                      // 0x08D0(0x000C) (Config, NeedCtorLink)
	struct FString                                     F21;                                                      // 0x08DC(0x000C) (Config, NeedCtorLink)
	struct FString                                     F22;                                                      // 0x08E8(0x000C) (Config, NeedCtorLink)
	struct FString                                     F23;                                                      // 0x08F4(0x000C) (Config, NeedCtorLink)
	struct FString                                     F24;                                                      // 0x0900(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown88;                                                // 0x090C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown89;                                                // 0x0918(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown8A;                                                // 0x0924(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown8B;                                                // 0x0930(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown8C;                                                // 0x093C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown8D;                                                // 0x0948(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown8E;                                                // 0x0954(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown8F;                                                // 0x0960(0x000C) (Config, NeedCtorLink)
	struct FString                                     NumLock;                                                  // 0x096C(0x000C) (Config, NeedCtorLink)
	struct FString                                     ScrollLock;                                               // 0x0978(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown92;                                                // 0x0984(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown93;                                                // 0x0990(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown94;                                                // 0x099C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown95;                                                // 0x09A8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown96;                                                // 0x09B4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown97;                                                // 0x09C0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown98;                                                // 0x09CC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown99;                                                // 0x09D8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown9A;                                                // 0x09E4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown9B;                                                // 0x09F0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown9C;                                                // 0x09FC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown9D;                                                // 0x0A08(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown9E;                                                // 0x0A14(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown9F;                                                // 0x0A20(0x000C) (Config, NeedCtorLink)
	struct FString                                     LShift;                                                   // 0x0A2C(0x000C) (Config, NeedCtorLink)
	struct FString                                     RShift;                                                   // 0x0A38(0x000C) (Config, NeedCtorLink)
	struct FString                                     LControl;                                                 // 0x0A44(0x000C) (Config, NeedCtorLink)
	struct FString                                     RControl;                                                 // 0x0A50(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownA4;                                                // 0x0A5C(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownA5;                                                // 0x0A68(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownA6;                                                // 0x0A74(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownA7;                                                // 0x0A80(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownA8;                                                // 0x0A8C(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownA9;                                                // 0x0A98(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownAA;                                                // 0x0AA4(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownAB;                                                // 0x0AB0(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownAC;                                                // 0x0ABC(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownAD;                                                // 0x0AC8(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownAE;                                                // 0x0AD4(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownAF;                                                // 0x0AE0(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB0;                                                // 0x0AEC(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB1;                                                // 0x0AF8(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB2;                                                // 0x0B04(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB3;                                                // 0x0B10(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB4;                                                // 0x0B1C(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB5;                                                // 0x0B28(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB6;                                                // 0x0B34(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB7;                                                // 0x0B40(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownB8;                                                // 0x0B4C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unicode;                                                  // 0x0B58(0x000C) (Config, NeedCtorLink)
	struct FString                                     Semicolon;                                                // 0x0B64(0x000C) (Config, NeedCtorLink)
	struct FString                                     Equals;                                                   // 0x0B70(0x000C) (Config, NeedCtorLink)
	struct FString                                     Comma;                                                    // 0x0B7C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Minus;                                                    // 0x0B88(0x000C) (Config, NeedCtorLink)
	struct FString                                     period;                                                   // 0x0B94(0x000C) (Config, NeedCtorLink)
	struct FString                                     Slash;                                                    // 0x0BA0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Tilde;                                                    // 0x0BAC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Mouse4;                                                   // 0x0BB8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Mouse5;                                                   // 0x0BC4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Mouse6;                                                   // 0x0BD0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Mouse7;                                                   // 0x0BDC(0x000C) (Config, NeedCtorLink)
	struct FString                                     Mouse8;                                                   // 0x0BE8(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownC6;                                                // 0x0BF4(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownC7;                                                // 0x0C00(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy1;                                                     // 0x0C0C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy2;                                                     // 0x0C18(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy3;                                                     // 0x0C24(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy4;                                                     // 0x0C30(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy5;                                                     // 0x0C3C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy6;                                                     // 0x0C48(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy7;                                                     // 0x0C54(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy8;                                                     // 0x0C60(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy9;                                                     // 0x0C6C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy10;                                                    // 0x0C78(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy11;                                                    // 0x0C84(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy12;                                                    // 0x0C90(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy13;                                                    // 0x0C9C(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy14;                                                    // 0x0CA8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy15;                                                    // 0x0CB4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Joy16;                                                    // 0x0CC0(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownD8;                                                // 0x0CCC(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownD9;                                                // 0x0CD8(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownDA;                                                // 0x0CE4(0x000C) (Config, NeedCtorLink)
	struct FString                                     LeftBracket;                                              // 0x0CF0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Backslash;                                                // 0x0CFC(0x000C) (Config, NeedCtorLink)
	struct FString                                     RightBracket;                                             // 0x0D08(0x000C) (Config, NeedCtorLink)
	struct FString                                     SingleQuote;                                              // 0x0D14(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownDF;                                                // 0x0D20(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownE0;                                                // 0x0D2C(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownE1;                                                // 0x0D38(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownE2;                                                // 0x0D44(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownE3;                                                // 0x0D50(0x000C) (Config, NeedCtorLink)
	struct FString                                     MouseX;                                                   // 0x0D5C(0x000C) (Config, NeedCtorLink)
	struct FString                                     MouseY;                                                   // 0x0D68(0x000C) (Config, NeedCtorLink)
	struct FString                                     MouseZ;                                                   // 0x0D74(0x000C) (Config, NeedCtorLink)
	struct FString                                     MouseW;                                                   // 0x0D80(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoyU;                                                     // 0x0D8C(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoyV;                                                     // 0x0D98(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoySlider1;                                               // 0x0DA4(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoySlider2;                                               // 0x0DB0(0x000C) (Config, NeedCtorLink)
	struct FString                                     MouseWheelUp;                                             // 0x0DBC(0x000C) (Config, NeedCtorLink)
	struct FString                                     MouseWheelDown;                                           // 0x0DC8(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown10E;                                               // 0x0DD4(0x000C) (Config, NeedCtorLink)
	struct FString                                     Unknown10F;                                               // 0x0DE0(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoyX;                                                     // 0x0DEC(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoyY;                                                     // 0x0DF8(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoyZ;                                                     // 0x0E04(0x000C) (Config, NeedCtorLink)
	struct FString                                     JoyR;                                                     // 0x0E10(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownF4;                                                // 0x0E1C(0x000C) (Config, NeedCtorLink)
	struct FString                                     UnknownF5;                                                // 0x0E28(0x000C) (Config, NeedCtorLink)
	struct FString                                     Attn;                                                     // 0x0E34(0x000C) (Config, NeedCtorLink)
	struct FString                                     CrSel;                                                    // 0x0E40(0x000C) (Config, NeedCtorLink)
	struct FString                                     ExSel;                                                    // 0x0E4C(0x000C) (Config, NeedCtorLink)
	struct FString                                     ErEof;                                                    // 0x0E58(0x000C) (Config, NeedCtorLink)
	struct FString                                     Play;                                                     // 0x0E64(0x000C) (Config, NeedCtorLink)
	struct FString                                     zoom;                                                     // 0x0E70(0x000C) (Config, NeedCtorLink)
	struct FString                                     NoName;                                                   // 0x0E7C(0x000C) (Config, NeedCtorLink)
	struct FString                                     PA1;                                                      // 0x0E88(0x000C) (Config, NeedCtorLink)
	struct FString                                     OEMClear;                                                 // 0x0E94(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData00[0x110];                                     // 0x0EA0(0x0110) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.Input");
		return ptr;
	}

};


// Class Object.IGEffectsSystemBase
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IGEffectsSystemBase : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IGEffectsSystemBase");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* STATIC_Function_GetEffectsSystemClass();
	bool Function_EffectEventTriggered(class AClass_Object_Actor* Source, const struct FName& EffectEvent, class AClass_Object_Actor* Target, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& overrideWorldLocation, const struct FStruct_Rotator& overrideWorldRotation, bool unTriggered, bool PlayOnTarget, bool QueryOnly, class UClass_Object_IEffectObserver* Observer, const struct FName& Tag);
	void Function_AddContextForNextEffectEvent(const struct FName& Context);
	void Function_AddPersistentContext(const struct FName& Context);
	void Function_Init(class AClass_Object_Actor* Owner);
};


// Class Object.Subsystem.Engine
// 0x0118 (0x0144 - 0x002C)
class UClass_Object_Subsystem_Engine : public UClass_Object_Subsystem
{
public:
	class UClass_Object_Field_Struct_State_Class*      AudioDevice;                                              // 0x002C(0x0004) (Edit, Config)
	class UClass_Object_Field_Struct_State_Class*      Console;                                                  // 0x0030(0x0004) (Edit, Config)
	class UClass_Object_Field_Struct_State_Class*      DefaultMenu;                                              // 0x0034(0x0004) (Edit, Config)
	class UClass_Object_Field_Struct_State_Class*      DefaultPlayerMenu;                                        // 0x0038(0x0004) (Edit, Config)
	class UClass_Object_Field_Struct_State_Class*      NetworkDevice;                                            // 0x003C(0x0004) (Edit, Config)
	class UClass_Object_Field_Struct_State_Class*      Language;                                                 // 0x0040(0x0004) (Edit, Config)
	class UClass_Object_Primitive*                     Cylinder;                                                 // 0x0044(0x0004)
	class UClass_Object_Client*                        Client;                                                   // 0x0048(0x0004) (Const)
	class UClass_Object_Subsystem_AudioSubsystem*      Audio;                                                    // 0x004C(0x0004) (Const)
	class UClass_Object_Subsystem_RenderDevice*        GRenDev;                                                  // 0x0050(0x0004) (Const)
	int                                                GameExecHook;                                             // 0x0054(0x0004) (Const, Transient)
	int                                                bShowFrameRate;                                           // 0x0058(0x0004)
	int                                                bShowRenderStats;                                         // 0x005C(0x0004)
	int                                                bShowHardwareStats;                                       // 0x0060(0x0004)
	int                                                bShowGameStats;                                           // 0x0064(0x0004)
	int                                                bShowNetStats;                                            // 0x0068(0x0004)
	int                                                bShowAnimStats;                                           // 0x006C(0x0004)
	int                                                bShowEngineStats;                                         // 0x0070(0x0004)
	int                                                bShowAIStats;                                             // 0x0074(0x0004)
	int                                                bShowLIPSincStats;                                        // 0x0078(0x0004)
	int                                                m_debugGui;                                               // 0x007C(0x0004) (Const, Transient)
	int                                                m_ownDebugGui;                                            // 0x0080(0x0004)
	int                                                bShowHistograph;                                          // 0x0084(0x0004)
	int                                                bShowXboxMemStats;                                        // 0x0088(0x0004)
	int                                                bShowMatineeStats;                                        // 0x008C(0x0004)
	int                                                bShowAudioStats;                                          // 0x0090(0x0004)
	int                                                bShowLightStats;                                          // 0x0094(0x0004)
	int                                                TickCycles;                                               // 0x0098(0x0004)
	int                                                GameCycles;                                               // 0x009C(0x0004)
	int                                                ClientCycles;                                             // 0x00A0(0x0004)
	int                                                CacheSizeMegs;                                            // 0x00A4(0x0004) (Edit, Config)
	int                                                UsePerforce;                                              // 0x00A8(0x0004) (Edit, Config)
	int                                                ForceActorCleanup;                                        // 0x00AC(0x0004) (Config)
	unsigned long                                      UseSound : 1;                                             // 0x00B0(0x0004) (Edit, Config)
	unsigned long                                      UseStaticMeshBatching : 1;                                // 0x00B0(0x0004) (Edit, Config)
	unsigned long                                      EnableDevTools : 1;                                       // 0x00B0(0x0004) (Edit, Config)
	unsigned long                                      EnableCheatProtection : 1;                                // 0x00B0(0x0004) (Edit, Config)
	float                                              CurrentTickRate;                                          // 0x00B4(0x0004) (Edit)
	int                                                ActiveControllerId;                                       // 0x00B8(0x0004)
	struct FStruct_Color                               C_WorldBox;                                               // 0x00BC(0x0004) (Edit, Config)
	struct FStruct_Color                               C_GroundPlane;                                            // 0x00C0(0x0004) (Edit, Config)
	struct FStruct_Color                               C_GroundHighlight;                                        // 0x00C4(0x0004) (Edit, Config)
	struct FStruct_Color                               C_BrushWire;                                              // 0x00C8(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Pivot;                                                  // 0x00CC(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Select;                                                 // 0x00D0(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Current;                                                // 0x00D4(0x0004) (Edit, Config)
	struct FStruct_Color                               C_AddWire;                                                // 0x00D8(0x0004) (Edit, Config)
	struct FStruct_Color                               C_SubtractWire;                                           // 0x00DC(0x0004) (Edit, Config)
	struct FStruct_Color                               C_GreyWire;                                               // 0x00E0(0x0004) (Edit, Config)
	struct FStruct_Color                               C_BrushVertex;                                            // 0x00E4(0x0004) (Edit, Config)
	struct FStruct_Color                               C_BrushSnap;                                              // 0x00E8(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Invalid;                                                // 0x00EC(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ActorWire;                                              // 0x00F0(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ActorHiWire;                                            // 0x00F4(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Black;                                                  // 0x00F8(0x0004) (Edit, Config)
	struct FStruct_Color                               C_White;                                                  // 0x00FC(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Mask;                                                   // 0x0100(0x0004) (Edit, Config)
	struct FStruct_Color                               C_SemiSolidWire;                                          // 0x0104(0x0004) (Edit, Config)
	struct FStruct_Color                               C_NonSolidWire;                                           // 0x0108(0x0004) (Edit, Config)
	struct FStruct_Color                               C_WireBackground;                                         // 0x010C(0x0004) (Edit, Config)
	struct FStruct_Color                               C_WireGridAxis;                                           // 0x0110(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ActorArrow;                                             // 0x0114(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ScaleBox;                                               // 0x0118(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ScaleBoxHi;                                             // 0x011C(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ZoneWire;                                               // 0x0120(0x0004) (Edit, Config)
	struct FStruct_Color                               C_Mover;                                                  // 0x0124(0x0004) (Edit, Config)
	struct FStruct_Color                               C_OrthoBackground;                                        // 0x0128(0x0004) (Edit, Config)
	struct FStruct_Color                               C_StaticMesh;                                             // 0x012C(0x0004) (Edit, Config)
	struct FStruct_Color                               C_StaticMeshDynamic;                                      // 0x0130(0x0004) (Edit, Config)
	struct FStruct_Color                               C_VolumeBrush;                                            // 0x0134(0x0004) (Edit, Config)
	struct FStruct_Color                               C_ConstraintLine;                                         // 0x0138(0x0004) (Edit, Config)
	struct FStruct_Color                               C_AnimMesh;                                               // 0x013C(0x0004) (Edit, Config)
	struct FStruct_Color                               C_TerrainWire;                                            // 0x0140(0x0004) (Edit, Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.Engine");
		return ptr;
	}

};


// Class Object.Subsystem.Engine.GameEngine
// 0x00EC (0x0230 - 0x0144)
class UClass_Object_Subsystem_Engine_GameEngine : public UClass_Object_Subsystem_Engine
{
public:
	class UClass_Object_LevelBase_Level*               GLevel;                                                   // 0x0144(0x0004)
	class UClass_Object_LevelBase_Level*               GEntry;                                                   // 0x0148(0x0004)
	class UClass_Object_LevelBase_PendingLevel*        GPendingLevel;                                            // 0x014C(0x0004)
	struct FStruct_URL                                 LastURL;                                                  // 0x0150(0x0044) (NeedCtorLink)
	TArray<struct FString>                             ServerActors;                                             // 0x0194(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             ServerPackages;                                           // 0x01A0(0x000C) (Config, NeedCtorLink)
	TArray<class UClass_Object*>                       DummyArray;                                               // 0x01AC(0x000C) (NeedCtorLink)
	class UClass_Object*                               DummyObject;                                              // 0x01B8(0x0004)
	unsigned long                                      bCheatProtection : 1;                                     // 0x01BC(0x0004)
	struct FString                                     MainMenuClass;                                            // 0x01C0(0x000C) (Config, NeedCtorLink)
	struct FString                                     InitialMenuClass;                                         // 0x01CC(0x000C) (Config, NeedCtorLink)
	struct FString                                     ConnectingMenuClass;                                      // 0x01D8(0x000C) (Config, NeedCtorLink)
	struct FString                                     DisconnectMenuClass;                                      // 0x01E4(0x000C) (Config, NeedCtorLink)
	struct FString                                     LoadingClass;                                             // 0x01F0(0x000C) (Config, NeedCtorLink)
	struct FString                                     ConnectFailureClass;                                      // 0x01FC(0x000C) (Config, NeedCtorLink)
	struct FString                                     ReceiveFileClass;                                         // 0x0208(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameSpyManagerClass;                                      // 0x0214(0x000C) (Config, NeedCtorLink)
	class UClass_Object_GameSpyManager*                GameSpyManager;                                           // 0x0220(0x0004)
	float                                              Padding1;                                                 // 0x0224(0x0004)
	float                                              Padding2;                                                 // 0x0228(0x0004)
	float                                              Padding3;                                                 // 0x022C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.Engine.GameEngine");
		return ptr;
	}

};


// Class Object.Polys
// 0x0010 (0x0038 - 0x0028)
class UClass_Object_Polys : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Polys");
		return ptr;
	}

};


// Class Object.Font
// 0x0034 (0x005C - 0x0028)
class UClass_Object_Font : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x34];                                      // 0x0028(0x0034) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Font");
		return ptr;
	}

};


// Class Object.Actor.FluidSurfaceOscillator
// 0x0018 (0x0418 - 0x0400)
class AClass_Object_Actor_FluidSurfaceOscillator : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Info_FluidSurfaceInfo*   FluidInfo;                                                // 0x0400(0x0004) (Edit)
	float                                              Frequency;                                                // 0x0404(0x0004) (Edit)
	unsigned char                                      Phase;                                                    // 0x0408(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	float                                              Strength;                                                 // 0x040C(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0410(0x0004) (Edit)
	float                                              OscTime;                                                  // 0x0414(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.FluidSurfaceOscillator");
		return ptr;
	}

};


// Class Object.Primitive.FluidSurfacePrimitive
// 0x0004 (0x0058 - 0x0054)
class UClass_Object_Primitive_FluidSurfacePrimitive : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.FluidSurfacePrimitive");
		return ptr;
	}

};


// Class Object.Actor.Info.FluidSurfaceInfo
// 0x0104 (0x0504 - 0x0400)
class AClass_Object_Actor_Info_FluidSurfaceInfo : public AClass_Object_Actor_Info
{
public:
	TEnumAsByte<EFluidGridType>                        FluidGridType;                                            // 0x0400(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	float                                              FluidGridSpacing;                                         // 0x0404(0x0004) (Edit)
	int                                                FluidXSize;                                               // 0x0408(0x0004) (Edit)
	int                                                FluidYSize;                                               // 0x040C(0x0004) (Edit)
	float                                              FluidHeightScale;                                         // 0x0410(0x0004) (Edit)
	float                                              FluidSpeed;                                               // 0x0414(0x0004) (Edit)
	float                                              FluidDamping;                                             // 0x0418(0x0004) (Edit)
	float                                              FluidNoiseFrequency;                                      // 0x041C(0x0004) (Edit)
	struct FStruct_Range                               FluidNoiseStrength;                                       // 0x0420(0x0008) (Edit)
	unsigned long                                      TestRipple : 1;                                           // 0x0428(0x0004) (Edit)
	float                                              TestRippleSpeed;                                          // 0x042C(0x0004) (Edit)
	float                                              TestRippleStrength;                                       // 0x0430(0x0004) (Edit)
	float                                              TestRippleRadius;                                         // 0x0434(0x0004) (Edit)
	float                                              UTiles;                                                   // 0x0438(0x0004) (Edit)
	float                                              UOffset;                                                  // 0x043C(0x0004) (Edit)
	float                                              VTiles;                                                   // 0x0440(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x0444(0x0004) (Edit)
	float                                              AlphaCurveScale;                                          // 0x0448(0x0004) (Edit)
	float                                              AlphaHeightScale;                                         // 0x044C(0x0004) (Edit)
	unsigned char                                      AlphaMax;                                                 // 0x0450(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	float                                              ShootStrength;                                            // 0x0454(0x0004) (Edit)
	float                                              ShootRadius;                                              // 0x0458(0x0004) (Edit)
	float                                              RippleVelocityFactor;                                     // 0x045C(0x0004) (Edit)
	float                                              TouchStrength;                                            // 0x0460(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      ShootEffect;                                              // 0x0464(0x0004) (Edit)
	unsigned long                                      OrientShootEffect : 1;                                    // 0x0468(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      TouchEffect;                                              // 0x046C(0x0004) (Edit)
	unsigned long                                      OrientTouchEffect : 1;                                    // 0x0470(0x0004) (Edit)
	TArray<int>                                        ClampBitmap;                                              // 0x0474(0x000C) (Const, NeedCtorLink)
	class AClass_Object_Actor_Info_TerrainInfo*        ClampTerrain;                                             // 0x0480(0x0004) (Edit)
	unsigned long                                      bShowBoundingBox : 1;                                     // 0x0484(0x0004) (Edit)
	unsigned long                                      bUseNoRenderZ : 1;                                        // 0x0484(0x0004) (Edit)
	float                                              NoRenderZ;                                                // 0x0488(0x0004) (Edit)
	float                                              WarmUpTime;                                               // 0x048C(0x0004) (Edit)
	float                                              UpdateRate;                                               // 0x0490(0x0004) (Edit)
	struct FStruct_Color                               FluidColor;                                               // 0x0494(0x0004) (Edit)
	TArray<float>                                      Verts0;                                                   // 0x0498(0x000C) (Const, Transient, NeedCtorLink)
	TArray<float>                                      Verts1;                                                   // 0x04A4(0x000C) (Const, Transient, NeedCtorLink)
	TArray<unsigned char>                              VertAlpha;                                                // 0x04B0(0x000C) (Const, Transient, NeedCtorLink)
	int                                                LatestVerts;                                              // 0x04BC(0x0004) (Const, Transient)
	struct FStruct_Box                                 FluidBoundingBox;                                         // 0x04C0(0x001C) (Const, Transient)
	struct FStruct_Vector                              FluidOrigin;                                              // 0x04DC(0x000C) (Const, Transient)
	float                                              TimeRollover;                                             // 0x04E8(0x0004) (Const, Transient)
	float                                              TestRippleAng;                                            // 0x04EC(0x0004) (Const, Transient)
	class UClass_Object_Primitive_FluidSurfacePrimitive* Primitive;                                                // 0x04F0(0x0004) (Const, Transient)
	TArray<class AClass_Object_Actor_FluidSurfaceOscillator*> Oscillators;                                              // 0x04F4(0x000C) (Const, Transient, NeedCtorLink)
	unsigned long                                      bHasWarmedUp : 1;                                         // 0x0500(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.FluidSurfaceInfo");
		return ptr;
	}


	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_Pling(const struct FStruct_Vector& Position, float Strength, float Radius);
};


// Class Object.GlobalTempObjects
// 0x000C (0x0034 - 0x0028)
class UClass_Object_GlobalTempObjects : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0028(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GlobalTempObjects");
		return ptr;
	}

};


// Class Object.Commandlet.MasterMD5Commandlet
// 0x0010 (0x01EC - 0x01DC)
class UClass_Object_Commandlet_MasterMD5Commandlet : public UClass_Object_Commandlet
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01DC(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.MasterMD5Commandlet");
		return ptr;
	}

};


// Class Object.Commandlet.ServerCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_ServerCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.ServerCommandlet");
		return ptr;
	}

};


// Class Object.Subsystem.RenderDevice
// 0x0098 (0x00C4 - 0x002C)
class UClass_Object_Subsystem_RenderDevice : public UClass_Object_Subsystem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x002C(0x0008) MISSED OFFSET
	int                                                TerrainLOD;                                               // 0x0034(0x0004) (Config)
	unsigned long                                      HighDetailActors : 1;                                     // 0x0038(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x0038(0x0001)
	unsigned long                                      SuperHighDetailActors : 1;                                // 0x003C(0x0004) (Config)
	unsigned long                                      UnknownData02 : 31;                                       // 0x003C(0x0001)
	unsigned long                                      DetailTextures : 1;                                       // 0x0040(0x0004) (Config)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0044(0x000C) MISSED OFFSET
	unsigned long                                      UseCompressedLightmaps : 1;                               // 0x0050(0x0004) (Config)
	unsigned long                                      UnknownData04 : 31;                                       // 0x0050(0x0001)
	unsigned long                                      UseStencilMasking : 1;                                    // 0x0054(0x0004) (Config)
	unsigned long                                      UnknownData05 : 31;                                       // 0x0054(0x0001)
	unsigned long                                      Use16bit : 1;                                             // 0x0058(0x0004) (Config)
	unsigned long                                      UnknownData06 : 31;                                       // 0x0058(0x0001)
	unsigned long                                      Use16bitTextures : 1;                                     // 0x005C(0x0004) (Config)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	unsigned long                                      LowQualityTerrain : 1;                                    // 0x0068(0x0004) (Config)
	unsigned long                                      UnknownData08 : 31;                                       // 0x0068(0x0001)
	unsigned long                                      SkyboxHack : 1;                                           // 0x006C(0x0004) (Config)
	unsigned char                                      UnknownData09[0x54];                                      // 0x0070(0x0054) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.RenderDevice");
		return ptr;
	}

};


// Class Object.Primitive.ConvexVolume
// 0x0034 (0x0088 - 0x0054)
class UClass_Object_Primitive_ConvexVolume : public UClass_Object_Primitive
{
public:
	unsigned char                                      UnknownData00[0x34];                                      // 0x0054(0x0034) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Primitive.ConvexVolume");
		return ptr;
	}

};


// Class Object.AdminBase
// 0x0004 (0x002C - 0x0028)
class UClass_Object_AdminBase : public UClass_Object
{
public:
	unsigned long                                      bAdmin : 1;                                               // 0x0028(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AdminBase");
		return ptr;
	}


	void Function_DoLogout();
	void Function_DoLogin(const struct FString& Username, const struct FString& Password);
	void Function_Created();
};


// Class Object.PlayerInput
// 0x0058 (0x0080 - 0x0028)
class UClass_Object_PlayerInput : public UClass_Object
{
public:
	unsigned long                                      bInvertMouse : 1;                                         // 0x0028(0x0004) (Config, GlobalConfig)
	unsigned long                                      bWasForward : 1;                                          // 0x0028(0x0004)
	unsigned long                                      bWasBack : 1;                                             // 0x0028(0x0004)
	unsigned long                                      bWasLeft : 1;                                             // 0x0028(0x0004)
	unsigned long                                      bWasRight : 1;                                            // 0x0028(0x0004)
	unsigned long                                      bEdgeForward : 1;                                         // 0x0028(0x0004)
	unsigned long                                      bEdgeBack : 1;                                            // 0x0028(0x0004)
	unsigned long                                      bEdgeLeft : 1;                                            // 0x0028(0x0004)
	unsigned long                                      bEdgeRight : 1;                                           // 0x0028(0x0004)
	unsigned long                                      bAdjustSampling : 1;                                      // 0x0028(0x0004)
	unsigned char                                      MouseSmoothingMode;                                       // 0x002C(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	float                                              MouseSmoothingStrength;                                   // 0x0030(0x0004) (Config, GlobalConfig)
	float                                              MouseSensitivity;                                         // 0x0034(0x0004) (Config, GlobalConfig)
	float                                              MouseSamplingTime;                                        // 0x0038(0x0004) (Config, GlobalConfig)
	float                                              MouseAccelThreshold;                                      // 0x003C(0x0004) (Config, GlobalConfig)
	float                                              SmoothedMouse[0x2];                                       // 0x0040(0x0004)
	float                                              ZeroTime[0x2];                                            // 0x0048(0x0004)
	float                                              SamplingTime[0x2];                                        // 0x0050(0x0004)
	float                                              MaybeTime[0x2];                                           // 0x0058(0x0004)
	float                                              OldSamples[0x4];                                          // 0x0060(0x0004)
	int                                                MouseSamples[0x2];                                        // 0x0070(0x0004)
	float                                              DoubleClickTimer;                                         // 0x0078(0x0004)
	float                                              DoubleClickTime;                                          // 0x007C(0x0004) (Config, GlobalConfig)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PlayerInput");
		return ptr;
	}


	TEnumAsByte<EDoubleClickDir> Function_CheckForDoubleClickMove(float DeltaTime);
	void Function_ChangeSnapView(bool B);
	void Function_UpdateSmoothing(int Mode);
	void Function_UpdateAccel(float F);
	void Function_UpdateSensitivity(float F);
	float Function_SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount);
	float Function_AccelerateMouse(float aMouse);
	void Function_SetSmoothingStrength(float F);
	void Function_SetSmoothingMode(unsigned char B);
	void Function_PlayerInput(float DeltaTime);
	bool Function_InvertLook();
};


// Class Object.Canvas
// 0x008C (0x00B4 - 0x0028)
class UClass_Object_Canvas : public UClass_Object
{
public:
	class UClass_Object_Font*                          DefaultFont;                                              // 0x0028(0x0004) (Const)
	class UClass_Object_Font*                          Font;                                                     // 0x002C(0x0004)
	float                                              SpaceX;                                                   // 0x0030(0x0004)
	float                                              SpaceY;                                                   // 0x0034(0x0004)
	float                                              OrgX;                                                     // 0x0038(0x0004)
	float                                              OrgY;                                                     // 0x003C(0x0004)
	float                                              ClipX;                                                    // 0x0040(0x0004)
	float                                              ClipY;                                                    // 0x0044(0x0004)
	float                                              CurX;                                                     // 0x0048(0x0004)
	float                                              CurY;                                                     // 0x004C(0x0004)
	float                                              Z;                                                        // 0x0050(0x0004)
	unsigned char                                      Style;                                                    // 0x0054(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              CurYL;                                                    // 0x0058(0x0004)
	struct FStruct_Color                               DrawColor;                                                // 0x005C(0x0004)
	unsigned long                                      bCenter : 1;                                              // 0x0060(0x0004)
	unsigned long                                      bNoSmooth : 1;                                            // 0x0060(0x0004)
	int                                                SizeX;                                                    // 0x0064(0x0004) (Const)
	int                                                SizeY;                                                    // 0x0068(0x0004) (Const)
	class UClass_Object_Font*                          TinyFont;                                                 // 0x006C(0x0004) (Const)
	class UClass_Object_Font*                          SmallFont;                                                // 0x0070(0x0004) (Const)
	class UClass_Object_Font*                          MedFont;                                                  // 0x0074(0x0004) (Const)
	struct FString                                     DefaultFontName;                                          // 0x0078(0x000C) (NeedCtorLink)
	struct FString                                     TinyFontName;                                             // 0x0084(0x000C) (NeedCtorLink)
	struct FString                                     SmallFontName;                                            // 0x0090(0x000C) (NeedCtorLink)
	struct FString                                     MedFontName;                                              // 0x009C(0x000C) (NeedCtorLink)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* WhiteTex;                                                 // 0x00A8(0x0004)
	class UClass_Object_Player_Viewport*               Viewport;                                                 // 0x00AC(0x0004) (Const)
	int                                                pCanvasUtil;                                              // 0x00B0(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Canvas");
		return ptr;
	}


	void Function_DrawBox(class UClass_Object_Canvas* Canvas, float Width, float height);
	void Function_DrawBracket(float Width, float height, float bracket_size);
	void Function_DrawLine(int direction, float Size);
	void Function_DrawHorizontal(float Y, float Width);
	void Function_DrawVertical(float X, float height);
	struct FStruct_Color STATIC_Function_MakeColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A);
	void Function_SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A);
	void Function_DrawRect(class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Tex, float RectX, float RectY);
	void Function_DrawIcon(class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Tex, float Scale);
	void Function_DrawPattern(class UClass_Object_Material* Tex, float XL, float YL, float Scale);
	void Function_SetClip(float X, float Y);
	void Function_SetOrigin(float X, float Y);
	void Function_SetPos(float X, float Y);
	void Function_Reset();
	void Function_DrawArbitraryTile(class UClass_Object_Material* Mat, float Xone, float Yone, float Xtwo, float Ytwo, float Xthree, float Ythree, float Xfour, float Yfour, float U, float V, float UL, float VL);
	void Function_DrawArbitraryLine(float x1, float y1, float x2, float y2, const struct FStruct_Color& LineColor);
	void Function_DrawTextMultiline(const struct FString& Text, const struct FStruct_Vector& Origin2D, const struct FStruct_Color& ForegroundColor, const struct FStruct_Color& BackgroundColor, int Wrapped, int Centered);
	void Function_DrawTextJustified(const struct FString& String, unsigned char Justification, float x1, float y1, float x2, float y2);
	void Function_DrawTileScaled(class UClass_Object_Material* Mat, float XScale, float YScale);
	void Function_DrawTileJustified(class UClass_Object_Material* Mat, unsigned char Justification, float XL, float YL);
	void Function_DrawTileStretched(class UClass_Object_Material* Mat, float XL, float YL);
	void Function_WrapStringToArray(const struct FString& Text, float dx, const struct FString& EOL, bool bIsCodedString, TArray<struct FString>* OutArray);
	void Function_DrawPortalScaled(int X, int Y, int Width, int height, class AClass_Object_Actor* CamActor, const struct FStruct_Vector& CamLocation, const struct FStruct_Rotator& CamRotation, int FOV, bool ClearZ);
	void Function_DrawPortal(int X, int Y, int Width, int height, class AClass_Object_Actor* CamActor, const struct FStruct_Vector& CamLocation, const struct FStruct_Rotator& CamRotation, int FOV, bool ClearZ);
	void Function_TextSize(const struct FString& String, float* XL, float* YL);
	void Function_DrawTextClipped(const struct FString& Text, bool bCheckHotKey);
	void Function_DrawTileClipped(class UClass_Object_Material* Mat, float XL, float YL, float U, float V, float UL, float VL);
	void Function_DrawPositionedActor(class AClass_Object_Actor* A, bool Wireframe, bool ClearZ, float DisplayFOV, const struct FStruct_Rotator& cameraRot, float zoom);
	void Function_DrawActor(class AClass_Object_Actor* A, bool Wireframe, bool ClearZ, float DisplayFOV);
	void Function_DrawTile(class UClass_Object_Material* Mat, float XL, float YL, float U, float V, float UL, float VL);
	void Function_DrawText(const struct FString& Text, bool CR);
	void Function_StrLen(const struct FString& String, float* XL, float* YL);
};


// Class Object.Client
// 0x0094 (0x00BC - 0x0028)
class UClass_Object_Client : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	unsigned long                                      CaptureMouse : 1;                                         // 0x0038(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x0038(0x0001)
	unsigned long                                      ScreenFlashes : 1;                                        // 0x003C(0x0004) (Config)
	unsigned long                                      UnknownData02 : 31;                                       // 0x003C(0x0001)
	unsigned long                                      NoLighting : 1;                                           // 0x0040(0x0004) (Config)
	unsigned long                                      UnknownData03 : 31;                                       // 0x0040(0x0001)
	unsigned long                                      Decals : 1;                                               // 0x0044(0x0004) (Config)
	unsigned long                                      UnknownData04 : 31;                                       // 0x0044(0x0001)
	unsigned long                                      NoDynamicLights : 1;                                      // 0x0048(0x0004) (Config)
	unsigned long                                      UnknownData05 : 31;                                       // 0x0048(0x0001)
	unsigned long                                      NoFractalAnim : 1;                                        // 0x004C(0x0004) (Config)
	unsigned long                                      UnknownData06 : 31;                                       // 0x004C(0x0001)
	unsigned long                                      Coronas : 1;                                              // 0x0050(0x0004) (Config)
	unsigned long                                      UnknownData07 : 31;                                       // 0x0050(0x0001)
	unsigned long                                      DecoLayers : 1;                                           // 0x0054(0x0004) (Config)
	unsigned long                                      UnknownData08 : 31;                                       // 0x0054(0x0001)
	unsigned long                                      Projectors : 1;                                           // 0x0058(0x0004) (Config)
	unsigned long                                      UnknownData09 : 31;                                       // 0x0058(0x0001)
	unsigned long                                      ReportDynamicUploads : 1;                                 // 0x005C(0x0004) (Config)
	int                                                WindowedViewportXPos;                                     // 0x0060(0x0004) (Config)
	int                                                WindowedViewportYPos;                                     // 0x0064(0x0004) (Config)
	int                                                WindowedViewportXPosEditor;                               // 0x0068(0x0004) (Config)
	int                                                WindowedViewportYPosEditor;                               // 0x006C(0x0004) (Config)
	int                                                WindowedViewportX;                                        // 0x0070(0x0004) (Config)
	int                                                WindowedViewportY;                                        // 0x0074(0x0004) (Config)
	int                                                FullscreenViewportX;                                      // 0x0078(0x0004) (Config)
	int                                                FullscreenViewportY;                                      // 0x007C(0x0004) (Config)
	float                                              Brightness;                                               // 0x0080(0x0004) (Config)
	float                                              Contrast;                                                 // 0x0084(0x0004) (Config)
	float                                              Gamma;                                                    // 0x0088(0x0004) (Config)
	unsigned char                                      UnknownData10[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TEnumAsByte<ETextureDetail>                        TextureDetailWorld;                                       // 0x0090(0x0001) (Config)
	unsigned char                                      UnknownData11[0xF];                                       // 0x0091(0x000F) MISSED OFFSET
	TEnumAsByte<ETextureDetail>                        TextureDetailTerrain;                                     // 0x00A0(0x0001) (Config)
	unsigned char                                      UnknownData12[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	TEnumAsByte<ETextureDetail>                        TextureDetailLightmap;                                    // 0x00A8(0x0001) (Config)
	unsigned char                                      UnknownData13[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	TEnumAsByte<ETextureDetail>                        TextureDetailInterface;                                   // 0x00AC(0x0001) (Config)
	unsigned char                                      UnknownData14[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	float                                              MinDesiredFrameRate;                                      // 0x00B0(0x0004) (Config)
	unsigned char                                      UnknownData15[0x8];                                       // 0x00B4(0x0008) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Client");
		return ptr;
	}

};


// Class Object.CameraEffect
// 0x0008 (0x0030 - 0x0028)
class UClass_Object_CameraEffect : public UClass_Object
{
public:
	float                                              Alpha;                                                    // 0x0028(0x0004)
	unsigned long                                      FinalEffect : 1;                                          // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CameraEffect");
		return ptr;
	}

};


// Class Object.CameraEffect.CameraOverlay
// 0x0008 (0x0038 - 0x0030)
class UClass_Object_CameraEffect_CameraOverlay : public UClass_Object_CameraEffect
{
public:
	struct FStruct_Color                               OverlayColor;                                             // 0x0030(0x0004) (Edit)
	class UClass_Object_Material*                      OverlayMaterial;                                          // 0x0034(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CameraEffect.CameraOverlay");
		return ptr;
	}

};


// Class Object.CameraEffect.MotionBlur
// 0x0010 (0x0040 - 0x0030)
class UClass_Object_CameraEffect_MotionBlur : public UClass_Object_CameraEffect
{
public:
	unsigned char                                      BlurAlpha;                                                // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                RenderTargets[0x2];                                       // 0x0034(0x0004) (Const, Native)
	float                                              LastFrameTime;                                            // 0x003C(0x0004) (Const, Native)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CameraEffect.MotionBlur");
		return ptr;
	}

};


// Class Object.Player.Viewport
// 0x0178 (0x01E0 - 0x0068)
class UClass_Object_Player_Viewport : public UClass_Object_Player
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0068(0x0010) MISSED OFFSET
	unsigned long                                      bScreenshotWatermark : 1;                                 // 0x0078(0x0004) (Config)
	int                                                WatermarkPercentComplete;                                 // 0x007C(0x0004) (Config)
	struct FString                                     WatermarkFontName;                                        // 0x0080(0x000C) (Config, NeedCtorLink)
	float                                              WatermarkXStart;                                          // 0x008C(0x0004) (Config)
	float                                              WatermarkYStart;                                          // 0x0090(0x0004) (Config)
	float                                              WatermarkXEnd;                                            // 0x0094(0x0004) (Config)
	float                                              WatermarkYEnd;                                            // 0x0098(0x0004) (Config)
	float                                              WatermarkSpacing;                                         // 0x009C(0x0004) (Config)
	int                                                WatermarkJustify;                                         // 0x00A0(0x0004) (Config)
	unsigned char                                      WatermarkR;                                               // 0x00A4(0x0001) (Config)
	unsigned char                                      WatermarkG;                                               // 0x00A5(0x0001) (Config)
	unsigned char                                      WatermarkB;                                               // 0x00A6(0x0001) (Config)
	unsigned char                                      WatermarkA;                                               // 0x00A7(0x0001) (Config)
	unsigned char                                      UnknownData01[0x138];                                     // 0x00A8(0x0138) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Player.Viewport");
		return ptr;
	}

};


// Class Object.ParticleEmitter.BeamEmitter
// 0x010C (0x05BC - 0x04B0)
class UClass_Object_ParticleEmitter_BeamEmitter : public UClass_Object_ParticleEmitter
{
public:
	struct FStruct_Range                               BeamDistanceRange;                                        // 0x04B0(0x0008) (Edit)
	TArray<struct FStruct_ParticleBeamEndPoint>        BeamEndPoints;                                            // 0x04B8(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EBeamEndPointType>                     DetermineEndPointBy;                                      // 0x04C4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	float                                              BeamTextureUScale;                                        // 0x04C8(0x0004) (Edit)
	float                                              BeamTextureVScale;                                        // 0x04CC(0x0004) (Edit)
	int                                                RotatingSheets;                                           // 0x04D0(0x0004) (Edit)
	unsigned long                                      TriggerEndpoint : 1;                                      // 0x04D4(0x0004) (Edit)
	struct FStruct_RangeVector                         LowFrequencyNoiseRange;                                   // 0x04D8(0x0018) (Edit)
	int                                                LowFrequencyPoints;                                       // 0x04F0(0x0004) (Edit)
	struct FStruct_RangeVector                         HighFrequencyNoiseRange;                                  // 0x04F4(0x0018) (Edit)
	int                                                HighFrequencyPoints;                                      // 0x050C(0x0004) (Edit)
	TArray<struct FStruct_ParticleBeamScale>           LFScaleFactors;                                           // 0x0510(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_ParticleBeamScale>           HFScaleFactors;                                           // 0x051C(0x000C) (Edit, NeedCtorLink)
	float                                              LFScaleRepeats;                                           // 0x0528(0x0004) (Edit)
	float                                              HFScaleRepeats;                                           // 0x052C(0x0004) (Edit)
	unsigned long                                      UseHighFrequencyScale : 1;                                // 0x0530(0x0004) (Edit)
	unsigned long                                      UseLowFrequencyScale : 1;                                 // 0x0530(0x0004) (Edit)
	unsigned long                                      NoiseDeterminesEndPoint : 1;                              // 0x0530(0x0004) (Edit)
	struct FStruct_RangeVector                         DynamicHFNoiseRange;                                      // 0x0534(0x0018) (Edit)
	struct FStruct_Range                               DynamicHFNoisePointsRange;                                // 0x054C(0x0008) (Edit)
	struct FStruct_Range                               DynamicTimeBetweenNoiseRange;                             // 0x0554(0x0008) (Edit)
	unsigned long                                      UseBranching : 1;                                         // 0x055C(0x0004) (Edit)
	struct FStruct_Range                               BranchProbability;                                        // 0x0560(0x0008) (Edit)
	struct FStruct_Range                               BranchHFPointsRange;                                      // 0x0568(0x0008) (Edit)
	int                                                BranchEmitter;                                            // 0x0570(0x0004) (Edit)
	struct FStruct_Range                               BranchSpawnAmountRange;                                   // 0x0574(0x0008) (Edit)
	unsigned long                                      LinkupLifetime : 1;                                       // 0x057C(0x0004) (Edit)
	int                                                SheetsUsed;                                               // 0x0580(0x0004) (Transient)
	int                                                VerticesPerParticle;                                      // 0x0584(0x0004) (Transient)
	int                                                IndicesPerParticle;                                       // 0x0588(0x0004) (Transient)
	int                                                PrimitivesPerParticle;                                    // 0x058C(0x0004) (Transient)
	float                                              BeamValueSum;                                             // 0x0590(0x0004) (Transient)
	TArray<struct FStruct_ParticleBeamData>            HFPoints;                                                 // 0x0594(0x000C) (Transient, NeedCtorLink)
	TArray<struct FStruct_Vector>                      LFPoints;                                                 // 0x05A0(0x000C) (Transient, NeedCtorLink)
	TArray<class AClass_Object_Actor*>                 HitActors;                                                // 0x05AC(0x000C) (Transient, NeedCtorLink)
	float                                              TimeSinceLastDynamicNoise;                                // 0x05B8(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter.BeamEmitter");
		return ptr;
	}

};


// Class Object.I3DL2Listener
// 0x0074 (0x009C - 0x0028)
class UClass_Object_I3DL2Listener : public UClass_Object
{
public:
	float                                              EnvironmentSize;                                          // 0x0028(0x0004) (Edit)
	float                                              EnvironmentDiffusion;                                     // 0x002C(0x0004) (Edit)
	int                                                Room;                                                     // 0x0030(0x0004) (Edit)
	int                                                RoomHF;                                                   // 0x0034(0x0004) (Edit)
	int                                                RoomLF;                                                   // 0x0038(0x0004) (Edit)
	float                                              DecayTime;                                                // 0x003C(0x0004) (Edit)
	float                                              DecayHFRatio;                                             // 0x0040(0x0004) (Edit)
	float                                              DecayLFRatio;                                             // 0x0044(0x0004) (Edit)
	int                                                Reflections;                                              // 0x0048(0x0004) (Edit)
	float                                              ReflectionsDelay;                                         // 0x004C(0x0004) (Edit)
	struct FStruct_Vector                              ReflectionsPan;                                           // 0x0050(0x000C) (Edit)
	int                                                Reverb;                                                   // 0x005C(0x0004) (Edit)
	float                                              ReverbDelay;                                              // 0x0060(0x0004) (Edit)
	struct FStruct_Vector                              ReverbPan;                                                // 0x0064(0x000C) (Edit)
	float                                              EchoTime;                                                 // 0x0070(0x0004) (Edit)
	float                                              EchoDepth;                                                // 0x0074(0x0004) (Edit)
	float                                              ModulationTime;                                           // 0x0078(0x0004) (Edit)
	float                                              ModulationDepth;                                          // 0x007C(0x0004) (Edit)
	float                                              RoomRolloffFactor;                                        // 0x0080(0x0004) (Edit)
	float                                              AirAbsorptionHF;                                          // 0x0084(0x0004) (Edit)
	float                                              HFReference;                                              // 0x0088(0x0004) (Edit)
	float                                              LFReference;                                              // 0x008C(0x0004) (Edit)
	unsigned long                                      bDecayTimeScale : 1;                                      // 0x0090(0x0004) (Edit)
	unsigned long                                      bReflectionsScale : 1;                                    // 0x0090(0x0004) (Edit)
	unsigned long                                      bReflectionsDelayScale : 1;                               // 0x0090(0x0004) (Edit)
	unsigned long                                      bReverbScale : 1;                                         // 0x0090(0x0004) (Edit)
	unsigned long                                      bReverbDelayScale : 1;                                    // 0x0090(0x0004) (Edit)
	unsigned long                                      bEchoTimeScale : 1;                                       // 0x0090(0x0004) (Edit)
	unsigned long                                      bModulationTimeScale : 1;                                 // 0x0090(0x0004) (Edit)
	unsigned long                                      bDecayHFLimit : 1;                                        // 0x0090(0x0004) (Edit)
	int                                                Environment;                                              // 0x0094(0x0004) (Transient)
	int                                                Updated;                                                  // 0x0098(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.I3DL2Listener");
		return ptr;
	}

};


// Class Object.Subsystem.AudioSubsystem
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Subsystem_AudioSubsystem : public UClass_Object_Subsystem
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.AudioSubsystem");
		return ptr;
	}

};


// Class Object.Sound
// 0x003C (0x0064 - 0x0028)
class UClass_Object_Sound : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0028(0x003C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Sound");
		return ptr;
	}

};


// Class Object.Actor.Info.MapList
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_Info_MapList : public AClass_Object_Actor_Info
{
public:
	TArray<struct FString>                             Maps;                                                     // 0x0400(0x000C) (Edit, Config, NeedCtorLink)
	int                                                MapNum;                                                   // 0x040C(0x0004) (Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MapList");
		return ptr;
	}


	struct FString Function_GetNextMap();
};


// Class Object.IEffectObserver
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IEffectObserver : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IEffectObserver");
		return ptr;
	}


	void Function_OnEffectInitialized(class AClass_Object_Actor* inInitializedEffect);
	void Function_OnEffectStopped(class AClass_Object_Actor* inStoppedEffect, bool Completed);
	void Function_OnEffectStarted(class AClass_Object_Actor* inStartedEffect);
};


// Class Object.Actor.NavigationPoint
// 0x005C (0x045C - 0x0400)
class AClass_Object_Actor_NavigationPoint : public AClass_Object_Actor
{
public:
	TArray<class UClass_Object_ReachSpec*>             PathList;                                                 // 0x0400(0x000C) (Const, NeedCtorLink)
	struct FName                                       ProscribedPaths[0x4];                                     // 0x040C(0x0004) (Edit)
	struct FName                                       ForcedPaths[0x4];                                         // 0x041C(0x0004) (Edit)
	int                                                visitedWeight;                                            // 0x042C(0x0004)
	int                                                bestPathWeight;                                           // 0x0430(0x0004) (Const)
	class AClass_Object_Actor_NavigationPoint*         nextNavigationPoint;                                      // 0x0434(0x0004) (Const)
	class AClass_Object_Actor_NavigationPoint*         nextOrdered;                                              // 0x0438(0x0004) (Const)
	class AClass_Object_Actor_NavigationPoint*         prevOrdered;                                              // 0x043C(0x0004) (Const)
	class AClass_Object_Actor_NavigationPoint*         previousPath;                                             // 0x0440(0x0004) (Const)
	int                                                cost;                                                     // 0x0444(0x0004)
	int                                                ExtraCost;                                                // 0x0448(0x0004) (Edit)
	int                                                TransientCost;                                            // 0x044C(0x0004) (Transient)
	int                                                FearCost;                                                 // 0x0450(0x0004) (Transient)
	unsigned long                                      bEndPoint : 1;                                            // 0x0454(0x0004) (Transient)
	unsigned long                                      bTransientEndPoint : 1;                                   // 0x0454(0x0004) (Transient)
	unsigned long                                      taken : 1;                                                // 0x0454(0x0004)
	unsigned long                                      bBlocked : 1;                                             // 0x0454(0x0004) (Edit)
	unsigned long                                      bPropagatesSound : 1;                                     // 0x0454(0x0004) (Edit)
	unsigned long                                      bOneWayPath : 1;                                          // 0x0454(0x0004) (Edit)
	unsigned long                                      bNeverUseStrafing : 1;                                    // 0x0454(0x0004) (Edit)
	unsigned long                                      bAlwaysUseStrafing : 1;                                   // 0x0454(0x0004) (Edit)
	unsigned long                                      bForceNoStrafing : 1;                                     // 0x0454(0x0004) (Const)
	unsigned long                                      bAutoBuilt : 1;                                           // 0x0454(0x0004) (Const)
	unsigned long                                      bSpecialMove : 1;                                         // 0x0454(0x0004)
	unsigned long                                      bNoAutoConnect : 1;                                       // 0x0454(0x0004)
	unsigned long                                      bNotBased : 1;                                            // 0x0454(0x0004) (Const)
	unsigned long                                      bPathsChanged : 1;                                        // 0x0454(0x0004) (Const)
	unsigned long                                      bDestinationOnly : 1;                                     // 0x0454(0x0004)
	unsigned long                                      bSourceOnly : 1;                                          // 0x0454(0x0004)
	unsigned long                                      bSpecialForced : 1;                                       // 0x0454(0x0004)
	unsigned long                                      bMustBeReachable : 1;                                     // 0x0454(0x0004)
	float                                              InventoryDist;                                            // 0x0458(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint");
		return ptr;
	}


	void Function_MoverClosed();
	void Function_MoverOpened();
	bool Function_ProceedWithMove(class AClass_Object_Actor_Pawn* Other);
	bool Function_SuggestMovePreparation(class AClass_Object_Actor_Pawn* Other);
	float Function_DetourWeight(class AClass_Object_Actor_Pawn* Other, float PathWeight);
	bool Function_Accept(class AClass_Object_Actor* Incoming, class AClass_Object_Actor* Source);
	int Function_SpecialCost(class AClass_Object_Actor_Pawn* Seeker, class UClass_Object_ReachSpec* Path);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.NavigationPoint.JumpDest
// 0x00A8 (0x0504 - 0x045C)
class AClass_Object_Actor_NavigationPoint_JumpDest : public AClass_Object_Actor_NavigationPoint
{
public:
	unsigned long                                      bOptionalJumpDest : 1;                                    // 0x045C(0x0004)
	int                                                NumUpstreamPaths;                                         // 0x0460(0x0004)
	class UClass_Object_ReachSpec*                     UpstreamPaths[0x8];                                       // 0x0464(0x0004)
	struct FStruct_Vector                              NeededJump[0x8];                                          // 0x0484(0x000C)
	float                                              CalculatedGravityZ[0x8];                                  // 0x04E4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.JumpDest");
		return ptr;
	}


	void Function_DoJump(class AClass_Object_Actor_Pawn* Other);
	int Function_SpecialCost_SpecialCost(class AClass_Object_Actor_Pawn* Other, class UClass_Object_ReachSpec* Path);
	int Function_GetPathIndex(class UClass_Object_ReachSpec* Path);
};


// Class Object.Actor.NavigationPoint.JumpPad
// 0x0018 (0x0474 - 0x045C)
class AClass_Object_Actor_NavigationPoint_JumpPad : public AClass_Object_Actor_NavigationPoint
{
public:
	struct FStruct_Vector                              JumpVelocity;                                             // 0x045C(0x000C)
	class AClass_Object_Actor*                         JumpTarget;                                               // 0x0468(0x0004)
	float                                              JumpZModifier;                                            // 0x046C(0x0004) (Edit)
	class UClass_Object_Sound*                         JumpSound;                                                // 0x0470(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.JumpPad");
		return ptr;
	}


	void Function_PostTouch_PostTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.AntiPortalActor
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_AntiPortalActor : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.AntiPortalActor");
		return ptr;
	}

};


// Class Object.Actor.NavigationPoint.Door
// 0x0014 (0x0470 - 0x045C)
class AClass_Object_Actor_NavigationPoint_Door : public AClass_Object_Actor_NavigationPoint
{
public:
	struct FName                                       DoorTag;                                                  // 0x045C(0x0004) (Edit)
	class AClass_Object_Actor_Mover*                   MyDoor;                                                   // 0x0460(0x0004)
	struct FName                                       DoorTrigger;                                              // 0x0464(0x0004) (Edit)
	class AClass_Object_Actor*                         RecommendedTrigger;                                       // 0x0468(0x0004)
	unsigned long                                      bInitiallyClosed : 1;                                     // 0x046C(0x0004) (Edit)
	unsigned long                                      bBlockedWhenClosed : 1;                                   // 0x046C(0x0004) (Edit)
	unsigned long                                      bDoorOpen : 1;                                            // 0x046C(0x0004)
	unsigned long                                      bTempNoCollide : 1;                                       // 0x046C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.Door");
		return ptr;
	}


	class AClass_Object_Actor* Function_SpecialHandling_SpecialHandling(class AClass_Object_Actor_Pawn* Other);
	void Function_MoverClosed_MoverClosed();
	void Function_MoverOpened_MoverOpened();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.NavigationPoint.Door.AutoDoor
// 0x0000 (0x0470 - 0x0470)
class AClass_Object_Actor_NavigationPoint_Door_AutoDoor : public AClass_Object_Actor_NavigationPoint_Door
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.Door.AutoDoor");
		return ptr;
	}

};


// Class Object.Actor.NavigationPoint.SmallNavigationPoint
// 0x0000 (0x045C - 0x045C)
class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint : public AClass_Object_Actor_NavigationPoint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.SmallNavigationPoint");
		return ptr;
	}

};


// Class Object.Actor.NavigationPoint.SmallNavigationPoint.Ladder
// 0x0008 (0x0464 - 0x045C)
class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Ladder : public AClass_Object_Actor_NavigationPoint_SmallNavigationPoint
{
public:
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume_LadderVolume* MyLadder;                                                 // 0x045C(0x0004)
	class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Ladder* LadderList;                                               // 0x0460(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.SmallNavigationPoint.Ladder");
		return ptr;
	}


	bool Function_SuggestMovePreparation_SuggestMovePreparation(class AClass_Object_Actor_Pawn* Other);
};


// Class Object.Actor.NavigationPoint.SmallNavigationPoint.Ladder.AutoLadder
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Ladder_AutoLadder : public AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Ladder
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.SmallNavigationPoint.Ladder.AutoLadder");
		return ptr;
	}

};


// Class Object.Actor.Brush.Volume.BlockingVolume
// 0x0004 (0x0490 - 0x048C)
class AClass_Object_Actor_Brush_Volume_BlockingVolume : public AClass_Object_Actor_Brush_Volume
{
public:
	unsigned long                                      bClampFluid : 1;                                          // 0x048C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.BlockingVolume");
		return ptr;
	}

};


// Class Object.Actor.Info.PotentialClimbWatcher
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info_PotentialClimbWatcher : public AClass_Object_Actor_Info
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.PotentialClimbWatcher");
		return ptr;
	}


	void Function_Tick_Tick(float DeltaTime);
};


// Class Object.Actor.Brush.Volume.PhysicsVolume.LadderVolume
// 0x0038 (0x0548 - 0x0510)
class AClass_Object_Actor_Brush_Volume_PhysicsVolume_LadderVolume : public AClass_Object_Actor_Brush_Volume_PhysicsVolume
{
public:
	struct FName                                       ClimbingAnimation;                                        // 0x0510(0x0004) (Edit)
	struct FName                                       TopAnimation;                                             // 0x0514(0x0004) (Edit)
	struct FStruct_Rotator                             WallDir;                                                  // 0x0518(0x000C) (Edit)
	struct FStruct_Vector                              LookDir;                                                  // 0x0524(0x000C)
	struct FStruct_Vector                              ClimbDir;                                                 // 0x0530(0x000C)
	class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Ladder* LadderList;                                               // 0x053C(0x0004) (Const)
	unsigned long                                      bNoPhysicalLadder : 1;                                    // 0x0540(0x0004) (Edit)
	unsigned long                                      bAutoPath : 1;                                            // 0x0540(0x0004) (Edit)
	class AClass_Object_Actor_Pawn*                    PendingClimber;                                           // 0x0544(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.PhysicsVolume.LadderVolume");
		return ptr;
	}


	void Function_PhysicsChangedFor_PhysicsChangedFor(class AClass_Object_Actor* Other);
	void Function_PawnLeavingVolume_PawnLeavingVolume(class AClass_Object_Actor_Pawn* p);
	void Function_PawnEnteredVolume_PawnEnteredVolume(class AClass_Object_Actor_Pawn* p);
	bool Function_InUse(class AClass_Object_Actor_Pawn* Ignored);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Brush.Volume.PhysicsVolume.DefaultPhysicsVolume
// 0x0000 (0x0510 - 0x0510)
class AClass_Object_Actor_Brush_Volume_PhysicsVolume_DefaultPhysicsVolume : public AClass_Object_Actor_Brush_Volume_PhysicsVolume
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.PhysicsVolume.DefaultPhysicsVolume");
		return ptr;
	}


	void Function_Destroyed_Destroyed();
};


// Class Object.Actor.Triggers
// 0x0008 (0x0408 - 0x0400)
class AClass_Object_Actor_Triggers : public AClass_Object_Actor
{
public:
	unsigned long                                      trigger_cutscene : 1;                                     // 0x0400(0x0004) (Edit)
	struct FName                                       cutscene_name;                                            // 0x0404(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Triggers");
		return ptr;
	}


	void Function_TriggerEvent_TriggerEvent(const struct FName& EventName, class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_TriggerMojoCutscene(const struct FName& cutscene_name);
};


// Class Object.Actor.Triggers.LineOfSightTrigger
// 0x001C (0x0424 - 0x0408)
class AClass_Object_Actor_Triggers_LineOfSightTrigger : public AClass_Object_Actor_Triggers
{
public:
	float                                              MaxViewDist;                                              // 0x0408(0x0004) (Edit)
	float                                              OldTickTime;                                              // 0x040C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0410(0x0004) (Edit)
	unsigned long                                      bTriggered : 1;                                           // 0x0410(0x0004)
	struct FName                                       SeenActorTag;                                             // 0x0414(0x0004) (Edit)
	class AClass_Object_Actor*                         SeenActor;                                                // 0x0418(0x0004)
	int                                                MaxViewAngle;                                             // 0x041C(0x0004) (Edit)
	float                                              RequiredViewDir;                                          // 0x0420(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Triggers.LineOfSightTrigger");
		return ptr;
	}


	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_PlayerSeesMe(class AClass_Object_Actor_Controller_PlayerController* p);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.DamageType
// 0x00C4 (0x04C4 - 0x0400)
class AClass_Object_Actor_DamageType : public AClass_Object_Actor
{
public:
	struct FString                                     DeathString;                                              // 0x0400(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     FemaleSuicide;                                            // 0x040C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     MaleSuicide;                                              // 0x0418(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              ViewFlash;                                                // 0x0424(0x0004) (Edit)
	struct FStruct_Vector                              ViewFog;                                                  // 0x0428(0x000C) (Edit)
	class UClass_Object_Field_Struct_State_Class*      DamageEffect;                                             // 0x0434(0x0004) (Edit)
	struct FString                                     DamageWeaponName;                                         // 0x0438(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bArmorStops : 1;                                          // 0x0444(0x0004) (Edit)
	unsigned long                                      bInstantHit : 1;                                          // 0x0444(0x0004) (Edit)
	unsigned long                                      bFastInstantHit : 1;                                      // 0x0444(0x0004) (Edit)
	unsigned long                                      bAlwaysGibs : 1;                                          // 0x0444(0x0004) (Edit)
	unsigned long                                      bNoSpecificLocation : 1;                                  // 0x0444(0x0004) (Edit)
	unsigned long                                      bSkeletize : 1;                                           // 0x0444(0x0004) (Edit)
	unsigned long                                      bCausesBlood : 1;                                         // 0x0444(0x0004) (Edit)
	unsigned long                                      bKUseOwnDeathVel : 1;                                     // 0x0444(0x0004) (Edit)
	float                                              GibModifier;                                              // 0x0448(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      PawnDamageEffect;                                         // 0x044C(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      PawnDamageEmitter;                                        // 0x0450(0x0004) (Edit)
	TArray<class UClass_Object_Sound*>                 PawnDamageSounds;                                         // 0x0454(0x000C) (Edit, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      LowGoreDamageEffect;                                      // 0x0460(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      LowGoreDamageEmitter;                                     // 0x0464(0x0004) (Edit)
	TArray<class UClass_Object_Sound*>                 LowGoreDamageSounds;                                      // 0x0468(0x000C) (Edit, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      LowDetailEffect;                                          // 0x0474(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      LowDetailEmitter;                                         // 0x0478(0x0004) (Edit)
	float                                              FlashScale;                                               // 0x047C(0x0004) (Edit)
	struct FStruct_Vector                              FlashFog;                                                 // 0x0480(0x000C) (Edit)
	int                                                DamageDesc;                                               // 0x048C(0x0004) (Edit)
	int                                                DamageThreshold;                                          // 0x0490(0x0004) (Edit)
	struct FStruct_Vector                              DamageKick;                                               // 0x0494(0x000C) (Edit)
	float                                              KDamageImpulse;                                           // 0x04A0(0x0004) (Edit)
	float                                              KDeathVel;                                                // 0x04A4(0x0004) (Edit)
	float                                              KDeathUpKick;                                             // 0x04A8(0x0004) (Edit)
	float                                              hkHitImpulseScale;                                        // 0x04AC(0x0004) (Edit)
	class UClass_Object_Material*                      deathMessageIconMaterial;                                 // 0x04B0(0x0004) (Edit, NoClear)
	struct FStruct_MatCoords                           deathMessageIconCoords;                                   // 0x04B4(0x0010) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType");
		return ptr;
	}


	float STATIC_Function_getBackDamageModifier();
	float STATIC_Function_getHeadDamageModifier();
	bool STATIC_Function_doesPositionDamage();
	struct FString STATIC_Function_GetWeaponClass();
	bool STATIC_Function_IsOfType(int Description);
	class UClass_Object_Sound* STATIC_Function_GetPawnDamageSound();
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_GetPawnDamageEmitter(const struct FStruct_Vector& HitLocation, float Damage, const struct FStruct_Vector& Momentum, class AClass_Object_Actor_Pawn* victim, bool bLowDetail);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_GetPawnDamageEffect(const struct FStruct_Vector& HitLocation, float Damage, const struct FStruct_Vector& Momentum, class AClass_Object_Actor_Pawn* victim, bool bLowDetail);
	struct FString STATIC_Function_SuicideMessage(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* victim);
	struct FString STATIC_Function_DeathMessage(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Killer, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* victim);
	void STATIC_Function_IncrementKills(class AClass_Object_Actor_Controller* Killer);
};


// Class Object.Actor.Info.Mutator
// 0x0044 (0x0444 - 0x0400)
class AClass_Object_Actor_Info_Mutator : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_Mutator*            NextMutator;                                              // 0x0400(0x0004)
	struct FString                                     DefaultWeaponName;                                        // 0x0404(0x000C) (NeedCtorLink)
	struct FString                                     ConfigMenuClassName;                                      // 0x0410(0x000C) (Edit, NeedCtorLink)
	struct FString                                     GroupName;                                                // 0x041C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     FriendlyName;                                             // 0x0428(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0434(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bUserAdded : 1;                                           // 0x0440(0x0004)
	unsigned long                                      bAddToServerPackages : 1;                                 // 0x0440(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.Mutator");
		return ptr;
	}


	void Function_ServerTraveling(const struct FString& URL, bool bItems);
	void Function_GetServerPlayers(struct FStruct_ServerResponseLine* ServerState);
	void Function_GetServerDetails(struct FStruct_ServerResponseLine* ServerState);
	void Function_PlayerChangedClass(class AClass_Object_Actor_Controller* aPlayer);
	bool Function_CheckRelevance(class AClass_Object_Actor* Other, class AClass_Object_Actor** replacement);
	bool Function_IsRelevant(class AClass_Object_Actor* Other, class AClass_Object_Actor** replacement);
	bool Function_AlwaysKeep(class AClass_Object_Actor* Other);
	class AClass_Object_Actor* Function_ReplaceWith(class AClass_Object_Actor* Other, const struct FString& aClassName);
	void Function_AddMutator(class AClass_Object_Actor_Info_Mutator* M);
	void Function_ModifyPlayer(class AClass_Object_Actor_Pawn* Other);
	void Function_NotifyLogout(class AClass_Object_Actor_Controller* Exiting);
	void Function_ModifyLogin(struct FString* Portal, struct FString* Options);
	void Function_Mutate(const struct FString& MutateString, class AClass_Object_Actor_Controller_PlayerController* Sender);
	class AClass_Object_Actor* Function_ReplaceActor(class AClass_Object_Actor* Other);
	void Function_Destroyed_Destroyed();
	bool Function_MutatorIsAllowed();
	void Function_PreBeginPlay_PreBeginPlay();
};


// Class Object.LevelSummary
// 0x0064 (0x008C - 0x0028)
class UClass_Object_LevelSummary : public UClass_Object
{
public:
	struct FString                                     Title;                                                    // 0x0028(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     Author;                                                   // 0x0034(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LevelEnterText;                                           // 0x0040(0x000C) (Edit, Localized, NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> SupportedModes;                                           // 0x004C(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<int>                                        SupportedModesScoreLimits;                                // 0x0058(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     Description;                                              // 0x0064(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Material*                      Screenshot;                                               // 0x0070(0x0004) (Edit, NoClear)
	int                                                IdealPlayerCountMin;                                      // 0x0074(0x0004) (Edit, NoClear)
	int                                                IdealPlayerCountMax;                                      // 0x0078(0x0004) (Edit, NoClear)
	struct FString                                     ExtraInfo;                                                // 0x007C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      HideFromMenus : 1;                                        // 0x0088(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.LevelSummary");
		return ptr;
	}

};


// Class Object.Actor.Info.ReplicationInfo
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info_ReplicationInfo : public AClass_Object_Actor_Info
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo");
		return ptr;
	}

};


// Class Object.Actor.Info.ReplicationInfo.GameReplicationInfo
// 0x00D4 (0x04D4 - 0x0400)
class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo : public AClass_Object_Actor_Info_ReplicationInfo
{
public:
	struct FString                                     GameName;                                                 // 0x0400(0x000C) (Net, NeedCtorLink)
	struct FString                                     GameClass;                                                // 0x040C(0x000C) (Net, NeedCtorLink)
	unsigned long                                      bTeamGame : 1;                                            // 0x0418(0x0004) (Net)
	unsigned long                                      bStopCountDown : 1;                                       // 0x0418(0x0004) (Net)
	unsigned long                                      bMatchHasBegun : 1;                                       // 0x0418(0x0004) (Net)
	unsigned long                                      bTeamSymbolsUpdated : 1;                                  // 0x0418(0x0004)
	unsigned long                                      bTournamentMode : 1;                                      // 0x0418(0x0004) (Net)
	float                                              playerTeamDamagePercentage;                               // 0x041C(0x0004) (Net)
	int                                                RemainingTime;                                            // 0x0420(0x0004) (Net)
	int                                                ElapsedTime;                                              // 0x0424(0x0004) (Net)
	int                                                RemainingMinute;                                          // 0x0428(0x0004) (Net)
	float                                              SecondCount;                                              // 0x042C(0x0004)
	int                                                GoalScore;                                                // 0x0430(0x0004) (Net)
	int                                                TimeLimit;                                                // 0x0434(0x0004) (Net)
	int                                                MaxLives;                                                 // 0x0438(0x0004) (Net)
	struct FString                                     ServerName;                                               // 0x043C(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ShortName;                                                // 0x0448(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     AdminName;                                                // 0x0454(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     AdminEmail;                                               // 0x0460(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     AdminPass;                                                // 0x046C(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	unsigned long                                      bAdvertise : 1;                                           // 0x0478(0x0004) (Edit, Config, GlobalConfig)
	unsigned long                                      bCollectStats : 1;                                        // 0x0478(0x0004) (Edit, Config, GlobalConfig)
	int                                                ServerRegion;                                             // 0x047C(0x0004) (Edit, Net, Config, GlobalConfig)
	struct FString                                     MOTDLine1;                                                // 0x0480(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     MOTDLine2;                                                // 0x048C(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     MOTDLine3;                                                // 0x0498(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     MOTDLine4;                                                // 0x04A4(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	class AClass_Object_Actor*                         Winner;                                                   // 0x04B0(0x0004) (Net)
	TArray<class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo*> PRIArray;                                                 // 0x04B4(0x000C) (Edit, NeedCtorLink)
	struct FStruct_Vector                              FlagPos;                                                  // 0x04C0(0x000C) (Net)
	TEnumAsByte<ECarriedObjectState>                   CarriedObjectState[0x2];                                  // 0x04CC(0x0001) (Net)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04CE(0x0002) MISSED OFFSET
	int                                                MatchID;                                                  // 0x04D0(0x0004) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo.GameReplicationInfo");
		return ptr;
	}


	void Function_GetPRIArray(TArray<class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo*>* pris);
	void Function_RemovePRI(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_AddPRI(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_Timer_Timer();
	void Function_Reset_Reset();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_TeamSymbolNotify();
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	struct FName Function_GetCarriedObjectState(int Team);
	void Function_SetCarriedObjectState(int Team, const struct FName& NewState);
};


// Class Object.Actor.Info.InternetInfo
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info_InternetInfo : public AClass_Object_Actor_Info
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.InternetInfo");
		return ptr;
	}


	struct FString Function_GetBeaconText(int i);
	struct FString Function_GetBeaconAddress(int i);
};


// Class Object.Actor.Info.ReplicationInfo.PlayerReplicationInfo
// 0x0090 (0x0490 - 0x0400)
class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo : public AClass_Object_Actor_Info_ReplicationInfo
{
public:
	float                                              Score;                                                    // 0x0400(0x0004) (Net)
	float                                              Deaths;                                                   // 0x0404(0x0004) (Net)
	int                                                Ping;                                                     // 0x0408(0x0004) (Net)
	class AClass_Object_Actor_Brush_Volume*            PlayerVolume;                                             // 0x040C(0x0004) (Net)
	class AClass_Object_Actor_Info_ZoneInfo*           PlayerZone;                                               // 0x0410(0x0004) (Net)
	int                                                NumLives;                                                 // 0x0414(0x0004)
	struct FString                                     PlayerName;                                               // 0x0418(0x000C) (Net, NeedCtorLink)
	struct FString                                     CharacterName;                                            // 0x0424(0x000C) (Net, NeedCtorLink)
	struct FString                                     OldCharacterName;                                         // 0x0430(0x000C) (NeedCtorLink)
	struct FString                                     OldName;                                                  // 0x043C(0x000C) (NeedCtorLink)
	struct FString                                     PreviousName;                                             // 0x0448(0x000C) (NeedCtorLink)
	int                                                PlayerID;                                                 // 0x0454(0x0004)
	class UClass_Object_Field_Struct_State_Class*      VoiceType;                                                // 0x0458(0x0004) (Net)
	unsigned long                                      bAdmin : 1;                                               // 0x045C(0x0004) (Net)
	unsigned long                                      bIsFemale : 1;                                            // 0x045C(0x0004) (Net)
	unsigned long                                      bIsSpectator : 1;                                         // 0x045C(0x0004) (Net)
	unsigned long                                      bOnlySpectator : 1;                                       // 0x045C(0x0004) (Net)
	unsigned long                                      bWaitingPlayer : 1;                                       // 0x045C(0x0004) (Net)
	unsigned long                                      bReadyToPlay : 1;                                         // 0x045C(0x0004) (Net)
	unsigned long                                      bOutOfLives : 1;                                          // 0x045C(0x0004) (Net)
	unsigned long                                      bBot : 1;                                                 // 0x045C(0x0004) (Net)
	unsigned long                                      bWelcomed : 1;                                            // 0x045C(0x0004)
	unsigned long                                      bReceivedPing : 1;                                        // 0x045C(0x0004)
	unsigned long                                      bHasFlag : 1;                                             // 0x045C(0x0004) (Net)
	int                                                StartTime;                                                // 0x0460(0x0004) (Net)
	struct FString                                     StringDead;                                               // 0x0464(0x000C) (Localized, NeedCtorLink)
	struct FString                                     StringSpectating;                                         // 0x0470(0x000C) (Localized, NeedCtorLink)
	struct FString                                     StringUnknown;                                            // 0x047C(0x000C) (Localized, NeedCtorLink)
	int                                                GoalsScored;                                              // 0x0488(0x0004)
	int                                                Kills;                                                    // 0x048C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo.PlayerReplicationInfo");
		return ptr;
	}


	void Function_SetWaitingPlayer(bool B);
	void Function_SetPlayerName(const struct FString& S);
	void Function_Timer_Timer();
	void Function_ClientNameChange();
	void Function_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_UpdatePlayerLocation();
	void Function_UpdateCharacter();
	class UClass_Object_Material* Function_GetPortrait();
	struct FString Function_GetLocationName();
	struct FString Function_GetHumanReadableName_GetHumanReadableName();
	void Function_Reset_Reset();
	void Function_SetCharacterName(const struct FString& S);
	void Function_Destroyed_Destroyed();
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.NavigationPoint.LiftExit
// 0x000C (0x0468 - 0x045C)
class AClass_Object_Actor_NavigationPoint_LiftExit : public AClass_Object_Actor_NavigationPoint
{
public:
	struct FName                                       LiftTag;                                                  // 0x045C(0x0004) (Edit)
	class AClass_Object_Actor_Mover*                   MyLift;                                                   // 0x0460(0x0004)
	unsigned char                                      SuggestedKeyFrame;                                        // 0x0464(0x0001) (Edit)
	unsigned char                                      KeyFrame;                                                 // 0x0465(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0466(0x0002) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.LiftExit");
		return ptr;
	}

};


// Class Object.Actor.NavigationPoint.LiftCenter
// 0x0020 (0x047C - 0x045C)
class AClass_Object_Actor_NavigationPoint_LiftCenter : public AClass_Object_Actor_NavigationPoint
{
public:
	struct FName                                       LiftTag;                                                  // 0x045C(0x0004) (Edit)
	class AClass_Object_Actor_Mover*                   MyLift;                                                   // 0x0460(0x0004)
	struct FName                                       LiftTrigger;                                              // 0x0464(0x0004) (Edit)
	class AClass_Object_Actor_Triggers_Trigger*        RecommendedTrigger;                                       // 0x0468(0x0004)
	float                                              MaxDist2D;                                                // 0x046C(0x0004)
	struct FStruct_Vector                              LiftOffset;                                               // 0x0470(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.LiftCenter");
		return ptr;
	}


	bool Function_ProceedWithMove_ProceedWithMove(class AClass_Object_Actor_Pawn* Other);
	class AClass_Object_Actor* Function_SpecialHandling_SpecialHandling(class AClass_Object_Actor_Pawn* Other);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.NavigationPoint.SmallNavigationPoint.WarpZoneMarker
// 0x000C (0x0468 - 0x045C)
class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_WarpZoneMarker : public AClass_Object_Actor_NavigationPoint_SmallNavigationPoint
{
public:
	class AClass_Object_Actor_Info_ZoneInfo_WarpZoneInfo* markedWarpZone;                                           // 0x045C(0x0004)
	class AClass_Object_Actor*                         TriggerActor;                                             // 0x0460(0x0004)
	class AClass_Object_Actor*                         TriggerActor2;                                            // 0x0464(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.SmallNavigationPoint.WarpZoneMarker");
		return ptr;
	}


	class AClass_Object_Actor* Function_SpecialHandling_SpecialHandling(class AClass_Object_Actor_Pawn* Other);
	void Function_FindTriggerActor();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Triggers.Trigger
// 0x0034 (0x043C - 0x0408)
class AClass_Object_Actor_Triggers_Trigger : public AClass_Object_Actor_Triggers
{
public:
	TEnumAsByte<ETriggerType>                          TriggerType;                                              // 0x0408(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	struct FString                                     Message;                                                  // 0x040C(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bTriggerOnceOnly : 1;                                     // 0x0418(0x0004) (Edit)
	unsigned long                                      bInitiallyActive : 1;                                     // 0x0418(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      ClassProximityType;                                       // 0x041C(0x0004) (Edit)
	float                                              RepeatTriggerTime;                                        // 0x0420(0x0004) (Edit)
	float                                              ReTriggerDelay;                                           // 0x0424(0x0004) (Edit)
	float                                              TriggerTime;                                              // 0x0428(0x0004)
	float                                              DamageThreshold;                                          // 0x042C(0x0004) (Edit)
	class AClass_Object_Actor*                         TriggerActor;                                             // 0x0430(0x0004)
	class AClass_Object_Actor*                         TriggerActor2;                                            // 0x0434(0x0004)
	unsigned long                                      bSavedInitialCollision : 1;                               // 0x0438(0x0004)
	unsigned long                                      bSavedInitialActive : 1;                                  // 0x0438(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Triggers.Trigger");
		return ptr;
	}


	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_DoTrigger(class AClass_Object_Actor_Pawn* Instigator);
	void Function_PostTakeDamage_PostTakeDamage(float Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_Timer_Timer();
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	bool Function_IsRelevant(class AClass_Object_Actor* Other);
	void Function_CheckTouchList();
	class AClass_Object_Actor* Function_SpecialHandling_SpecialHandling(class AClass_Object_Actor_Pawn* Other);
	void Function_FindTriggerActor();
	void Function_Reset_Reset();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.Info.PlayerStart
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_Info_PlayerStart : public AClass_Object_Actor_Info
{
public:
	unsigned char                                      TeamNumber;                                               // 0x0400(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	unsigned long                                      bSinglePlayer : 1;                                        // 0x0404(0x0004) (Edit)
	unsigned long                                      bCoop : 1;                                                // 0x0404(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0404(0x0004) (Edit)
	unsigned long                                      bPrimary : 1;                                             // 0x0404(0x0004) (Edit)
	float                                              LastSpawnCampTime;                                        // 0x0408(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.PlayerStart");
		return ptr;
	}

};


// Class Object.Actor.NavigationPoint.SmallNavigationPoint.Teleporter
// 0x002C (0x0488 - 0x045C)
class AClass_Object_Actor_NavigationPoint_SmallNavigationPoint_Teleporter : public AClass_Object_Actor_NavigationPoint_SmallNavigationPoint
{
public:
	struct FString                                     URL;                                                      // 0x045C(0x000C) (Edit, Net, NeedCtorLink)
	struct FName                                       ProductRequired;                                          // 0x0468(0x0004) (Edit)
	unsigned long                                      bChangesVelocity : 1;                                     // 0x046C(0x0004) (Edit, Net)
	unsigned long                                      bChangesYaw : 1;                                          // 0x046C(0x0004) (Edit, Net)
	unsigned long                                      bReversesX : 1;                                           // 0x046C(0x0004) (Edit, Net)
	unsigned long                                      bReversesY : 1;                                           // 0x046C(0x0004) (Edit, Net)
	unsigned long                                      bReversesZ : 1;                                           // 0x046C(0x0004) (Edit, Net)
	unsigned long                                      bEnabled : 1;                                             // 0x046C(0x0004) (Edit, Net)
	struct FStruct_Vector                              TargetVelocity;                                           // 0x0470(0x000C) (Edit, Net)
	class AClass_Object_Actor*                         TriggerActor;                                             // 0x047C(0x0004)
	class AClass_Object_Actor*                         TriggerActor2;                                            // 0x0480(0x0004)
	float                                              LastFired;                                                // 0x0484(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.SmallNavigationPoint.Teleporter");
		return ptr;
	}


	void Function_PostTouch_PostTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	bool Function_Accept_Accept(class AClass_Object_Actor* Incoming, class AClass_Object_Actor* Source);
	void Function_FindTriggerActor();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.ZoneInfo
// 0x0088 (0x0488 - 0x0400)
class AClass_Object_Actor_Info_ZoneInfo : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_ZoneInfo_SkyZoneInfo* SkyZone;                                                  // 0x0400(0x0004)
	struct FName                                       ZoneTag;                                                  // 0x0404(0x0004) (Edit)
	struct FString                                     LocationName;                                             // 0x0408(0x000C) (Edit, Localized, NeedCtorLink)
	unsigned long                                      bTerrainZone : 1;                                         // 0x0414(0x0004) (Edit)
	unsigned long                                      bDistanceFog : 1;                                         // 0x0414(0x0004) (Edit)
	unsigned long                                      bClearToFogColor : 1;                                     // 0x0414(0x0004) (Edit)
	TArray<class AClass_Object_Actor_Info_TerrainInfo*> Terrains;                                                 // 0x0418(0x000C) (Const, NeedCtorLink)
	struct FStruct_Vector                              AmbientVector;                                            // 0x0424(0x000C)
	unsigned char                                      AmbientBrightness;                                        // 0x0430(0x0001) (Edit)
	unsigned char                                      AmbientHue;                                               // 0x0431(0x0001) (Edit)
	unsigned char                                      AmbientSaturation;                                        // 0x0432(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0433(0x0001) MISSED OFFSET
	float                                              AmbientXGroundRatio;                                      // 0x0434(0x0004) (Edit)
	struct FStruct_Color                               DistanceFogColor;                                         // 0x0438(0x0004) (Edit)
	float                                              DistanceFogStart;                                         // 0x043C(0x0004) (Edit)
	float                                              DistanceFogEnd;                                           // 0x0440(0x0004) (Edit)
	float                                              DistanceFogBlendTime;                                     // 0x0444(0x0004) (Edit)
	TEnumAsByte<EFogType>                              DistanceFogType;                                          // 0x0448(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	float                                              DistanceFogExpBias;                                       // 0x044C(0x0004) (Edit)
	float                                              DistanceFogClipBias;                                      // 0x0450(0x0004) (Edit)
	unsigned long                                      bClipToDistanceFog : 1;                                   // 0x0454(0x0004) (Edit)
	unsigned long                                      bDisableFogScaling : 1;                                   // 0x0454(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* EnvironmentMap;                                           // 0x0458(0x0004) (Edit, Const)
	float                                              TexUPanSpeed;                                             // 0x045C(0x0004) (Edit)
	float                                              TexVPanSpeed;                                             // 0x0460(0x0004) (Edit)
	class UClass_Object_I3DL2Listener*                 ZoneEffect;                                               // 0x0464(0x0004) (Edit, EditInline)
	struct FName                                       SkyZoneTag;                                               // 0x0468(0x0004) (Edit)
	unsigned long                                      bLonelyZone : 1;                                          // 0x046C(0x0004) (Edit)
	TArray<class AClass_Object_Actor_Info_ZoneInfo*>   ManualExcludes;                                           // 0x0470(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<struct FName>                               EffectsContexts;                                          // 0x047C(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ZoneInfo");
		return ptr;
	}


	void Function_ActorLeaving(class AClass_Object_Actor* Other);
	void Function_ActorEntered(class AClass_Object_Actor* Other);
	void Function_PreBeginPlay_PreBeginPlay();
	void Function_LinkToSkybox();
	void Function_ZoneActors(class UClass_Object_Field_Struct_State_Class* BaseClass, class AClass_Object_Actor** Actor);
};


// Class Object.Actor.Info.ZoneInfo.WarpZoneInfo
// 0x00B4 (0x053C - 0x0488)
class AClass_Object_Actor_Info_ZoneInfo_WarpZoneInfo : public AClass_Object_Actor_Info_ZoneInfo
{
public:
	struct FString                                     OtherSideURL;                                             // 0x0488(0x000C) (Edit, Net, NeedCtorLink)
	struct FName                                       ThisTag;                                                  // 0x0494(0x0004) (Edit, Net)
	unsigned long                                      bNoTeleFrag : 1;                                          // 0x0498(0x0004) (Edit)
	int                                                iWarpZone;                                                // 0x049C(0x0004) (Const)
	struct FStruct_Coords                              WarpCoords;                                               // 0x04A0(0x0030) (Const)
	class AClass_Object_Actor_Info_ZoneInfo_WarpZoneInfo* OtherSideActor;                                           // 0x04D0(0x0004) (Net, Transient)
	class UClass_Object*                               OtherSideLevel;                                           // 0x04D4(0x0004) (Transient)
	struct FString                                     Destinations[0x8];                                        // 0x04D8(0x000C) (Edit, NeedCtorLink)
	int                                                numDestinations;                                          // 0x0538(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ZoneInfo.WarpZoneInfo");
		return ptr;
	}


	void Function_ActorLeaving_ActorLeaving(class AClass_Object_Actor* Other);
	void Function_ActorEntered_ActorEntered(class AClass_Object_Actor* Other);
	void Function_ForceGenerate();
	void Function_Generate();
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
	void Function_UnWarp(struct FStruct_Vector* Loc, struct FStruct_Vector* Vel, struct FStruct_Rotator* R);
	void Function_Warp(struct FStruct_Vector* Loc, struct FStruct_Vector* Vel, struct FStruct_Rotator* R);
};


// Class Object.Actor.Decoration
// 0x0034 (0x0434 - 0x0400)
class AClass_Object_Actor_Decoration : public AClass_Object_Actor
{
public:
	class UClass_Object_Field_Struct_State_Class*      EffectWhenDestroyed;                                      // 0x0400(0x0004) (Edit)
	unsigned long                                      bPushable : 1;                                            // 0x0404(0x0004) (Edit)
	unsigned long                                      bDamageable : 1;                                          // 0x0404(0x0004) (Edit)
	unsigned long                                      bPushSoundPlaying : 1;                                    // 0x0404(0x0004)
	unsigned long                                      bSplash : 1;                                              // 0x0404(0x0004)
	class UClass_Object_Sound*                         PushSound;                                                // 0x0408(0x0004) (Edit)
	class UClass_Object_Sound*                         EndPushSound;                                             // 0x040C(0x0004) (Edit)
	int                                                numLandings;                                              // 0x0410(0x0004) (Const)
	int                                                NumFrags;                                                 // 0x0414(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* FragSkin;                                                 // 0x0418(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      FragType;                                                 // 0x041C(0x0004) (Edit)
	struct FStruct_Vector                              FragMomentum;                                             // 0x0420(0x000C)
	int                                                Health;                                                   // 0x042C(0x0004) (Edit)
	float                                              SplashTime;                                               // 0x0430(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Decoration");
		return ptr;
	}


	void Function_Bump_Bump(class AClass_Object_Actor* Other);
	void Function_Timer_Timer();
	void Function_Destroyed_Destroyed();
	void Function_BaseChange_BaseChange();
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_PhysicsVolumeChange_PhysicsVolumeChange(class AClass_Object_Actor_Brush_Volume_PhysicsVolume* NewVolume);
	void Function_PostTakeDamage_PostTakeDamage(float NDamage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& Momentum, class UClass_Object_Field_Struct_State_Class* DamageType, float projectileFactor);
	void Function_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	void Function_Landed_Landed(const struct FStruct_Vector& HitNormal);
	void Function_Drop(const struct FStruct_Vector& newVel);
	bool Function_CanSplash_CanSplash();
};


// Class Object.Actor.Pawn.Scout
// 0x0004 (0x0674 - 0x0670)
class AClass_Object_Actor_Pawn_Scout : public AClass_Object_Actor_Pawn
{
public:
	float                                              MaxLandingVelocity;                                       // 0x0670(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Scout");
		return ptr;
	}


	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.NavigationPoint.PathNode
// 0x0000 (0x045C - 0x045C)
class AClass_Object_Actor_NavigationPoint_PathNode : public AClass_Object_Actor_NavigationPoint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationPoint.PathNode");
		return ptr;
	}

};


// Class Object.ReachSpec
// 0x0024 (0x004C - 0x0028)
class UClass_Object_ReachSpec : public UClass_Object
{
public:
	int                                                Distance;                                                 // 0x0028(0x0004)
	class AClass_Object_Actor_NavigationPoint*         Start;                                                    // 0x002C(0x0004) (Const)
	class AClass_Object_Actor_NavigationPoint*         End;                                                      // 0x0030(0x0004) (Const)
	int                                                CollisionRadius;                                          // 0x0034(0x0004)
	int                                                CollisionHeight;                                          // 0x0038(0x0004)
	int                                                reachFlags;                                               // 0x003C(0x0004)
	int                                                MaxLandingVelocity;                                       // 0x0040(0x0004)
	unsigned char                                      bPruned;                                                  // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	unsigned long                                      bForced : 1;                                              // 0x0048(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ReachSpec");
		return ptr;
	}

};


// Class Object.Actor.Info.ZoneInfo.SkyZoneInfo
// 0x0000 (0x0488 - 0x0488)
class AClass_Object_Actor_Info_ZoneInfo_SkyZoneInfo : public AClass_Object_Actor_Info_ZoneInfo
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ZoneInfo.SkyZoneInfo");
		return ptr;
	}

};


// Class Object.Actor.Controller.PlayerController.Camera
// 0x0000 (0x07C4 - 0x07C4)
class AClass_Object_Actor_Controller_PlayerController_Camera : public AClass_Object_Actor_Controller_PlayerController
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.PlayerController.Camera");
		return ptr;
	}

};


// Class Object.Actor.Info.GameInfo
// 0x0258 (0x0658 - 0x0400)
class AClass_Object_Actor_Info_GameInfo : public AClass_Object_Actor_Info
{
public:
	unsigned long                                      bRestartLevel : 1;                                        // 0x0400(0x0004)
	unsigned long                                      bPauseable : 1;                                           // 0x0400(0x0004)
	unsigned long                                      bWeaponStay : 1;                                          // 0x0400(0x0004) (Config)
	unsigned long                                      bCanChangeSkin : 1;                                       // 0x0400(0x0004)
	unsigned long                                      bTeamGame : 1;                                            // 0x0400(0x0004)
	unsigned long                                      bGameEnded : 1;                                           // 0x0400(0x0004)
	unsigned long                                      bOverTime : 1;                                            // 0x0400(0x0004)
	unsigned long                                      bAlternateMode : 1;                                       // 0x0400(0x0004) (Localized)
	unsigned long                                      bCanViewOthers : 1;                                       // 0x0400(0x0004)
	unsigned long                                      bDelayedStart : 1;                                        // 0x0400(0x0004)
	unsigned long                                      bWaitingToStartMatch : 1;                                 // 0x0400(0x0004)
	unsigned long                                      bChangeLevels : 1;                                        // 0x0400(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAlreadyChanged : 1;                                      // 0x0400(0x0004)
	unsigned long                                      bLoggingGame : 1;                                         // 0x0400(0x0004)
	unsigned long                                      bEnableStatLogging : 1;                                   // 0x0400(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAllowWeaponThrowing : 1;                                 // 0x0400(0x0004) (Config)
	unsigned long                                      bAllowBehindView : 1;                                     // 0x0400(0x0004) (Config)
	unsigned long                                      bAdminCanPause : 1;                                       // 0x0400(0x0004) (Config, GlobalConfig)
	unsigned long                                      bGameRestarted : 1;                                       // 0x0400(0x0004)
	unsigned long                                      bKeepSamePlayerStart : 1;                                 // 0x0400(0x0004)
	float                                              GameDifficulty;                                           // 0x0404(0x0004) (Config, GlobalConfig)
	int                                                GoreLevel;                                                // 0x0408(0x0004) (Config, GlobalConfig)
	float                                              AutoAim;                                                  // 0x040C(0x0004) (Config, GlobalConfig)
	float                                              GameSpeed;                                                // 0x0410(0x0004) (Config, GlobalConfig)
	float                                              StartTime;                                                // 0x0414(0x0004)
	struct FString                                     DefaultPlayerClassName;                                   // 0x0418(0x000C) (NeedCtorLink)
	struct FString                                     ScoreBoardType;                                           // 0x0424(0x000C) (NeedCtorLink)
	struct FString                                     BotMenuType;                                              // 0x0430(0x000C) (NeedCtorLink)
	struct FString                                     RulesMenuType;                                            // 0x043C(0x000C) (NeedCtorLink)
	struct FString                                     SettingsMenuType;                                         // 0x0448(0x000C) (NeedCtorLink)
	struct FString                                     GameUMenuType;                                            // 0x0454(0x000C) (NeedCtorLink)
	struct FString                                     MultiplayerUMenuType;                                     // 0x0460(0x000C) (NeedCtorLink)
	struct FString                                     GameOptionsMenuType;                                      // 0x046C(0x000C) (NeedCtorLink)
	struct FString                                     HUDType;                                                  // 0x0478(0x000C) (NeedCtorLink)
	struct FString                                     MapListType;                                              // 0x0484(0x000C) (NeedCtorLink)
	struct FString                                     MapPrefix;                                                // 0x0490(0x000C) (NeedCtorLink)
	struct FString                                     BeaconName;                                               // 0x049C(0x000C) (NeedCtorLink)
	int                                                MaxSpectators;                                            // 0x04A8(0x0004) (Config, GlobalConfig)
	int                                                NumSpectators;                                            // 0x04AC(0x0004)
	int                                                MaxPlayers;                                               // 0x04B0(0x0004) (Config, GlobalConfig)
	int                                                NumPlayers;                                               // 0x04B4(0x0004)
	int                                                NumBots;                                                  // 0x04B8(0x0004)
	int                                                CurrentID;                                                // 0x04BC(0x0004)
	struct FString                                     DefaultPlayerName;                                        // 0x04C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     GameName;                                                 // 0x04CC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     GameDescription;                                          // 0x04D8(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              FearCostFallOff;                                          // 0x04E4(0x0004)
	int                                                GoalScore;                                                // 0x04E8(0x0004) (Config)
	int                                                MaxLives;                                                 // 0x04EC(0x0004) (Config)
	int                                                TimeLimit;                                                // 0x04F0(0x0004) (Config)
	class UClass_Object_Field_Struct_State_Class*      DeathMessageClass;                                        // 0x04F4(0x0004)
	class UClass_Object_Field_Struct_State_Class*      GameMessageClass;                                         // 0x04F8(0x0004)
	struct FName                                       OtherMesgGroup;                                           // 0x04FC(0x0004)
	struct FString                                     MutatorClass;                                             // 0x0500(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Info_Mutator*            BaseMutator;                                              // 0x050C(0x0004)
	struct FString                                     AccessControlClass;                                       // 0x0510(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class AClass_Object_Actor_Info_AccessControl*      AccessControl;                                            // 0x051C(0x0004)
	class AClass_Object_Actor_Info_GameRules*          GameRulesModifiers;                                       // 0x0520(0x0004)
	struct FString                                     BroadcastHandlerClass;                                    // 0x0524(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Info_BroadcastHandler*   BroadcastHandler;                                         // 0x0530(0x0004)
	class UClass_Object_Field_Struct_State_Class*      PlayerControllerClass;                                    // 0x0534(0x0004)
	struct FString                                     PlayerControllerClassName;                                // 0x0538(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      GameReplicationInfoClass;                                 // 0x0544(0x0004) (Edit)
	class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GameReplicationInfo;                                      // 0x0548(0x0004)
	unsigned long                                      bWelcomePending : 1;                                      // 0x054C(0x0004)
	class AClass_Object_Actor_Info_GameStats*          GameStats;                                                // 0x0550(0x0004)
	struct FString                                     GameStatsClass;                                           // 0x0554(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FStruct_VoiceChatterInfo>            VoiceChatters;                                            // 0x0560(0x000C) (NeedCtorLink)
	struct FString                                     SecurityClass;                                            // 0x056C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ScreenShotName;                                           // 0x0578(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DecoTextName;                                             // 0x0584(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Acronym;                                                  // 0x0590(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     GIPropsDisplayText[0xB];                                  // 0x059C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     GIPropsExtras[0x2];                                       // 0x0620(0x000C) (Localized, NeedCtorLink)
	int                                                difficulty;                                               // 0x0638(0x0004)
	struct FString                                     VotingHandlerType;                                        // 0x063C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      VotingHandlerClass;                                       // 0x0648(0x0004)
	class AClass_Object_Actor_Info_VotingHandler*      VotingHandler;                                            // 0x064C(0x0004)
	unsigned long                                      bMapRotationTraveling : 1;                                // 0x0650(0x0004)
	class AClass_Object_Actor_Brush_Volume*            BoundaryVolume;                                           // 0x0654(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameInfo");
		return ptr;
	}


	struct FString Function_GetRestartMap();
	bool Function_SaveAllowed();
	void Function_OnServerTravelSuccess(const struct FString& URL);
	void Function_OnServerTravelFail(const struct FString& URL);
	void Function_AdminSay(const struct FString& msg);
	void Function_KillBots(int Num);
	void Function_ReviewJumpSpots(const struct FName& TestLabel);
	struct FString STATIC_Function_ParseMessageString(class AClass_Object_Actor_Info_Mutator* BaseMutator, class AClass_Object_Actor_Controller* Who, const struct FString& Message);
	struct FString STATIC_Function_FindTeamDesignation(class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GRI, class AClass_Object_Actor* A);
	bool Function_TooManyBots(class AClass_Object_Actor_Controller* botToRemove);
	void Function_ScoreKill(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Other);
	void Function_TeamScoreEvent(int Team, float Points, const struct FString& Desc);
	void Function_ScoreEvent(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Who, float Points, const struct FString& Desc);
	void Function_CheckScore(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Scorer);
	void Function_ScoreObjective(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Scorer, int Score);
	float Function_RatePlayerStart(class AClass_Object_Actor_Info_PlayerStart* p, unsigned char Team, class AClass_Object_Actor_Controller* Player);
	class AClass_Object_Actor* Function_FindPlayerStart(class AClass_Object_Actor_Controller* Player, unsigned char InTeam, const struct FString& incomingName);
	void Function_EndLogging(const struct FString& Reason);
	void Function_EndGame(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Winner, const struct FString& Reason);
	bool Function_CheckEndGame(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Winner, const struct FString& Reason);
	void Function_BroadcastLocalizedTeam(class AClass_Object_Actor* Sender, class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void Function_BroadcastLocalized(class AClass_Object_Actor* Sender, class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void Function_BroadcastTeam(class AClass_Object_Actor_Controller* Sender, const struct FString& msg, const struct FName& Type);
	void Function_Broadcast(class AClass_Object_Actor* Sender, const struct FString& msg, const struct FName& Type);
	class AClass_Object_Actor_Info_MapList* Function_GetMapList(const struct FString& MapListType);
	void Function_RestartGame();
	void Function_SendPlayer(class AClass_Object_Actor_Controller_PlayerController* aPlayer, const struct FString& URL);
	unsigned char Function_PickTeam(unsigned char Current, class AClass_Object_Actor_Controller* C);
	bool Function_ChangeTeam(class AClass_Object_Actor_Controller* Other, int n, bool bNewTeam);
	void Function_ChangeName(class AClass_Object_Actor_Controller* Other, const struct FString& S, bool bNameChange);
	void Function_DiscardInventory(class AClass_Object_Actor_Pawn* Other);
	int Function_ReduceDamage(int Damage, class AClass_Object_Actor_Pawn* injured, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, class UClass_Object_Field_Struct_State_Class* DamageType, struct FStruct_Vector* Momentum);
	bool Function_CanSpectate(class AClass_Object_Actor_Controller_PlayerController* Viewer, bool bOnlySpectator, class AClass_Object_Actor* ViewTarget);
	bool Function_IsOnTeam(class AClass_Object_Actor_Controller* Other, int TeamNum);
	void Function_KickBan(const struct FString& S);
	void Function_Kick(const struct FString& S);
	struct FString STATIC_Function_ParseKillMessage(const struct FString& KillerName, const struct FString& VictimName, const struct FString& DeathMessage);
	void Function_BroadcastDeathMessage(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Other, class UClass_Object_Field_Struct_State_Class* DamageType);
	bool Function_PreventSever(class AClass_Object_Actor_Pawn* Killed, const struct FName& BoneName, int Damage, class UClass_Object_Field_Struct_State_Class* DamageType);
	bool Function_PreventDeath(class AClass_Object_Actor_Pawn* Killed, class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_Killed(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Killed, class AClass_Object_Actor_Pawn* KilledPawn, class UClass_Object_Field_Struct_State_Class* DamageType);
	void Function_KillEvent(const struct FString& Killtype, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Killer, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* victim, class UClass_Object_Field_Struct_State_Class* Damage);
	void Function_NotifyKilled(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Killed, class AClass_Object_Actor_Pawn* KilledPawn);
	void Function_SetPlayerDefaults(class AClass_Object_Actor_Pawn* PlayerPawn);
	void Function_AddDefaultInventory(class AClass_Object_Actor_Pawn* PlayerPawn);
	void Function_AddGameSpecificInventory(class AClass_Object_Actor_Pawn* p);
	void Function_AcceptInventory(class AClass_Object_Actor_Pawn* PlayerPawn);
	void Function_Logout(class AClass_Object_Actor_Controller* Exiting);
	void Function_PlayerLoggedIn(class AClass_Object_Actor_Controller_PlayerController* NewPlayer);
	void Function_PostLogin(class AClass_Object_Actor_Controller_PlayerController* NewPlayer);
	class UClass_Object_Field_Struct_State_Class* Function_GetDefaultPlayerClass(class AClass_Object_Actor_Controller* C);
	void Function_RestartPlayer(class AClass_Object_Actor_Controller* aPlayer);
	void Function_StartMatch();
	class AClass_Object_Actor_Controller_PlayerController* Function_Login(const struct FString& Portal, const struct FString& Options, struct FString* Error);
	bool Function_AtCapacity(bool bSpectator);
	int Function_GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue);
	void Function_PreLogin(const struct FString& Options, const struct FString& Address, struct FString* Error, struct FString* FailCode);
	void Function_ProcessServerTravel(const struct FString& URL, bool bItems);
	struct FString Function_GetBeaconText();
	void Function_AddMutator(const struct FString& mutname, bool bUserAdded);
	void Function_InitGame(const struct FString& Options, struct FString* Error);
	bool Function_HasOption(const struct FString& Options, const struct FString& InKey);
	struct FString Function_ParseOption(const struct FString& Options, const struct FString& InKey);
	void Function_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	bool Function_GrabOption(struct FString* Options, struct FString* Result);
	void Function_DetailChange();
	void Function_SetGameSpeed(float t);
	void Function_ChangeVoiceChatter(class AClass_Object_Actor_Controller* Client, int IpAddr, int Handle, bool Add);
	bool Function_SetPause(bool bPause, class AClass_Object_Actor_Controller_PlayerController* p);
	int Function_GetServerPort();
	void Function_GetServerPlayers(struct FStruct_ServerResponseLine* ServerState);
	void Function_GetServerDetails(struct FStruct_ServerResponseLine* ServerState);
	int Function_GetNumPlayers();
	void Function_GetServerInfo(struct FStruct_ServerResponseLine* ServerState);
	void Function_InitMaplistHandler();
	struct FString Function_GetNetworkNumber();
	void Function_InitGameReplicationInfo();
	void Function_GameEnding();
	void Function_Timer_Timer();
	void Function_InitLogging();
	void Function_Reset_Reset();
	void Function_PostBeginPlay_PostBeginPlay();
	bool STATIC_Function_UseLowGore();
	struct FString Function_FindPlayerByID(int PlayerID);
	void STATIC_Function_PrecacheGameRenderData(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* myLevel);
	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
	void Function_Tick_Tick(float DeltaTime);
	bool Function_GameInfoShouldTick();
	void Function_LevelChange();
	void Function_PreBeginPlay_PreBeginPlay();
	void STATIC_Function_LoadMapList(const struct FString& MapPrefix, TArray<struct FString>* Maps);
};


// Class Object.Actor.Info.ZoneInfo.LevelInfo
// 0x0274 (0x06FC - 0x0488)
class AClass_Object_Actor_Info_ZoneInfo_LevelInfo : public AClass_Object_Actor_Info_ZoneInfo
{
public:
	float                                              TimeDilation;                                             // 0x0488(0x0004) (Edit, Net)
	float                                              TimeSeconds;                                              // 0x048C(0x0004)
	int                                                Year;                                                     // 0x0490(0x0004) (Transient)
	int                                                Month;                                                    // 0x0494(0x0004) (Transient)
	int                                                Day;                                                      // 0x0498(0x0004) (Transient)
	int                                                DayOfWeek;                                                // 0x049C(0x0004) (Transient)
	int                                                Hour;                                                     // 0x04A0(0x0004) (Transient)
	int                                                Minute;                                                   // 0x04A4(0x0004) (Transient)
	int                                                Second;                                                   // 0x04A8(0x0004) (Transient)
	int                                                Millisecond;                                              // 0x04AC(0x0004) (Transient)
	float                                              PauseDelay;                                               // 0x04B0(0x0004)
	struct FString                                     Title;                                                    // 0x04B4(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     Author;                                                   // 0x04C0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LocalisationFile;                                         // 0x04CC(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> SupportedModes;                                           // 0x04D8(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<int>                                        SupportedModesScoreLimits;                                // 0x04E4(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     Description;                                              // 0x04F0(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Material*                      Screenshot;                                               // 0x04FC(0x0004) (Edit, NoClear)
	int                                                IdealPlayerCountMin;                                      // 0x0500(0x0004) (Edit, NoClear)
	int                                                IdealPlayerCountMax;                                      // 0x0504(0x0004) (Edit, NoClear)
	struct FString                                     ExtraInfo;                                                // 0x0508(0x000C) (Edit, NeedCtorLink)
	class AClass_Object_Actor_Info_MusicManagerBase*   MusicMgr;                                                 // 0x0514(0x0004)
	TEnumAsByte<EPhysicsDetailLevel>                   PhysicsDetailLevel;                                       // 0x0518(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0519(0x0003) MISSED OFFSET
	float                                              KarmaTimeScale;                                           // 0x051C(0x0004) (Edit, Net)
	float                                              RagdollTimeScale;                                         // 0x0520(0x0004) (Edit, Net)
	int                                                MaxRagdolls;                                              // 0x0524(0x0004) (Edit)
	float                                              KarmaGravScale;                                           // 0x0528(0x0004) (Edit, Net)
	unsigned long                                      bKStaticFriction : 1;                                     // 0x052C(0x0004) (Edit)
	unsigned long                                      bKNoInit : 1;                                             // 0x052C(0x0004) (Edit)
	unsigned long                                      bHavokDisabled : 1;                                       // 0x052C(0x0004) (Edit)
	float                                              HavokStepTimeQuantum;                                     // 0x0530(0x0004) (Edit)
	struct FString                                     HavokMoppCodeFilename;                                    // 0x0534(0x000C) (Edit, NeedCtorLink)
	int                                                HavokBroadPhaseDimension;                                 // 0x0540(0x0004) (Edit)
	unsigned long                                      vehicleCeilingEnabled : 1;                                // 0x0544(0x0004) (Edit)
	float                                              vehicleCeilingHeight;                                     // 0x0548(0x0004) (Edit)
	unsigned long                                      bNoPathfinding : 1;                                       // 0x054C(0x0004) (Edit)
	float                                              DecalStayScale;                                           // 0x0550(0x0004) (Config)
	struct FString                                     LevelEnterText;                                           // 0x0554(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     LocalizedPkg;                                             // 0x0560(0x000C) (Edit, NeedCtorLink)
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Pauser;                                                   // 0x056C(0x0004) (Net)
	class UClass_Object_LevelSummary*                  Summary;                                                  // 0x0570(0x0004)
	struct FString                                     VisibleGroups;                                            // 0x0574(0x000C) (NeedCtorLink)
	struct FString                                     SelectedGroups;                                           // 0x0580(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      HideFromMenus : 1;                                        // 0x058C(0x0004) (Edit)
	unsigned long                                      bLonePlayer : 1;                                          // 0x058C(0x0004) (Edit)
	unsigned long                                      bBegunPlay : 1;                                           // 0x058C(0x0004)
	unsigned long                                      bPlayersOnly : 1;                                         // 0x058C(0x0004)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0590(0x0001) (Const)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0591(0x0003) MISSED OFFSET
	unsigned long                                      bDropDetail : 1;                                          // 0x0594(0x0004)
	unsigned long                                      bAggressiveLOD : 1;                                       // 0x0594(0x0004)
	unsigned long                                      bStartup : 1;                                             // 0x0594(0x0004)
	unsigned long                                      bLowSoundDetail : 1;                                      // 0x0594(0x0004) (Config)
	unsigned long                                      bPathsRebuilt : 1;                                        // 0x0594(0x0004)
	unsigned long                                      bHasPathNodes : 1;                                        // 0x0594(0x0004)
	unsigned long                                      bCapFramerate : 1;                                        // 0x0594(0x0004) (Config, GlobalConfig)
	unsigned long                                      bLevelChange : 1;                                         // 0x0594(0x0004)
	unsigned long                                      bNeverPrecache : 1;                                       // 0x0594(0x0004) (Config)
	struct FStruct_Vector                              CameraLocationDynamic;                                    // 0x0598(0x000C) (Edit)
	struct FStruct_Vector                              CameraLocationTop;                                        // 0x05A4(0x000C) (Edit)
	struct FStruct_Vector                              CameraLocationFront;                                      // 0x05B0(0x000C) (Edit)
	struct FStruct_Vector                              CameraLocationSide;                                       // 0x05BC(0x000C) (Edit)
	struct FStruct_Rotator                             CameraRotationDynamic;                                    // 0x05C8(0x000C) (Edit)
	struct FString                                     Song;                                                     // 0x05D4(0x000C) (Edit, NeedCtorLink)
	float                                              PlayerDoppler;                                            // 0x05E0(0x0004) (Edit)
	float                                              MusicVolumeOverride;                                      // 0x05E4(0x0004) (Edit)
	float                                              Brightness;                                               // 0x05E8(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* DefaultTexture;                                           // 0x05EC(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* WireframeTexture;                                         // 0x05F0(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* WhiteSquareTexture;                                       // 0x05F4(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* LargeVertex;                                              // 0x05F8(0x0004)
	int                                                HubStackLevel;                                            // 0x05FC(0x0004)
	TEnumAsByte<ELevelAction>                          LevelAction;                                              // 0x0600(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0601(0x0003) MISSED OFFSET
	class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GRI;                                                      // 0x0604(0x0004) (Transient)
	TEnumAsByte<ENetMode>                              NetMode;                                                  // 0x0608(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0609(0x0003) MISSED OFFSET
	struct FString                                     ComputerName;                                             // 0x060C(0x000C) (NeedCtorLink)
	struct FString                                     EngineVersion;                                            // 0x0618(0x000C) (NeedCtorLink)
	struct FString                                     MinNetVersion;                                            // 0x0624(0x000C) (NeedCtorLink)
	struct FString                                     BuildVersion;                                             // 0x0630(0x000C) (NeedCtorLink)
	struct FString                                     DefaultGameType;                                          // 0x063C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PreCacheGame;                                             // 0x0648(0x000C) (Edit, NeedCtorLink)
	class AClass_Object_Actor_Info_GameInfo*           Game;                                                     // 0x0654(0x0004)
	float                                              DefaultGravity;                                           // 0x0658(0x0004) (Net)
	class AClass_Object_Actor_NavigationPoint*         NavigationPointList;                                      // 0x065C(0x0004) (Const)
	class AClass_Object_Actor_Controller*              ControllerList;                                           // 0x0660(0x0004) (Const, Transient)
	class AClass_Object_Actor_Controller_PlayerController* LocalPlayerController;                                    // 0x0664(0x0004)
	class AClass_Object_Actor_Pawn*                    PawnList;                                                 // 0x0668(0x0004) (Const, Transient)
	struct FString                                     NextURL;                                                  // 0x066C(0x000C) (NeedCtorLink)
	unsigned long                                      bNextItems : 1;                                           // 0x0678(0x0004)
	float                                              NextSwitchCountdown;                                      // 0x067C(0x0004)
	class UClass_Object_ObjectPool*                    ObjectPool;                                               // 0x0680(0x0004)
	TArray<class UClass_Object_Material*>              PrecacheMaterials;                                        // 0x0684(0x000C) (Transient, NeedCtorLink)
	TArray<class UClass_Object_Primitive_StaticMesh*>  PrecacheStaticMeshes;                                     // 0x0690(0x000C) (Transient, NeedCtorLink)
	TArray<class UClass_Object_Primitive_Mesh*>        PrecacheMeshes;                                           // 0x069C(0x000C) (Transient, NeedCtorLink)
	TEnumAsByte<EPlatform>                             Platform;                                                 // 0x06A8(0x0001) (Config)
	unsigned char                                      UnknownData04[0x3];                                       // 0x06A9(0x0003) MISSED OFFSET
	class UClass_Object_IGEffectsSystemBase*           EffectsSystem;                                            // 0x06AC(0x0004)
	TArray<class AClass_Object_Actor*>                 InterestedActorsGameStarted;                              // 0x06B0(0x000C) (NeedCtorLink)
	class UClass_Object_MessageDispatcher*             MessageDispatcher;                                        // 0x06BC(0x0004)
	class UClass_Object*                               cutsceneManager;                                          // 0x06C0(0x0004) (Transient)
	class UClass_Object_SpeechManager*                 SpeechManager;                                            // 0x06C4(0x0004) (Transient)
	class AClass_Object_Actor_Tyrion_Setup*            AI_Setup;                                                 // 0x06C8(0x0004)
	unsigned long                                      bGameStarted : 1;                                         // 0x06CC(0x0004) (Transient)
	unsigned long                                      bSkipMojoCutscenes : 1;                                   // 0x06CC(0x0004) (Config, GlobalConfig)
	struct FString                                     MojoFileURL;                                              // 0x06D0(0x000C) (NeedCtorLink)
	float                                              MoveRepSize;                                              // 0x06DC(0x0004)
	class AClass_Object_Actor_Controller_PlayerController* ReplicationViewer;                                        // 0x06E0(0x0004) (Const)
	class AClass_Object_Actor*                         ReplicationViewTarget;                                    // 0x06E4(0x0004) (Const)
	unsigned long                                      bIsMojoPlaying : 1;                                       // 0x06E8(0x0004)
	class UClass_Object*                               savedCampaign;                                            // 0x06EC(0x0004) (ExportObject)
	TArray<class UClass_Object_IInterestedTeamChanged*> teamChangedListeners;                                     // 0x06F0(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ZoneInfo.LevelInfo");
		return ptr;
	}


	bool Function_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	void Function_AllControllers(class UClass_Object_Field_Struct_State_Class* BaseClass, class AClass_Object_Actor** Actor);
	class AClass_Object_Actor_Controller_PlayerController* Function_GetLocalPlayerController();
	bool Function_HasGameStarted();
	void Function_SetupTransientData();
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
	void Function_notifyListenersTeamChanged(class AClass_Object_Actor_Pawn* Pawn);
	void Function_unRegisterNotifyTeamChanged(class UClass_Object_IInterestedTeamChanged* RegisteredObject);
	void Function_registerNotifyTeamChanged(class UClass_Object_IInterestedTeamChanged* ObjectToNotify);
	void Function_UnRegisterNotifyActorDestroyed(class UClass_Object_IInterestedActorDestroyed* RegisteredObject);
	void Function_RegisterNotifyActorDestroyed(class UClass_Object_IInterestedActorDestroyed* ObjectToNotify);
	void Function_UnRegisterNotifyPawnDied(class UClass_Object_IInterestedPawnDied* RegisteredObject);
	void Function_RegisterNotifyPawnDied(class UClass_Object_IInterestedPawnDied* ObjectToNotify);
	void Function_GuardSlow(const struct FString& GuardString);
	void Function_NotifyGameStarted();
	void Function_InternalRegisterNotifyGameStarted(class AClass_Object_Actor* registeree);
	void Function_Reset_Reset();
	void Function_ThisIsNeverExecuted();
	void Function_ServerTravel(const struct FString& URL, bool bItems);
	struct FString Function_GetAddressURL();
	bool Function_IsDemoBuild();
	struct FString Function_GetLocalURL();
	void Function_AddPrecacheStaticMesh(class UClass_Object_Primitive_StaticMesh* stat);
	void Function_AddPrecacheMaterial(class UClass_Object_Material* Mat);
	void Function_AddPrecacheMesh(class UClass_Object_Primitive_Mesh* Mesh);
	void Function_FillRenderPrecacheArrays();
	class UClass_Object_Field_Struct_State_Class* Function_GetGameClass();
	void Function_PostLoadGame_PostLoadGame();
	void Function_InitializeEffectsSystem();
	void Function_CreateEffectsSystem();
	void Function_PostBeginPlay_PostBeginPlay();
	bool Function_IsPendingActive();
	bool Function_IsEntry();
	void Function_DetailChange(TEnumAsByte<EDetailMode> NewDetailMode);
	void Function_UpdateMovementConfiguration();
	bool Function_EscapeCutscene();
	void Function_PlayAllMojoCutscenes();
	void Function_PlayMojoCutscene(const struct FName& cutsceneName);
	void Function_HavokGetNextFreeSystemLayer(int* systemLayer);
	void Function_HavokSetCollisionLayerEnabled(int layerA, int layerB, bool Enabled, bool updateWorldInfo);
	class UClass_Object_GameSpyManager* Function_GetGameSpyManager();
	float Function_GetMapTextureExtent();
	struct FStruct_Vector Function_GetMapTextureOrigin();
	class UClass_Object_Material* Function_GetMapTexture();
};


// Class Object.Actor.Note
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_Note : public AClass_Object_Actor
{
public:
	struct FString                                     Text;                                                     // 0x0400(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Note");
		return ptr;
	}

};


// Class Object.Actor.Keypoint.PolyMarker
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Keypoint_PolyMarker : public AClass_Object_Actor_Keypoint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Keypoint.PolyMarker");
		return ptr;
	}

};


// Class Object.Actor.Keypoint.ClipMarker
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Keypoint_ClipMarker : public AClass_Object_Actor_Keypoint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Keypoint.ClipMarker");
		return ptr;
	}

};


// Class Object.Actor.Light
// 0x0014 (0x0414 - 0x0400)
class AClass_Object_Actor_Light : public AClass_Object_Actor
{
public:
	float                                              MinCoronaSize;                                            // 0x0400(0x0004) (Edit)
	float                                              MaxCoronaSize;                                            // 0x0404(0x0004) (Edit)
	float                                              CoronaRotation;                                           // 0x0408(0x0004) (Edit)
	float                                              CoronaRotationOffset;                                     // 0x040C(0x0004) (Edit)
	unsigned long                                      UseOwnFinalBlend : 1;                                     // 0x0410(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Light");
		return ptr;
	}

};


// Class Object.MessageDispatcher
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_MessageDispatcher : public UClass_Object
{
public:
	int                                                receivers[0x6];                                           // 0x0028(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.MessageDispatcher");
		return ptr;
	}


	void Function_deleteMessage(class UClass_Object_Message* msg);
	void Function_dispatch(class AClass_Object_Actor* dispatcher, class UClass_Object_Message** msg);
	void Function_registerReceiver(class AClass_Object_Actor* Receiver, class UClass_Object_Field_Struct_State_Class* MessageClass, const struct FString& triggeredByFilter);
};


// Class Object.Message
// 0x0004 (0x002C - 0x0028)
class UClass_Object_Message : public UClass_Object
{
public:
	class UClass_Object_Field_Struct_State_Class*      specificTo;                                               // 0x0028(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message");
		return ptr;
	}


	bool Function_passesFilter(class UClass_Object_Message* filterMsg);
	struct FString STATIC_Function_editorDisplay(const struct FName& Instigator, class UClass_Object_Message* Filter);
	class UClass_Object* STATIC_Function_Allocate_Allocate(class UClass_Object* Context, class UClass_Object* Outer, const struct FString& n, int flags, class UClass_Object* Template);
};


// Class Object.Message.MessagePostRenderFinal
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessagePostRenderFinal : public UClass_Object_Message
{
public:
	class UClass_Object_Canvas*                        Canvas;                                                   // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePostRenderFinal");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Canvas(class UClass_Object_Canvas* _canvas);
};


// Class Object.Message.MessagePostRender
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessagePostRender : public UClass_Object_Message
{
public:
	class UClass_Object_Canvas*                        Canvas;                                                   // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePostRender");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Canvas(class UClass_Object_Canvas* _canvas);
};


// Class Object.Message.MessagePreRender
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessagePreRender : public UClass_Object_Message
{
public:
	class UClass_Object_Canvas*                        Canvas;                                                   // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePreRender");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Canvas(class UClass_Object_Canvas* _canvas);
};


// Class Object.ActorGroup
// 0x0044 (0x006C - 0x0028)
class UClass_Object_ActorGroup : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x44];                                      // 0x0028(0x0044) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ActorGroup");
		return ptr;
	}

};


// Class Object.Actor.Tyrion_Setup
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_Tyrion_Setup : public AClass_Object_Actor
{
public:
	class UClass_Object*                               deadClasses;                                              // 0x0400(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Tyrion_Setup");
		return ptr;
	}


	void Function_enemyListSanityCheck(class AClass_Object_Actor_Pawn* AI);
	TArray<class AClass_Object_Actor_Pawn*> Function_getEnemyListFromSensor(class AClass_Object_Actor_Pawn* AI);
	void Function_sendAllyDiedMessage(class AClass_Object_Actor_Pawn* ally, class AClass_Object_Actor_Pawn* DeadPawn, class AClass_Object_Actor_Pawn* InstigatedBy, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_sendGetOutOfWayMessage(class AClass_Object_Actor_Pawn* bumpedPawn, const struct FStruct_Vector& bumpDirection);
	bool STATIC_Function_copyParameters(class UClass_Object* Source, class UClass_Object* Dest);
	class UClass_Object* STATIC_Function_shallowCopyGoal(class UClass_Object* Source);
	class UClass_Object* STATIC_Function_shallowCopy(class UClass_Object* Source);
	void Function_makeSafeOuter(class UClass_Object* objOwner, class UClass_Object* Obj);
	void Function_shutDownVision(class AClass_Object_Actor_Pawn* Pawn);
	void Function_stopActions(class AClass_Object_Actor_Pawn* Pawn);
	void Function_setAILOD(class AClass_Object_Actor_Pawn* Pawn, TEnumAsByte<EAI_LOD_Levels> newLODLevel);
	void Function_doPlayerRelatedAIProcessing(float DeltaSeconds, class AClass_Object_Actor_Pawn* Pawn);
	void Function_doRookRelatedAIProcessing(float DeltaSeconds, class AClass_Object_Actor_Pawn* Pawn);
};


// Class Object.RefCount.Tyrion_GoalBase
// 0x0000 (0x0038 - 0x0038)
class UClass_Object_RefCount_Tyrion_GoalBase : public UClass_Object_RefCount
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase");
		return ptr;
	}


	struct FString Function_goalDebuggingString();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass();
};


// Class Object.RefCount.Tyrion_ActionBase
// 0x0000 (0x0038 - 0x0038)
class UClass_Object_RefCount_Tyrion_ActionBase : public UClass_Object_RefCount
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase");
		return ptr;
	}


	struct FString Function_actionDebuggingString();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass();
};


// Class Object.RefCount.Tyrion_ResourceBase
// 0x001C (0x0054 - 0x0038)
class UClass_Object_RefCount_Tyrion_ResourceBase : public UClass_Object_RefCount
{
public:
	TArray<class UClass_Object_RefCount_Tyrion_GoalBase*> goals;                                                    // 0x0038(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase*> abilities;                                                // 0x0044(0x000C) (Edit, NeedCtorLink, EditInline)
	unsigned long                                      bMatchGoals : 1;                                          // 0x0050(0x0004)
	unsigned long                                      bUnInitialized : 1;                                       // 0x0050(0x0004)
	unsigned long                                      bGoalsReset : 1;                                          // 0x0050(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase");
		return ptr;
	}


	void Function_displayTyrionDebug();
	void Function_addAbility(class UClass_Object_RefCount_Tyrion_ActionBase* newAbility);
	void Function_Tick(float DeltaTime);
	void Function_assignAbility(class UClass_Object_Field_Struct_State_Class* abilityClass);
	void Function_assignGoal(class UClass_Object_Field_Struct_State_Class* goalClass);
	void Function_PawnDied(class AClass_Object_Actor_Pawn* Pawn);
	bool Function_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	bool Function_isActive();
	void Function_resetGoals();
	void Function_deleteRemovedActions();
	void Function_deleteSensors();
	void Function_cleanup();
	void Function_setIndex(int Index);
	void Function_setResourceOwner(class AClass_Object_Actor* p);
	void Function_Init();
};


// Class Object.Subsystem.RenderDevice.NullRenderDevice
// 0x0028 (0x00EC - 0x00C4)
class UClass_Object_Subsystem_RenderDevice_NullRenderDevice : public UClass_Object_Subsystem_RenderDevice
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C4(0x0028) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.RenderDevice.NullRenderDevice");
		return ptr;
	}

};


// Class Object.Actor.GenericExternalCamera
// 0x0020 (0x0420 - 0x0400)
class AClass_Object_Actor_GenericExternalCamera : public AClass_Object_Actor
{
public:
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* CameraTexture;                                            // 0x0400(0x0004) (Edit, NoClear)
	int                                                ResolutionX;                                              // 0x0404(0x0004) (Edit, NoClear)
	int                                                ResolutionY;                                              // 0x0408(0x0004) (Edit, NoClear)
	int                                                OptimizedRadius;                                          // 0x040C(0x0004) (Edit, NoClear)
	int                                                UpdateRate;                                               // 0x0410(0x0004) (Edit, NoClear)
	int                                                FOV;                                                      // 0x0414(0x0004) (Edit, NoClear)
	TEnumAsByte<EOptimizeOption>                       OptimizeFor;                                              // 0x0418(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	unsigned long                                      bTimerHasElapsed : 1;                                     // 0x041C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.GenericExternalCamera");
		return ptr;
	}


	void Function_Timer_Timer();
	struct FStruct_Vector Function_GetViewLocation();
	struct FStruct_Rotator Function_GetViewRotation();
	void Function_RenderTexture_RenderTexture(class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* inTexture);
	void Function_PreScriptedTextureRendered_PreScriptedTextureRendered(class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* Tex);
	void Function_Destroyed_Destroyed();
	void Function_Initialize();
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.GenericExternalCamera.MirrorCamera
// 0x0014 (0x0434 - 0x0420)
class AClass_Object_Actor_GenericExternalCamera_MirrorCamera : public AClass_Object_Actor_GenericExternalCamera
{
public:
	float                                              MirrorOffset;                                             // 0x0420(0x0004) (Edit, NoClear)
	class UClass_Object_Material_RenderedMaterial_Shader* ReferenceShader;                                          // 0x0424(0x0004) (Edit, NoClear)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* MirrorTexture;                                            // 0x0428(0x0004) (Const, Transient)
	class UClass_Object_Material_Modifier_TexModifier_TexScaler* MirrorScaler;                                             // 0x042C(0x0004) (Const, Transient)
	class UClass_Object_Material*                      MirrorMaterial;                                           // 0x0430(0x0004) (Const, Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.GenericExternalCamera.MirrorCamera");
		return ptr;
	}


	struct FStruct_Vector Function_GetViewLocation_GetViewLocation();
	struct FStruct_Rotator Function_GetViewRotation_GetViewRotation();
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_ScriptedTexture* STATIC_Function_CreateNewScriptedTexture(const struct FString& InName);
	void Function_Initialize_Initialize();
};


// Class Object.Actor.Mirror
// 0x0008 (0x0408 - 0x0400)
class AClass_Object_Actor_Mirror : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_GenericExternalCamera_MirrorCamera* MyCamera;                                                 // 0x0400(0x0004) (Component)
	int                                                MirrorSkinIndex;                                          // 0x0404(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Mirror");
		return ptr;
	}


	void Function_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.KRepulsor
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KRepulsor : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KRepulsor");
		return ptr;
	}

};


// Class Object.Actor.Pawn.KVehicle
// 0x0000 (0x0670 - 0x0670)
class AClass_Object_Actor_Pawn_KVehicle : public AClass_Object_Actor_Pawn
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.KVehicle");
		return ptr;
	}

};


// Class Object.Actor.KActor
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor");
		return ptr;
	}

};


// Class Object.Actor.KActor.KTire
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KTire : public AClass_Object_Actor_KActor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KTire");
		return ptr;
	}

};


// Class Object.KarmaParamsCollision
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_KarmaParamsCollision : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.KarmaParamsCollision");
		return ptr;
	}

};


// Class Object.KarmaParamsCollision.KarmaParams
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_KarmaParamsCollision_KarmaParams : public UClass_Object_KarmaParamsCollision
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.KarmaParamsCollision.KarmaParams");
		return ptr;
	}

};


// Class Object.KarmaParamsCollision.KarmaParams.KarmaParamsSkel
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_KarmaParamsCollision_KarmaParams_KarmaParamsSkel : public UClass_Object_KarmaParamsCollision_KarmaParams
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.KarmaParamsCollision.KarmaParams.KarmaParamsSkel");
		return ptr;
	}

};


// Class Object.KarmaParamsCollision.KarmaParams.KarmaParamsRBFull
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_KarmaParamsCollision_KarmaParams_KarmaParamsRBFull : public UClass_Object_KarmaParamsCollision_KarmaParams
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.KarmaParamsCollision.KarmaParams.KarmaParamsRBFull");
		return ptr;
	}

};


// Class Object.KMeshProps
// 0x0054 (0x007C - 0x0028)
class UClass_Object_KMeshProps : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x54];                                      // 0x0028(0x0054) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.KMeshProps");
		return ptr;
	}

};


// Class Object.Actor.KActor.KConstraint
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KConstraint : public AClass_Object_Actor_KActor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KConstraint");
		return ptr;
	}

};


// Class Object.Actor.KActor.KConstraint.KRPROJoint
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KConstraint_KRPROJoint : public AClass_Object_Actor_KActor_KConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KConstraint.KRPROJoint");
		return ptr;
	}

};


// Class Object.Actor.KActor.KConstraint.KCarWheelJoint
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KConstraint_KCarWheelJoint : public AClass_Object_Actor_KActor_KConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KConstraint.KCarWheelJoint");
		return ptr;
	}

};


// Class Object.Actor.KActor.KConstraint.KConeLimit
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KConstraint_KConeLimit : public AClass_Object_Actor_KActor_KConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KConstraint.KConeLimit");
		return ptr;
	}

};


// Class Object.Actor.KActor.KConstraint.KHinge
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KConstraint_KHinge : public AClass_Object_Actor_KActor_KConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KConstraint.KHinge");
		return ptr;
	}

};


// Class Object.Actor.KActor.KConstraint.KBSJoint
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_KActor_KConstraint_KBSJoint : public AClass_Object_Actor_KActor_KConstraint
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.KActor.KConstraint.KBSJoint");
		return ptr;
	}

};


// Class Object.IInterestedPawnDied
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IInterestedPawnDied : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IInterestedPawnDied");
		return ptr;
	}


	void Function_OnOtherPawnDied(class AClass_Object_Actor_Pawn* DeadPawn);
};


// Class Object.IInterestedActorDestroyed
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IInterestedActorDestroyed : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IInterestedActorDestroyed");
		return ptr;
	}


	void Function_OnOtherActorDestroyed(class AClass_Object_Actor* ActorBeingDestroyed);
};


// Class Object.Actor.Info.GameStats
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_Info_GameStats : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_FileLog*            TempLog;                                                  // 0x0400(0x0004)
	class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GRI;                                                      // 0x0404(0x0004)
	unsigned long                                      bShowBots : 1;                                            // 0x0408(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameStats");
		return ptr;
	}


	void Function_GameEvent(const struct FString& GEvent, const struct FString& Desc, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Who);
	void Function_SpecialEvent(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Who, const struct FString& Desc);
	void Function_KillEvent(const struct FString& Killtype, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Killer, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* victim, class UClass_Object_Field_Struct_State_Class* Damage);
	void Function_TeamScoreEvent(int Team, float Points, const struct FString& Desc);
	void Function_ScoreEvent(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Who, float Points, const struct FString& Desc);
	void Function_DisconnectEvent(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Who);
	void Function_ConnectEvent(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Who);
	void Function_EndGame(const struct FString& Reason);
	void Function_StartGame();
	void Function_ServerInfo();
	void Function_NewGame();
	struct FString Function_MapName();
	struct FString Function_TimeZone();
	struct FString Function_FullTimeDate();
	struct FString Function_Header();
	struct FString Function_TimeStamp();
	void Function_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_Logf(const struct FString& LogString);
	void Function_Shutdown();
	void Function_Init();
	struct FString Function_GetMapFileName();
	struct FString Function_GetStatsIdentifier(class AClass_Object_Actor_Controller* C);
};


// Class Object.Actor.Info.FileLog
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_Info_FileLog : public AClass_Object_Actor_Info
{
public:
	int                                                LogAr;                                                    // 0x0400(0x0004)
	struct FString                                     LogFileName;                                              // 0x0404(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.FileLog");
		return ptr;
	}


	void Function_Destroyed_Destroyed();
	void Function_Logf(const struct FString& LogString);
	void Function_CloseLog();
	void Function_OpenLog(const struct FString& FName);
};


// Class Object.ParticleEmitter.RibbonEmitter
// 0x00F8 (0x05A8 - 0x04B0)
class UClass_Object_ParticleEmitter_RibbonEmitter : public UClass_Object_ParticleEmitter
{
public:
	float                                              SampleRate;                                               // 0x04B0(0x0004) (Edit)
	float                                              DecayRate;                                                // 0x04B4(0x0004) (Edit)
	int                                                NumPoints;                                                // 0x04B8(0x0004) (Edit)
	float                                              RibbonWidth;                                              // 0x04BC(0x0004) (Edit)
	TEnumAsByte<EGetPointAxis>                         GetPointAxisFrom;                                         // 0x04C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04C1(0x0003) MISSED OFFSET
	struct FStruct_Vector                              AxisNormal;                                               // 0x04C4(0x000C) (Edit)
	float                                              MinSampleDist;                                            // 0x04D0(0x0004) (Edit)
	float                                              MinSampleDot;                                             // 0x04D4(0x0004) (Edit)
	float                                              PointOriginOffset;                                        // 0x04D8(0x0004) (Edit)
	float                                              RibbonTextureUScale;                                      // 0x04DC(0x0004) (Edit)
	float                                              RibbonTextureVScale;                                      // 0x04E0(0x0004) (Edit)
	int                                                NumSheets;                                                // 0x04E4(0x0004) (Edit)
	TArray<float>                                      SheetScale;                                               // 0x04E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bBillboardSheets : 1;                                     // 0x04F4(0x0004) (Edit)
	struct FStruct_Vector                              StartBoneOffset;                                          // 0x04F8(0x000C) (Edit)
	struct FStruct_Vector                              EndBoneOffset;                                            // 0x0504(0x000C) (Edit)
	struct FName                                       BoneNameStart;                                            // 0x0510(0x0004) (Edit)
	struct FName                                       BoneNameEnd;                                              // 0x0514(0x0004) (Edit)
	TArray<struct FStruct_RibbonPoint>                 RibbonPoints;                                             // 0x0518(0x000C) (NeedCtorLink)
	int                                                RibbonNumSplinePoints;                                    // 0x0524(0x0004) (Edit, NoClear)
	int                                                RibbonSplineDegree;                                       // 0x0528(0x0004) (Edit, NoClear)
	TArray<int>                                        RibbonSplineKnots;                                        // 0x052C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_RibbonPoint>                 RibbonSplinePoints;                                       // 0x0538(0x000C) (NeedCtorLink)
	unsigned long                                      bSamplePoints : 1;                                        // 0x0544(0x0004) (Edit)
	unsigned long                                      bDecayPoints : 1;                                         // 0x0544(0x0004) (Edit)
	unsigned long                                      bDecayPointsWhenStopped : 1;                              // 0x0544(0x0004) (Edit)
	unsigned long                                      bSyncDecayWhenKilled : 1;                                 // 0x0544(0x0004) (Edit)
	unsigned long                                      bRemainAttachedWhenStopped : 1;                           // 0x0544(0x0004) (Edit)
	unsigned long                                      bSyncFadeOutWhenKilled : 1;                               // 0x0544(0x0004) (Edit)
	unsigned long                                      bMatchPawnVelocity : 1;                                   // 0x0544(0x0004) (Edit, NoClear)
	float                                              VelocityLeadFactor;                                       // 0x0548(0x0004) (Edit, NoClear)
	unsigned long                                      bLengthBasedTextureU : 1;                                 // 0x054C(0x0004) (Edit)
	unsigned long                                      bUseSheetScale : 1;                                       // 0x054C(0x0004) (Edit)
	unsigned long                                      bUseBones : 1;                                            // 0x054C(0x0004) (Edit)
	unsigned long                                      bUseBoneDistance : 1;                                     // 0x054C(0x0004) (Edit)
	float                                              SampleTimer;                                              // 0x0550(0x0004) (Transient)
	float                                              DecayTimer;                                               // 0x0554(0x0004) (Transient)
	float                                              RealSampleRate;                                           // 0x0558(0x0004) (Transient)
	float                                              RealDecayRate;                                            // 0x055C(0x0004) (Transient)
	float                                              RibbonDecayLength;                                        // 0x0560(0x0004) (Transient)
	int                                                SheetsUsed;                                               // 0x0564(0x0004) (Transient)
	struct FStruct_RibbonPoint                         LastSampledPoint;                                         // 0x0568(0x0034) (Transient)
	unsigned long                                      bKilled : 1;                                              // 0x059C(0x0004) (Transient)
	unsigned long                                      bDecaying : 1;                                            // 0x059C(0x0004) (Transient)
	int                                                LastNumSplineKnotPoints;                                  // 0x05A0(0x0004) (Transient)
	int                                                LastSplineDegree;                                         // 0x05A4(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ParticleEmitter.RibbonEmitter");
		return ptr;
	}

};


// Class Object.Actor.xWeatherEffect
// 0x00F4 (0x04F4 - 0x0400)
class AClass_Object_Actor_xWeatherEffect : public AClass_Object_Actor
{
public:
	TEnumAsByte<EWeatherType>                          WeatherType;                                              // 0x0400(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	int                                                numParticles;                                             // 0x0404(0x0004) (Edit)
	int                                                numActive;                                                // 0x0408(0x0004) (Transient)
	struct FStruct_Box                                 Box;                                                      // 0x040C(0x001C) (Transient)
	struct FStruct_Vector                              eyePos;                                                   // 0x0428(0x000C) (Transient)
	struct FStruct_Vector                              eyeDir;                                                   // 0x0434(0x000C) (Transient)
	struct FStruct_Vector                              spawnOrigin;                                              // 0x0440(0x000C) (Transient)
	struct FStruct_Vector                              eyeMoveVec;                                               // 0x044C(0x000C) (Transient)
	float                                              eyeVel;                                                   // 0x0458(0x0004) (Transient)
	float                                              deviation;                                                // 0x045C(0x0004) (Edit)
	float                                              maxPclEyeDist;                                            // 0x0460(0x0004) (Edit)
	float                                              numCols;                                                  // 0x0464(0x0004) (Edit)
	float                                              numRows;                                                  // 0x0468(0x0004) (Edit)
	float                                              numFrames;                                                // 0x046C(0x0004) (Transient)
	float                                              texU;                                                     // 0x0470(0x0004) (Transient)
	float                                              texV;                                                     // 0x0474(0x0004) (Transient)
	unsigned long                                      noReference : 1;                                          // 0x0478(0x0004) (Transient)
	struct FStruct_Vector                              spawnVecU;                                                // 0x047C(0x000C)
	struct FStruct_Vector                              spawnVecV;                                                // 0x0488(0x000C)
	struct FStruct_Vector                              spawnVel;                                                 // 0x0494(0x000C) (Edit)
	struct FStruct_RangeVector                         Position;                                                 // 0x04A0(0x0018) (Edit)
	struct FStruct_Range                               speed;                                                    // 0x04B8(0x0008) (Edit)
	struct FStruct_Range                               Life;                                                     // 0x04C0(0x0008) (Edit)
	struct FStruct_Range                               Size;                                                     // 0x04C8(0x0008) (Edit)
	struct FStruct_Range                               EyeSizeClamp;                                             // 0x04D0(0x0008) (Edit)
	unsigned long                                      bForceAffected : 1;                                       // 0x04D8(0x0004) (Edit)
	unsigned long                                      OnlyPlayInZone : 1;                                       // 0x04D8(0x0004) (Edit)
	TArray<struct FStruct_WeatherPcl>                  pcl;                                                      // 0x04DC(0x000C) (Transient, NeedCtorLink)
	TArray<class AClass_Object_Actor_Brush_Volume*>    pclBlockers;                                              // 0x04E8(0x000C) (Transient, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.xWeatherEffect");
		return ptr;
	}

};


// Class Object.Material.GlowMaterial
// 0x0014 (0x0054 - 0x0040)
class UClass_Object_Material_GlowMaterial : public UClass_Object_Material
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0040(0x0014) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.GlowMaterial");
		return ptr;
	}

};


// Class Object.Material.BlurMaterial
// 0x0018 (0x0058 - 0x0040)
class UClass_Object_Material_BlurMaterial : public UClass_Object_Material
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0040(0x0018) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.BlurMaterial");
		return ptr;
	}

};


// Class Object.FinalisedTerrainData
// 0x0014 (0x003C - 0x0028)
class UClass_Object_FinalisedTerrainData : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0028(0x0014) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.FinalisedTerrainData");
		return ptr;
	}

};


// Class Object.Subsystem.RenderDevice.TargetCapsDevice
// 0x0010 (0x00D4 - 0x00C4)
class UClass_Object_Subsystem_RenderDevice_TargetCapsDevice : public UClass_Object_Subsystem_RenderDevice
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C4(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.RenderDevice.TargetCapsDevice");
		return ptr;
	}

};


// Class Object.Material.FluidVolumeMaterial
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Material_FluidVolumeMaterial : public UClass_Object_Material
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.FluidVolumeMaterial");
		return ptr;
	}

};


// Class Object.Material.FluidVolumeMaterial.FluidSurfaceLowDetailMaterial
// 0x0004 (0x0044 - 0x0040)
class UClass_Object_Material_FluidVolumeMaterial_FluidSurfaceLowDetailMaterial : public UClass_Object_Material_FluidVolumeMaterial
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0040(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.FluidVolumeMaterial.FluidSurfaceLowDetailMaterial");
		return ptr;
	}

};


// Class Object.Material.FluidVolumeMaterial.FluidProceduralNormalmap
// 0x0004 (0x0044 - 0x0040)
class UClass_Object_Material_FluidVolumeMaterial_FluidProceduralNormalmap : public UClass_Object_Material_FluidVolumeMaterial
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0040(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.FluidVolumeMaterial.FluidProceduralNormalmap");
		return ptr;
	}

};


// Class Object.Material.FluidVolumeMaterial.FluidSurfaceMaterial
// 0x0080 (0x00C0 - 0x0040)
class UClass_Object_Material_FluidVolumeMaterial_FluidSurfaceMaterial : public UClass_Object_Material_FluidVolumeMaterial
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0040(0x0080) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.FluidVolumeMaterial.FluidSurfaceMaterial");
		return ptr;
	}

};


// Class Object.FluidVolumeInterface
// 0x00DC (0x0104 - 0x0028)
class UClass_Object_FluidVolumeInterface : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0xDC];                                      // 0x0028(0x00DC) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.FluidVolumeInterface");
		return ptr;
	}

};


// Class Object.FluidSurfaceParamaters
// 0x0050 (0x0078 - 0x0028)
class UClass_Object_FluidSurfaceParamaters : public UClass_Object
{
public:
	struct FStruct_Vector_Plane                        WaveHeights;                                              // 0x0028(0x0010) (Edit)
	struct FStruct_Vector_Plane                        WaveSpeeds;                                               // 0x0038(0x0010) (Edit)
	struct FStruct_Vector_Plane                        WaveOffsets;                                              // 0x0048(0x0010) (Edit)
	struct FStruct_Vector_Plane                        WaveXSizes;                                               // 0x0058(0x0010) (Edit)
	struct FStruct_Vector_Plane                        WaveYSizes;                                               // 0x0068(0x0010) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.FluidSurfaceParamaters");
		return ptr;
	}

};


// Class Object.Actor.Brush.Volume.PhysicsVolume.FluidVolume
// 0x0058 (0x0568 - 0x0510)
class AClass_Object_Actor_Brush_Volume_PhysicsVolume_FluidVolume : public AClass_Object_Actor_Brush_Volume_PhysicsVolume
{
public:
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture_Cubemap* ReflectionMap;                                            // 0x0510(0x0004) (Edit, EditInline, EditInlineUse)
	unsigned char                                      Transparency;                                             // 0x0514(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0515(0x0003) MISSED OFFSET
	struct FStruct_Color                               BaseColor;                                                // 0x0518(0x0004) (Edit)
	struct FStruct_Color                               TangentColor;                                             // 0x051C(0x0004) (Edit)
	struct FStruct_Color                               ReflectionModulator;                                      // 0x0520(0x0004) (Edit)
	float                                              SubdivisionSize;                                          // 0x0524(0x0004) (Edit)
	unsigned char                                      EdgePolyBuffer;                                           // 0x0528(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0529(0x0003) MISSED OFFSET
	float                                              WaveHeightScaler;                                         // 0x052C(0x0004) (Edit)
	float                                              WaveSpeedScaler;                                          // 0x0530(0x0004) (Edit)
	class UClass_Object_FluidSurfaceParamaters*        SurfaceParamaters;                                        // 0x0534(0x0004) (Edit, EditInline, EditInlineUse)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* NormalMap;                                                // 0x0538(0x0004) (Edit, EditInline, EditInlineUse)
	float                                              RippleScale;                                              // 0x053C(0x0004) (Edit)
	unsigned char                                      RippleStrength;                                           // 0x0540(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0541(0x0003) MISSED OFFSET
	struct FStruct_Vector                              RippleSpeed;                                              // 0x0544(0x000C) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Texture;                                                  // 0x0550(0x0004) (Edit, EditInline, EditInlineUse)
	float                                              TextureScale;                                             // 0x0554(0x0004) (Edit)
	struct FStruct_Vector                              TextureSpeed;                                             // 0x0558(0x000C) (Edit)
	int                                                Interface;                                                // 0x0564(0x0004) (Const, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Brush.Volume.PhysicsVolume.FluidVolume");
		return ptr;
	}


	void Function_PawnLeavingVolume_PawnLeavingVolume(class AClass_Object_Actor_Pawn* Other);
	void Function_PawnEnteredVolume_PawnEnteredVolume(class AClass_Object_Actor_Pawn* Other);
	void Function_ActorLeavingVolume_ActorLeavingVolume(class AClass_Object_Actor* Other);
	void Function_ActorEnteredVolume_ActorEnteredVolume(class AClass_Object_Actor* Other);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Material.DecoLayerMaterial
// 0x0024 (0x0064 - 0x0040)
class UClass_Object_Material_DecoLayerMaterial : public UClass_Object_Material
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x0040(0x0024) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.DecoLayerMaterial");
		return ptr;
	}

};


// Class Object.Material.PerPixelBspMaterial
// 0x0044 (0x0084 - 0x0040)
class UClass_Object_Material_PerPixelBspMaterial : public UClass_Object_Material
{
public:
	unsigned char                                      UnknownData00[0x44];                                      // 0x0040(0x0044) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Material.PerPixelBspMaterial");
		return ptr;
	}

};


// Class Object.StaticShadow
// 0x007C (0x00A4 - 0x0028)
class UClass_Object_StaticShadow : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x7C];                                      // 0x0028(0x007C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.StaticShadow");
		return ptr;
	}

};


// Class Object.ShadowPrimitive
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_ShadowPrimitive : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ShadowPrimitive");
		return ptr;
	}

};


// Class Object.ShadowPrimitive.BufferShadowPrimitive
// 0x0080 (0x00A8 - 0x0028)
class UClass_Object_ShadowPrimitive_BufferShadowPrimitive : public UClass_Object_ShadowPrimitive
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0028(0x0080) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ShadowPrimitive.BufferShadowPrimitive");
		return ptr;
	}

};


// Class Object.PathfindingObstacle
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_PathfindingObstacle : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PathfindingObstacle");
		return ptr;
	}


	bool Function_canBePassed(const struct FName& teamName);
};


// Class Object.Subsystem.System
// 0x0048 (0x0074 - 0x002C)
class UClass_Object_Subsystem_System : public UClass_Object_Subsystem
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	int                                                PurgeCacheDays;                                           // 0x0030(0x0004) (Config)
	struct FString                                     SavePath;                                                 // 0x0034(0x000C) (Config, NeedCtorLink)
	struct FString                                     CachePath;                                                // 0x0040(0x000C) (Config, NeedCtorLink)
	struct FString                                     CacheExt;                                                 // 0x004C(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             Paths;                                                    // 0x0058(0x000C) (Config, NeedCtorLink)
	TArray<struct FName>                               Suppress;                                                 // 0x0064(0x000C) (Config, NeedCtorLink)
	int                                                DisableAccessedNoneWarnings;                              // 0x0070(0x0004) (Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.System");
		return ptr;
	}

};


// Class Object.Field
// 0x000C (0x0034 - 0x0028)
class UClass_Object_Field : public UClass_Object
{
public:
    class UClass_Object_Field*	Next;  // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	class UClass_Object_Field*	SuperField;                                               // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field");
		return ptr;
	}

};


// Class Object.Field.Property
// 0x0040 (0x0074 - 0x0034)
class UClass_Object_Field_Property : public UClass_Object_Field
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0034(0x0040) MISSED OFFSET
	 unsigned long ArrayDim;
	 unsigned long ElementSize;
	 struct FQWord PropertyFlags;
	 unsigned short RepOffset;
	 unsigned short RepIndex;
	 char UnknownData2[8];
	 unsigned long Offset;

	 UClass_Object_Field_Property* PropertyLinkNext;
	 UClass_Object_Field_Property* ConfigLinkNext;
	 UClass_Object_Field_Property* ConstructorLinkNext;
	 UClass_Object_Field_Property* RepOwner;
	 // char			UnknownData[0x10];
	 // char UnknownData_2[56-8];
	 char UnknownData[16];

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property");
		return ptr;
	}

};


// Class Object.Field.Property.StructProperty
// 0x0004 (0x0078 - 0x0074)
class UClass_Object_Field_Property_StructProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.StructProperty");
		return ptr;
	}

};


// Class Object.Field.Property.MapProperty
// 0x0008 (0x007C - 0x0074)
class UClass_Object_Field_Property_MapProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0074(0x0008) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.MapProperty");
		return ptr;
	}

};


// Class Object.Field.Property.ArrayProperty
// 0x0004 (0x0078 - 0x0074)
class UClass_Object_Field_Property_ArrayProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.ArrayProperty");
		return ptr;
	}

};


// Class Object.Field.Property.FixedArrayProperty
// 0x0008 (0x007C - 0x0074)
class UClass_Object_Field_Property_FixedArrayProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0074(0x0008) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.FixedArrayProperty");
		return ptr;
	}

};


// Class Object.Field.Property.StrProperty
// 0x0000 (0x0074 - 0x0074)
class UClass_Object_Field_Property_StrProperty : public UClass_Object_Field_Property
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.StrProperty");
		return ptr;
	}

};


// Class Object.Field.Property.NameProperty
// 0x0000 (0x0074 - 0x0074)
class UClass_Object_Field_Property_NameProperty : public UClass_Object_Field_Property
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.NameProperty");
		return ptr;
	}

};


// Class Object.Field.Property.ObjectProperty
// 0x0004 (0x0078 - 0x0074)
class UClass_Object_Field_Property_ObjectProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.ObjectProperty");
		return ptr;
	}

};


// Class Object.Field.Property.ObjectProperty.ClassProperty
// 0x0004 (0x007C - 0x0078)
class UClass_Object_Field_Property_ObjectProperty_ClassProperty : public UClass_Object_Field_Property_ObjectProperty
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0078(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.ObjectProperty.ClassProperty");
		return ptr;
	}

};


// Class Object.Field.Property.FloatProperty
// 0x0000 (0x0074 - 0x0074)
class UClass_Object_Field_Property_FloatProperty : public UClass_Object_Field_Property
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.FloatProperty");
		return ptr;
	}

};


// Class Object.Field.Property.BoolProperty
// 0x0004 (0x0078 - 0x0074)
class UClass_Object_Field_Property_BoolProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.BoolProperty");
		return ptr;
	}

};


// Class Object.Field.Property.DelegateProperty
// 0x0004 (0x0078 - 0x0074)
class UClass_Object_Field_Property_DelegateProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.DelegateProperty");
		return ptr;
	}

};


// Class Object.Field.Property.IntProperty
// 0x0000 (0x0074 - 0x0074)
class UClass_Object_Field_Property_IntProperty : public UClass_Object_Field_Property
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.IntProperty");
		return ptr;
	}

};


// Class Object.Field.Property.ByteProperty
// 0x0004 (0x0078 - 0x0074)
class UClass_Object_Field_Property_ByteProperty : public UClass_Object_Field_Property
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Property.ByteProperty");
		return ptr;
	}

};


// Class Object.Language
// 0x0004 (0x002C - 0x0028)
class UClass_Object_Language : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Language");
		return ptr;
	}

};


// Class Object.Factory
// 0x0040 (0x0068 - 0x0028)
class UClass_Object_Factory : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0030(0x000C) (NeedCtorLink)
	struct FString                                     InContextCommand;                                         // 0x003C(0x000C) (NeedCtorLink)
	struct FString                                     OutOfContextCommand;                                      // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FString>                             Formats;                                                  // 0x0054(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory");
		return ptr;
	}

};


// Class Object.Factory.TextBufferFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_TextBufferFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.TextBufferFactory");
		return ptr;
	}

};


// Class Object.Package
// 0x001C (0x0044 - 0x0028)
class UClass_Object_Package : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0028(0x001C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Package");
		return ptr;
	}

};


// Class Object.Linker
// 0x008C (0x00B4 - 0x0028)
class UClass_Object_Linker : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x8C];                                      // 0x0028(0x008C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Linker");
		return ptr;
	}

};


// Class Object.Linker.LinkerSave
// 0x005C (0x0110 - 0x00B4)
class UClass_Object_Linker_LinkerSave : public UClass_Object_Linker
{
public:
	unsigned char                                      UnknownData00[0x5C];                                      // 0x00B4(0x005C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Linker.LinkerSave");
		return ptr;
	}

};


// Class Object.Linker.LinkerLoad
// 0x0458 (0x050C - 0x00B4)
class UClass_Object_Linker_LinkerLoad : public UClass_Object_Linker
{
public:
	unsigned char                                      UnknownData00[0x458];                                     // 0x00B4(0x0458) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Linker.LinkerLoad");
		return ptr;
	}

};


// Class Object.Field.Enum
// 0x000C (0x0040 - 0x0034)
class UClass_Object_Field_Enum : public UClass_Object_Field
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Enum");
		return ptr;
	}

};


// Class Object.TextBuffer
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_TextBuffer : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TextBuffer");
		return ptr;
	}

};


// Class Object.Field.Const
// 0x000C (0x0040 - 0x0034)
class UClass_Object_Field_Const : public UClass_Object_Field
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Const");
		return ptr;
	}

};


// Class Object.Field.Struct
// 0x0054 (0x0088 - 0x0034)
class UClass_Object_Field_Struct : public UClass_Object_Field
{
public:
	unsigned char                                      UnknownData00[12];                                        // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	class UClass_Object_FieldUClass_Object_Field*      Children;                                                 // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	unsigned long                                      PropertySize;                                             // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	unsigned char                                      UnknownData01[64];                                        // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Struct");
		return ptr;
	}

};


// Class Object.Field.Struct.Function
// 0x001C (0x00A4 - 0x0088)
class UClass_Object_Field_Struct_Function : public UClass_Object_Field_Struct
{
public:
	uint32_t                                           FunctionFlags;                                            // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	uint16_t                                           iNative;                                                  // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	char                                               UnknownData00[0x02];                                      // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	uint8_t                                            OperPrecedence;                                           // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	uint8_t                                            NumParms;                                                 // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	uint16_t                                           ParmsSize;                                                // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	uint16_t                                           ReturnValueOffset;                                        // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	char                                               UnknownData01[0x02];                                      // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY
	void*                                              Func;                                                     // 0x0000(0x0000) NOT AUTO-GENERATED PROPERTY

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Struct.Function");
		return ptr;
	}

};


// Class Object.Field.Struct.State
// 0x0418 (0x04A0 - 0x0088)
class UClass_Object_Field_Struct_State : public UClass_Object_Field_Struct
{
public:
	unsigned char                                      UnknownData00[0x418];                                     // 0x0088(0x0418) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Struct.State");
		return ptr;
	}
};


// Class Object.Field.Struct.State.Class
// 0x00D4 (0x0574 - 0x04A0)
class UClass_Object_Field_Struct_State_Class : public UClass_Object_Field_Struct_State
{
public:
	unsigned char                                      UnknownData00[0xD4];                                      // 0x04A0(0x00D4) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Field.Struct.State.Class");
		return ptr;
	}

};


// Class Object.Exporter
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_Exporter : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET
	TArray<struct FString>                             Formats;                                                  // 0x002C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter");
		return ptr;
	}

};


// Class Object.Exporter.ClassExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_ClassExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.ClassExporterT3D");
		return ptr;
	}

};


// Class Object.Exporter.ObjectExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_ObjectExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.ObjectExporterT3D");
		return ptr;
	}

};


// Class Object.Actor.Info.LocalMessage
// 0x001C (0x041C - 0x0400)
class AClass_Object_Actor_Info_LocalMessage : public AClass_Object_Actor_Info
{
public:
	unsigned long                                      bComplexString : 1;                                       // 0x0400(0x0004)
	unsigned long                                      bIsSpecial : 1;                                           // 0x0400(0x0004)
	unsigned long                                      bIsUnique : 1;                                            // 0x0400(0x0004)
	unsigned long                                      bIsConsoleMessage : 1;                                    // 0x0400(0x0004)
	unsigned long                                      bFadeMessage : 1;                                         // 0x0400(0x0004)
	unsigned long                                      bBeep : 1;                                                // 0x0400(0x0004)
	unsigned long                                      bOffsetYPos : 1;                                          // 0x0400(0x0004)
	unsigned long                                      bCenter : 1;                                              // 0x0400(0x0004)
	unsigned long                                      bFromBottom : 1;                                          // 0x0400(0x0004)
	int                                                lifetime;                                                 // 0x0404(0x0004)
	class UClass_Object_Field_Struct_State_Class*      ChildMessage;                                             // 0x0408(0x0004) (Edit)
	struct FStruct_Color                               DrawColor;                                                // 0x040C(0x0004)
	float                                              XPos;                                                     // 0x0410(0x0004)
	float                                              YPos;                                                     // 0x0414(0x0004)
	int                                                FontSize;                                                 // 0x0418(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage");
		return ptr;
	}


	float STATIC_Function_GetLifeTime(int Switch);
	int STATIC_Function_GetFontSize(int Switch, class UClass_Object* RelatedPRI1, class UClass_Object* RelatedPRI2, class UClass_Object* LocalPlayer);
	float STATIC_Function_GetOffset(int Switch, float YL, float ClipY);
	struct FStruct_Color STATIC_Function_GetColor(int Switch, class UClass_Object* Related1, class UClass_Object* Related2);
	struct FStruct_Color STATIC_Function_GetConsoleColor(class UClass_Object* Related1);
	void STATIC_Function_ClientReceive(class AClass_Object_Actor_Controller_PlayerController* p, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_AssembleString(class AClass_Object_Actor_HUD* myHUD, int Switch, class UClass_Object* Related1, const struct FString& MessageString);
	struct FString STATIC_Function_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_GetRelatedString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void STATIC_Function_RenderComplexMessage(class UClass_Object_Canvas* Canvas, const struct FString& MessageString, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, float* XL, float* YL);
};


// Class Object.Actor.Info.ReplicationInfo.VotingReplicationInfoBase
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_Info_ReplicationInfo_VotingReplicationInfoBase : public AClass_Object_Actor_Info_ReplicationInfo
{
public:
	struct FScriptDelegate                             __ProcessCommand__Delegate;                               // 0x0400(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ProcessResponse__Delegate;                              // 0x0408(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo.VotingReplicationInfoBase");
		return ptr;
	}


	bool Function_MatchSetupEnabled();
	bool Function_TournamentVoteEnabled();
	bool Function_TeamDamageVoteEnabled();
	bool Function_AdminVoteEnabled();
	bool Function_KickVoteEnabled();
	bool Function_MapVoteEnabled();
	bool Function_MatchSetupLocked();
	void Function_SendResponse(const struct FString& Response);
	void Function_SendCommand(const struct FString& Cmd);
	void Function_ProcessResponse(const struct FString& Response);
	void Function_ProcessCommand(const struct FString& Command);
	void Function_SubmitTournamentVote(bool vote);
	void Function_SubmitTeamDamageVote(bool vote);
	void Function_SubmitAdminVote(const struct FString& Name);
	void Function_SubmitKickVote(const struct FString& Name);
	void Function_SubmitMapVote(const struct FString& Map, const struct FString& GameType);
};


// Class Object.Actor.Info.AccessControl
// 0x00C8 (0x04C8 - 0x0400)
class AClass_Object_Actor_Info_AccessControl : public AClass_Object_Actor_Info
{
public:
	class UClass_Object_TribesAdminBase_TribesAdminUserList* Users;                                                    // 0x0400(0x0004) (Transient)
	class UClass_Object_TribesAdminBase_TribesAdminGroupList* Groups;                                                   // 0x0404(0x0004) (Transient)
	TArray<struct FStruct_AdminPlayer>                 LoggedAdmins;                                             // 0x0408(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> PrivClasses;                                              // 0x0414(0x000C) (Config, NeedCtorLink)
	TArray<class UClass_Object_TribesPrivilegeBase*>   PrivManagers;                                             // 0x0420(0x000C) (NeedCtorLink)
	struct FString                                     AllPrivs;                                                 // 0x042C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             IPPolicies;                                               // 0x0438(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     IPBanned;                                                 // 0x0444(0x000C) (Localized, NeedCtorLink)
	struct FString                                     WrongPassword;                                            // 0x0450(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NeedPassword;                                             // 0x045C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     SessionBanned;                                            // 0x0468(0x000C) (Localized, NeedCtorLink)
	struct FString                                     KickedMsg;                                                // 0x0474(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      AdminClass;                                               // 0x0480(0x0004)
	struct FString                                     KickToMenu;                                               // 0x0484(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bReplyToGUI : 1;                                          // 0x0490(0x0004)
	unsigned long                                      bDontAddDefaultAdmin : 1;                                 // 0x0490(0x0004)
	struct FString                                     AdminName;                                                // 0x0494(0x000C) (NeedCtorLink)
	struct FString                                     AdminPassword;                                            // 0x04A0(0x000C) (NeedCtorLink)
	struct FString                                     GamePassword;                                             // 0x04AC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              LoginDelaySeconds;                                        // 0x04B8(0x0004) (Config, GlobalConfig)
	TArray<struct FString>                             SessionIPPolicies;                                        // 0x04BC(0x000C) (Transient, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.AccessControl");
		return ptr;
	}


	void STATIC_Function_FillPlayInfo_FillPlayInfo(class UClass_Object_PlayInfo* PlayInfo);
	bool Function_AllowPriv(const struct FString& priv);
	bool Function_CanPerform(class AClass_Object_Actor_Controller_PlayerController* p, const struct FString& Action);
	bool Function_CheckIPPolicy(const struct FString& Address, bool bSilent);
	void Function_PreLogin(const struct FString& Options, const struct FString& Address, bool bSpectator, struct FString* Error, struct FString* FailCode);
	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_GetUser(const struct FString& uname);
	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_GetLoggedAdmin(class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_ValidLogin(const struct FString& Username, const struct FString& Password);
	bool Function_CheckOptionsAdmin(const struct FString& Options);
	bool Function_KickBanPlayer(class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_BanPlayer(class AClass_Object_Actor_Controller_PlayerController* C, bool bSession);
	bool Function_KickPlayer(class AClass_Object_Actor_Controller_PlayerController* C);
	void Function_KickBan(const struct FString& S);
	void Function_SessionKickBan(const struct FString& S);
	void Function_Kick(const struct FString& S);
	struct FString Function_GetAdminName(class AClass_Object_Actor_Controller_PlayerController* PC);
	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_GetAdmin(class AClass_Object_Actor_Controller_PlayerController* PC);
	bool Function_RequiresPassword();
	void Function_SetGamePassword(const struct FString& p);
	bool Function_SetAdminPassword(const struct FString& p);
	void Function_SetAdminFromURL(const struct FString& n, const struct FString& p);
	bool Function_IsAdmin(class AClass_Object_Actor_Controller_PlayerController* p);
	void Function_AdminExited(class AClass_Object_Actor_Controller_PlayerController* p);
	void Function_AdminEntered(class AClass_Object_Actor_Controller_PlayerController* p, const struct FString& Username);
	bool Function_AdminLogout(class AClass_Object_Actor_Controller_PlayerController* p);
	void Function_AdminPromoted(class AClass_Object_Actor_Controller_PlayerController* Promoter, class AClass_Object_Actor_Controller_PlayerController* p, bool bSuccess);
	bool Function_AdminPromote(class AClass_Object_Actor_Controller_PlayerController* Promoter, class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_AdminLogin(class AClass_Object_Actor_Controller_PlayerController* p, const struct FString& Username, const struct FString& Password);
	void Function_InitPrivs();
	void Function_SaveAdmins();
	void Function_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.Info.ScoreBoard
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_Info_ScoreBoard : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo* GRI;                                                      // 0x0400(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      HudClass;                                                 // 0x0404(0x0004) (Edit)
	unsigned long                                      bDisplayMessages : 1;                                     // 0x0408(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ScoreBoard");
		return ptr;
	}


	void Function_NextStats();
	void Function_SortPRIArray();
	bool Function_InOrder(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* p1, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* p2);
	void Function_UpdateScoreBoard(class UClass_Object_Canvas* Canvas);
	struct FString Function_FormatTime(int Seconds);
	bool Function_UpdateGRI();
	void Function_DrawScoreboard(class UClass_Object_Canvas* C);
	void Function_Init();
	struct FString Function_InitTitle();
	void Function_InitGRI();
	class UClass_Object_Font* Function_GetSmallFontFor(int ScreenWidth, int Offset);
	bool Function_HaveHalfFont(class UClass_Object_Canvas* Canvas, int Offset);
	class UClass_Object_Font* Function_GetSmallerFontFor(class UClass_Object_Canvas* Canvas, int Offset);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.SavedMove
// 0x002C (0x042C - 0x0400)
class AClass_Object_Actor_Info_SavedMove : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_SavedMove*          NextMove;                                                 // 0x0400(0x0004)
	float                                              TimeStamp;                                                // 0x0404(0x0004)
	float                                              Delta;                                                    // 0x0408(0x0004)
	unsigned long                                      bRun : 1;                                                 // 0x040C(0x0004)
	unsigned long                                      bDuck : 1;                                                // 0x040C(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x040C(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x040C(0x0004)
	unsigned long                                      bJetpack : 1;                                             // 0x040C(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickMove;                                          // 0x0410(0x0001)
	TEnumAsByte<EPhysics>                              SavedPhysics;                                             // 0x0411(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0412(0x0002) MISSED OFFSET
	struct FStruct_Vector                              SavedLocation;                                            // 0x0414(0x000C)
	struct FStruct_Vector                              SavedVelocity;                                            // 0x0420(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.SavedMove");
		return ptr;
	}


	void Function_SetMoveFor(class AClass_Object_Actor_Controller_PlayerController* p, float DeltaTime, const struct FStruct_Vector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick);
	void Function_PostUpdate(class AClass_Object_Actor_Controller_PlayerController* p);
	void Function_Clear();
};


// Class Object.Message.MessageLoadProgress
// 0x000C (0x0038 - 0x002C)
class UClass_Object_Message_MessageLoadProgress : public UClass_Object_Message
{
public:
	struct FString                                     progressString;                                           // 0x002C(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageLoadProgress");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Str(const struct FString& str);
};


// Class Object.Actor.Info.VoicePack
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info_VoicePack : public AClass_Object_Actor_Info
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.VoicePack");
		return ptr;
	}


	int STATIC_Function_PickRandomTauntFor(class AClass_Object_Actor_Controller* C, bool bNoMature, bool bNoHumanOnly);
	unsigned char STATIC_Function_GetMessageIndex(const struct FName& PhraseName);
	void STATIC_Function_PlayerSpeech(const struct FName& Type, int Index, const struct FString& Callsign, class AClass_Object_Actor* PackOwner);
	void Function_ClientInitialize(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Sender, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Recipient, const struct FName& messagetype, unsigned char messageIndex);
};


// Class Object.Actor.Info.BroadcastHandler
// 0x0008 (0x0408 - 0x0400)
class AClass_Object_Actor_Info_BroadcastHandler : public AClass_Object_Actor_Info
{
public:
	int                                                SentText;                                                 // 0x0400(0x0004)
	unsigned long                                      bMuteSpectators : 1;                                      // 0x0404(0x0004) (Config)
	unsigned long                                      bPartitionSpectators : 1;                                 // 0x0404(0x0004) (Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.BroadcastHandler");
		return ptr;
	}


	void Function_AllowBroadcastLocalizedTeam(class AClass_Object_Actor* Sender, class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void Function_AllowBroadcastLocalized(class AClass_Object_Actor* Sender, class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void Function_BroadcastTeam(class AClass_Object_Actor_Controller* Sender, const struct FString& msg, const struct FName& Type);
	void Function_Broadcast(class AClass_Object_Actor* Sender, const struct FString& msg, const struct FName& Type);
	void Function_BroadcastLocalized(class AClass_Object_Actor* Sender, class AClass_Object_Actor_Controller_PlayerController* Receiver, class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	void Function_BroadcastText(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* SenderPRI, class AClass_Object_Actor_Controller_PlayerController* Receiver, const struct FString& msg, const struct FName& Type);
	bool Function_AllowsBroadcast(class AClass_Object_Actor* Broadcaster, int Len);
	void Function_UpdateSentText();
};


// Class Object.Message.MessageZone
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessageZone : public UClass_Object_Message
{
public:
	struct FName                                       Zone;                                                     // 0x002C(0x0004)
	struct FName                                       Instigator;                                               // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageZone");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _zone, const struct FName& _instigator);
};


// Class Object.Message.MessageZone.MessageZoneExited
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageZone_MessageZoneExited : public UClass_Object_Message_MessageZone
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageZone.MessageZoneExited");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageZone.MessageZoneEntered
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageZone_MessageZoneEntered : public UClass_Object_Message_MessageZone
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageZone.MessageZoneEntered");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.ObjectPool
// 0x000C (0x0034 - 0x0028)
class UClass_Object_ObjectPool : public UClass_Object
{
public:
	TArray<class UClass_Object*>                       Objects;                                                  // 0x0028(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ObjectPool");
		return ptr;
	}


	void Function_Shrink();
	void Function_FreeObject(class UClass_Object* Obj);
	class UClass_Object* Function_AllocateObject(class UClass_Object_Field_Struct_State_Class* ObjectClass);
};


// Class Object.IInterestedTeamChanged
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IInterestedTeamChanged : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IInterestedTeamChanged");
		return ptr;
	}


	void Function_onTeamChanged(class AClass_Object_Actor_Pawn* Pawn);
};


// Class Object.Actor.Info.LocalMessage.GameMessage
// 0x00C0 (0x04DC - 0x041C)
class AClass_Object_Actor_Info_LocalMessage_GameMessage : public AClass_Object_Actor_Info_LocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                                       // 0x041C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LeftMessage;                                              // 0x0428(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FailedTeamMessage;                                        // 0x0434(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FailedPlaceMessage;                                       // 0x0440(0x000C) (Localized, NeedCtorLink)
	struct FString                                     FailedSpawnMessage;                                       // 0x044C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     EnteredMessage;                                           // 0x0458(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MaxedOutMessage;                                          // 0x0464(0x000C) (Localized, NeedCtorLink)
	struct FString                                     OvertimeMessage;                                          // 0x0470(0x000C) (Localized, NeedCtorLink)
	struct FString                                     GlobalNameChange;                                         // 0x047C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NewTeamMessage;                                           // 0x0488(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NewTeamMessageTrailer;                                    // 0x0494(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NoNameChange;                                             // 0x04A0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     VoteStarted;                                              // 0x04AC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     VotePassed;                                               // 0x04B8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MustHaveStats;                                            // 0x04C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NewPlayerMessage;                                         // 0x04D0(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.GameMessage");
		return ptr;
	}


	struct FString STATIC_Function_GetString_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
};


// Class Object.Actor.DamageType.Crushed
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_Crushed : public AClass_Object_Actor_DamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.Crushed");
		return ptr;
	}

};


// Class Object.Actor.Effects
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Effects : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Effects");
		return ptr;
	}

};


// Class Object.Message.MessageDamaged
// 0x0010 (0x003C - 0x002C)
class UClass_Object_Message_MessageDamaged : public UClass_Object_Message
{
public:
	struct FName                                       damager;                                                  // 0x002C(0x0004) (Edit)
	struct FName                                       damagersTeam;                                             // 0x0030(0x0004) (Edit)
	struct FName                                       victim;                                                   // 0x0034(0x0004)
	float                                              Damage;                                                   // 0x0038(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageDamaged");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameNameNameFloat(const struct FName& _damager, const struct FName& _damagersTeam, const struct FName& _victim, float _damage);
};


// Class Object.Actor.DamageType.Suicided
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_Suicided : public AClass_Object_Actor_DamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.Suicided");
		return ptr;
	}

};


// Class Object.Actor.Info.GameRules
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_Info_GameRules : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_GameRules*          NextGameRules;                                            // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameRules");
		return ptr;
	}


	int Function_NetDamage(int OriginalDamage, int Damage, class AClass_Object_Actor_Pawn* injured, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, class UClass_Object_Field_Struct_State_Class* DamageType, struct FStruct_Vector* Momentum);
	bool Function_CriticalPlayer(class AClass_Object_Actor_Controller* Other);
	void Function_ScoreKill(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Killed);
	void Function_ScoreObjective(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Scorer, int Score);
	bool Function_PreventSever(class AClass_Object_Actor_Pawn* Killed, const struct FName& BoneName, int Damage, class UClass_Object_Field_Struct_State_Class* DamageType);
	bool Function_PreventDeath(class AClass_Object_Actor_Pawn* Killed, class AClass_Object_Actor_Controller* Killer, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	bool Function_CheckScore(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Scorer);
	bool Function_CheckEndGame(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* Winner, const struct FString& Reason);
	bool Function_HandleRestartGame();
	void Function_GetServerDetails(struct FStruct_ServerResponseLine* ServerState);
	struct FString Function_GetRules();
	class AClass_Object_Actor_Info_PlayerStart* Function_FindPlayerStart(class AClass_Object_Actor_Controller* Player, unsigned char InTeam, const struct FString& incomingName);
	void Function_AddGameRules(class AClass_Object_Actor_Info_GameRules* GR);
};


// Class Object.Actor.Info.VotingHandler
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_Info_VotingHandler : public AClass_Object_Actor_Info
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.VotingHandler");
		return ptr;
	}


	void Function_GetServerDetails(struct FStruct_ServerResponseLine* ServerState);
	void Function_ReloadAll(bool bParam);
	void STATIC_Function_FillPlayInfo_FillPlayInfo(class UClass_Object_PlayInfo* PlayInfo);
	int Function_GetConfigArrayItemCount(const struct FString& ConfigArrayName);
	void Function_UpdateConfigArrayItem(const struct FString& ConfigArrayName, int RowIndex, int ColumnIndex, const struct FString& NewValue);
	int Function_AddConfigArrayItem(const struct FString& ConfigArrayName);
	void Function_DeleteConfigArrayItem(const struct FString& ConfigArrayName, int RowIndex);
	struct FString Function_GetConfigArrayColumnTitle(const struct FString& ConfigArrayName, int ColumnIndex);
	struct FString Function_GetConfigArrayData(const struct FString& ConfigArrayName, int RowIndex, int ColumnIndex);
	bool Function_HandleRestartGame();
	void Function_PlayerExit(class AClass_Object_Actor_Controller* Exiting);
	void Function_PlayerJoin(class AClass_Object_Actor_Controller_PlayerController* Player);
};


// Class Object.Actor.Controller.PlayerController.MessagingSpectator
// 0x0000 (0x07C4 - 0x07C4)
class AClass_Object_Actor_Controller_PlayerController_MessagingSpectator : public AClass_Object_Actor_Controller_PlayerController
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.PlayerController.MessagingSpectator");
		return ptr;
	}


	void Function_InitPlayerReplicationInfo_InitPlayerReplicationInfo();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.VolumeTimer
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_Info_VolumeTimer : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume* V;                                                        // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.VolumeTimer");
		return ptr;
	}


	void Function_Timer_Timer();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.TribesAdminBase
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_TribesAdminBase : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase");
		return ptr;
	}

};


// Class Object.TribesAdminBase.TribesAdminUser
// 0x003C (0x0064 - 0x0028)
class UClass_Object_TribesAdminBase_TribesAdminUser : public UClass_Object_TribesAdminBase
{
public:
	struct FString                                     Username;                                                 // 0x0028(0x000C) (NeedCtorLink)
	struct FString                                     Password;                                                 // 0x0034(0x000C) (NeedCtorLink)
	struct FString                                     Privileges;                                               // 0x0040(0x000C) (NeedCtorLink)
	struct FString                                     MergedPrivs;                                              // 0x004C(0x000C) (NeedCtorLink)
	class UClass_Object_TribesAdminBase_TribesAdminGroupList* Groups;                                                   // 0x0058(0x0004)
	class UClass_Object_TribesAdminBase_TribesAdminGroupList* ManagedGroups;                                            // 0x005C(0x0004)
	unsigned long                                      bMasterAdmin : 1;                                         // 0x0060(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase.TribesAdminUser");
		return ptr;
	}


	void Function_UnlinkGroups();
	class UClass_Object_TribesAdminBase_TribesAdminUserList* Function_GetManagedUsers(class UClass_Object_TribesAdminBase_TribesAdminGroupList* uAllGroups);
	class UClass_Object_TribesAdminBase_TribesAdminGroup* Function_GetManagedGroup(const struct FString& GroupName);
	class UClass_Object_TribesAdminBase_TribesAdminGroup* Function_GetGroup(const struct FString& GroupName);
	int Function_MaxSecLevel();
	bool STATIC_Function_ValidName(const struct FString& uname);
	bool STATIC_Function_ValidPass(const struct FString& upass);
	bool Function_CanManageUser(class UClass_Object_TribesAdminBase_TribesAdminUser* User);
	bool Function_CanManageGroup(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	void Function_MergePrivs(const struct FString& newprivs);
	void Function_RedoMergedPrivs();
	bool Function_HasPrivilege(const struct FString& priv);
	void Function_AddManagedGroupsByName(class UClass_Object_TribesAdminBase_TribesAdminGroupList* lGroups, TArray<struct FString> aGroupNames);
	void Function_AddGroupsByName(class UClass_Object_TribesAdminBase_TribesAdminGroupList* lGroups, TArray<struct FString> aGroupNames);
	void Function_RemoveManagedGroup(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	void Function_AddManagedGroup(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	void Function_RemoveGroup(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	void Function_AddGroup(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	void Function_Init(const struct FString& uname, const struct FString& Pass, const struct FString& privs);
};


// Class Object.TribesAdminBase.TribesAdminGroup
// 0x0028 (0x0050 - 0x0028)
class UClass_Object_TribesAdminBase_TribesAdminGroup : public UClass_Object_TribesAdminBase
{
public:
	struct FString                                     GroupName;                                                // 0x0028(0x000C) (NeedCtorLink)
	struct FString                                     Privileges;                                               // 0x0034(0x000C) (NeedCtorLink)
	unsigned char                                      GameSecLevel;                                             // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	class UClass_Object_TribesAdminBase_TribesAdminUserList* Users;                                                    // 0x0044(0x0004)
	class UClass_Object_TribesAdminBase_TribesAdminUserList* Managers;                                                 // 0x0048(0x0004)
	unsigned long                                      bMasterAdmin : 1;                                         // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase.TribesAdminGroup");
		return ptr;
	}


	bool Function_HasPrivilege(const struct FString& priv);
	void Function_RemoveUser(class UClass_Object_TribesAdminBase_TribesAdminUser* User);
	void Function_UnlinkUsers();
	bool STATIC_Function_ValidName(const struct FString& uname);
	void Function_SetPrivs(const struct FString& privs);
	void Function_Init(const struct FString& sGroupName, const struct FString& sPrivileges, unsigned char nGameSecLevel);
};


// Class Object.TribesAdminBase.TribesAdminUserList
// 0x000C (0x0034 - 0x0028)
class UClass_Object_TribesAdminBase_TribesAdminUserList : public UClass_Object_TribesAdminBase
{
public:
	TArray<class UClass_Object_TribesAdminBase_TribesAdminUser*> Users;                                                    // 0x0028(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase.TribesAdminUserList");
		return ptr;
	}


	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_FindByName(const struct FString& Username);
	bool Function_Contains(class UClass_Object_TribesAdminBase_TribesAdminUser* User);
	void Function_Clear();
	void Function_Remove(class UClass_Object_TribesAdminBase_TribesAdminUser* User);
	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_Get(int i);
	void Function_Add(class UClass_Object_TribesAdminBase_TribesAdminUser* NewUser);
	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_Create(const struct FString& Username, const struct FString& Password, const struct FString& Privileges);
	int Function_Count();
};


// Class Object.TribesAdminBase.TribesAdminGroupList
// 0x000C (0x0034 - 0x0028)
class UClass_Object_TribesAdminBase_TribesAdminGroupList : public UClass_Object_TribesAdminBase
{
public:
	TArray<class UClass_Object_TribesAdminBase_TribesAdminGroup*> Groups;                                                   // 0x0028(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase.TribesAdminGroupList");
		return ptr;
	}


	void Function_Clear();
	class UClass_Object_TribesAdminBase_TribesAdminGroup* Function_FindMasterGroup();
	bool Function_Contains(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	class UClass_Object_TribesAdminBase_TribesAdminGroup* Function_FindByName(const struct FString& GroupName);
	class UClass_Object_TribesAdminBase_TribesAdminGroup* Function_Get(int Index);
	void Function_Remove(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	void Function_Add(class UClass_Object_TribesAdminBase_TribesAdminGroup* Group);
	class UClass_Object_TribesAdminBase_TribesAdminGroup* Function_CreateGroup(const struct FString& GroupName, const struct FString& Privileges, unsigned char GameSecLevel);
	int Function_Count();
};


// Class Object.TribesPrivilegeBase
// 0x01A4 (0x01CC - 0x0028)
class UClass_Object_TribesPrivilegeBase : public UClass_Object
{
public:
	struct FString                                     LoadMsg;                                                  // 0x0028(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MainPrivs;                                                // 0x0034(0x000C) (Localized, NeedCtorLink)
	struct FString                                     SubPrivs;                                                 // 0x0040(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Tags[0x20];                                               // 0x004C(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesPrivilegeBase");
		return ptr;
	}


	void Function_Created();
};


// Class Object.AdminBase.Admin
// 0x0000 (0x002C - 0x002C)
class UClass_Object_AdminBase_Admin : public UClass_Object_AdminBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AdminBase.Admin");
		return ptr;
	}


	void Function_Switch(const struct FString& URL);
	void Function_RestartMap();
	void Function_PlayerList();
	void Function_Kick(const struct FString& S);
	void Function_KickBan(const struct FString& S);
	void Function_DoLogout_DoLogout();
	void Function_DoLogin_DoLogin(const struct FString& Username, const struct FString& Password);
};


// Class Object.Actor.Info.LocalMessage.FailedConnect
// 0x0030 (0x044C - 0x041C)
class AClass_Object_Actor_Info_LocalMessage_FailedConnect : public AClass_Object_Actor_Info_LocalMessage
{
public:
	struct FString                                     FailMessage[0x4];                                         // 0x041C(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.FailedConnect");
		return ptr;
	}


	struct FString STATIC_Function_GetString_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	int STATIC_Function_GetFailSwitch(const struct FString& FailString);
};


// Class Object.Actor.Effects.Fragment
// 0x0040 (0x0440 - 0x0400)
class AClass_Object_Actor_Effects_Fragment : public AClass_Object_Actor_Effects
{
public:
	class UClass_Object_Primitive_Mesh*                Fragments[0xB];                                           // 0x0400(0x0004) (Edit)
	int                                                numFragmentTypes;                                         // 0x042C(0x0004)
	unsigned long                                      bFirstHit : 1;                                            // 0x0430(0x0004)
	class UClass_Object_Sound*                         ImpactSound;                                              // 0x0434(0x0004) (Edit)
	class UClass_Object_Sound*                         AltImpactSound;                                           // 0x0438(0x0004) (Edit)
	float                                              SplashTime;                                               // 0x043C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Effects.Fragment");
		return ptr;
	}


	void Function_RandSpin(float spinRate);
	void Function_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* HitWall);
	void Function_CalcVelocity(const struct FStruct_Vector& Momentum);
	bool Function_CanSplash_CanSplash();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.CinematicOverlay
// 0x0004 (0x02BC - 0x02B8)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_CinematicOverlay : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* SubtitleLabel;                                            // 0x02B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.CinematicOverlay");
		return ptr;
	}


	void Function_ClearSubtitle();
	void Function_AddSubtitle(const struct FString& Subtitle, float lifetime);
	void Function_Timer_Timer();
};


// Class Object.ContentDumper
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_ContentDumper : public UClass_Object
{
public:
	TArray<struct FString>                             ClassName;                                                // 0x0028(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	TArray<struct FString>                             ObjName;                                                  // 0x0034(0x000C) (Edit, Config, NeedCtorLink, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ContentDumper");
		return ptr;
	}

};


// Class Object.ContentDumper.GUIDumper
// 0x0018 (0x0058 - 0x0040)
class UClass_Object_ContentDumper_GUIDumper : public UClass_Object_ContentDumper
{
public:
	TArray<struct FString>                             ClassName;                                                // 0x0040(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	TArray<struct FString>                             ObjName;                                                  // 0x004C(0x000C) (Edit, Config, NeedCtorLink, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ContentDumper.GUIDumper");
		return ptr;
	}

};


// Class Object.AnimNotify.AnimNotify_Scripted.AnimNotify_EffectEvent
// 0x0014 (0x0040 - 0x002C)
class UClass_Object_AnimNotify_AnimNotify_Scripted_AnimNotify_EffectEvent : public UClass_Object_AnimNotify_AnimNotify_Scripted
{
public:
	struct FName                                       EffectEvent;                                              // 0x002C(0x0004) (Edit, NoClear)
	struct FName                                       Bone;                                                     // 0x0030(0x0004) (Edit, NoClear)
	unsigned long                                      UnTrigger : 1;                                            // 0x0034(0x0004) (Edit, NoClear)
	unsigned long                                      PlayerOnly : 1;                                           // 0x0034(0x0004) (Edit, NoClear)
	unsigned long                                      bTraceOnlyStaticGeometry : 1;                             // 0x0034(0x0004) (Edit, NoClear)
	float                                              MaxDistance;                                              // 0x0038(0x0004) (Edit, NoClear)
	TEnumAsByte<EPassAsTag>                            PassAsTag;                                                // 0x003C(0x0001) (Edit, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotify.AnimNotify_Scripted.AnimNotify_EffectEvent");
		return ptr;
	}


	void Function_Notify_Notify(class AClass_Object_Actor* Owner);
};


// Class Object.EffectSpecification
// 0x0020 (0x0048 - 0x0028)
class UClass_Object_EffectSpecification : public UClass_Object
{
public:
	unsigned long                                      AttachToSource : 1;                                       // 0x0028(0x0004) (Config)
	struct FName                                       AttachmentBone;                                           // 0x002C(0x0004) (Config)
	struct FStruct_Vector                              LocationOffset;                                           // 0x0030(0x000C) (Config)
	struct FStruct_Rotator                             RotationOffset;                                           // 0x003C(0x000C) (Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EffectSpecification");
		return ptr;
	}


	void Function_Init(class AClass_Object_Actor_EffectsSubsystem* EffectsSubsystem);
};


// Class Object.EventResponse
// 0x0050 (0x0078 - 0x0028)
class UClass_Object_EventResponse : public UClass_Object
{
public:
	struct FName                                       Event;                                                    // 0x0028(0x0004) (Config)
	struct FName                                       SourceClassName;                                          // 0x002C(0x0004) (Config)
	class UClass_Object_Field_Struct_State_Class*      SourceClass;                                              // 0x0030(0x0004)
	struct FName                                       TargetClassName;                                          // 0x0034(0x0004) (Config)
	struct FName                                       StaticMesh;                                               // 0x0038(0x0004) (Config)
	struct FName                                       Tag;                                                      // 0x003C(0x0004) (Config)
	TArray<int>                                        Chance;                                                   // 0x0040(0x000C) (Config, NeedCtorLink)
	TArray<struct FStruct_SpecificationStruct>         Specification;                                            // 0x004C(0x000C) (Config, NeedCtorLink)
	TArray<class UClass_Object_EffectSpecification*>   SpecificationReference;                                   // 0x0058(0x000C) (NeedCtorLink)
	TArray<struct FName>                               Context;                                                  // 0x0064(0x000C) (Config, NeedCtorLink)
	unsigned long                                      initDone : 1;                                             // 0x0070(0x0004)
	int                                                sum;                                                      // 0x0074(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EventResponse");
		return ptr;
	}


	class UClass_Object_EffectSpecification* Function_GetSpecification();
	void Function_Init();
};


// Class Object.Actor.EffectsSubsystem
// 0x0040 (0x0440 - 0x0400)
class AClass_Object_Actor_EffectsSubsystem : public AClass_Object_Actor
{
public:
	class UClass_Object_IGEffectsSystemBase_EffectsSystem* EffectsSystem;                                            // 0x0400(0x0004)
	TArray<struct FName>                               EventResponse;                                            // 0x0404(0x000C) (Config, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      EffectSpecificationSubClass;                              // 0x0410(0x0004)
	unsigned long                                      debugSlow : 1;                                            // 0x0414(0x0004)
	int                                                EventResponses[0x5];                                      // 0x0418(0x0004) (Const, Native, NoExport)
	int                                                EffectSpecifications[0x5];                                // 0x042C(0x0004) (Const, Native, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.EffectsSubsystem");
		return ptr;
	}


	void Function_OnEffectSpawned(class AClass_Object_Actor* SpawnedEffect);
	void Function_StopEffectSpecification(class UClass_Object_EffectSpecification* EffectSpec, class AClass_Object_Actor* Source);
	class AClass_Object_Actor* Function_PlayEffectSpecification(class UClass_Object_EffectSpecification* EffectSpec, class AClass_Object_Actor* Source, class AClass_Object_Actor* Target, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& overrideWorldLocation, const struct FStruct_Rotator& overrideWorldRotation, class UClass_Object_IEffectObserver* Observer);
	void Function_LogState();
	class UClass_Object_EffectSpecification* Function_GetSpecificationByString(const struct FString& Specification);
	bool Function_EffectEventTriggered(class AClass_Object_Actor* Source, const struct FName& EffectEvent, class AClass_Object_Actor* Target, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& overrideWorldLocation, const struct FStruct_Rotator& overrideWorldRotation, bool unTriggered, bool PlayOnTarget, bool QueryOnly, class UClass_Object_IEffectObserver* Observer, const struct FName& Tag);
	void Function_AddEffectSpecification(const struct FName& EffectSpecificationName, class UClass_Object_EffectSpecification* EffectSpecification);
	class UClass_Object_EffectSpecification* Function_FindEffectSpecification(const struct FName& EffectSpecificationName);
	void Function_InitializeResponseSpecifications(class UClass_Object_EventResponse* EventResponse);
	void Function_AddEventResponse(const struct FName& EventResponseName, class UClass_Object_EventResponse* EventResponse);
	void Function_PreBeginPlay_PreBeginPlay();
};


// Class Object.IGEffectsSystemBase.EffectsSystem
// 0x00A4 (0x00CC - 0x0028)
class UClass_Object_IGEffectsSystemBase_EffectsSystem : public UClass_Object_IGEffectsSystemBase
{
public:
	TArray<class UClass_Object_Field_Struct_State_Class*> EffectsSubsystem;                                         // 0x0028(0x000C) (Config, NeedCtorLink)
	TArray<class AClass_Object_Actor_EffectsSubsystem*> AllEffectsSubsystems;                                     // 0x0034(0x000C) (NeedCtorLink)
	TArray<struct FString>                             PreloadActorClass;                                        // 0x0040(0x000C) (Config, NeedCtorLink)
	unsigned long                                      LogEffectEvents : 1;                                      // 0x004C(0x0004) (Config)
	TArray<struct FName>                               TemporaryContexts;                                        // 0x0050(0x000C) (NeedCtorLink)
	TArray<struct FName>                               PersistentContexts;                                       // 0x005C(0x000C) (NeedCtorLink)
	unsigned long                                      QueueingEvents : 1;                                       // 0x0068(0x0004)
	TArray<class AClass_Object_Actor*>                 QueuedSource;                                             // 0x006C(0x000C) (NeedCtorLink)
	TArray<struct FName>                               QueuedEffectEvent;                                        // 0x0078(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor*>                 QueuedTarget;                                             // 0x0084(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Material*>              QueuedTargetMaterial;                                     // 0x0090(0x000C) (NeedCtorLink)
	TArray<struct FStruct_Vector>                      QueuedOverrideWorldLocation;                              // 0x009C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_Rotator>                     QueuedOverrideWorldRotation;                              // 0x00A8(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              QueuedUnTriggered;                                        // 0x00B4(0x000C) (NeedCtorLink)
	TArray<struct FName>                               DebugEffectEvent;                                         // 0x00C0(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IGEffectsSystemBase.EffectsSystem");
		return ptr;
	}


	void Function_DumpEffects(const struct FName& SubsystemName);
	bool Function_EffectEventTriggered_EffectEventTriggered(class AClass_Object_Actor* Source, const struct FName& EffectEvent, class AClass_Object_Actor* Target, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& overrideWorldLocation, const struct FStruct_Rotator& overrideWorldRotation, bool unTriggered, bool PlayOnTarget, bool QueryOnly, class UClass_Object_IEffectObserver* Observer, const struct FName& Tag);
	void Function_FlushQueuedEvents();
	void Function_QueueEvents();
	void Function_ClearPersistentContexts();
	void Function_RemovePersistentContext(const struct FName& Context);
	void Function_AddPersistentContext_AddPersistentContext(const struct FName& Context);
	void Function_AddContextForNextEffectEvent_AddContextForNextEffectEvent(const struct FName& Context);
	class AClass_Object_Actor_EffectsSubsystem* Function_GetSubsystem(const struct FName& inSubsystem);
	void Function_Init_Init(class AClass_Object_Actor* Owner);
};


// Class Object.Commandlet.StripSourceCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_StripSourceCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.StripSourceCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.RebuildMoppsCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_RebuildMoppsCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.RebuildMoppsCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.PkgCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_PkgCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.PkgCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.MapConvertCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_MapConvertCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.MapConvertCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.ExecMacroCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_ExecMacroCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.ExecMacroCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.DXTConvertCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_DXTConvertCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.DXTConvertCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.RearrangeIntCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_RearrangeIntCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.RearrangeIntCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.MergeIntCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_MergeIntCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.MergeIntCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CompareIntCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_CompareIntCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CompareIntCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.DumpIntCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_DumpIntCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.DumpIntCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CutdownDemoContentCommandlet
// 0x0010 (0x01EC - 0x01DC)
class UClass_Object_Commandlet_CutdownDemoContentCommandlet : public UClass_Object_Commandlet
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01DC(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CutdownDemoContentCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CutdownContentDedicatedServerCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_CutdownContentDedicatedServerCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CutdownContentDedicatedServerCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CutdownContentCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_CutdownContentCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CutdownContentCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.ConvertMaterialCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_ConvertMaterialCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.ConvertMaterialCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.DataRipCommandlet
// 0x000C (0x01E8 - 0x01DC)
class UClass_Object_Commandlet_DataRipCommandlet : public UClass_Object_Commandlet
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x01DC(0x000C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.DataRipCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.PackageFlagCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_PackageFlagCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.PackageFlagCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CheckUnicodeCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_CheckUnicodeCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CheckUnicodeCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.ConformCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_ConformCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.ConformCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CompressNormalMapsCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_CompressNormalMapsCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CompressNormalMapsCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.BatchExportCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_BatchExportCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.BatchExportCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.AnalyzeContentCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_AnalyzeContentCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.AnalyzeContentCommandlet");
		return ptr;
	}

};


// Class Object.Exporter.PolysExporterOBJ
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_PolysExporterOBJ : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.PolysExporterOBJ");
		return ptr;
	}

};


// Class Object.Exporter.LevelExporterOBJ
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_LevelExporterOBJ : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.LevelExporterOBJ");
		return ptr;
	}

};


// Class Object.BitArray
// 0x0010 (0x0038 - 0x0028)
class UClass_Object_BitArray : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.BitArray");
		return ptr;
	}

};


// Class Object.BitArray.BitMatrix
// 0x0004 (0x003C - 0x0038)
class UClass_Object_BitArray_BitMatrix : public UClass_Object_BitArray
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0038(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.BitArray.BitMatrix");
		return ptr;
	}

};


// Class Object.Exporter.StaticMeshExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_StaticMeshExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.StaticMeshExporterT3D");
		return ptr;
	}

};


// Class Object.Factory.StaticMeshFactory
// 0x000C (0x0074 - 0x0068)
class UClass_Object_Factory_StaticMeshFactory : public UClass_Object_Factory
{
public:
	int                                                Pitch;                                                    // 0x0068(0x0004)
	int                                                Roll;                                                     // 0x006C(0x0004)
	int                                                Yaw;                                                      // 0x0070(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.StaticMeshFactory");
		return ptr;
	}

};


// Class Object.Prefab
// 0x0010 (0x0038 - 0x0028)
class UClass_Object_Prefab : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Prefab");
		return ptr;
	}

};


// Class Object.Transactor
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_Transactor : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Transactor");
		return ptr;
	}

};


// Class Object.TransBuffer
// 0x0028 (0x0050 - 0x0028)
class UClass_Object_TransBuffer : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TransBuffer");
		return ptr;
	}

};


// Class Object.AnimNotifyProps
// 0x0004 (0x002C - 0x0028)
class UClass_Object_AnimNotifyProps : public UClass_Object
{
public:
	class UClass_Object_AnimNotify*                    Notify;                                                   // 0x0028(0x0004) (Edit, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AnimNotifyProps");
		return ptr;
	}

};


// Class Object.Subsystem.Engine.EditorEngine
// 0x0100 (0x0244 - 0x0144)
class UClass_Object_Subsystem_Engine_EditorEngine : public UClass_Object_Subsystem_Engine
{
public:
	class UClass_Object_LevelBase_Level*               Level;                                                    // 0x0144(0x0004) (Const)
	class UClass_Object_Primitive_Model*               TempModel;                                                // 0x0148(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* CurrentTexture;                                           // 0x014C(0x0004) (Const)
	class UClass_Object_Primitive_StaticMesh*          CurrentStaticMesh;                                        // 0x0150(0x0004) (Const)
	class UClass_Object_Primitive_Mesh*                CurrentMesh;                                              // 0x0154(0x0004) (Const)
	class UClass_Object_Field_Struct_State_Class*      CurrentClass;                                             // 0x0158(0x0004) (Const)
	class UClass_Object*                               Trans;                                                    // 0x015C(0x0004) (Const)
	class UClass_Object*                               Results;                                                  // 0x0160(0x0004) (Const)
	int                                                Pad[0x8];                                                 // 0x0164(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Bad;                                                      // 0x0184(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Bkgnd;                                                    // 0x0188(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* BkgndHi;                                                  // 0x018C(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* BadHighlight;                                             // 0x0190(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* MaterialArrow;                                            // 0x0194(0x0004) (Const)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* MaterialBackdrop;                                         // 0x0198(0x0004) (Const)
	class UClass_Object_Primitive_StaticMesh*          TexPropCube;                                              // 0x019C(0x0004)
	class UClass_Object_Primitive_StaticMesh*          TexPropSphere;                                            // 0x01A0(0x0004)
	unsigned long                                      bFastRebuild : 1;                                         // 0x01A4(0x0004) (Const)
	unsigned long                                      bBootstrapping : 1;                                       // 0x01A4(0x0004) (Const)
	int                                                AutoSaveIndex;                                            // 0x01A8(0x0004) (Const, Config)
	int                                                AutoSaveCount;                                            // 0x01AC(0x0004) (Const)
	int                                                Mode;                                                     // 0x01B0(0x0004) (Const)
	int                                                TerrainEditBrush;                                         // 0x01B4(0x0004) (Const)
	int                                                ClickFlags;                                               // 0x01B8(0x0004) (Const)
	float                                              MovementSpeed;                                            // 0x01BC(0x0004) (Const)
	class UClass_Object_Package*                       PackageContext;                                           // 0x01C0(0x0004) (Const)
	struct FStruct_Vector                              AddLocation;                                              // 0x01C4(0x000C) (Const)
	struct FStruct_Vector_Plane                        AddPlane;                                                 // 0x01D0(0x0010) (Const)
	TArray<class UClass_Object*>                       Tools;                                                    // 0x01E0(0x000C) (Const, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      BrowseClass;                                              // 0x01EC(0x0004) (Const)
	int                                                ConstraintsVtbl;                                          // 0x01F0(0x0004) (Const)
	unsigned long                                      GridEnabled : 1;                                          // 0x01F4(0x0004) (Edit, Config)
	unsigned long                                      SnapVertices : 1;                                         // 0x01F4(0x0004) (Edit, Config)
	float                                              SnapDistance;                                             // 0x01F8(0x0004) (Edit, Config)
	struct FStruct_Vector                              GridSize;                                                 // 0x01FC(0x000C) (Edit, Config)
	unsigned long                                      RotGridEnabled : 1;                                       // 0x0208(0x0004) (Edit, Config)
	struct FStruct_Rotator                             RotGridSize;                                              // 0x020C(0x000C) (Edit, Config)
	unsigned long                                      UseSizingBox : 1;                                         // 0x0218(0x0004) (Edit, Config)
	unsigned long                                      UseAxisIndicator : 1;                                     // 0x0218(0x0004) (Edit, Config)
	float                                              FovAngleDegrees;                                          // 0x021C(0x0004) (Edit, Config)
	unsigned long                                      GodMode : 1;                                              // 0x0220(0x0004) (Edit, Config)
	unsigned long                                      AutoSave : 1;                                             // 0x0220(0x0004) (Edit, Config)
	unsigned char                                      AutosaveTimeMinutes;                                      // 0x0224(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0225(0x0003) MISSED OFFSET
	struct FString                                     GameCommandLine;                                          // 0x0228(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             EditPackages;                                             // 0x0234(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      AlwaysShowTerrain : 1;                                    // 0x0240(0x0004) (Edit, Config)
	unsigned long                                      UseActorRotationGizmo : 1;                                // 0x0240(0x0004) (Edit, Config)
	unsigned long                                      LoadEntirePackageWhenSaving : 1;                          // 0x0240(0x0004) (Edit, Config)
	unsigned long                                      RedrawAllViewportsWhenMoving : 1;                         // 0x0240(0x0004) (Edit, Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.Engine.EditorEngine");
		return ptr;
	}

};


// Class Object.MaterialFactory
// 0x000C (0x0034 - 0x0028)
class UClass_Object_MaterialFactory : public UClass_Object
{
public:
	struct FString                                     Description;                                              // 0x0028(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.MaterialFactory");
		return ptr;
	}


	void Function_ConsoleCommand(const struct FString& Cmd);
	class UClass_Object_Material* Function_CreateMaterial(class UClass_Object* InOuter, const struct FString& InPackage, const struct FString& InGroup, const struct FString& InName);
};


// Class Object.Factory.TextureFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_TextureFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.TextureFactory");
		return ptr;
	}

};


// Class Object.Factory.TextureFactory.FontFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_TextureFactory_FontFactory : public UClass_Object_Factory_TextureFactory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.TextureFactory.FontFactory");
		return ptr;
	}

};


// Class Object.Exporter.TextureExporterDDS
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_TextureExporterDDS : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.TextureExporterDDS");
		return ptr;
	}

};


// Class Object.Exporter.TextureExporterTGA
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_TextureExporterTGA : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.TextureExporterTGA");
		return ptr;
	}

};


// Class Object.Exporter.TextureExporterBMP
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_TextureExporterBMP : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.TextureExporterBMP");
		return ptr;
	}

};


// Class Object.Exporter.TextureExporterPCX
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_TextureExporterPCX : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.TextureExporterPCX");
		return ptr;
	}

};


// Class Object.Factory.PrefabFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_PrefabFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.PrefabFactory");
		return ptr;
	}

};


// Class Object.Factory.SoundFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_SoundFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.SoundFactory");
		return ptr;
	}

};


// Class Object.Factory.ModelFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_ModelFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.ModelFactory");
		return ptr;
	}

};


// Class Object.Factory.PolysFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_PolysFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.PolysFactory");
		return ptr;
	}

};


// Class Object.Factory.LevelFactory
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_Factory_LevelFactory : public UClass_Object_Factory
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.LevelFactory");
		return ptr;
	}

};


// Class Object.Factory.TextureFactoryNew
// 0x0014 (0x007C - 0x0068)
class UClass_Object_Factory_TextureFactoryNew : public UClass_Object_Factory
{
public:
	struct FName                                       TextureName;                                              // 0x0068(0x0004) (Edit)
	class UClass_Object_Package*                       TexturePackage;                                           // 0x006C(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      TextureClass;                                             // 0x0070(0x0004) (Edit)
	int                                                USize;                                                    // 0x0074(0x0004) (Edit)
	int                                                VSize;                                                    // 0x0078(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.TextureFactoryNew");
		return ptr;
	}

};


// Class Object.Factory.ClassFactoryNew
// 0x000C (0x0074 - 0x0068)
class UClass_Object_Factory_ClassFactoryNew : public UClass_Object_Factory
{
public:
	struct FName                                       ClassName;                                                // 0x0068(0x0004) (Edit)
	class UClass_Object_Package*                       ClassPackage;                                             // 0x006C(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      Superclass;                                               // 0x0070(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.ClassFactoryNew");
		return ptr;
	}

};


// Class Object.Factory.LevelFactoryNew
// 0x001C (0x0084 - 0x0068)
class UClass_Object_Factory_LevelFactoryNew : public UClass_Object_Factory
{
public:
	struct FString                                     LevelTitle;                                               // 0x0068(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Author;                                                   // 0x0074(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      CloseExistingWindows : 1;                                 // 0x0080(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.LevelFactoryNew");
		return ptr;
	}

};


// Class Object.Exporter.PrefabExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_PrefabExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.PrefabExporterT3D");
		return ptr;
	}

};


// Class Object.Exporter.LevelExporterSTL
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_LevelExporterSTL : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.LevelExporterSTL");
		return ptr;
	}

};


// Class Object.Exporter.LevelExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_LevelExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.LevelExporterT3D");
		return ptr;
	}

};


// Class Object.Exporter.ModelExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_ModelExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.ModelExporterT3D");
		return ptr;
	}

};


// Class Object.Exporter.PolysExporterT3D
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_PolysExporterT3D : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.PolysExporterT3D");
		return ptr;
	}

};


// Class Object.Exporter.ClassExporterUC
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_ClassExporterUC : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.ClassExporterUC");
		return ptr;
	}

};


// Class Object.Exporter.SoundExporterWAV
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_SoundExporterWAV : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.SoundExporterWAV");
		return ptr;
	}

};


// Class Object.Exporter.TextBufferExporterTXT
// 0x0000 (0x0040 - 0x0040)
class UClass_Object_Exporter_TextBufferExporterTXT : public UClass_Object_Exporter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.TextBufferExporterTXT");
		return ptr;
	}

};


// Class Object.BrushBuilder
// 0x0038 (0x0060 - 0x0028)
class UClass_Object_BrushBuilder : public UClass_Object
{
public:
	struct FString                                     BitmapFilename;                                           // 0x0028(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ToolTip;                                                  // 0x0034(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_Vector>                      Vertices;                                                 // 0x0040(0x000C) (NeedCtorLink)
	TArray<struct FStruct_BuilderPoly>                 Polys;                                                    // 0x004C(0x000C) (NeedCtorLink)
	struct FName                                       Group;                                                    // 0x0058(0x0004)
	unsigned long                                      MergeCoplanars : 1;                                       // 0x005C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.BrushBuilder");
		return ptr;
	}


	bool Function_Build();
	void Function_PolyEnd();
	void Function_Polyi(int i);
	void Function_PolyBegin(int direction, const struct FName& ItemName, int PolyFlags);
	void Function_Poly4i(int direction, int i, int j, int k, int L, const struct FName& ItemName, int PolyFlags);
	void Function_Poly3i(int direction, int i, int j, int k, const struct FName& ItemName, int PolyFlags);
	int Function_Vertex3f(float X, float Y, float Z);
	int Function_Vertexv(const struct FStruct_Vector& V);
	bool Function_BadParameters(const struct FString& msg);
	int Function_GetPolyCount();
	struct FStruct_Vector Function_GetVertex(int i);
	int Function_GetVertexCount();
	bool Function_EndBrush();
	void Function_BeginBrush(bool MergeCoplanars, const struct FName& Group);
};


// Class Object.Factory.TextureFactory.FontFactory.TrueTypeFontFactory
// 0x0090 (0x00F8 - 0x0068)
class UClass_Object_Factory_TextureFactory_FontFactory_TrueTypeFontFactory : public UClass_Object_Factory_TextureFactory_FontFactory
{
public:
	struct FString                                     FontName;                                                 // 0x0068(0x000C) (Edit, NeedCtorLink)
	float                                              height;                                                   // 0x0074(0x0004) (Edit)
	int                                                USize;                                                    // 0x0078(0x0004) (Edit)
	int                                                VSize;                                                    // 0x007C(0x0004) (Edit)
	int                                                XPad;                                                     // 0x0080(0x0004) (Edit)
	int                                                YPad;                                                     // 0x0084(0x0004) (Edit)
	int                                                Count;                                                    // 0x0088(0x0004) (Edit)
	float                                              Gamma;                                                    // 0x008C(0x0004) (Edit)
	struct FString                                     Chars;                                                    // 0x0090(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      AntiAlias : 1;                                            // 0x009C(0x0004) (Edit)
	struct FString                                     UnicodeRange;                                             // 0x00A0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Wildcard;                                                 // 0x00AC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Path;                                                     // 0x00B8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CharacterSet;                                             // 0x00C4(0x000C) (Edit, NeedCtorLink)
	int                                                Style;                                                    // 0x00D0(0x0004) (Edit)
	unsigned long                                      Italic : 1;                                               // 0x00D4(0x0004) (Edit)
	unsigned long                                      UnknownData00 : 31;                                       // 0x00D4(0x0001)
	unsigned long                                      Underline : 1;                                            // 0x00D8(0x0004) (Edit)
	int                                                Kerning;                                                  // 0x00DC(0x0004) (Edit)
	int                                                DropShadowX;                                              // 0x00E0(0x0004) (Edit)
	int                                                DropShadowY;                                              // 0x00E4(0x0004) (Edit)
	int                                                ExtendBoxTop;                                             // 0x00E8(0x0004) (Edit)
	int                                                ExtendBoxBottom;                                          // 0x00EC(0x0004) (Edit)
	int                                                ExtendBoxRight;                                           // 0x00F0(0x0004) (Edit)
	int                                                ExtendBoxLeft;                                            // 0x00F4(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.TextureFactory.FontFactory.TrueTypeFontFactory");
		return ptr;
	}

};


// Class Object.EditInfo
// 0x0020 (0x0048 - 0x0028)
class UClass_Object_EditInfo : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EditInfo");
		return ptr;
	}

};


// Class Object.Commandlet.MakeCommandlet
// 0x001C (0x01F8 - 0x01DC)
class UClass_Object_Commandlet_MakeCommandlet : public UClass_Object_Commandlet
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x01DC(0x001C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.MakeCommandlet");
		return ptr;
	}

};


// Class Object.Factory.ClassFactoryUC
// 0x0004 (0x006C - 0x0068)
class UClass_Object_Factory_ClassFactoryUC : public UClass_Object_Factory
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0068(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Factory.ClassFactoryUC");
		return ptr;
	}

};


// Class Object.Exporter.ClassExporterH
// 0x0020 (0x0060 - 0x0040)
class UClass_Object_Exporter_ClassExporterH : public UClass_Object_Exporter
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Exporter.ClassExporterH");
		return ptr;
	}

};


// Class Object.Actor.EffectsSubsystem.VisualEffectsSubsystem
// 0x0028 (0x0468 - 0x0440)
class AClass_Object_Actor_EffectsSubsystem_VisualEffectsSubsystem : public AClass_Object_Actor_EffectsSubsystem
{
public:
	TArray<class UClass_Object_Field_Struct_State_Class*> MatchingEffectClasses;                                    // 0x0440(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> DefaultEffectClasses;                                     // 0x044C(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> SelectedEffectClasses;                                    // 0x0458(0x000C) (NeedCtorLink)
	int                                                CurrentDecal;                                             // 0x0464(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.EffectsSubsystem.VisualEffectsSubsystem");
		return ptr;
	}


	void Function_OnEffectSpawned_OnEffectSpawned(class AClass_Object_Actor* SpawnedEffect);
	void Function_LogState_LogState();
	void Function_StopEffect(class AClass_Object_Actor* it, bool stopOverTime);
	void Function_StopEffectSpecification_StopEffectSpecification(class UClass_Object_EffectSpecification* EffectSpec, class AClass_Object_Actor* Source);
	class AClass_Object_Actor* Function_ProxySpawn(class UClass_Object_Field_Struct_State_Class* SpawnClass, class AClass_Object_Actor* SpawnOwner, const struct FName& SpawnTag, const struct FStruct_Vector& SpawnLocation);
	class AClass_Object_Actor* Function_PlayEffectSpecification_PlayEffectSpecification(class UClass_Object_EffectSpecification* EffectSpec, class AClass_Object_Actor* Source, class AClass_Object_Actor* Target, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& overrideWorldLocation, const struct FStruct_Rotator& overrideWorldRotation, class UClass_Object_IEffectObserver* Observer);
};


// Class Object.EffectSpecification.SoundEffectSpecification
// 0x0090 (0x00D8 - 0x0048)
class UClass_Object_EffectSpecification_SoundEffectSpecification : public UClass_Object_EffectSpecification
{
public:
	int                                                SampleRate;                                               // 0x0048(0x0004) (Config)
	float                                              OuterRadius;                                              // 0x004C(0x0004) (Config)
	float                                              InnerRadius;                                              // 0x0050(0x0004) (Config)
	int                                                Volume;                                                   // 0x0054(0x0004) (Config)
	float                                              Pitch;                                                    // 0x0058(0x0004) (Config)
	float                                              Delay;                                                    // 0x005C(0x0004) (Config)
	float                                              Pan;                                                      // 0x0060(0x0004) (Config)
	struct FStruct_Range                               PitchRange;                                               // 0x0064(0x0008) (Config)
	struct FStruct_Range                               PanRange;                                                 // 0x006C(0x0008) (Config)
	struct FStruct_Range                               Monoloop;                                                 // 0x0074(0x0008) (Config)
	struct FStruct_PolyLoopStruct                      Polyloop;                                                 // 0x007C(0x000C) (Config)
	int                                                LoopCount;                                                // 0x0088(0x0004) (Config)
	float                                              AISoundRadius;                                            // 0x008C(0x0004) (Config)
	struct FName                                       SoundCategory;                                            // 0x0090(0x0004) (Config)
	unsigned long                                      Local : 1;                                                // 0x0094(0x0004) (Config)
	unsigned long                                      NoRepeat : 1;                                             // 0x0094(0x0004) (Config)
	unsigned long                                      NeverRepeat : 1;                                          // 0x0094(0x0004) (Config)
	unsigned long                                      PlayOnce : 1;                                             // 0x0094(0x0004) (Config)
	unsigned long                                      Retriggerable : 1;                                        // 0x0094(0x0004) (Config)
	float                                              FadeInTime;                                               // 0x0098(0x0004) (Config)
	float                                              FadeOutTime;                                              // 0x009C(0x0004) (Config)
	int                                                Monophonic;                                               // 0x00A0(0x0004) (Config)
	int                                                MonophonicPriority;                                       // 0x00A4(0x0004) (Config)
	unsigned long                                      MonophonicToClass : 1;                                    // 0x00A8(0x0004) (Config)
	int                                                Priority;                                                 // 0x00AC(0x0004) (Config)
	unsigned long                                      IsPitchRange : 1;                                         // 0x00B0(0x0004)
	unsigned long                                      IsPanRange : 1;                                           // 0x00B0(0x0004)
	unsigned long                                      IsMonoloop : 1;                                           // 0x00B0(0x0004)
	unsigned long                                      IsPolyloop : 1;                                           // 0x00B0(0x0004)
	unsigned long                                      IsSeamlessLoop : 1;                                       // 0x00B0(0x0004)
	unsigned long                                      IsEndPredictable : 1;                                     // 0x00B0(0x0004)
	unsigned long                                      Killable : 1;                                             // 0x00B0(0x0004)
	struct FStruct_Range                               LoopDelayRange;                                           // 0x00B4(0x0008)
	int                                                LoopSoundLimit;                                           // 0x00BC(0x0004)
	int                                                NativeFlags;                                              // 0x00C0(0x0004)
	TArray<class UClass_Object_SoundSet*>              SoundSets;                                                // 0x00C4(0x000C) (NeedCtorLink)
	class UClass_Object_LevelBase_Level*               SubsystemLevel;                                           // 0x00D0(0x0004)
	unsigned long                                      IsFullyInitialized : 1;                                   // 0x00D4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EffectSpecification.SoundEffectSpecification");
		return ptr;
	}


	float Function_GetOuterRadius();
	struct FString Function_toString();
	struct FString Function_ExtractToken(const struct FString& inDelimiter, struct FString* ioSourceString);
	void Function_Init_Init(class AClass_Object_Actor_EffectsSubsystem* inSubsystem);
	void Function_PopulateSoundsHook();
	void Function_InitHook();
	void Function_SetNativeFlagsHook();
	bool Function_WantsToLoop();
	bool Function_ConstructSoundInstance(class AClass_Object_Actor_SoundInstance* inInstance, int inTextureFlags, class AClass_Object_Actor* inSource, bool inGameStarted);
	void Function_NativeInitialize();
};


// Class Object.EffectSpecification.SoundEffectSpecification.StreamSoundEffectSpecification
// 0x0010 (0x00E8 - 0x00D8)
class UClass_Object_EffectSpecification_SoundEffectSpecification_StreamSoundEffectSpecification : public UClass_Object_EffectSpecification_SoundEffectSpecification
{
public:
	TArray<struct FString>                             Streams;                                                  // 0x00D8(0x000C) (Config, NeedCtorLink)
	TEnumAsByte<ESoundStreamType>                      StreamType;                                               // 0x00E4(0x0001) (Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EffectSpecification.SoundEffectSpecification.StreamSoundEffectSpecification");
		return ptr;
	}


	void Function_PopulateSoundsHook_PopulateSoundsHook();
	void Function_SetNativeFlagsHook_SetNativeFlagsHook();
	void Function_InitHook_InitHook();
};


// Class Object.SoundRef
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_SoundRef : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SoundRef");
		return ptr;
	}


	struct FString Function_toString();
	bool Function_Equals(class UClass_Object_SoundRef* inOtherRef);
};


// Class Object.SoundRef.StreamSoundRef
// 0x0010 (0x0038 - 0x0028)
class UClass_Object_SoundRef_StreamSoundRef : public UClass_Object_SoundRef
{
public:
	struct FString                                     Stream;                                                   // 0x0028(0x000C) (NeedCtorLink)
	float                                              StreamDuration;                                           // 0x0034(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SoundRef.StreamSoundRef");
		return ptr;
	}


	struct FString Function_toString_toString();
	bool Function_ResumeStream(class AClass_Object_Actor* inActor, const struct FString& inFilename);
	bool Function_PauseStream(class AClass_Object_Actor* inActor, const struct FString& inFilename);
	void Function_StopStream(class AClass_Object_Actor* Source, const struct FString& FileName);
	void Function_PlayStream(class AClass_Object_Actor* Actor, const struct FString& FileName, int SampleRate, float Volume, float InnerRadius, float OuterRadius, float Pitch, int Priority, int flags, float FadeInTime);
};


// Class Object.SoundRef.NormalSoundRef
// 0x0004 (0x002C - 0x0028)
class UClass_Object_SoundRef_NormalSoundRef : public UClass_Object_SoundRef
{
public:
	class UClass_Object_Sound*                         Sound;                                                    // 0x0028(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SoundRef.NormalSoundRef");
		return ptr;
	}


	struct FString Function_toString_toString();
	int Function_PlayMySound(class AClass_Object_Actor_SoundInstance* inInstance);
};


// Class Object.Actor.SoundMarkerBase
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_SoundMarkerBase : public AClass_Object_Actor
{
public:
	unsigned long                                      QueuedTillStartup : 1;                                    // 0x0400(0x0004)
	unsigned long                                      GameStarted : 1;                                          // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SoundMarkerBase");
		return ptr;
	}


	void Function_PlayEffects();
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_OnGameStarted_OnGameStarted();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.ActorBank
// 0x0024 (0x0424 - 0x0400)
class AClass_Object_Actor_ActorBank : public AClass_Object_Actor
{
public:
	TArray<class AClass_Object_Actor*>                 BankedActors;                                             // 0x0400(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      ActorClassType;                                           // 0x040C(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x0410(0x0004)
	struct FScriptDelegate                             __OnWithdrawn__Delegate;                                  // 0x0414(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeposited__Delegate;                                  // 0x041C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.ActorBank");
		return ptr;
	}


	void Function_Deposit(class AClass_Object_Actor* inActor);
	class AClass_Object_Actor* Function_Withdraw();
	void Function_Initialize(class UClass_Object_Field_Struct_State_Class* inClassType);
	void Function_OnDeposited(class AClass_Object_Actor* inActorDeposited);
	void Function_OnWithdrawn(class AClass_Object_Actor* inActorWithdrawn);
};


// Class Object.SoundSet
// 0x001C (0x0044 - 0x0028)
class UClass_Object_SoundSet : public UClass_Object
{
public:
	TArray<class UClass_Object_SoundRef*>              AllSounds;                                                // 0x0028(0x000C) (NeedCtorLink)
	TArray<TEnumAsByte<ESoundStatus>>                  StatusArray;                                              // 0x0034(0x000C) (NeedCtorLink)
	class UClass_Object_SoundRef*                      LastSoundUsed;                                            // 0x0040(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.SoundSet");
		return ptr;
	}


	void Function_AddSoundRef(class UClass_Object_SoundRef* inRef);
};


// Class Object.Actor.SoundInstance
// 0x0080 (0x0480 - 0x0400)
class AClass_Object_Actor_SoundInstance : public AClass_Object_Actor
{
public:
	class UClass_Object_IEffectObserver*               Observer;                                                 // 0x0400(0x0004) (Const, Transient)
	class AClass_Object_Actor_EffectsSubsystem_SoundEffectsSubsystem* Manager;                                                  // 0x0404(0x0004) (Const, Transient)
	class UClass_Object_SoundRef*                      ActualSound;                                              // 0x0408(0x0004) (Const, Transient)
	struct FName                                       SchemaName;                                               // 0x040C(0x0004) (Const)
	class AClass_Object_Actor*                         Source;                                                   // 0x0410(0x0004) (Const, Transient)
	struct FStruct_Vector                              SavedSourceLocation;                                      // 0x0414(0x000C) (Const, Transient)
	float                                              StartTime;                                                // 0x0420(0x0004) (Const)
	float                                              EndTime;                                                  // 0x0424(0x0004) (Const)
	float                                              NextPlayTime;                                             // 0x0428(0x0004) (Const)
	float                                              NextStopTime;                                             // 0x042C(0x0004) (Const)
	float                                              Delay;                                                    // 0x0430(0x0004) (Const)
	int                                                CurrentLoopCount;                                         // 0x0434(0x0004) (Const)
	struct FStruct_Range                               LoopRange;                                                // 0x0438(0x0008) (Const)
	float                                              FadeInTime;                                               // 0x0440(0x0004) (Const)
	float                                              FadeOutTime;                                              // 0x0444(0x0004) (Const)
	float                                              Pitch;                                                    // 0x0448(0x0004)
	float                                              Volume;                                                   // 0x044C(0x0004)
	float                                              OuterRadius;                                              // 0x0450(0x0004) (Const)
	float                                              InnerRadius;                                              // 0x0454(0x0004) (Const)
	unsigned long                                      Retriggerable : 1;                                        // 0x0458(0x0004) (Const)
	unsigned long                                      Paused : 1;                                               // 0x0458(0x0004) (Const)
	unsigned long                                      Muted : 1;                                                // 0x0458(0x0004) (Const)
	unsigned long                                      Local : 1;                                                // 0x0458(0x0004) (Const)
	unsigned long                                      IsEndPredictable : 1;                                     // 0x0458(0x0004) (Const)
	unsigned long                                      IsMonoloop : 1;                                           // 0x0458(0x0004) (Const)
	unsigned long                                      IsPolyloop : 1;                                           // 0x0458(0x0004) (Const)
	unsigned long                                      IsSeamlessLoop : 1;                                       // 0x0458(0x0004) (Const)
	float                                              AISoundRadius;                                            // 0x045C(0x0004) (Const)
	struct FName                                       SoundCategory;                                            // 0x0460(0x0004) (Const)
	int                                                Monophonic;                                               // 0x0464(0x0004) (Const)
	int                                                MonophonicPriority;                                       // 0x0468(0x0004) (Const)
	int                                                Priority;                                                 // 0x046C(0x0004) (Const)
	unsigned long                                      MonophonicToClass : 1;                                    // 0x0470(0x0004) (Const)
	int                                                NativeFlags;                                              // 0x0474(0x0004) (Const)
	int                                                SoundHandle;                                              // 0x0478(0x0004) (Const)
	unsigned long                                      IsPlaying : 1;                                            // 0x047C(0x0004) (Const)
	unsigned long                                      IsUpdating : 1;                                           // 0x047C(0x0004) (Const)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SoundInstance");
		return ptr;
	}


	void Function_OnFinishedInitialized();
	struct FString Function_toString();
	float Function_GetDuration();
	void Function_SetVolume(float inVolume);
	void Function_SetPitch(float inPitch);
	void Function_SetObserver(class UClass_Object_IEffectObserver* inObserver);
	void Function_Stop();
	void Function_Play();
};


// Class Object.Actor.SoundMarkerBase.SoundMarker
// 0x0018 (0x041C - 0x0404)
class AClass_Object_Actor_SoundMarkerBase_SoundMarker : public AClass_Object_Actor_SoundMarkerBase
{
public:
	struct FString                                     Schema1;                                                  // 0x0404(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Schema2;                                                  // 0x0410(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SoundMarkerBase.SoundMarker");
		return ptr;
	}


	void Function_PlayEffects_PlayEffects();
};


// Class Object.Actor.EffectsSubsystem.SoundEffectsSubsystem
// 0x0014 (0x0454 - 0x0440)
class AClass_Object_Actor_EffectsSubsystem_SoundEffectsSubsystem : public AClass_Object_Actor_EffectsSubsystem
{
public:
	class AClass_Object_Actor_ActorBank*               SoundInstanceBank;                                        // 0x0440(0x0004) (Transient)
	TArray<class AClass_Object_Actor_SoundInstance*>   CurrentSounds;                                            // 0x0444(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bSoundsArePaused : 1;                                     // 0x0450(0x0004)
	unsigned long                                      GameStarted : 1;                                          // 0x0450(0x0004)
	unsigned long                                      bDebugSounds : 1;                                         // 0x0450(0x0004) (Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.EffectsSubsystem.SoundEffectsSubsystem");
		return ptr;
	}


	void Function_LogState_LogState();
	void Function_PlayMarkerSounds(class AClass_Object_Actor* inSource, const struct FString& inSoundID1, const struct FString& inSoundID2);
	void Function_UnpauseAllSchemas();
	void Function_PauseAllSchemas();
	void Function_StopEffectSpecification_StopEffectSpecification(class UClass_Object_EffectSpecification* EffectSpec, class AClass_Object_Actor* Source);
	class AClass_Object_Actor* Function_PlayEffectSpecification_PlayEffectSpecification(class UClass_Object_EffectSpecification* GenericSchema, class AClass_Object_Actor* Source, class AClass_Object_Actor* Target, class UClass_Object_Material* TargetMaterial, const struct FStruct_Vector& overrideWorldLocation, const struct FStruct_Rotator& overrideWorldRotation, class UClass_Object_IEffectObserver* Observer);
	int Function_GetSoundMaterialFlags(class UClass_Object_Material* inMaterial);
	void Function_OnGameStarted_OnGameStarted();
	void Function_OnOtherActorDestroyed(class AClass_Object_Actor* ActorBeingDestroyed);
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
	void Function_OnBankDeposited(class AClass_Object_Actor* inActorDeposited);
	void Function_OnBankWithdrawn(class AClass_Object_Actor* inActorWithdrawn);
	void Function_NativeInitialize();
	class AClass_Object_Actor_SoundInstance* Function_CreateSoundInstance();
	void Function_AddToCurrentSounds(class AClass_Object_Actor_SoundInstance* inInstance);
	void Function_KillInstance(class AClass_Object_Actor_SoundInstance* inInstance);
	bool Function_CanStartInstance(class AClass_Object_Actor_SoundInstance* inInstance);
	bool Function_IsSchemaPlaying(class AClass_Object_Actor* inSource, const struct FName& SpecificationName);
	void Function_StopMyLoopingSchemas(class AClass_Object_Actor* inSource);
	void Function_StopAllSchemas();
	void Function_StopMySchemas(class AClass_Object_Actor* inSource);
	bool Function_StopSound(class AClass_Object_Actor* Source, class UClass_Object_Sound* Sound);
	struct FString Function_GetSoundDebugText();
	void STATIC_Function_SetNativeLooping(class UClass_Object_LevelBase_Level* inSoundLevel, class UClass_Object_Sound* inSound);
};


// Class Object.NavigationSystem.ConcreteNavigationSystem
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_NavigationSystem_ConcreteNavigationSystem : public UClass_Object_NavigationSystem
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.NavigationSystem.ConcreteNavigationSystem");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase
// 0x0004 (0x003C - 0x0038)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase : public UClass_Object_RefCount_Tyrion_ActionBase
{
public:
	unsigned long                                      bIdle : 1;                                                // 0x0038(0x0004)
	unsigned long                                      bCompleted : 1;                                           // 0x0038(0x0004)
	unsigned long                                      bWasTicked : 1;                                           // 0x0038(0x0004)
	unsigned long                                      bDeleted : 1;                                             // 0x0038(0x0004)
	unsigned long                                      bSensorAction : 1;                                        // 0x0038(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase");
		return ptr;
	}


	struct FStruct_Vector STATIC_Function_closestPointOnALine(const struct FStruct_Vector& A, const struct FStruct_Vector& LineStart, const struct FStruct_Vector& lineDir);
	float STATIC_Function_minDistBetweenTrajectories(const struct FStruct_Vector& startA, const struct FStruct_Vector& velA, const struct FStruct_Vector& startB, const struct FStruct_Vector& velB, float* t);
	struct FStruct_Vector STATIC_Function_rotateZ(const struct FStruct_Vector& V, float Angle);
	void Function_interruptActionIf(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, class UClass_Object_Field_Struct_State_Class* Condition);
	void Function_waitForAction(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_sleepForever();
	void Function_Pause();
	void Function_yield();
	void Function_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> errorCode);
	void Function_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Function_getChildReference();
	void Function_removeChildReference(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_setChildReference(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_instantFail(TEnumAsByte<EACT_ErrorCodes> errorCode, bool bRemoveGoal);
	void Function_PawnDied(class AClass_Object_Actor_Pawn* Pawn);
	void Function_runAction();
	void Function_pauseAction();
	bool Function_wasTicked();
	bool Function_hasCompleted();
	bool Function_IsRunning();
	bool Function_isIdle();
	void Function_removeGoal();
	void Function_removeAction();
	void Function_cleanup();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action
// 0x001C (0x0058 - 0x003C)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase
{
public:
	class AClass_Object_Actor_Controller_AI_Controller* Controller;                                               // 0x003C(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* childAction;                                              // 0x0040(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* parentAction;                                             // 0x0044(0x0004)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	unsigned long                                      bWakeUpParent : 1;                                        // 0x004C(0x0004)
	float                                              tickTime;                                                 // 0x0050(0x0004)
	float                                              tickTimeOrg;                                              // 0x0054(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action");
		return ptr;
	}


	void Function_actionFailedCB_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> _errorCode);
	void Function_actionSucceededCB_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Function_getChildReference_getChildReference();
	void Function_removeChildReference_removeChildReference(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_setChildReference_setChildReference(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_pauseAction_pauseAction();
	void Function_runAction_runAction();
	void Function_removeAction_removeAction();
	void Function_interruptAction();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Function_myAddRef();
	void Function_fail(TEnumAsByte<EACT_ErrorCodes> errorCode);
	void Function_instantFail_instantFail(TEnumAsByte<EACT_ErrorCodes> errorCode, bool bRemoveGoal);
	void Function_succeed();
	bool Function_checkForUniqueness(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Action);
	void Function_construct_AI_ControllerActionBase(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction
// 0x0004 (0x0040 - 0x003C)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase
{
public:
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource;                                                 // 0x003C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction");
		return ptr;
	}


	void Function_pauseAction_pauseAction();
	void Function_runAction_runAction();
	void Function_removeAction_removeAction();
	void Function_interruptAction();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction
// 0x0008 (0x0048 - 0x0040)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction
{
public:
	int                                                usageCount;                                               // 0x0040(0x0004)
	unsigned long                                      bCallBegin : 1;                                           // 0x0044(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction");
		return ptr;
	}


	class UClass_Object_DeleteableObject_AI_Sensor* Function_addSensorClass(class UClass_Object_Field_Struct_State_Class* sensorClass);
	void Function_instantFail_instantFail(TEnumAsByte<EACT_ErrorCodes> errorCode, bool bRemoveGoal);
	void Function_runAction_runAction_runAction();
	void Function_Begin();
	void Function_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction* Function_myAddRef();
	void Function_construct_AI_Resource(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
};


// Class Object.DeleteableObject.AI_SensorData
// 0x0010 (0x0044 - 0x0034)
class UClass_Object_DeleteableObject_AI_SensorData : public UClass_Object_DeleteableObject
{
public:
	TEnumAsByte<ESensorDataType>                       dataType;                                                 // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	float                                              floatData;                                                // 0x0038(0x0004)
	int                                                integerData;                                              // 0x003C(0x0004)
	class UClass_Object*                               objectData;                                               // 0x0040(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_SensorData");
		return ptr;
	}


	void Function_Clear();
};


// Class Object.DeleteableObject.AI_Sensor
// 0x0018 (0x004C - 0x0034)
class UClass_Object_DeleteableObject_AI_Sensor : public UClass_Object_DeleteableObject
{
public:
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction* sensorAction;                                             // 0x0034(0x0004)
	TArray<class UClass_Object_DeleteableObject_AI_SensorRecipient*> recipients;                                               // 0x0038(0x000C) (NeedCtorLink)
	class UClass_Object_DeleteableObject_AI_SensorData* Value;                                                    // 0x0044(0x0004)
	unsigned long                                      bNotifyOnValueChange : 1;                                 // 0x0048(0x0004)
	unsigned long                                      bNotifyIfResourceInactive : 1;                            // 0x0048(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor");
		return ptr;
	}


	void Function_deactivateSensorInternal(class UClass_Object_ISensorNotification* Recipient, float lowerBound, float upperBound);
	class UClass_Object_DeleteableObject_AI_Sensor* STATIC_Function_activateSensorInternal(class UClass_Object_Field_Struct_State_Class* sensorClass, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, float lowerBound, float upperBound, class UClass_Object* userData, class UClass_Object_ISensorNotification* Recipient);
	int Function_queryUsage();
	void Function_ClearValue();
	class UClass_Object* Function_queryObjectValue();
	float Function_queryFloatValue();
	int Function_queryIntegerValue();
	class UClass_Object_DeleteableObject_AI_SensorData* Function_QueryValue();
	bool Function_bSendMessage(class UClass_Object* Object);
	void Function_setObjectValue(class UClass_Object* NewValue);
	void Function_setCategoricalValue(int NewValue);
	void Function_setFloatValue(float NewValue);
	void Function_setIntegerValue(int NewValue);
	void Function_sendMessageOnNextValueUpdate(class UClass_Object_ISensorNotification* Recipient);
	void Function_sendSensorMessage(class UClass_Object_DeleteableObject_AI_SensorRecipient* Recipient, class UClass_Object_DeleteableObject_AI_SensorData* Value);
	void Function_cleanup();
	void Function_Begin();
	void Function_deactivateSentinel(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, float lowerBound, float upperBound);
	void Function_deactivateSensor(class UClass_Object_ISensorNotification* Recipient, float lowerBound, float upperBound);
	class UClass_Object_DeleteableObject_AI_Sensor* STATIC_Function_activateSentinel(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_Field_Struct_State_Class* sentinelClass, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource, float lowerBound, float upperBound, class UClass_Object* userData);
	class UClass_Object_DeleteableObject_AI_Sensor* STATIC_Function_activateSensor(class UClass_Object_ISensorNotification* Recipient, class UClass_Object_Field_Struct_State_Class* sensorClass, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource, float lowerBound, float upperBound, class UClass_Object* userData);
	void Function_construct_AI_SensorAction(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction* Action);
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* Function_getResource();
	void Function_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource
// 0x0040 (0x0094 - 0x0054)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource : public UClass_Object_RefCount_Tyrion_ResourceBase
{
public:
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction*> idleActions;                                              // 0x0054(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction*> runningActions;                                           // 0x0060(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction*> removedActions;                                           // 0x006C(0x000C) (NeedCtorLink)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* usedByAction;                                             // 0x0078(0x0004)
	TArray<class UClass_Object_DeleteableObject_AI_Sensor*> sensors;                                                  // 0x007C(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction*> sensorActions;                                            // 0x0088(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource");
		return ptr;
	}


	void Function_displayTyrionDebug_displayTyrionDebug();
	void Function_resetGoals_resetGoals();
	void Function_removeGoal(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	void Function_addGoal(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Parent, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	bool Function_setActionParametersInternal(class UClass_Object* goal, class UClass_Object* Action);
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* Function_findGoalByName(const struct FString& gName);
	class AClass_Object_Actor_Pawn_Rook* Function_localRook();
	class AClass_Object_Actor_Pawn* Function_Pawn();
	bool Function_setActionParameters(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Action);
	class UClass_Object_Field_Struct_State_Class* Function_getActionClass();
	bool Function_doesParentHaveResource(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* parentAction);
	bool Function_multipleActionsCheck(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Action);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction* Function_addSensorActionClass(class UClass_Object_Field_Struct_State_Class* sensorActionClass);
	void Function_resourceCheck(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* bestAction);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Function_chooseAction(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	void Function_PawnDied_PawnDied(class AClass_Object_Actor_Pawn* Pawn);
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* Function_myAddRef();
	void Function_deleteRemovedActions_deleteRemovedActions();
	void Function_deleteSensors_deleteSensors();
	void Function_cleanup_cleanup();
	void Function_Init_Init();
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_SquadResource
// 0x0004 (0x0098 - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_SquadResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_SquadInfo*               squad;                                                    // 0x0094(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_SquadResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	bool Function_isActive_isActive();
	bool Function_hasActiveMembers();
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* aSquad);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal
// 0x0040 (0x0078 - 0x0038)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal : public UClass_Object_RefCount_Tyrion_GoalBase
{
public:
	unsigned long                                      bRemoveGoalOfSameType : 1;                                // 0x0038(0x0004) (Edit, NoClear)
	unsigned long                                      bTryOnlyOnce : 1;                                         // 0x0038(0x0004) (Edit, NoClear)
	int                                                Priority;                                                 // 0x003C(0x0004) (Edit, NoClear)
	struct FString                                     goalName;                                                 // 0x0040(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_DeleteableObject_AI_SensorWithBounds* activationSentinel;                                       // 0x004C(0x0004)
	class UClass_Object_DeleteableObject_AI_SensorWithBounds* deactivationSentinel;                                     // 0x0050(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* achievingAction;                                          // 0x0054(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* parentAction;                                             // 0x0058(0x0004)
	unsigned long                                      bInactive : 1;                                            // 0x005C(0x0004)
	unsigned long                                      bPermanent : 1;                                           // 0x005C(0x0004)
	unsigned long                                      bDeleted : 1;                                             // 0x005C(0x0004)
	unsigned long                                      bGoalConsidered : 1;                                      // 0x005C(0x0004)
	unsigned long                                      bWakeUpPoster : 1;                                        // 0x005C(0x0004)
	unsigned long                                      bTerminateIfStolen : 1;                                   // 0x005C(0x0004)
	unsigned long                                      bGoalFailed : 1;                                          // 0x005C(0x0004)
	unsigned long                                      bGoalAchieved : 1;                                        // 0x005C(0x0004)
	int                                                ignoreCounter;                                            // 0x0060(0x0004)
	int                                                matchedN;                                                 // 0x0064(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource;                                                 // 0x0068(0x0004)
	TArray<class UClass_Object_IGoalNotification*>     notificationRecipients;                                   // 0x006C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal");
		return ptr;
	}


	void Function_notifyCompletion(bool bAchieved);
	void Function_addNotificationRecipient(class UClass_Object_IGoalNotification* notificationRecipient);
	void Function_setUpDeactivationSentinel();
	void Function_Activate();
	void Function_DeActivate();
	void Function_handleGoalFailure();
	void Function_markGoalAsFailed();
	void Function_handleGoalSuccess();
	void Function_markGoalAsAchieved();
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* STATIC_Function_findGoalInTurretByName(class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Turret, const struct FString& gName);
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* STATIC_Function_findGoalInVehicleByName(class AClass_Object_Actor_Pawn_Rook_Vehicle* Vehicle, const struct FString& gName);
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* STATIC_Function_findGoalInSquadByName(class AClass_Object_Actor_SquadInfo* si, const struct FString& gName);
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* STATIC_Function_findGoalInCharacterByName(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, const struct FString& gName);
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* STATIC_Function_findGoalByName(class AClass_Object_Actor* A, const struct FString& gName);
	bool Function_beingAchieved();
	bool Function_wasConsidered();
	bool Function_wasNotAchieved();
	bool Function_wasAchieved();
	bool Function_hasCompleted();
	void Function_changePriority(int newPriority);
	void Function_unPostGoal(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Parent);
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* Function_postGoal(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Parent);
	int Function_priorityFn();
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* Function_myAddRef();
	void Function_Init(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
	void Function_cleanup();
	void Function_construct_AI_Resource(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* Function_getResource();
	void Function_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action
// 0x0024 (0x0064 - 0x0040)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction
{
public:
	class UClass_Object_Field_Struct_State_Class*      satisfiesGoal;                                            // 0x0040(0x0004) (Edit, Const, EditConst)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* achievingGoal;                                            // 0x0044(0x0004)
	TArray<class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal*> childGoals;                                               // 0x0048(0x000C) (NeedCtorLink)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* nsChild;                                                  // 0x0054(0x0004)
	float                                              heuristicValue;                                           // 0x0058(0x0004)
	int                                                resourceUsage;                                            // 0x005C(0x0004)
	int                                                waitingForGoalsN;                                         // 0x0060(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action");
		return ptr;
	}


	void Function_resourceStolenCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* stolenResource);
	void Function_goalNotAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child, TEnumAsByte<EACT_ErrorCodes> errorCode);
	void Function_goalAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Function_getChildReference_getChildReference();
	void Function_removeChildReference_removeChildReference(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_setChildReference_setChildReference(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	float STATIC_Function_selectionHeuristic(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	void Function_runAction_runAction_runAction();
	void Function_removeAction_removeAction_removeAction();
	void Function_interruptAction_interruptAction();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Function_myAddRef();
	void Function_initAction(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* Function_getResource();
	void Function_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
	void Function_waitForResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	void Function_waitForAllGoalsConsidered(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal1, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal2, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal3, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal4, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal5, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal6, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal7);
	void Function_waitForAnyGoal(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal1, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal2, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal3, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal4, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal5, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal6, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal7);
	void Function_waitForAllGoalsInList(TArray<class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal*> goals);
	void Function_waitForAllGoals(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal1, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal2, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal3, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal4, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal5, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal6, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal7, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal8, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal9);
	void Function_interruptGoalIf(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_Field_Struct_State_Class* Condition);
	void Function_waitForGoal(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, bool bTryOnlyOnce);
	void Function_fail(TEnumAsByte<EACT_ErrorCodes> errorCode, bool bRemoveGoal);
	void Function_instantFail_instantFail(TEnumAsByte<EACT_ErrorCodes> errorCode, bool bRemoveGoal);
	void Function_instantSucceed();
	void Function_succeed();
};


// Class Object.DeleteableObject.AI_SensorWithBounds
// 0x000C (0x0040 - 0x0034)
class UClass_Object_DeleteableObject_AI_SensorWithBounds : public UClass_Object_DeleteableObject
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor*    sensor;                                                   // 0x0034(0x0004)
	float                                              lowerBound;                                               // 0x0038(0x0004)
	float                                              upperBound;                                               // 0x003C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_SensorWithBounds");
		return ptr;
	}


	void Function_deactivateSentinel(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	void Function_deactivateSensor(class UClass_Object_ISensorNotification* Recipient);
	void Function_activateSentinel(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_Field_Struct_State_Class* sentinelClass, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource, float lowerBound, float upperBound, class UClass_Object* userData);
	void Function_activateSensor(class UClass_Object_ISensorNotification* Recipient, class UClass_Object_Field_Struct_State_Class* sensorClass, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource, float lowerBound, float upperBound, class UClass_Object* userData);
};


// Class Object.Actor.Tyrion_Setup.Setup
// 0x0004 (0x0408 - 0x0404)
class AClass_Object_Actor_Tyrion_Setup_Setup : public AClass_Object_Actor_Tyrion_Setup
{
public:
	class UClass_Object_RefCount_Tyrion_ResourceBase*  sensorResource;                                           // 0x0404(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Tyrion_Setup.Setup");
		return ptr;
	}


	void Function_enemyListSanityCheck_enemyListSanityCheck(class AClass_Object_Actor_Pawn* AI);
	TArray<class AClass_Object_Actor_Pawn*> Function_getEnemyListFromSensor_getEnemyListFromSensor(class AClass_Object_Actor_Pawn* AI);
	void STATIC_Function_setTarget(class AClass_Object_Actor_Pawn* attacker, class AClass_Object_Actor_Pawn_Rook* Target, float timeToHit);
	void Function_sendAllyDiedMessage_sendAllyDiedMessage(class AClass_Object_Actor_Pawn* ally, class AClass_Object_Actor_Pawn* DeadPawn, class AClass_Object_Actor_Pawn* InstigatedBy, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& HitLocation);
	void Function_sendGetOutOfWayMessage_sendGetOutOfWayMessage(class AClass_Object_Actor_Pawn* bumpedPawn, const struct FStruct_Vector& bumpDirection);
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_enemyBehindTarget(class AClass_Object_Actor_Pawn_Rook* Shooter, class AClass_Object_Actor_Pawn_Rook* hitRook, const struct FStruct_Vector& startTrace);
	void Function_stopActions_stopActions(class AClass_Object_Actor_Pawn* Pawn);
	void Function_doPlayerRelatedAIProcessing_doPlayerRelatedAIProcessing(float DeltaSeconds, class AClass_Object_Actor_Pawn* Pawn);
	void Function_doRookRelatedAIProcessing_doRookRelatedAIProcessing(float DeltaSeconds, class AClass_Object_Actor_Pawn* Pawn);
	void Function_Tick_Tick(float DeltaTime);
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay();
	void STATIC_Function_SetStaticSensorResource(class UClass_Object_RefCount_Tyrion_ResourceBase* sr);
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_GetStaticSensorResource();
};


// Class Object.Actor.NearMissCollisionVolume
// 0x0008 (0x0408 - 0x0400)
class AClass_Object_Actor_NearMissCollisionVolume : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Pawn*                    Pawn;                                                     // 0x0400(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_NearMissSensor* nearMissSensor;                                           // 0x0404(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NearMissCollisionVolume");
		return ptr;
	}


	void Function_Destroyed_Destroyed();
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.AircraftDoLocalMove
// 0x0028 (0x0080 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftDoLocalMove : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	float                                              terminalDistance;                                         // 0x0064(0x0004)
	float                                              speed;                                                    // 0x0068(0x0004)
	unsigned long                                      nextDestinationValid : 1;                                 // 0x006C(0x0004)
	struct FStruct_Vector                              nextDestination;                                          // 0x0070(0x000C)
	class AClass_Object_Actor_Pawn_Rook*               Target;                                                   // 0x007C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.AircraftDoLocalMove");
		return ptr;
	}


	void Function_cleanup_cleanup();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftDoLocalMove* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, float terminalDistance, float speed, class AClass_Object_Actor_Pawn_Rook* Target, bool nextDestinationValid, const struct FStruct_Vector& nextDestination);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.CarDoLocalMove
// 0x0024 (0x007C - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarDoLocalMove : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	float                                              terminalDistance;                                         // 0x0064(0x0004)
	float                                              speed;                                                    // 0x0068(0x0004)
	unsigned long                                      nextDestinationValid : 1;                                 // 0x006C(0x0004)
	struct FStruct_Vector                              nextDestination;                                          // 0x0070(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.CarDoLocalMove");
		return ptr;
	}


	void Function_cleanup_cleanup();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarDoLocalMove* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, float terminalDistance, float speed, bool nextDestinationValid, const struct FStruct_Vector& nextDestination);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_DoZeroGravityLocalMove
// 0x0018 (0x0070 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoZeroGravityLocalMove : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	class AClass_Object_Actor_Brush_Volume_PhysicsVolume_ElevatorVolume* Elevator;                                                 // 0x0064(0x0004)
	float                                              terminalDistanceXY;                                       // 0x0068(0x0004)
	float                                              terminalDistanceZ;                                        // 0x006C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_DoZeroGravityLocalMove");
		return ptr;
	}


	void Function_cleanup_cleanup();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoZeroGravityLocalMove* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, class AClass_Object_Actor_Brush_Volume_PhysicsVolume_ElevatorVolume* Elevator, float terminalDistanceXY, float terminalDistanceZ);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_DoLocalMove
// 0x0038 (0x0090 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoLocalMove : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	TEnumAsByte<ESkiCompetencyLevels>                  skiCompetency;                                            // 0x0064(0x0001)
	TEnumAsByte<EJetCompetencyLevels>                  jetCompetency;                                            // 0x0065(0x0001)
	TEnumAsByte<EGroundMovementLevels>                 groundMovement;                                           // 0x0066(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0067(0x0001) MISSED OFFSET
	unsigned long                                      nextDestinationValid : 1;                                 // 0x0068(0x0004)
	struct FStruct_Vector                              nextDestination;                                          // 0x006C(0x000C)
	float                                              terminalDistanceXY;                                       // 0x0078(0x0004)
	float                                              terminalDistanceZ;                                        // 0x007C(0x0004)
	float                                              energyUsage;                                              // 0x0080(0x0004)
	float                                              TerminalVelocity;                                         // 0x0084(0x0004)
	float                                              terminalHeight;                                           // 0x0088(0x0004)
	unsigned long                                      bMustJetpack : 1;                                         // 0x008C(0x0004)
	unsigned long                                      bMustSki : 1;                                             // 0x008C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_DoLocalMove");
		return ptr;
	}


	void Function_cleanup_cleanup();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoLocalMove* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, bool nextDestinationValid, const struct FStruct_Vector& nextDestination, TEnumAsByte<ESkiCompetencyLevels> skiCompetency, TEnumAsByte<EJetCompetencyLevels> jetCompetency, TEnumAsByte<EGroundMovementLevels> groundMovement, float energyUsage, float TerminalVelocity, float terminalHeight, float terminalDistanceXY, float terminalDistanceZ, bool bMustJetpack, bool bMustSki);
};


// Class Object.Actor.Controller.AI_Controller
// 0x0130 (0x05D4 - 0x04A4)
class AClass_Object_Actor_Controller_AI_Controller : public AClass_Object_Actor_Controller
{
public:
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoLocalMove* dlm;                                                      // 0x04A4(0x0004)
	struct FStruct_Vector                              localMoveOrigin;                                          // 0x04A8(0x000C)
	struct FStruct_Vector                              localMoveDirection;                                       // 0x04B4(0x000C)
	float                                              localMoveTimeLimitSeconds;                                // 0x04C0(0x0004)
	float                                              localMoveStartTimeSeconds;                                // 0x04C4(0x0004)
	float                                              localMoveDistance;                                        // 0x04C8(0x0004)
	float                                              localMoveNextDistance;                                    // 0x04CC(0x0004)
	struct FStruct_Vector                              localMoveNextDirection;                                   // 0x04D0(0x000C)
	struct FStruct_Vector                              localMoveNextDirectionXY;                                 // 0x04DC(0x000C)
	float                                              localMoveNextDistanceXY;                                  // 0x04E8(0x0004)
	struct FStruct_Vector                              localSmoothMoveDestination;                               // 0x04EC(0x000C)
	unsigned long                                      localSmoothMoveDestinationValid : 1;                      // 0x04F8(0x0004)
	float                                              previousSmoothingFactor;                                  // 0x04FC(0x0004)
	TEnumAsByte<EDLM_ReturnCodes>                      dlmReturnValue;                                           // 0x0500(0x0001)
	TEnumAsByte<EDLM_MovementMode>                     dlmMovementMode;                                          // 0x0501(0x0001)
	TEnumAsByte<EVDLM_ReturnCodes>                     vehicleDoLocalMoveResult;                                 // 0x0502(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0503(0x0001) MISSED OFFSET
	class AClass_Object_Actor*                         actorHit;                                                 // 0x0504(0x0004) (Const)
	class AClass_Object_Actor*                         followedActor;                                            // 0x0508(0x0004) (Const)
	float                                              avoidDistance;                                            // 0x050C(0x0004) (Const)
	struct FStruct_Vector                              avoidDirection;                                           // 0x0510(0x000C) (Const)
	class AClass_Object_Actor*                         lastActorHit;                                             // 0x051C(0x0004) (Const)
	struct FStruct_Vector                              lastActorLocation;                                        // 0x0520(0x000C) (Const)
	TEnumAsByte<ELOA_AvoidDirections>                  dirSwitch;                                                // 0x052C(0x0001) (Const)
	unsigned char                                      UnknownData01[0x3];                                       // 0x052D(0x0003) MISSED OFFSET
	int                                                ticksElapsedWithNoProgress;                               // 0x0530(0x0004) (Const)
	unsigned long                                      bAvoiding : 1;                                            // 0x0534(0x0004) (Const)
	unsigned long                                      bNoLOA : 1;                                               // 0x0534(0x0004)
	unsigned long                                      disableSmoothing : 1;                                     // 0x0534(0x0004)
	unsigned long                                      smoothingStarted : 1;                                     // 0x0534(0x0004)
	unsigned long                                      bAiming : 1;                                              // 0x0534(0x0004)
	float                                              dodgeExpirationTime;                                      // 0x0538(0x0004)
	float                                              dodgeStartTime;                                           // 0x053C(0x0004)
	struct FStruct_Vector                              dodgeDisplacement;                                        // 0x0540(0x000C)
	struct FStruct_Vector                              LastLocation;                                             // 0x054C(0x000C) (Const)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarDoLocalMove* carLocalMoveAction;                                       // 0x0558(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftDoLocalMove* aircraftLocalMoveAction;                                  // 0x055C(0x0004)
	unsigned long                                      aircraftAttacking : 1;                                    // 0x0560(0x0004)
	float                                              moveStartTime;                                            // 0x0564(0x0004)
	float                                              maximumDuration;                                          // 0x0568(0x0004)
	int                                                vehicleNavigationFunctionIndex;                           // 0x056C(0x0004)
	float                                              currentSpeed;                                             // 0x0570(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoZeroGravityLocalMove* zeroGravityMoveAction;                                    // 0x0574(0x0004)
	struct FStruct_Vector                              elevatorCentreXY;                                         // 0x0578(0x000C)
	TEnumAsByte<EDZGLM_ReturnCodes>                    zeroGravityMoveResult;                                    // 0x0584(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0585(0x0003) MISSED OFFSET
	unsigned long                                      bPatrolling : 1;                                          // 0x0588(0x0004)
	unsigned long                                      bJetSkiManager : 1;                                       // 0x0588(0x0004)
	unsigned long                                      bSkiTo : 1;                                               // 0x0588(0x0004)
	unsigned long                                      bJetpacking : 1;                                          // 0x0588(0x0004)
	unsigned long                                      bTerminate : 1;                                           // 0x0588(0x0004)
	unsigned long                                      bShouldJetpack : 1;                                       // 0x0588(0x0004)
	TArray<struct FStruct_TerrainSample>               terrainSamples;                                           // 0x058C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_TerrainSample>               terrainSamplesDebug;                                      // 0x0598(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action*> idleActions;                                              // 0x05A4(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action*> runningActions;                                           // 0x05B0(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action*> removedActions;                                           // 0x05BC(0x000C) (NeedCtorLink)
	TEnumAsByte<EACT_ErrorCodes>                       lastErrorCode;                                            // 0x05C8(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x05C9(0x0003) MISSED OFFSET
	struct FStruct_Range                               tickTimeUpdateRange;                                      // 0x05CC(0x0008)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.AI_Controller");
		return ptr;
	}


	void Function_drawDebug(class UClass_Object_Canvas* Canvas, class AClass_Object_Actor_HUD* HUD);
	void Function_displayNavigationDebug();
	void Function_OnHearSound(class AClass_Object_Actor* SoundMaker, const struct FStruct_Vector& SoundOrigin, const struct FName& SoundCategory);
	void Function_drawJettingSkiingDebug();
	void Function_drawLOADebug();
	void Function_drawRouteCache();
	void Function_displayWorldSpaceDebug_displayWorldSpaceDebug(class AClass_Object_Actor_HUD* displayHUD);
	void Function_DisplayDebug_DisplayDebug_DisplayDebug(class UClass_Object_Canvas* Canvas, float* YL, float* YPos);
	void Function_getNodesWithinSphere(const struct FStruct_Vector& Origin, float Radius, TArray<struct FStruct_Vector>* nodes);
	void Function_stopMove();
	float Function_getTerrainHeight(const struct FStruct_Vector& point);
	float Function_speedInDirection(const struct FStruct_Vector& Velocity, const struct FStruct_Vector& direction);
	struct FStruct_Vector Function_getRandomLocation(class AClass_Object_Actor_Pawn* Pawn, const struct FStruct_Vector& CENTER, float OuterRadius, float InnerRadius, bool bJetpack);
	bool Function_isPointEncroachedForMovement(class AClass_Object_Actor_Pawn* Pawn, const struct FStruct_Vector& point);
	bool Function_offersCover(class AClass_Object_Actor_Pawn* enemy, const struct FStruct_Vector& point);
	float Function_canJetToPoint(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, const struct FStruct_Vector& startLoc, const struct FStruct_Vector& EndLoc, float energy);
	bool Function_canPointBeReachedUsingJetpack(const struct FStruct_Vector& startPoint, const struct FStruct_Vector& endPoint, class AClass_Object_Actor_Pawn* Pawn);
	bool Function_canPointBeReachedUsingAircraft(const struct FStruct_Vector& startPoint, const struct FStruct_Vector& endPoint, class AClass_Object_Actor_Pawn* aircraft);
	bool Function_canPointBeReached(const struct FStruct_Vector& startPoint, const struct FStruct_Vector& endPoint, class AClass_Object_Actor_Pawn* Pawn, TArray<class AClass_Object_Actor*> ignore, struct FStruct_Vector* lastValidLocation, float* traversedDistanceXY);
	void Function_copyTerrainProfileDebug();
	void Function_logSkiRoute();
	void Function_generateReverseSkiRoute(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character, const struct FStruct_Vector& endPoint, const struct FStruct_Vector& endVelocity);
	bool Function_bSuitableTerrainForSkiing(const struct FStruct_Vector& Destination, float energy);
	struct FStruct_Vector Function_findLandingSpot(const struct FStruct_Vector& Destination, float energy, TEnumAsByte<EJetCompetencyLevels> jetCompetency, int nSamples);
	class AClass_Object_Actor* Function_jetLookAhead(const struct FStruct_Vector& loc1, const struct FStruct_Vector& loc2);
	void Function_AircraftDoLocalMove(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftDoLocalMove* Action);
	void Function_CarDoLocalMove(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarDoLocalMove* Action);
	void Function_doZeroGravityLocalMove(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoZeroGravityLocalMove* Action);
	void Function_doLocalMove(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoLocalMove* dlm);
	bool Function_wasJustHit();
	void Function_NotifyTakeHit_NotifyTakeHit(class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, int Damage, class UClass_Object_Field_Struct_State_Class* DamageType, const struct FStruct_Vector& Momentum);
	void Function_Timer_Timer();
	void Function_setAlertnessLevel(TEnumAsByte<EAlertnessLevels> newLevel, bool bDontHandleSquadMembers);
	void Function_UnPossess_UnPossess();
	void Function_deleteRemovedActions();
	void Function_stopActions();
	void Function_PawnDied_PawnDied(class AClass_Object_Actor_Pawn* p);
	void Function_Tick_Tick(float Delta);
};


// Class Object.Actor.Info.Mutator.Mutator
// 0x0000 (0x0444 - 0x0444)
class AClass_Object_Actor_Info_Mutator_Mutator : public AClass_Object_Actor_Info_Mutator
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.Mutator.Mutator");
		return ptr;
	}


	bool Function_MutateManualRespawn();
	void Function_MutatePlayerMeshes(class UClass_Object_Primitive_Mesh** characterMesh, class UClass_Object_Field_Struct_State_Class** jetpackClass, class UClass_Object_Primitive_Mesh** armsMesh);
	struct FString Function_MutateSpawnCombatRoleClass(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	struct FString Function_MutateSpawnLoadoutClass(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
};


// Class Object.Actor.jetpack
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_jetpack : public AClass_Object_Actor
{
public:
	class UClass_Object_Field_Struct_State_Class*      userSkinClass;                                            // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack");
		return ptr;
	}


	class UClass_Object_Material* Function_GetOverlayMaterial_GetOverlayMaterial(int Index);
};


// Class Object.IShotNotification
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IShotNotification : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IShotNotification");
		return ptr;
	}


	void Function_OnShooterFiredShot(class AClass_Object_Actor_Pawn* Shooter, class AClass_Object_Actor* Projectile);
};


// Class Object.IHearingNotification
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IHearingNotification : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IHearingNotification");
		return ptr;
	}


	void Function_OnListenerHeardNoise(class AClass_Object_Actor_Pawn* listener, class AClass_Object_Actor* SoundMaker, const struct FStruct_Vector& SoundOrigin, const struct FName& SoundCategory);
};


// Class Object.Actor.Info.GameInfo.GameInfo
// 0x0020 (0x0678 - 0x0658)
class AClass_Object_Actor_Info_GameInfo_GameInfo : public AClass_Object_Actor_Info_GameInfo
{
public:
	class UClass_Object_Field_Struct_State_Class*      CheatClass;                                               // 0x0658(0x0004)
	int                                                secondsPassed;                                            // 0x065C(0x0004) (Transient)
	unsigned long                                      msgSent : 1;                                              // 0x0660(0x0004) (Transient)
	float                                              playerTeamDamagePercentage;                               // 0x0664(0x0004) (Edit, Config, GlobalConfig, NoClear)
	float                                              baseDeviceTeamDamagePercentage;                           // 0x0668(0x0004) (Edit, Config, GlobalConfig, NoClear)
	class UClass_Object_Field_Struct_State_Class*      inventoryStationAccessClass;                              // 0x066C(0x0004) (Edit, NoClear)
	float                                              equipmentLifeTime;                                        // 0x0670(0x0004) (Edit)
	class AClass_Object_Actor_Info_LatticeInfo*        lattice;                                                  // 0x0674(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameInfo.GameInfo");
		return ptr;
	}


	float Function_modifyHealthKitRate(class AClass_Object_Actor_Pawn_Rook* Who, float Rate);
	void Function_ModifyPlayer(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter_SinglePlayerCharacter* C);
	void Function_modifyAI(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* C);
	bool STATIC_Function_showChatWindow();
	float Function_modifyRepairRate(class AClass_Object_Actor_Pawn_Rook* Who, float Rate);
	void Function_PreLevelChange();
	void Function_removeDroppedEquipment(class AClass_Object_Actor_Equipment* E);
	void Function_addDroppedEquipment(class AClass_Object_Actor_Equipment* E);
	class UClass_Object_Field_Struct_State_Class* Function_getInventoryStationAccessClass();
	void Function_onUnspectate(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	void Function_onSpectate(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	struct FName Function_playerPawnNoRespawnState();
	struct FName Function_playerPawnDestroyedState();
	class AClass_Object_Actor_Info_PlayerStart_PlayerStart* Function_tribesFindPlayerStart(class AClass_Object_Actor_Controller* Player, class AClass_Object_Actor_Info_TeamInfo* InTeam);
	float Function_tribesRatePlayerStart(class AClass_Object_Actor_Info_PlayerStart_PlayerStart* p, class AClass_Object_Actor_Info_TeamInfo* Team, class AClass_Object_Actor_Controller* Player);
	bool Function_allowManualRespawn();
	bool Function_allowSkinChanges();
	bool Function_allowObjectAtLoad(class AClass_Object_Actor* A);
	void Function_onDeath(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	bool Function_tryRespawn(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	struct FString Function_GetGameSpyGameMode();
	struct FString Function_GetPlayerNamesList();
	class AClass_Object_Actor_Info_TeamInfo* Function_GetTeamFromIndex(int Index);
	int Function_numTeams();
	class AClass_Object_Actor_Info_TeamInfo* Function_initialTeam();
	void Function_Timer_Timer_Timer();
	void Function_RestartPlayer_RestartPlayer(class AClass_Object_Actor_Controller* aPlayer);
	void Function_respawnKeepPawn(class AClass_Object_Actor_Controller* aPlayer);
	void Function_respawn(class AClass_Object_Actor_Controller* aPlayer, bool bCreateNewPawn);
	void Function_Logout_Logout(class AClass_Object_Actor_Controller* Exiting);
	void Function_PostLogin_PostLogin(class AClass_Object_Actor_Controller_PlayerController* NewPlayer);
	class AClass_Object_Actor_Controller_PlayerController* Function_Login_Login(const struct FString& Portal, const struct FString& Options, struct FString* Error);
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.IFiringMotor
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IFiringMotor : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IFiringMotor");
		return ptr;
	}


	void Function_getAlternateAimAdjustStart(const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* newAimAdjustStart);
	void Function_doCustomFiredEffectProcessing();
	bool Function_customFiredEffectProcessing();
	class AClass_Object_Actor* Function_getEffectsBaseActor();
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Function_getWeapon();
	class AClass_Object_Actor_Pawn_Rook* Function_getPhysicalAttachment();
	void Function_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
	struct FStruct_Rotator Function_getFirstPersonEquippableRotation(class AClass_Object_Actor_Equipment_Equippable* subject);
	struct FStruct_Vector Function_getFirstPersonEquippableLocation(class AClass_Object_Actor_Equipment_Equippable* subject);
	void Function_useEnergy(float energyUsage);
	float Function_getEnergy();
	void Function_onShotFiredNotification();
	struct FStruct_Vector Function_getProjectileSpawnLocation();
	void Function_setFirePressed(class AClass_Object_Actor_Equipment_Equippable* E, bool Pressed);
	bool Function_shouldFire(class AClass_Object_Actor_Equipment_Equippable* E);
	void Function_releaseAltFire();
	void Function_releaseFire();
	void Function_AltFire(bool fireOnce);
	void Function_Fire(bool fireOnce);
	bool Function_aimAdjustViewRotation();
	struct FStruct_Rotator Function_GetViewRotation();
	void Function_SetViewRotation(const struct FStruct_Rotator& R);
};


// Class Object.Actor.Info.ReplicationInfo.PlayerReplicationInfo.TribesReplicationInfo
// 0x0074 (0x0504 - 0x0490)
class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo : public AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo
{
public:
	class AClass_Object_Actor_Info_TeamInfo*           Team;                                                     // 0x0490(0x0004) (Net)
	struct FString                                     teamTag;                                                  // 0x0494(0x000C) (Net, NeedCtorLink)
	int                                                Health;                                                   // 0x04A0(0x0004) (Net)
	struct FString                                     VoiceSetPackageName;                                      // 0x04A4(0x000C) (Net, NeedCtorLink)
	struct FString                                     userSkinName;                                             // 0x04B0(0x000C) (Net, NeedCtorLink)
	struct FString                                     oldUserSkinName;                                          // 0x04BC(0x000C) (NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      userSkinClass;                                            // 0x04C8(0x0004)
	unsigned long                                      bReady : 1;                                               // 0x04CC(0x0004) (Net)
	int                                                numReadies;                                               // 0x04D0(0x0004)
	unsigned long                                      bTeamChanged : 1;                                         // 0x04D4(0x0004)
	int                                                OffenseScore;                                             // 0x04D8(0x0004) (Net)
	int                                                DefenseScore;                                             // 0x04DC(0x0004) (Net)
	int                                                StyleScore;                                               // 0x04E0(0x0004) (Net)
	TArray<class UClass_Object_StatData*>              statDataList;                                             // 0x04E4(0x000C) (NeedCtorLink)
	int                                                statID;                                                   // 0x04F0(0x0004) (Net)
	int                                                lastStatRequestTime;                                      // 0x04F4(0x0004)
	int                                                maxStatRequestInterval;                                   // 0x04F8(0x0004)
	int                                                playerStatIndex;                                          // 0x04FC(0x0004)
	unsigned long                                      bAttemptedTeamAffiliation : 1;                            // 0x0500(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo.PlayerReplicationInfo.TribesReplicationInfo");
		return ptr;
	}


	void Function_Tick_Tick(float Delta);
	struct FString Function_StripCodes(const struct FString& str);
	void Function_SetPlayerName_SetPlayerName(const struct FString& S);
	void Function_setTeam(class AClass_Object_Actor_Info_TeamInfo* t);
	class UClass_Object_StatData* Function_getStatData(class UClass_Object_Field_Struct_State_Class* S);
	void Function_addStatData(class UClass_Object_stat* S);
	void Function_updateStatData();
	void Function_clientReceiveStatData(int playerStatID, class UClass_Object_Field_Struct_State_Class* statClass, int Amount, int statIndex);
	void Function_clientInitStatData(int numStats);
	struct FString Function_getTeamAffiliatedName();
	void Function_requestTeamAffiliation(int profileId, int TeamID);
	void Function_requestStatUpdates();
	void Function_requestStatInit();
	void Function_AttemptTeamAffiliation();
	void Function_PostNetReceive_PostNetReceive();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Arms
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_Arms : public AClass_Object_Actor
{
public:
	class UClass_Object_Field_Struct_State_Class*      userSkinClass;                                            // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Arms");
		return ptr;
	}


	class UClass_Object_Material* Function_GetOverlayMaterial_GetOverlayMaterial(int Index);
};


// Class Object.Actor.Pawn.Rook.MPActor.MPArea
// 0x0014 (0x0920 - 0x090C)
class AClass_Object_Actor_Pawn_Rook_MPActor_MPArea : public AClass_Object_Actor_Pawn_Rook_MPActor
{
public:
	class UClass_Object_Field_Struct_State_Class*      areaTriggerClass;                                         // 0x090C(0x0004) (Edit, NoClear, EditInline)
	class AClass_Object_Actor_Trigger_TriggerRadius_MPAreaTrigger* areaTrigger;                                              // 0x0910(0x0004)
	struct FStruct_Vector                              areaOffset;                                               // 0x0914(0x000C) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.MPActor.MPArea");
		return ptr;
	}


	void Function_OnAreaTick();
	void Function_OnAreaExitedByActor(class AClass_Object_Actor* A);
	void Function_OnAreaEnteredByActor(class AClass_Object_Actor* A);
	void Function_OnAreaExited(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_OnAreaEntered(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_cleanup_cleanup();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.MPActor.MPArea.MPCarryableContainer
// 0x0090 (0x09B0 - 0x0920)
class AClass_Object_Actor_Pawn_Rook_MPActor_MPArea_MPCarryableContainer : public AClass_Object_Actor_Pawn_Rook_MPActor_MPArea
{
public:
	int                                                numCarryables;                                            // 0x0920(0x0004) (Edit, Net, NoClear)
	int                                                maxCarryables;                                            // 0x0924(0x0004) (Edit, Net, NoClear)
	int                                                carryablesPerTeamPoint;                                   // 0x0928(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      carryableClass;                                           // 0x092C(0x0004) (Edit, NoClear)
	unsigned long                                      bAcceptThrownCarryables : 1;                              // 0x0930(0x0004) (Edit, NoClear)
	float                                              timeBetweenWithdrawals;                                   // 0x0934(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      ContainerMessageClass;                                    // 0x0938(0x0004) (Edit, NoClear)
	struct FName                                       deactivatedAnimation;                                     // 0x093C(0x0004) (Edit, NoClear)
	struct FName                                       activatedAnimation;                                       // 0x0940(0x0004) (Edit, NoClear)
	struct FName                                       fullAnimation;                                            // 0x0944(0x0004) (Edit, NoClear)
	struct FName                                       depositedAnimation;                                       // 0x0948(0x0004) (Edit, NoClear)
	struct FName                                       withdrawnAnimation;                                       // 0x094C(0x0004) (Edit, NoClear)
	int                                                fuelMaterialIndex;                                        // 0x0950(0x0004) (Edit, NoClear)
	int                                                innerFuelMaterialIndex;                                   // 0x0954(0x0004) (Edit, NoClear)
	int                                                numWithdrawnPerSpawn;                                     // 0x0958(0x0004) (Edit, NoClear)
	float                                              nearlyEmptyWithdrawScale;                                 // 0x095C(0x0004) (Edit, NoClear)
	float                                              nearlyFullWithdrawScale;                                  // 0x0960(0x0004) (Edit, NoClear)
	float                                              halfFullWithdrawScale;                                    // 0x0964(0x0004) (Edit, NoClear)
	struct FName                                       deactivatedEffectEvent;                                   // 0x0968(0x0004) (Edit, NoClear)
	struct FName                                       activatedEffectEvent;                                     // 0x096C(0x0004) (Edit, NoClear)
	struct FName                                       fullEffectEvent;                                          // 0x0970(0x0004) (Edit, NoClear)
	struct FName                                       depositedEffectEvent;                                     // 0x0974(0x0004) (Edit, NoClear)
	struct FName                                       withdrawnEffectEvent;                                     // 0x0978(0x0004) (Edit, NoClear)
	struct FName                                       activeEffectEvent;                                        // 0x097C(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      depositStat;                                              // 0x0980(0x0004) (Edit, NoClear)
	class UClass_Object_Material_RenderedMaterial_Shader* fuelShader;                                               // 0x0984(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* fuelTexPanner;                                            // 0x0988(0x0004)
	class UClass_Object_Material_RenderedMaterial_Shader* innerFuelShader;                                          // 0x098C(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* innerFuelTexPanner;                                       // 0x0990(0x0004)
	TArray<class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable*> storedCarryables;                                         // 0x0994(0x000C) (NeedCtorLink)
	unsigned long                                      bFull : 1;                                                // 0x09A0(0x0004)
	float                                              lastWithdrawAnnouncementTime;                             // 0x09A4(0x0004)
	int                                                timeBetweenWithdrawAnnouncements;                         // 0x09A8(0x0004) (Edit)
	unsigned long                                      bFullEffect : 1;                                          // 0x09AC(0x0004) (Net)
	unsigned long                                      bLocalFullEffect : 1;                                     // 0x09AC(0x0004)
	unsigned long                                      bDepositEffect : 1;                                       // 0x09AC(0x0004) (Net)
	unsigned long                                      bLocalDepositEffect : 1;                                  // 0x09AC(0x0004)
	unsigned long                                      bWithdrawEffect : 1;                                      // 0x09AC(0x0004) (Net)
	unsigned long                                      bLocalWithdrawEffect : 1;                                 // 0x09AC(0x0004)
	unsigned long                                      bInactiveEffect : 1;                                      // 0x09AC(0x0004) (Net)
	unsigned long                                      bLocalInactiveEffect : 1;                                 // 0x09AC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.MPActor.MPArea.MPCarryableContainer");
		return ptr;
	}


	void Function_onPlayerSpawned(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_Reset_Reset_Reset();
	void Function_OnAreaTick_OnAreaTick();
	void Function_OnAreaExited_OnAreaExited(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_OnAreaEntered_OnAreaEntered(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_evaluateContents();
	bool Function_allowSpawn();
	void Function_Withdraw(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	int Function_Deposit(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* Function_removeCarryable();
	void Function_addMetaCarryable(class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable_MPMetaCarryable* meta);
	void Function_addCarryable(class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* C);
	void Function_registerStats_registerStats(class AClass_Object_Actor_Info_StatTracker* tracker);
	void Function_cleanup_cleanup_cleanup();
	void Function_evaluateObjectiveState_evaluateObjectiveState();
	void Function_evaluatePercentageContents(int numAdded);
	void Function_updateContainerEffects();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_calcFuelPannerScale();
	void Function_buildControllableSkin();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_addNewCarryables(int numToAdd);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Weapon.Grappler
// 0x002C (0x0628 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Grappler : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	class UClass_Object_Field_Struct_State_Class*      ropeClass;                                                // 0x05FC(0x0004) (Edit)
	float                                              ropeNonCollisionLength;                                   // 0x0600(0x0004) (Edit, NoClear)
	float                                              maxRopeLength;                                            // 0x0604(0x0004) (Edit, NoClear)
	float                                              reelinLengthRate;                                         // 0x0608(0x0004) (Edit, NoClear)
	float                                              reelInDelay;                                              // 0x060C(0x0004) (Edit, NoClear)
	unsigned long                                      bDisallowFire : 1;                                        // 0x0610(0x0004)
	class UClass_Object_Material_RenderedMaterial_Shader* cableShader;                                              // 0x0614(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* cableTexPanner;                                           // 0x0618(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* cableNormTexPanner;                                       // 0x061C(0x0004)
	int                                                cableMaterialIndex;                                       // 0x0620(0x0004) (Edit)
	unsigned long                                      bControllableSkinSet : 1;                                 // 0x0624(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Grappler");
		return ptr;
	}


	bool Function_sendServerRequestDetachGrapple();
	bool Function_releaseFire_releaseFire(bool bClientOnly);
	void Function_endReelIn();
	void Function_beginReelIn();
	void Function_Timer_Timer();
	void Function_playUnequipAnim_playUnequipAnim_playUnequipAnim();
	void Function_playEquipAnim_playEquipAnim_playEquipAnim();
	void Function_playIdleAnim_playIdleAnim_playIdleAnim();
	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_onMessage_onMessage(class UClass_Object_Message* M);
	bool Function_canUnequip_canUnequip();
	void Function_requestEquipmentDrop_requestEquipmentDrop_requestEquipmentDrop();
	void Function_Drop_Drop();
	void Function_ammoSkinChange();
	void Function_setOutOfAmmo_setOutOfAmmo();
	void Function_setHasAmmoSkins_setHasAmmoSkins();
	void Function_setControllableSkins();
	void Function_Tick_Tick_Tick(float DeltaTime);
	void Function_buildControllableSkins();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.Equipment.Pack
// 0x0054 (0x04E8 - 0x0494)
class AClass_Object_Actor_Equipment_Pack : public AClass_Object_Actor_Equipment
{
public:
	float                                              progressedRechargingTime;                                 // 0x0494(0x0004)
	float                                              rechargeTimeSeconds;                                      // 0x0498(0x0004) (Edit, NoClear)
	float                                              progressedActivatingTime;                                 // 0x049C(0x0004)
	float                                              rampUpTimeSeconds;                                        // 0x04A0(0x0004) (Edit, NoClear)
	float                                              progressedActiveTime;                                     // 0x04A4(0x0004)
	float                                              durationSeconds;                                          // 0x04A8(0x0004) (Edit, NoClear)
	float                                              Alpha;                                                    // 0x04AC(0x0004)
	class UClass_Object_Primitive_StaticMesh*          thirdPersonMesh;                                          // 0x04B0(0x0004) (Edit)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* heldBy;                                                   // 0x04B4(0x0004) (Net)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* localHeldBy;                                              // 0x04B8(0x0004)
	struct FName                                       activatingEffectName;                                     // 0x04BC(0x0004) (Edit, NoClear)
	struct FName                                       activeEffectName;                                         // 0x04C0(0x0004) (Edit, NoClear)
	struct FName                                       chargedEffectName;                                        // 0x04C4(0x0004) (Edit, NoClear)
	struct FName                                       deactivatingEffectName;                                   // 0x04C8(0x0004) (Edit, NoClear)
	struct FName                                       activeEffectStartedName;                                  // 0x04CC(0x0004) (Edit, NoClear)
	struct FName                                       activatingEffectStartedName;                              // 0x04D0(0x0004) (Edit, NoClear)
	struct FName                                       passiveEffectName;                                        // 0x04D4(0x0004) (Edit, NoClear)
	float                                              deactivatingDuration;                                     // 0x04D8(0x0004) (Edit, NoClear)
	float                                              deactivatingProgressedTime;                               // 0x04DC(0x0004)
	unsigned long                                      deactivating : 1;                                         // 0x04E0(0x0004)
	unsigned long                                      packActivatedTrigger : 1;                                 // 0x04E0(0x0004) (Net)
	unsigned long                                      localPackActivatedTrigger : 1;                            // 0x04E0(0x0004)
	unsigned long                                      packSetChargedTrigger : 1;                                // 0x04E0(0x0004) (Net)
	unsigned long                                      localPackSetChargedTrigger : 1;                           // 0x04E0(0x0004)
	unsigned long                                      bLocalActive : 1;                                         // 0x04E0(0x0004) (Net)
	unsigned long                                      cannnotBeUsedWhileTouchingInventoryStation : 1;           // 0x04E0(0x0004) (Edit)
	float                                              rechargingAlpha;                                          // 0x04E4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack");
		return ptr;
	}


	bool Function_isInRangeOfInventoryStation();
	void Function_onTakenFromSpawnPoint_onTakenFromSpawnPoint();
	class UClass_Object_Material* Function_GetOverlayMaterialForOwner(int Index);
	void Function_effectUntriggered(const struct FName& EffectEvent);
	void Function_effectTriggered(const struct FName& EffectEvent);
	void Function_StopEffect(const struct FName& EffectEvent);
	void Function_OnEffectInitialized(class AClass_Object_Actor* inInitializedEffect);
	void Function_OnEffectStopped(class AClass_Object_Actor* E, bool B);
	void Function_OnEffectStarted(class AClass_Object_Actor* inStartedEffect);
	void Function_PlayEffect(const struct FName& EffectEvent);
	void Function_Tick_Tick(float DeltaSeconds);
	void Function_Activate();
	void Function_applyPartialActiveEffect(float Alpha, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_startApplyPartialActiveEffect();
	void Function_finishActiveEffect();
	void Function_startActiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_removePassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_applyPassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_setCharged();
	void Function_endHeldByCharacter_endHeldByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* holder);
	void Function_startHeldByCharacter_startHeldByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* holder);
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_TravelPreAccept_TravelPreAccept_TravelPreAccept();
	void Function_doSwitch_doSwitch(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	bool Function_needPrompt_needPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_canPickup_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	void Function_requestEquipmentDrop_requestEquipmentDrop();
	void Function_pickup_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
};


// Class Object.Actor.Equipment.Equippable.Weapon.Spinfusor
// 0x0014 (0x0610 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Spinfusor : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	float                                              secsUntilNextFire;                                        // 0x05FC(0x0004)
	class UClass_Object_Material_RenderedMaterial_Shader* dialShader;                                               // 0x0600(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTextureRotator* dialTexRotator;                                           // 0x0604(0x0004)
	int                                                dialMaterialIndex;                                        // 0x0608(0x0004) (Edit)
	unsigned long                                      bControllableSkinSet : 1;                                 // 0x060C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Spinfusor");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float DeltaTime);
	void Function_FireWeapon_FireWeapon();
	void Function_setControllableSkins();
	void Function_ammoSkinChange();
	void Function_setHasAmmoSkins_setHasAmmoSkins();
	void Function_buildControllableSkins();
};


// Class Object.Message.MessageEquipmentBase
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessageEquipmentBase : public UClass_Object_Message
{
public:
	struct FName                                       equipmentName;                                            // 0x002C(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      equipmentClass;                                           // 0x0030(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageEquipmentBase");
		return ptr;
	}


	bool Function_passesFilter_passesFilter(class UClass_Object_Message* filterMsg);
	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameClass(const struct FName& _equipmentName, class UClass_Object_Field_Struct_State_Class* _equipmentClass);
};


// Class Object.Message.MessageEquipmentBase.MessageEquipmentDropped
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageEquipmentBase_MessageEquipmentDropped : public UClass_Object_Message_MessageEquipmentBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageEquipmentBase.MessageEquipmentDropped");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageEquipmentBase.MessageEquipmentPickedUp
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageEquipmentBase_MessageEquipmentPickedUp : public UClass_Object_Message_MessageEquipmentBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageEquipmentBase.MessageEquipmentPickedUp");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon
// 0x0010 (0x060C - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	float                                              charge;                                                   // 0x05FC(0x0004)
	float                                              maxCharge;                                                // 0x0600(0x0004) (Edit)
	float                                              chargeScale;                                              // 0x0604(0x0004) (Edit)
	unsigned long                                      bShowChargeOnHUD : 1;                                     // 0x0608(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon
// 0x0024 (0x0630 - 0x060C)
class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon
{
public:
	float                                              initialChargeRate;                                        // 0x060C(0x0004) (Edit, NoClear)
	float                                              chargeRateAccel;                                          // 0x0610(0x0004) (Edit, NoClear)
	float                                              peakChargeMaxHoldTime;                                    // 0x0614(0x0004) (Edit, NoClear)
	float                                              releaseDelay;                                             // 0x0618(0x0004) (Edit, NoClear)
	struct FName                                       chargeAnimation;                                          // 0x061C(0x0004) (Edit)
	struct FName                                       releaseAnimation;                                         // 0x0620(0x0004) (Edit)
	float                                              tickDelta;                                                // 0x0624(0x0004)
	float                                              chargeRate;                                               // 0x0628(0x0004)
	float                                              timeSinceMaxChargeHit;                                    // 0x062C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon.HandGrenade
// 0x0004 (0x0634 - 0x0630)
class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_HandGrenade : public AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon
{
public:
	class UClass_Object_Primitive_StaticMesh*          droppedMesh;                                              // 0x0630(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon.HandGrenade");
		return ptr;
	}


	void Function_setDroppedMesh_setDroppedMesh();
	int Function_getMaxAmmo_getMaxAmmo();
	void Function_pickup_pickup_pickup_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	bool Function_needPrompt_needPrompt_needPrompt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	bool Function_canPickup_canPickup_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
	void Function_initialiseVelocity_initialiseVelocity(class AClass_Object_Actor_Projectile* p, const struct FStruct_Vector& InitialVelocity);
	void Function_Tick_Tick_Tick(float DeltaTime);
	void Function_extractFirstPersonMeshData_extractFirstPersonMeshData();
	void Function_TravelPreAccept_TravelPreAccept_TravelPreAccept();
};


// Class Object.Actor.DamageType.MovementCrushingDamageType
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType : public AClass_Object_Actor_DamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType");
		return ptr;
	}

};


// Class Object.Actor.Info.GameInfo.GameInfo.MultiplayerGameInfo
// 0x00A0 (0x0718 - 0x0678)
class AClass_Object_Actor_Info_GameInfo_GameInfo_MultiplayerGameInfo : public AClass_Object_Actor_Info_GameInfo_GameInfo
{
public:
	class UClass_Object_Field_Struct_State_Class*      roundInfoClass;                                           // 0x0678(0x0004) (Edit, NoClear, EditInline)
	struct FString                                     gameSummaryPage;                                          // 0x067C(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     roundSummaryPage;                                         // 0x0688(0x000C) (Edit, NeedCtorLink, NoClear)
	struct FString                                     GUIPackage;                                               // 0x0694(0x000C) (Edit, NeedCtorLink, NoClear)
	int                                                ScoreLimit;                                               // 0x06A0(0x0004) (Edit, Config, NoClear)
	int                                                minimumNumberOfPlayers;                                   // 0x06A4(0x0004) (Edit, Config, NoClear)
	float                                              postGameDelay;                                            // 0x06A8(0x0004) (Edit, Config, GlobalConfig, NoClear)
	unsigned long                                      bTournamentMode : 1;                                      // 0x06AC(0x0004) (Edit, Config, GlobalConfig, NoClear)
	float                                              tournamentCountdown;                                      // 0x06B0(0x0004) (Edit, Config, GlobalConfig, NoClear)
	unsigned long                                      bUseMapScoreLimits : 1;                                   // 0x06B4(0x0004) (Edit, Config, NoClear)
	int                                                numTeams;                                                 // 0x06B8(0x0004) (Edit, NoClear)
	unsigned long                                      bDontAllowEnemySpectating : 1;                            // 0x06BC(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      defaultLoadoutOverride;                                   // 0x06C0(0x0004) (Edit, NoClear)
	TArray<struct FString>                             gameHints;                                                // 0x06C4(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	unsigned long                                      bRepairBaseDevicesBetweenRounds : 1;                      // 0x06D0(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      GameAnnouncerMessageClass;                                // 0x06D4(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Info_RoundInfo*          RoundInfo;                                                // 0x06D8(0x0004)
	unsigned long                                      bRoundStarted : 1;                                        // 0x06DC(0x0004)
	struct FName                                       playerRestartState;                                       // 0x06E0(0x0004)
	int                                                numPlayersLoggedIn;                                       // 0x06E4(0x0004)
	unsigned long                                      bPendingMatchEnd : 1;                                     // 0x06E8(0x0004)
	unsigned long                                      bForceStart : 1;                                          // 0x06E8(0x0004)
	float                                              lastTournamentUpdateTime;                                 // 0x06EC(0x0004)
	unsigned long                                      bOnGameEndCalled : 1;                                     // 0x06F0(0x0004)
	unsigned long                                      bServerTravelOverride : 1;                                // 0x06F0(0x0004)
	float                                              lastTimeLeft;                                             // 0x06F4(0x0004)
	float                                              clientTravelAtTime;                                       // 0x06F8(0x0004)
	struct FString                                     serverTravelURL;                                          // 0x06FC(0x000C) (NeedCtorLink)
	unsigned long                                      bWaitingForPlayers : 1;                                   // 0x0708(0x0004)
	struct FString                                     GameSpyGameMode;                                          // 0x070C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameInfo.GameInfo.MultiplayerGameInfo");
		return ptr;
	}


	void Function_GameSpyStateChange(const struct FString& newGameMode);
	struct FString Function_GetGameSpyGameMode_GetGameSpyGameMode();
	struct FString STATIC_Function_MakeColorCode(const struct FStruct_Color& NewColor);
	TArray<struct FString> STATIC_Function_GetAllLoadHints(bool bThisClassOnly);
	struct FString STATIC_Function_GetNextLoadHint();
	struct FString STATIC_Function_ParseLoadingHint(const struct FString& Hint, class AClass_Object_Actor_Controller_PlayerController* ref, const struct FStruct_Color& HintColor, const struct FStruct_Color& BindColor);
	struct FString STATIC_Function_GetLoadingHint(class AClass_Object_Actor_Controller_PlayerController* ref, const struct FStruct_Color& HintColor, const struct FStruct_Color& BindColor);
	void Function_ProcessServerTravel_ProcessServerTravel(const struct FString& URL, bool bItems);
	void Function_repairAllBaseDevices();
	bool Function_allowMapVote();
	bool Function_CanSpectate_CanSpectate(class AClass_Object_Actor_Controller_PlayerController* Viewer, bool bOnlySpectator, class AClass_Object_Actor* ViewTarget);
	int Function_numActivePlayers();
	void Function_setPlayerTeamDamagePercentage(float percentage);
	void Function_disableTournamentMode();
	void Function_enableTournamentMode();
	bool Function_ChangeTeam_ChangeTeam(class AClass_Object_Actor_Controller* Other, int n, bool bNewTeam);
	class AClass_Object_Actor_Info_TeamInfo* Function_getLosingTeam();
	class AClass_Object_Actor_Info_TeamInfo* Function_getWinningTeam();
	void Function_onUnspectate_onUnspectate(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	void Function_onSpectate_onSpectate(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	void Function_postTeamScored(class AClass_Object_Actor_Info_TeamInfo* t, int NumPoints, class AClass_Object_Actor* EndGameFocus);
	void Function_OnGameEnd();
	bool Function_tryRespawn_tryRespawn(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	struct FName Function_playerPawnNoRespawnState_playerPawnNoRespawnState();
	struct FName Function_playerPawnDestroyedState_playerPawnDestroyedState();
	void Function_killAllPlayers();
	void Function_startPlayer(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	void Function_startAllActivePlayers();
	void Function_setAllActivePlayerStates(const struct FName& NewState, const struct FName& stateTag, bool bForceSpectators);
	void Function_SetPlayerMesh(class AClass_Object_Actor_Controller* aPlayer);
	void Function_RestartPlayer_RestartPlayer_RestartPlayer(class AClass_Object_Actor_Controller* aPlayer);
	void Function_Logout_Logout_Logout(class AClass_Object_Actor_Controller* Exiting);
	void Function_PostLogin_PostLogin_PostLogin(class AClass_Object_Actor_Controller_PlayerController* NewPlayer);
	bool Function_enoughPlayersToStart();
	class AClass_Object_Actor_Info_TeamInfo* Function_initialTeam_initialTeam();
	float Function_tribesRatePlayerStart_tribesRatePlayerStart(class AClass_Object_Actor_Info_PlayerStart_PlayerStart* p, class AClass_Object_Actor_Info_TeamInfo* Team, class AClass_Object_Actor_Controller* Player);
	bool Function_observerStartExists();
	void Function_checkForObserverPlayerStart();
	void Function_InitGameReplicationInfo_InitGameReplicationInfo();
	bool Function_SaveAllowed_SaveAllowed();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
};


// Class Object.Actor.Info.GameInfo.GameInfo.MultiplayerGameInfo.ModeInfo
// 0x00B8 (0x07D0 - 0x0718)
class AClass_Object_Actor_Info_GameInfo_GameInfo_MultiplayerGameInfo_ModeInfo : public AClass_Object_Actor_Info_GameInfo_GameInfo_MultiplayerGameInfo
{
public:
	TArray<class UClass_Object_Field_Struct_State_Class*> allowedMPActorList;                                       // 0x0718(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> baseDeviceObjectives;                                     // 0x0724(0x000C) (Edit, NeedCtorLink, NoClear)
	TArray<class UClass_Object_Field_Struct_State_Class*> baseDeviceExclusionList;                                  // 0x0730(0x000C) (Edit, NeedCtorLink, NoClear)
	class AClass_Object_Actor_Info_StatTracker*        tracker;                                                  // 0x073C(0x0004)
	float                                              speedCheckTime;                                           // 0x0740(0x0004)
	float                                              speedCheckInterval;                                       // 0x0744(0x0004)
	float                                              teamBalanceCheckTime;                                     // 0x0748(0x0004)
	float                                              teamBalanceCheckInterval;                                 // 0x074C(0x0004) (Config)
	class UClass_Object_Field_Struct_State_Class*      suicideStat;                                              // 0x0750(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      killStat;                                                 // 0x0754(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      deathStat;                                                // 0x0758(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      teamKillStat;                                             // 0x075C(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      rawDamageStat;                                            // 0x0760(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      highestSpeedStat;                                         // 0x0764(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      vehicleKillStat;                                          // 0x0768(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      vehicleTeamKillStat;                                      // 0x076C(0x0004) (Edit)
	TArray<struct FStruct_projectileDamageStat>        projectileDamageStats;                                    // 0x0770(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_extendedProjectileDamageStat> extendedProjectileDamageStats;                            // 0x077C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_baseDeviceAreaStat>          baseDeviceAreaStats;                                      // 0x0788(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_baseDeviceStat>              baseDeviceDestroyStats;                                   // 0x0794(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_baseDeviceStat>              baseDeviceRepairStats;                                    // 0x07A0(0x000C) (Edit, NeedCtorLink)
	TArray<class AClass_Object_Actor_Pawn_Rook_MPActor*> playerKillListeners;                                      // 0x07AC(0x000C) (NeedCtorLink)
	struct FString                                     protectYourString;                                        // 0x07B8(0x000C) (Localized, NeedCtorLink, NoClear)
	struct FString                                     destroyTheirString;                                       // 0x07C4(0x000C) (Localized, NeedCtorLink, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameInfo.GameInfo.MultiplayerGameInfo.ModeInfo");
		return ptr;
	}


	TArray<struct FString> STATIC_Function_GetAllLoadHints_GetAllLoadHints(bool bThisClassOnly);
	void Function_OnGameEnd_OnGameEnd();
	void Function_checkTeamBalance();
	void Function_updateSpeedStats();
	void Function_Tick_Tick_Tick(float Delta);
	bool Function_GameInfoShouldTick_GameInfoShouldTick();
	void Function_registerBaseDeviceStats();
	void Function_awardBaseDeviceAreaStats(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Target);
	void Function_notifyPlayerKillListeners(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Target);
	void Function_registerPlayerKillListener(class AClass_Object_Actor_Pawn_Rook_MPActor* listener);
	class UClass_Object_Field_Struct_State_Class* Function_getInventoryStationAccessClass_getInventoryStationAccessClass();
	bool Function_isABaseDeviceObjective(class AClass_Object_Actor_Pawn_Rook_BaseDevice* bd);
	void Function_setEmergencyIconVisibility(class AClass_Object_Actor_Info_TeamInfo* t, bool On);
	void Function_OnVehicleDestroyed(class AClass_Object_Actor_Pawn* InstigatedBy, class AClass_Object_Actor_Pawn* Target, class UClass_Object_Field_Struct_State_Class* DamageType);
	void Function_OnBaseDeviceDamage(class AClass_Object_Actor_Pawn* InstigatedBy, class AClass_Object_Actor_Pawn* Target, class UClass_Object_Field_Struct_State_Class* DamageType, float Amount);
	void Function_OnPlayerDamage(class AClass_Object_Actor_Pawn* InstigatedBy, class AClass_Object_Actor_Pawn* Target, class UClass_Object_Field_Struct_State_Class* DamageType, float Amount);
	void Function_OnBackstab(class AClass_Object_Actor_Pawn* InstigatedBy, class AClass_Object_Actor_Pawn* Target, class UClass_Object_Field_Struct_State_Class* DamageType, float Amount);
	void Function_OnHeadShot(class AClass_Object_Actor_Pawn* InstigatedBy, class AClass_Object_Actor_Pawn* Target, class UClass_Object_Field_Struct_State_Class* DamageType, float Amount);
	void Function_OnBaseDeviceOffline(class AClass_Object_Actor_Pawn_Rook_BaseDevice* bd, class AClass_Object_Actor_Pawn* lastAttacker);
	void Function_OnBaseDeviceOnline(class AClass_Object_Actor_Pawn_Rook_BaseDevice* bd, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* firstRepairer);
	bool Function_getProjectileDamageStat(class UClass_Object_Field_Struct_State_Class* DamageType, TEnumAsByte<EProjectileDamageStat> statType, struct FStruct_projectileDamageStat* pds);
	void Function_registerDamageTypeStats();
	void Function_createEnemyBaseDeviceObjectives(class UClass_Object_Field_Struct_State_Class* bdc, class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_createFriendlyBaseDeviceObjectives(class UClass_Object_Field_Struct_State_Class* bdc, class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_createWeaponDeathStats();
	void Function_createWeaponKillStats();
	void Function_PostLogin_PostLogin_PostLogin_PostLogin(class AClass_Object_Actor_Controller_PlayerController* NewPlayer);
	void Function_ScoreKill_ScoreKill(class AClass_Object_Actor_Controller* Killer, class AClass_Object_Actor_Controller* Other);
	bool Function_allowBaseDeviceAtLoad(class AClass_Object_Actor_Pawn_Rook_BaseDevice* bd);
	bool Function_allowMPActorAtLoad(class AClass_Object_Actor_Pawn_Rook_MPActor* A);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.DamageType.MovementCollisionDamageType
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCollisionDamageType : public AClass_Object_Actor_DamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCollisionDamageType");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType
// 0x000C (0x04D0 - 0x04C4)
class AClass_Object_Actor_DamageType_ProjectileDamageType : public AClass_Object_Actor_DamageType
{
public:
	float                                              headDamageModifier;                                       // 0x04C4(0x0004) (Edit)
	float                                              backDamageModifier;                                       // 0x04C8(0x0004) (Edit)
	float                                              vehicleDamageModifier;                                    // 0x04CC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType");
		return ptr;
	}


	float STATIC_Function_getBackDamageModifier_getBackDamageModifier();
	float STATIC_Function_getHeadDamageModifier_getHeadDamageModifier();
	bool STATIC_Function_doesPositionDamage_doesPositionDamage();
};


// Class Object.Message.MessageClientChangedTeam
// 0x000C (0x0038 - 0x002C)
class UClass_Object_Message_MessageClientChangedTeam : public UClass_Object_Message
{
public:
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* Client;                                                   // 0x002C(0x0004) (Edit)
	class AClass_Object_Actor_Info_TeamInfo*           Team;                                                     // 0x0030(0x0004) (Edit)
	class AClass_Object_Actor_Info_TeamInfo*           oldTeam;                                                  // 0x0034(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageClientChangedTeam");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_PlayerCharacterControllerTeamInfoTeamInfo(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* _c, class AClass_Object_Actor_Info_TeamInfo* newTeam, class AClass_Object_Actor_Info_TeamInfo* _oldTeam);
};


// Class Object.Actor.Equipment.Equippable.Weapon.Buckler
// 0x0058 (0x0654 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Buckler : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	class AClass_Object_Actor_Projectile_BucklerProjectile* proj;                                                     // 0x05FC(0x0004)
	float                                              checkingDamage;                                           // 0x0600(0x0004) (Edit, NoClear)
	float                                              checkingDmgVelMultiplier;                                 // 0x0604(0x0004) (Edit, NoClear)
	float                                              checkingMultiplier;                                       // 0x0608(0x0004) (Edit, NoClear)
	float                                              minCheckRate;                                             // 0x060C(0x0004) (Edit, NoClear)
	float                                              minCheckVelocity;                                         // 0x0610(0x0004) (Edit, NoClear)
	float                                              lastCheckTime;                                            // 0x0614(0x0004)
	float                                              deflectionAngle;                                          // 0x0618(0x0004) (Edit, NoClear)
	float                                              cosDeflectionAngle;                                       // 0x061C(0x0004)
	struct FStruct_Vector                              failedReturnLocation;                                     // 0x0620(0x000C)
	struct FStruct_Vector                              failedReturnVelocity;                                     // 0x062C(0x000C)
	float                                              projSpawnDelay;                                           // 0x0638(0x0004) (Edit)
	float                                              lostReturnDelay;                                          // 0x063C(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              fireLoc;                                                  // 0x0640(0x000C)
	int                                                localAmmoCount;                                           // 0x064C(0x0004)
	unsigned long                                      bLost : 1;                                                // 0x0650(0x0004) (Net)
	unsigned long                                      bLocalLost : 1;                                           // 0x0650(0x0004)
	unsigned long                                      bDeflected : 1;                                           // 0x0650(0x0004) (Net)
	unsigned long                                      bLocalDeflected : 1;                                      // 0x0650(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Buckler");
		return ptr;
	}


	void Function_playUnequipAnim_playUnequipAnim_playUnequipAnim();
	void Function_playEquipAnim_playEquipAnim_playEquipAnim();
	void Function_playIdleAnim_playIdleAnim_playIdleAnim();
	void Function_playPostFireAnim_playPostFireAnim();
	void Function_FireWeapon_FireWeapon();
	void Function_moveWeapon_moveWeapon();
	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_initialiseVelocity_initialiseVelocity(class AClass_Object_Actor_Projectile* p, const struct FStruct_Vector& InitialVelocity);
	void Function_pickup_pickup_pickup_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* NewOwner);
	void Function_setDropVelocity_setDropVelocity();
	void Function_setDropLocation_setDropLocation();
	void Function_returned();
	void Function_Timer_Timer();
	void Function_lost();
	bool Function_keepArms_keepArms();
	bool Function_shouldHide_shouldHide(bool bIsFirstPerson);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_extractFirstPersonMeshData_extractFirstPersonMeshData();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Message.MessageDeath
// 0x0014 (0x0040 - 0x002C)
class UClass_Object_Message_MessageDeath : public UClass_Object_Message
{
public:
	struct FName                                       Killer;                                                   // 0x002C(0x0004) (Edit)
	struct FName                                       victim;                                                   // 0x0030(0x0004)
	struct FName                                       squad;                                                    // 0x0034(0x0004) (Edit)
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* killerPRI;                                                // 0x0038(0x0004)
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* victimPRI;                                                // 0x003C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageDeath");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameNamePlayerReplicationInfoPlayerReplicationInfoNam(const struct FName& _killer, const struct FName& _victim, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* _killerPRI, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* _victimPRI, const struct FName& _squad);
};


// Class Object.Actor.Trigger
// 0x001C (0x041C - 0x0400)
class AClass_Object_Actor_Trigger : public AClass_Object_Actor
{
public:
	struct FString                                     debugLogString;                                           // 0x0400(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               triggeredByFilter;                                        // 0x040C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bCanDeadTrigger : 1;                                      // 0x0418(0x0004) (Edit, NoClear)
	unsigned long                                      bCanDeadTriggerExit : 1;                                  // 0x0418(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Trigger");
		return ptr;
	}


	bool Function_dispatchTrigger(class AClass_Object_Actor* Instigator, class UClass_Object_Message_MessageTrigger* msg);
	void Function_dispatchMessage_dispatchMessage(class UClass_Object_Message* msg);
	bool Function_CanTrigger(class AClass_Object_Actor* testActor, bool Exiting);
};


// Class Object.Actor.Trigger.TriggerRadius
// 0x0014 (0x0430 - 0x041C)
class AClass_Object_Actor_Trigger_TriggerRadius : public AClass_Object_Actor_Trigger
{
public:
	int                                                maxEnterCount;                                            // 0x041C(0x0004) (Edit)
	int                                                maxExitCount;                                             // 0x0420(0x0004) (Edit)
	unsigned long                                      doLOSCheck : 1;                                           // 0x0424(0x0004) (Edit)
	int                                                enterCount;                                               // 0x0428(0x0004)
	int                                                exitCount;                                                // 0x042C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Trigger.TriggerRadius");
		return ptr;
	}


	bool Function_dispatchExit(class AClass_Object_Actor* Instigator);
	bool Function_dispatchEnter(class AClass_Object_Actor* Instigator);
	bool Function_checkLOS(class AClass_Object_Actor* triggerer);
	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.Actor.Trigger.TriggerRadius.MPAreaTrigger
// 0x0018 (0x0448 - 0x0430)
class AClass_Object_Actor_Trigger_TriggerRadius_MPAreaTrigger : public AClass_Object_Actor_Trigger_TriggerRadius
{
public:
	class UClass_Object_IMPAreaTriggerable*            listener;                                                 // 0x0430(0x0004)
	float                                              triggerFrequency;                                         // 0x0434(0x0004)
	struct FName                                       playerInAreaEffectEvent;                                  // 0x0438(0x0004) (Edit, NoClear)
	TArray<struct FStruct_characterPresence>           charList;                                                 // 0x043C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Trigger.TriggerRadius.MPAreaTrigger");
		return ptr;
	}


	class AClass_Object_Actor_Info_TeamInfo* Function_onlyRemainingTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* includeCharacter, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* excludeCharacter);
	int Function_NumPlayers(class AClass_Object_Actor_Info_TeamInfo* searchTeam);
	void Function_setTriggerFrequency(float F);
	void Function_Timer_Timer();
	bool Function_enoughTimeElapsedSinceMarkerTime(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, float Time, bool resetMarkerTimeWhenTrue);
	float Function_getCharacterMarkerTime(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	bool Function_containsCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_removeCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_addCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_UnTouch_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.MPActor.MPCarryable.MPMetaCarryable
// 0x0020 (0x0ADC - 0x0ABC)
class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable_MPMetaCarryable : public AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable
{
public:
	int                                                maxCarryables;                                            // 0x0ABC(0x0004) (Edit, NoClear)
	int                                                numCarryables;                                            // 0x0AC0(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      carryableClass;                                           // 0x0AC4(0x0004) (Edit, NoClear)
	unsigned long                                      bAutoFill : 1;                                            // 0x0AC8(0x0004) (Edit, NoClear)
	TArray<class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable*> carryables;                                               // 0x0ACC(0x000C) (NeedCtorLink)
	unsigned long                                      bHasHomeLocation : 1;                                     // 0x0AD8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.MPActor.MPCarryable.MPMetaCarryable");
		return ptr;
	}


	int Function_getMaxCarried_getMaxCarried();
	int Function_getNumCarryables_getNumCarryables();
	bool Function_canCombineWith_canCombineWith(class UClass_Object_Field_Struct_State_Class* targetClass);
	void Function_pickup_pickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_Add(class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* C);
	void Function_returnToHome_returnToHome(bool bSignificant);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon.MPCarryableThrower
// 0x0008 (0x0638 - 0x0630)
class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_MPCarryableThrower : public AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon
{
public:
	float                                              extraSpawnDistance;                                       // 0x0630(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* carryable;                                                // 0x0634(0x0004) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon.MPCarryableThrower");
		return ptr;
	}


	void Function_FireWeapon_FireWeapon();
	void Function_moveWeapon_moveWeapon();
	void Function_launchCarryable(class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* C, const struct FStruct_Vector& newLoc, const struct FStruct_Rotator& fireRot, bool bSpread, bool bFreeze);
	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_setCarryable(class AClass_Object_Actor_Pawn_Rook_MPActor_MPCarryable* C);
	void Function_droppedByCharacter_droppedByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_heldByCharacter_heldByCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
};


// Class Object.Actor.Equipment.Consumable
// 0x0000 (0x0494 - 0x0494)
class AClass_Object_Actor_Equipment_Consumable : public AClass_Object_Actor_Equipment
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Consumable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Consumable.HealthKit
// 0x0008 (0x049C - 0x0494)
class AClass_Object_Actor_Equipment_Consumable_HealthKit : public AClass_Object_Actor_Equipment_Consumable
{
public:
	float                                              maxHealthRestored;                                        // 0x0494(0x0004) (Edit)
	float                                              healthPerSecond;                                          // 0x0498(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Consumable.HealthKit");
		return ptr;
	}


	void Function_requestConsumeHealthKit();
	void Function_Use();
	bool Function_canPickup_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
};


// Class Object.Actor.Equipment.Pack.SpeedPack
// 0x001C (0x0504 - 0x04E8)
class AClass_Object_Actor_Equipment_Pack_SpeedPack : public AClass_Object_Actor_Equipment_Pack
{
public:
	float                                              refireRateScale;                                          // 0x04E8(0x0004) (Edit, NoClear)
	float                                              passiveRefireRateScale;                                   // 0x04EC(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      passiveMaterial;                                          // 0x04F0(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      activeMaterial;                                           // 0x04F4(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User;                                                     // 0x04F8(0x0004)
	unsigned long                                      bWarned : 1;                                              // 0x04FC(0x0004)
	class UClass_Object_Material*                      currentOverlay;                                           // 0x0500(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.SpeedPack");
		return ptr;
	}


	void Function_OnEffectStarted_OnEffectStarted(class AClass_Object_Actor* inStartedEffect);
	class UClass_Object_Material* Function_GetOverlayMaterialForOwner_GetOverlayMaterialForOwner(int Index);
	void Function_resetRefireRate();
	void Function_scaleRefireRate(float Scale);
	void Function_finishActiveEffect_finishActiveEffect();
	void Function_startActiveEffect_startActiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_removePassiveEffect_removePassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_applyPassiveEffect_applyPassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
};


// Class Object.Actor.StaticMeshAttachment
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_StaticMeshAttachment : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.StaticMeshAttachment");
		return ptr;
	}

};


// Class Object.CombatRole
// 0x000C (0x0034 - 0x0028)
class UClass_Object_CombatRole : public UClass_Object
{
public:
	class UClass_Object_Field_Struct_State_Class*      armorClass;                                               // 0x0028(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      defaultLoadout;                                           // 0x002C(0x0004) (Edit)
	class UClass_Object_Material*                      inventoryIcon;                                            // 0x0030(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CombatRole");
		return ptr;
	}

};


// Class Object.Actor.CharacterVisualisation
// 0x0028 (0x0428 - 0x0400)
class AClass_Object_Actor_CharacterVisualisation : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Character;                                                // 0x0400(0x0004)
	class AClass_Object_Actor_SphereVisActor*          fullSphere;                                               // 0x0404(0x0004)
	class AClass_Object_Actor_SphereVisActor*          lowerSphere;                                              // 0x0408(0x0004)
	class AClass_Object_Actor_SphereVisActor*          upperSphere;                                              // 0x040C(0x0004)
	struct FStruct_Vector                              upperCenterOffset;                                        // 0x0410(0x000C)
	struct FStruct_Vector                              lowerCenterOffset;                                        // 0x041C(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.CharacterVisualisation");
		return ptr;
	}


	void Function_Tick_Tick(float Delta);
	void Function_SetHidden(bool hidden);
	void Function_SetFullMode(bool full);
	void Function_SetCharacter(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
};


// Class Object.Actor.Projectile.GrapplerProjectile
// 0x0000 (0x044C - 0x044C)
class AClass_Object_Actor_Projectile_GrapplerProjectile : public AClass_Object_Actor_Projectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.GrapplerProjectile");
		return ptr;
	}


	void Function_serverAttach(class AClass_Object_Actor* Other);
	void Function_simulatedAttach(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	void Function_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	bool Function_ShouldHit_ShouldHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	void Function_HitWall_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* HitWall);
};


// Class Object.Actor.GrapplerRope
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_GrapplerRope : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.GrapplerRope");
		return ptr;
	}

};


// Class Object.EquippableAnimator
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_EquippableAnimator : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EquippableAnimator");
		return ptr;
	}


	void STATIC_Function_setLocRot(class AClass_Object_Actor_Equipment_Equippable* E, const struct FStruct_Vector& NewLocation, const struct FStruct_Rotator& NewRotation);
	void STATIC_Function_firstPersonStatus(class AClass_Object_Actor_Equipment_Equippable* E, bool bStatus);
	void STATIC_Function_playEquippableAnim(class AClass_Object_Actor_Equipment_Equippable* E, const struct FName& animName, float Rate, float TweenTime, int Channel);
	bool STATIC_Function_hasEquippableAnim(class AClass_Object_Actor_Equipment_Equippable* E, const struct FName& animName);
	bool STATIC_Function_IsAnimating(class AClass_Object_Actor_Equipment_Equippable* E);
};


// Class Object.Message.MessageSquadDeath
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageSquadDeath : public UClass_Object_Message
{
public:
	struct FName                                       squad;                                                    // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageSquadDeath");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _squad);
};


// Class Object.cutsceneManager
// 0x0004 (0x002C - 0x0028)
class UClass_Object_cutsceneManager : public UClass_Object
{
public:
	class AClass_Object_Actor_Script*                  playingCutscene;                                          // 0x0028(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.cutsceneManager");
		return ptr;
	}


	bool Function_CanExecute(class AClass_Object_Actor_Script* Script);
	void Function_ScriptEnded(class AClass_Object_Actor_Script* Script);
	bool Function_CancelOpeningCutscence();
};


// Class Object.Actor.Info.GameInfo.GameInfo.SingleplayerGameInfo
// 0x0048 (0x06C0 - 0x0678)
class AClass_Object_Actor_Info_GameInfo_GameInfo_SingleplayerGameInfo : public AClass_Object_Actor_Info_GameInfo_GameInfo
{
public:
	struct FStruct_DifficultyData                      difficultyMods[0x3];                                      // 0x0678(0x000C) (Edit, Config)
	struct FString                                     deathMenuClass;                                           // 0x069C(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bShowSubtitles : 1;                                       // 0x06A8(0x0004) (Edit, Config)
	unsigned long                                      allowRespawn : 1;                                         // 0x06A8(0x0004) (Edit)
	int                                                maxDroppedEquipment;                                      // 0x06AC(0x0004) (Edit)
	TArray<class AClass_Object_Actor*>                 droppedEquipment;                                         // 0x06B0(0x000C) (NeedCtorLink)
	unsigned long                                      bDifficultySet : 1;                                       // 0x06BC(0x0004)
	unsigned long                                      bAllowReturnToGameWhenDead : 1;                           // 0x06BC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameInfo.GameInfo.SingleplayerGameInfo");
		return ptr;
	}


	void Function_ModifyPlayer_ModifyPlayer(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter_SinglePlayerCharacter* C);
	void Function_modifyAI_modifyAI(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* C);
	bool STATIC_Function_showChatWindow_showChatWindow();
	float Function_modifyRepairRate_modifyRepairRate(class AClass_Object_Actor_Pawn_Rook* Who, float Rate);
	float Function_modifyHealthKitRate_modifyHealthKitRate(class AClass_Object_Actor_Pawn_Rook* Who, float Rate);
	struct FString Function_GetRestartMap_GetRestartMap();
	bool Function_SaveAllowed_SaveAllowed();
	bool Function_ReturnToGameAllowed();
	bool Function_allowManualRespawn_allowManualRespawn();
	bool Function_allowSkinChanges_allowSkinChanges();
	void Function_removeDroppedEquipment_removeDroppedEquipment(class AClass_Object_Actor_Equipment* E);
	void Function_addDroppedEquipment_addDroppedEquipment(class AClass_Object_Actor_Equipment* E);
	class AClass_Object_Actor_Info_TeamInfo* Function_initialTeamObject(class AClass_Object_Actor_Controller_PlayerController* PC);
	struct FName Function_playerPawnDestroyedState_playerPawnDestroyedState();
	void Function_RestartPlayer_RestartPlayer_RestartPlayer(class AClass_Object_Actor_Controller* aPlayer);
	void Function_setCampaignDifficulty(int newDifficulty);
	void Function_showDeathScreen(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	bool Function_tryRespawn_tryRespawn(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	void Function_setAllowRespawn(bool allow);
	float Function_tribesRatePlayerStart_tribesRatePlayerStart(class AClass_Object_Actor_Info_PlayerStart_PlayerStart* p, class AClass_Object_Actor_Info_TeamInfo* Team, class AClass_Object_Actor_Controller* Player);
	void Function_setTeamObject(class AClass_Object_Actor_Pawn_Rook* R);
	class AClass_Object_Actor_Controller_PlayerController* Function_Login_Login_Login(const struct FString& Portal, const struct FString& Options, struct FString* Error);
};


// Class Object.Message.MessageCountDownExpired
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageCountDownExpired : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageCountDownExpired");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.DeleteableObject.SavedMove
// 0x0040 (0x0074 - 0x0034)
class UClass_Object_DeleteableObject_SavedMove : public UClass_Object_DeleteableObject
{
public:
	float                                              TimeStamp;                                                // 0x0034(0x0004)
	float                                              Delta;                                                    // 0x0038(0x0004)
	float                                              forward;                                                  // 0x003C(0x0004)
	float                                              strafe;                                                   // 0x0040(0x0004)
	unsigned long                                      bSki : 1;                                                 // 0x0044(0x0004)
	unsigned long                                      bThrust : 1;                                              // 0x0044(0x0004)
	unsigned long                                      bJump : 1;                                                // 0x0044(0x0004)
	float                                              Accumulator;                                              // 0x0048(0x0004)
	struct FStruct_Rotator                             Rotation;                                                 // 0x004C(0x000C)
	struct FStruct_Vector                              SavedLocation;                                            // 0x0058(0x000C)
	struct FStruct_Vector                              StartVelocity;                                            // 0x0064(0x000C)
	TEnumAsByte<EMovementState>                        Movement;                                                 // 0x0070(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.SavedMove");
		return ptr;
	}


	int STATIC_Function_decodeViewPitch(int data);
	int STATIC_Function_decodeViewYaw(int data);
	int Function_compressedView();
	bool Function_changesAcceleration();
	void Function_debugEncoding(int data, unsigned char deltaIn);
	void STATIC_Function_decodeImportantData(int data, unsigned char compressedDelta, int* bThrust, int* bSki, int* bJump, float* forward, float* strafe, int* Pitch, int* Yaw, float* Delta);
	void Function_encodeImportantData(float levelTimeSeconds, int* data, unsigned char* Delta);
	void Function_combineTurret(class UClass_Object_DeleteableObject_SavedMove* Other);
	void Function_combine(class UClass_Object_DeleteableObject_SavedMove* Other);
	bool Function_canCombine(class AClass_Object_Actor_Pawn* Pawn, class UClass_Object_DeleteableObject_SavedMove* Other);
	bool Function_isImportant(const struct FStruct_Rotator& curRotate, bool curThrust, bool curJump, bool curSki, float curForward, float curStrafe);
	void Function_SetMoveFor(float levelTimeSeconds, class AClass_Object_Actor_Controller_PlayerController* p, float DeltaTime, float newForward, float newStrafe);
	void Function_PostUpdate(class AClass_Object_Actor_Controller_PlayerController* p);
	void Function_Clear();
};


// Class Object.Actor.UseableObject
// 0x0020 (0x0420 - 0x0400)
class AClass_Object_Actor_UseableObject : public AClass_Object_Actor
{
public:
	struct FString                                     Prompt;                                                   // 0x0400(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	float                                              Priority;                                                 // 0x040C(0x0004) (Edit, NoClear)
	struct FStruct_Vector                              markerOffset;                                             // 0x0410(0x000C) (Edit, NoClear)
	unsigned long                                      bAlwaysUse : 1;                                           // 0x041C(0x0004)
	unsigned long                                      bDoNotPromptWhenNotUseable : 1;                           // 0x041C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject");
		return ptr;
	}


	struct FString STATIC_Function_GetPrompt(unsigned char PromptIndex, class UClass_Object_Field_Struct_State_Class* dataClass);
	unsigned char Function_GetPromptIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PotentialUser);
	struct FStruct_Vector Function_GetUseablePoint();
	class UClass_Object_Field_Struct_State_Class* Function_GetPromptDataClass();
	bool Function_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* Function_getCorrespondingInventoryStation();
};


// Class Object.Actor.UseableObject.BaseDeviceAccess
// 0x0018 (0x0438 - 0x0420)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess : public AClass_Object_Actor_UseableObject
{
public:
	struct FString                                     PowerDownPrompt;                                          // 0x0420(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     IsDisabledPrompt;                                         // 0x042C(0x000C) (Edit, Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess");
		return ptr;
	}


	struct FString STATIC_Function_GetPrompt_GetPrompt(unsigned char PromptIndex, class UClass_Object_Field_Struct_State_Class* dataClass);
	unsigned char Function_GetPromptIndex_GetPromptIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PotentialUser);
};


// Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess
// 0x006C (0x04A4 - 0x0438)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess : public AClass_Object_Actor_UseableObject_BaseDeviceAccess
{
public:
	class UClass_Object_InventoryStationAccessControl* AccessControl;                                            // 0x0438(0x0004) (Net)
	float                                              healRateHealthFractionPerSecond;                          // 0x043C(0x0004) (Edit, NoClear)
	unsigned long                                      bCanUseCustomLoadouts : 1;                                // 0x0440(0x0004) (Edit, NoClear)
	unsigned long                                      bAutoFillWeapons : 1;                                     // 0x0440(0x0004) (Edit, NoClear)
	unsigned long                                      bAutoFillPacks : 1;                                       // 0x0440(0x0004) (Edit, NoClear)
	unsigned long                                      bAutoFillCombatRoles : 1;                                 // 0x0440(0x0004) (Edit, NoClear)
	unsigned long                                      bAutoConfigGrenades : 1;                                  // 0x0440(0x0004) (Edit, NoClear)
	unsigned long                                      bInventoryTutorial : 1;                                   // 0x0440(0x0004) (Edit, NoClear)
	int                                                NumFallbackWeapons;                                       // 0x0444(0x0004) (Edit, NoClear)
	unsigned long                                      bDispenseGrenades : 1;                                    // 0x0448(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* currentUser;                                              // 0x044C(0x0004)
	float                                              percentageHealth;                                         // 0x0450(0x0004)
	struct FStruct_Vector                              userPosition;                                             // 0x0454(0x000C)
	unsigned long                                      bWaitingForAccess : 1;                                    // 0x0460(0x0004)
	int                                                maxWeapons;                                               // 0x0464(0x0004) (Const)
	TArray<struct FStruct_InventoryStationCombatRole>  roles;                                                    // 0x0468(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_InventoryStationWeapon>      weapons;                                                  // 0x0474(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_InventoryStationPack>        packs;                                                    // 0x0480(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStruct_InventoryStationLoadout>     loadouts;                                                 // 0x048C(0x000C) (Edit, NeedCtorLink)
	struct FStruct_InventoryStationGrenades            grenades;                                                 // 0x0498(0x0008) (Edit)
	int                                                defaultLoadoutIndex;                                      // 0x04A0(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess");
		return ptr;
	}


	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_getVehicleBase();
	void Function_clientTerminateCharacterAccess(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User);
	class UClass_Object_Field_Struct_State_Class* Function_ValidateWeaponClass(class UClass_Object_Field_Struct_State_Class* weaponClass, class UClass_Object_Field_Struct_State_Class* armorClass);
	void Function_serverTerminateCharacterAccess();
	void Function_serverFinishCharacterAccess(const struct FStruct_InventoryStationLoadout& selectedLoadout, bool returnToUsualMovment, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User);
	void Function_finishCharacterAccess(const struct FStruct_InventoryStationLoadout& selectedLoadout);
	void Function_characterAccess();
	void Function_Tick_Tick(float DeltaSeconds);
	bool Function_usedByProcessing(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User);
	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	struct FStruct_InventoryStationLoadout Function_GetCurrentUserLoadout();
	void Function_Initialise(class UClass_Object_InventoryStationAccessControl* newAccessControl);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_clientSetupInventoryStation(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User);
	struct FStruct_InventoryStationLoadout Function_getDefaultLoadout();
	struct FStruct_InventoryStationLoadout Function_getLoadout(int loadoutIndex);
	int Function_getNumberLoadouts();
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* Function_getCorrespondingInventoryStation_getCorrespondingInventoryStation();
	bool Function_IsRoleAvailable(const struct FString& roleClassName);
	void Function_UpdatePrecacheRenderData_UpdatePrecacheRenderData();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.ResupplyStation
// 0x0020 (0x0928 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_ResupplyStation : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	float                                              accessPointOffset;                                        // 0x0908(0x0004) (Edit, NoClear)
	float                                              accessRadius;                                             // 0x090C(0x0004) (Edit, NoClear)
	float                                              accessHeight;                                             // 0x0910(0x0004) (Edit, NoClear)
	float                                              healRateHealthFractionPerSecond;                          // 0x0914(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      accessClass;                                              // 0x0918(0x0004) (Edit, NoClear)
	struct FName                                       usageAnimationForCharacter;                               // 0x091C(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_ResupplyStationAccess* access;                                                   // 0x0920(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* currentUser;                                              // 0x0924(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.ResupplyStation");
		return ptr;
	}


	void Function_Tick_Tick(float Delta);
	bool Function_isOnCharactersTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* testCharacter);
	void Function_PlayUsageAnimation();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess.InventoryStationStandaloneAccess
// 0x0004 (0x04A8 - 0x04A4)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess_InventoryStationStandaloneAccess : public AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess
{
public:
	class AClass_Object_Actor_Info_TeamInfo*           playerTeam;                                               // 0x04A4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess.InventoryStationStandaloneAccess");
		return ptr;
	}


	void Function_finishCharacterAccess_finishCharacterAccess(const struct FStruct_InventoryStationLoadout& selectedLoadout);
	struct FStruct_InventoryStationLoadout Function_GetCurrentUserLoadout_GetCurrentUserLoadout();
	void Function_SetupAccessData(class AClass_Object_Actor_Info_TeamInfo* Team);
};


// Class Object.PlayerCamera
// 0x002C (0x0054 - 0x0028)
class UClass_Object_PlayerCamera : public UClass_Object
{
public:
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc;                                                      // 0x0028(0x0004)
	float                                              m_firstToThirdAlpha;                                      // 0x002C(0x0004)
	float                                              m_stateStartTime;                                         // 0x0030(0x0004)
	float                                              m_stateEndTime;                                           // 0x0034(0x0004)
	float                                              thirdPersonCameraDist;                                    // 0x0038(0x0004)
	float                                              thirdPersonCameraLift;                                    // 0x003C(0x0004)
	float                                              vehicleCameraAbsoluteDist;                                // 0x0040(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0044(0x0004)
	TArray<struct FStruct_TransitionData>              m_transitionChain;                                        // 0x0048(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PlayerCamera");
		return ptr;
	}


	void Function_startState();
	void Function_endTransitionState();
	void Function_Update(float Delta);
	bool Function_needBehindView();
	void Function_calcCharacterBehindView(float Alpha, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_liftBehindCamera(float Alpha, const struct FStruct_Rotator& CameraRotation, struct FStruct_Vector* V);
	void Function_calcView(struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_doZoomIn(float InTime);
	void Function_doZoomOut(float OutTime);
	void Function_firstToThirdTransition(float OutTime, float hold, float InTime);
	void Function_Transition(const struct FName& State, float Time);
	int Function_transitionCount();
	bool Function_isTransitioning();
	void Function_clearTransitions();
	void Function_Construct_Void_Construct_Void();
};


// Class Object.Actor.Info.ReplicationInfo.GameReplicationInfo.TribesGameReplicationInfo
// 0x0008 (0x04DC - 0x04D4)
class AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo_TribesGameReplicationInfo : public AClass_Object_Actor_Info_ReplicationInfo_GameReplicationInfo
{
public:
	unsigned long                                      bAwaitingTournamentStart : 1;                             // 0x04D4(0x0004) (Net)
	int                                                numTeams;                                                 // 0x04D8(0x0004) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo.GameReplicationInfo.TribesGameReplicationInfo");
		return ptr;
	}

};


// Class Object.Actor.StaticMeshActor.AccessTerminal
// 0x0028 (0x042C - 0x0404)
class AClass_Object_Actor_StaticMeshActor_AccessTerminal : public AClass_Object_Actor_StaticMeshActor
{
public:
	TArray<class UClass_Object_Material*>              usedMaterials;                                            // 0x0404(0x000C) (Edit, NeedCtorLink)
	float                                              useableObjectCollisionHeight;                             // 0x0410(0x0004) (Edit)
	float                                              useableObjectCollisionRadius;                             // 0x0414(0x0004) (Edit)
	struct FString                                     customPromptID;                                           // 0x0418(0x000C) (Edit, NeedCtorLink, NoClear)
	unsigned long                                      used : 1;                                                 // 0x0424(0x0004)
	class AClass_Object_Actor_UseableObject_AccessTerminalUseableObject* atuo;                                                     // 0x0428(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.StaticMeshActor.AccessTerminal");
		return ptr;
	}


	void Function_resetTerminal();
	void Function_useTerminal();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.ObjectivesList
// 0x0008 (0x0408 - 0x0400)
class AClass_Object_Actor_Info_ObjectivesList : public AClass_Object_Actor_Info
{
public:
	class AClass_Object_Actor_Info_ObjectiveInfo*      objectivesLinkedList;                                     // 0x0400(0x0004) (Net)
	float                                              LastUpdateTime;                                           // 0x0404(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ObjectivesList");
		return ptr;
	}


	void Function_updateObjectives(float UpdateRate, class AClass_Object_Actor_Info_TeamInfo* Team);
	bool Function_removeActor(const struct FName& Name, const struct FName& Label);
	bool Function_setDescription(const struct FName& Name, const struct FString& Desc);
	bool Function_setStatus(const struct FName& Name, TEnumAsByte<EObjectiveStatus> status);
	bool Function_Remove(const struct FName& Name);
	void Function_addUsingString(const struct FName& Name, const struct FString& Description, TEnumAsByte<EObjectiveStatus> status, TEnumAsByte<EObjectiveType> Type, class UClass_Object_DeleteableObject_ObjectiveActors* oa, class UClass_Object_Field_Struct_State_Class* radarInfoClass);
	void Function_Add(const struct FName& Name, const struct FName& Description, TEnumAsByte<EObjectiveStatus> status, TEnumAsByte<EObjectiveType> Type, class UClass_Object_DeleteableObject_ObjectiveActors* oa, class UClass_Object_Field_Struct_State_Class* radarInfoClass);
	class AClass_Object_Actor_Info_ObjectiveInfo* Function_addInternal(const struct FName& Name, TEnumAsByte<EObjectiveStatus> status, TEnumAsByte<EObjectiveType> Type, class UClass_Object_DeleteableObject_ObjectiveActors* oa, class UClass_Object_Field_Struct_State_Class* radarInfoClass);
	int Function_getNumActors(const struct FName& Name);
	TEnumAsByte<EObjectiveStatus> Function_getStatus(const struct FName& Name);
	class AClass_Object_Actor_Info_ObjectiveInfo* Function_first();
	class AClass_Object_Actor_Info_ObjectiveInfo* Function_objectiveFromName(const struct FName& Name);
};


// Class Object.TribesHUDManager
// 0x0030 (0x0058 - 0x0028)
class UClass_Object_TribesHUDManager : public UClass_Object
{
public:
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* Controller;                                               // 0x0028(0x0004)
	class AClass_Object_Actor_HUD_TribesHUDBase*       activeHUD;                                                // 0x002C(0x0004)
	class UClass_Object_Interactions_Interaction_HUDInteraction* interactionHandler;                                       // 0x0030(0x0004)
	TArray<class UClass_Object_Field_Struct_State_Class*> currHUDClasses;                                           // 0x0034(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor_HUD_TribesHUDBase*> hudObjects;                                               // 0x0040(0x000C) (NeedCtorLink)
	struct FString                                     ActiveGameplayHUD;                                        // 0x004C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesHUDManager");
		return ptr;
	}


	void Function_UpdateHUDData();
	void Function_SetHUD(const struct FString& newHUDType);
	void Function_cleanup();
	void Function_Update();
	void Function_ShowDebugHUD(bool Visible);
	void Function_Initialise(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc);
};


// Class Object.Actor.GenericExternalCamera.TalkingHeadCamera
// 0x0000 (0x0420 - 0x0420)
class AClass_Object_Actor_GenericExternalCamera_TalkingHeadCamera : public AClass_Object_Actor_GenericExternalCamera
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.GenericExternalCamera.TalkingHeadCamera");
		return ptr;
	}


	void Function_Timer_Timer_Timer();
	void Function_Stop();
	void Function_Play();
	void Function_Initialize_Initialize();
};


// Class Object.Actor.SensorListNode
// 0x0048 (0x0448 - 0x0400)
class AClass_Object_Actor_SensorListNode : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Pawn_Rook*               sensedRook;                                               // 0x0400(0x0004)
	class UClass_Object_Field_Struct_State_Class*      sensedRookClass;                                          // 0x0404(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      sensedRookTeamClass;                                      // 0x0408(0x0004) (Net)
	unsigned long                                      relevantLastUpdate : 1;                                   // 0x040C(0x0004) (Net)
	class AClass_Object_Actor_SensorListNode*          Next;                                                     // 0x0410(0x0004) (Net)
	class AClass_Object_Actor_SensorListNode*          Prev;                                                     // 0x0414(0x0004)
	TEnumAsByte<EHeightDiff>                           height;                                                   // 0x0418(0x0001) (Net)
	unsigned char                                      XPosition;                                                // 0x0419(0x0001) (Net)
	unsigned char                                      YPosition;                                                // 0x041A(0x0001) (Net)
	unsigned char                                      localX;                                                   // 0x041B(0x0001)
	unsigned char                                      localY;                                                   // 0x041C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	float                                              xTime;                                                    // 0x0420(0x0004)
	float                                              yTime;                                                    // 0x0424(0x0004)
	float                                              lastUpdateTimeX;                                          // 0x0428(0x0004)
	float                                              lastUpdateTimeY;                                          // 0x042C(0x0004)
	float                                              XPos;                                                     // 0x0430(0x0004)
	float                                              YPos;                                                     // 0x0434(0x0004)
	float                                              xOld;                                                     // 0x0438(0x0004)
	float                                              yOld;                                                     // 0x043C(0x0004)
	float                                              xNew;                                                     // 0x0440(0x0004)
	float                                              yNew;                                                     // 0x0444(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SensorListNode");
		return ptr;
	}


	float Function_getYPosition();
	float Function_getXPosition();
	int Function_GetHeight();
	void Function_detachNode();
	void Function_Set(class AClass_Object_Actor_Pawn_Rook* newRook);
	void Function_updateWhenRelevant();
	void Function_Update();
	void Function_Tick_Tick(float Delta);
	void Function_construct_PlayerCharacterControllerRook(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* _owner, class AClass_Object_Actor_Pawn_Rook* _sensedRook);
};


// Class Object.Interactions.Interaction.UWindowBase
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Interactions_Interaction_UWindowBase : public UClass_Object_Interactions_Interaction
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase");
		return ptr;
	}


	class UClass_Object* STATIC_Function_BuildObjectWithProperties(const struct FString& Text);
	int STATIC_Function_InStrAfter(const struct FString& Text, const struct FString& Match, int pos);
	struct FStruct_Region Function_GetRegion(const struct FStruct_TexRegion& t);
	struct FStruct_TexRegion Function_NewTexRegion(float X, float Y, float W, float H, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* t);
	struct FStruct_Region Function_NewRegion(float X, float Y, float W, float H);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow
// 0x0080 (0x00B4 - 0x0034)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow : public UClass_Object_Interactions_Interaction_UWindowBase
{
public:
	float                                              WinLeft;                                                  // 0x0034(0x0004)
	float                                              WinTop;                                                   // 0x0038(0x0004)
	float                                              WinWidth;                                                 // 0x003C(0x0004)
	float                                              WinHeight;                                                // 0x0040(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* ParentWindow;                                             // 0x0044(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* FirstChildWindow;                                         // 0x0048(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* LastChildWindow;                                          // 0x004C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* NextSiblingWindow;                                        // 0x0050(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* PrevSiblingWindow;                                        // 0x0054(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* ActiveWindow;                                             // 0x0058(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow* Root;                                                     // 0x005C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* OwnerWindow;                                              // 0x0060(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* ModalWindow;                                              // 0x0064(0x0004)
	unsigned long                                      bWindowVisible : 1;                                       // 0x0068(0x0004)
	unsigned long                                      bNoClip : 1;                                              // 0x0068(0x0004)
	unsigned long                                      bMouseDown : 1;                                           // 0x0068(0x0004)
	unsigned long                                      bRMouseDown : 1;                                          // 0x0068(0x0004)
	unsigned long                                      bMMouseDown : 1;                                          // 0x0068(0x0004)
	unsigned long                                      bAlwaysBehind : 1;                                        // 0x0068(0x0004)
	unsigned long                                      bAcceptsFocus : 1;                                        // 0x0068(0x0004)
	unsigned long                                      bAlwaysOnTop : 1;                                         // 0x0068(0x0004)
	unsigned long                                      bLeaveOnscreen : 1;                                       // 0x0068(0x0004)
	unsigned long                                      bUWindowActive : 1;                                       // 0x0068(0x0004)
	unsigned long                                      bTransient : 1;                                           // 0x0068(0x0004)
	unsigned long                                      bAcceptsHotKeys : 1;                                      // 0x0068(0x0004)
	unsigned long                                      bIgnoreLDoubleClick : 1;                                  // 0x0068(0x0004)
	unsigned long                                      bIgnoreMDoubleClick : 1;                                  // 0x0068(0x0004)
	unsigned long                                      bIgnoreRDoubleClick : 1;                                  // 0x0068(0x0004)
	float                                              ClickTime;                                                // 0x006C(0x0004)
	float                                              MClickTime;                                               // 0x0070(0x0004)
	float                                              RClickTime;                                               // 0x0074(0x0004)
	float                                              ClickX;                                                   // 0x0078(0x0004)
	float                                              ClickY;                                                   // 0x007C(0x0004)
	float                                              MClickX;                                                  // 0x0080(0x0004)
	float                                              MClickY;                                                  // 0x0084(0x0004)
	float                                              RClickX;                                                  // 0x0088(0x0004)
	float                                              RClickY;                                                  // 0x008C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowLookAndFeel* LookAndFeel;                                              // 0x0090(0x0004)
	struct FStruct_Region                              ClippingRegion;                                           // 0x0094(0x0010)
	struct FStruct_MouseCursor                         Cursor;                                                   // 0x00A4(0x0010)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow");
		return ptr;
	}


	void Function_StripCRLF(struct FString* Text);
	void Function_ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text);
	void Function_NotifyAfterLevelChange();
	void Function_SetCursor(const struct FStruct_MouseCursor& C);
	void Function_NotifyBeforeLevelChange();
	void Function_NotifyQuitUnreal();
	void Function_MessageBoxDone(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* W, TEnumAsByte<EMessageBoxResult> Result);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* Function_MessageBox(const struct FString& Title, const struct FString& Message, TEnumAsByte<EMessageBoxButtons> Buttons, TEnumAsByte<EMessageBoxResult> ESCResult, TEnumAsByte<EMessageBoxResult> EnterResult, int TimeOut);
	void Function_SetParent(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* NewParent);
	bool Function_WindowIsVisible();
	bool Function_CheckMousePassThrough(float X, float Y);
	void Function_WindowShown();
	void Function_WindowHidden();
	bool Function_WaitModal();
	void Function_ShowModal(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_ResolutionChanged(float W, float H);
	void Function_TextSize(class UClass_Object_Canvas* C, const struct FString& Text, float* W, float* H);
	void Function_GetDesiredDimensions(float* W, float* H);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Function_FindChildWindow(class UClass_Object_Field_Struct_State_Class* ChildClass, bool bExactClass);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Function_GetParent(class UClass_Object_Field_Struct_State_Class* ParentClass, bool bExactClass);
	void Function_SetAcceptsHotKeys(bool bNewAccpetsHotKeys);
	bool Function_isActive();
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Function_GetLookAndFeelTexture();
	void Function_SetMouseWindow();
	void Function_ToolTip(const struct FString& strTip);
	bool Function_MouseIsOver();
	unsigned char Function_ParseAmpersand(const struct FString& S, bool bCalcUnderline, struct FString* Result, struct FString* Underline);
	struct FString Function_RemoveAmpersand(const struct FString& S);
	void Function_DrawMiscBevel(class UClass_Object_Canvas* C, float X, float Y, float W, float H, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* t, int BevelType);
	void Function_DrawUpBevel(class UClass_Object_Canvas* C, float X, float Y, float W, float H, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* t);
	void Function_DrawClippedActor(class UClass_Object_Canvas* C, float X, float Y, class AClass_Object_Actor* A, bool Wireframe, const struct FStruct_Rotator& RotOffset, const struct FStruct_Vector& LocOffset);
	void Function_ClipTextWidth(class UClass_Object_Canvas* C, float X, float Y, const struct FString& S, float W);
	int Function_WrapClipText(class UClass_Object_Canvas* C, float X, float Y, const struct FString& S, bool bCheckHotKey, int Length, int PaddingLength, bool bNoDraw);
	void Function_ClipText(class UClass_Object_Canvas* C, float X, float Y, const struct FString& S, bool bCheckHotKey);
	void Function_DrawStretchedTextureSegment(class UClass_Object_Canvas* C, float X, float Y, float W, float H, float tX, float tY, float tW, float tH, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Tex);
	void Function_DrawStretchedTexture(class UClass_Object_Canvas* C, float X, float Y, float W, float H, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Tex);
	void Function_DrawClippedTexture(class UClass_Object_Canvas* C, float X, float Y, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Tex);
	void Function_DrawVertTiledPieces(class UClass_Object_Canvas* C, float DestX, float DestY, float DestW, float DestH, const struct FStruct_TexRegion& T1, const struct FStruct_TexRegion& T2, const struct FStruct_TexRegion& T3, const struct FStruct_TexRegion& T4, const struct FStruct_TexRegion& T5, float Scale);
	void Function_DrawHorizTiledPieces(class UClass_Object_Canvas* C, float DestX, float DestY, float DestW, float DestH, const struct FStruct_TexRegion& T1, const struct FStruct_TexRegion& T2, const struct FStruct_TexRegion& T3, const struct FStruct_TexRegion& T4, const struct FStruct_TexRegion& T5, float Scale);
	void Function_Tile(class UClass_Object_Canvas* C, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* t);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Function_CreateWindow(class UClass_Object_Field_Struct_State_Class* WndClass, float X, float Y, float W, float H, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* OwnerW, bool bUnique, const struct FName& ObjectName);
	void Function_HideWindow();
	void Function_ShowWindow();
	void Function_ShowChildWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Child, bool bAtBack);
	void Function_WindowToGlobal(float WinX, float WinY, float* GlobalX, float* GlobalY);
	void Function_GlobalToWindow(float GlobalX, float GlobalY, float* WinX, float* WinY);
	void Function_GetMouseXY(float* X, float* Y);
	void Function_CancelAcceptsFocus();
	void Function_SetAcceptsFocus();
	void Function_HideChildWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Child);
	void Function_SendToBack();
	void Function_BringToFront();
	void Function_ActivateWindow(int depth, bool bTransientNoDeactivate);
	bool Function_MessageClients(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Function_CheckKeyFocusWindow();
	bool Function_PropagateMessage(const struct FString& msg, float MsgLife);
	bool Function_PropagateKey(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Function_FindWindowUnder(float X, float Y);
	void Function_PaintClients(class UClass_Object_Canvas* C, float X, float Y);
	void Function_DoTick(float Delta);
	void Function_Tick_Tick(float Delta);
	void Function_SetSize(float W, float H);
	void Function_Close(bool bByParent);
	void Function_EscClose();
	void Function_FocusOtherWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_FocusWindow();
	void Function_LMouseUp(float X, float Y);
	void Function_LMouseDown(float X, float Y);
	void Function_MMouseUp(float X, float Y);
	void Function_MMouseDown(float X, float Y);
	void Function_RMouseUp(float X, float Y);
	void Function_RMouseDown(float X, float Y);
	void Function_KeyFocusExit();
	void Function_KeyFocusEnter();
	void Function_ProcessMenuKey(int Key, const struct FString& KeyName);
	void Function_KeyPressed(int Key, float X, float Y);
	bool Function_HotKeyUp(int Key, float X, float Y);
	bool Function_HotKeyDown(int Key, float X, float Y);
	void Function_KeyDown(int Key, float X, float Y);
	void Function_KeyUp(int Key, float X, float Y);
	void Function_MouseMove(float X, float Y);
	void Function_MouseLeave();
	void Function_Deactivated();
	void Function_Activated();
	void Function_MouseEnter();
	void Function_AfterCreate();
	void Function_Created();
	void Function_BeforeCreate();
	void Function_BeginPlay();
	void Function_RDoubleClick(float X, float Y);
	void Function_MDoubleClick(float X, float Y);
	void Function_DoubleClick(float X, float Y);
	void Function_RClick(float X, float Y);
	void Function_MClick(float X, float Y);
	void Function_Click(float X, float Y);
	void Function_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_AfterPaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Resized();
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Function_GetEntryLevel();
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Function_GetLevel();
	class AClass_Object_Actor_Controller_PlayerController* Function_GetPlayerOwner();
	void Function_SaveConfigs();
	void Function_WindowEvent(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowRootWindow
// 0x0178 (0x022C - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* MouseWindow;                                              // 0x00B4(0x0004)
	unsigned long                                      bMouseCapture : 1;                                        // 0x00B8(0x0004)
	float                                              OldMouseX;                                                // 0x00BC(0x0004)
	float                                              OldMouseY;                                                // 0x00C0(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* FocusedWindow;                                            // 0x00C4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* KeyFocusWindow;                                           // 0x00C8(0x0004)
	struct FStruct_MouseCursor                         NormalCursor;                                             // 0x00CC(0x0010)
	struct FStruct_MouseCursor                         MoveCursor;                                               // 0x00DC(0x0010)
	struct FStruct_MouseCursor                         DiagCursor1;                                              // 0x00EC(0x0010)
	struct FStruct_MouseCursor                         HandCursor;                                               // 0x00FC(0x0010)
	struct FStruct_MouseCursor                         HSplitCursor;                                             // 0x010C(0x0010)
	struct FStruct_MouseCursor                         VSplitCursor;                                             // 0x011C(0x0010)
	struct FStruct_MouseCursor                         DiagCursor2;                                              // 0x012C(0x0010)
	struct FStruct_MouseCursor                         NSCursor;                                                 // 0x013C(0x0010)
	struct FStruct_MouseCursor                         WECursor;                                                 // 0x014C(0x0010)
	struct FStruct_MouseCursor                         WaitCursor;                                               // 0x015C(0x0010)
	unsigned long                                      bQuickKeyEnable : 1;                                      // 0x016C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowHotkeyWindowList* HotkeyWindows;                                            // 0x0170(0x0004)
	float                                              GUIScale;                                                 // 0x0174(0x0004) (Config)
	float                                              RealWidth;                                                // 0x0178(0x0004)
	float                                              RealHeight;                                               // 0x017C(0x0004)
	class UClass_Object_Font*                          Fonts[0xA];                                               // 0x0180(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowLookAndFeel* LooksAndFeels[0x14];                                      // 0x01A8(0x0004)
	struct FString                                     LookAndFeelClass;                                         // 0x01F8(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bRequestQuit : 1;                                         // 0x0204(0x0004)
	float                                              QuitTime;                                                 // 0x0208(0x0004)
	unsigned long                                      bAllowConsole : 1;                                        // 0x020C(0x0004)
	float                                              MouseScale;                                               // 0x0210(0x0004) (Config)
	float                                              MouseX;                                                   // 0x0214(0x0004)
	float                                              MouseY;                                                   // 0x0218(0x0004)
	float                                              OldClipX;                                                 // 0x021C(0x0004)
	float                                              OldClipY;                                                 // 0x0220(0x0004)
	class UClass_Object_Field_Struct_State_Class*      ConsoleClass;                                             // 0x0224(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowConsoleWindow* ConsoleWindow;                                            // 0x0228(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowRootWindow");
		return ptr;
	}


	void Function_Message_Message(const struct FString& msg, float MsgLife);
	void Function_PostRender_PostRender(class UClass_Object_Canvas* Canvas);
	bool Function_KeyEvent_KeyEvent(float Delta, TEnumAsByte<EInputKey>* Key, TEnumAsByte<EInputAction>* Action);
	void Function_Initialized_Initialized();
	void Function_Tick_Tick_Tick(float Delta);
	void Function_DoQuitGame();
	void Function_QuitGame();
	void Function_SetMousePos(float X, float Y);
	void Function_HideWindow_HideWindow();
	void Function_ChangeLookAndFeel(const struct FString& NewLookAndFeel);
	void Function_SetupFonts();
	void Function_SetScale(float NewScale);
	void Function_Resized_Resized();
	void Function_CloseActiveWindow();
	bool Function_HotKeyUp_HotKeyUp(int Key, float X, float Y);
	bool Function_HotKeyDown_HotKeyDown(int Key, float X, float Y);
	void Function_WindowEvent_WindowEvent(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
	void Function_RemoveHotkeyWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_AddHotkeyWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	bool Function_isActive_isActive();
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Function_GetLookAndFeelTexture_GetLookAndFeelTexture();
	void Function_CaptureMouse(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_CancelCapture();
	bool Function_CheckCaptureMouseDown();
	bool Function_CheckCaptureMouseUp();
	void Function_DrawMouse(class UClass_Object_Canvas* C);
	void Function_MoveMouse(float X, float Y);
	void Function_Created_Created();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowLookAndFeel* Function_GetLookAndFeel(const struct FString& LFClassName);
	void Function_BeginPlay_BeginPlay();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowRootWindow.InventoryStationInteraction
// 0x0004 (0x0230 - 0x022C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow_InventoryStationInteraction : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_InventoryStationDialog* ClientArea;                                               // 0x022C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowRootWindow.InventoryStationInteraction");
		return ptr;
	}


	void Function_Initialise(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* station);
	void Function_Created_Created_Created();
};


// Class Object.Actor.BaseCamera
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_BaseCamera : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.BaseCamera");
		return ptr;
	}

};


// Class Object.Actor.BaseCamera.PlayerControllerCamera
// 0x0014 (0x0414 - 0x0400)
class AClass_Object_Actor_BaseCamera_PlayerControllerCamera : public AClass_Object_Actor_BaseCamera
{
public:
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* controlledPCC;                                            // 0x0400(0x0004)
	class AClass_Object_Actor_Pawn*                    PlayerPawn;                                               // 0x0404(0x0004)
	float                                              FOV;                                                      // 0x0408(0x0004) (Edit)
	float                                              viewDuration;                                             // 0x040C(0x0004) (Edit)
	unsigned long                                      allowPlayerControlledReturn : 1;                          // 0x0410(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.BaseCamera.PlayerControllerCamera");
		return ptr;
	}


	void Function_endControl();
	void Function_actionControlledReturn();
	void Function_playerControlledReturn();
	void Function_takeControl(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* pcc);
};


// Class Object.Actor.Info.RoundInfo
// 0x0018 (0x0418 - 0x0400)
class AClass_Object_Actor_Info_RoundInfo : public AClass_Object_Actor_Info
{
public:
	TArray<class UClass_Object_RoundData*>             rounds;                                                   // 0x0400(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	int                                                currentRoundIdx;                                          // 0x040C(0x0004)
	float                                              replicatedRemainingDuration;                              // 0x0410(0x0004) (Net)
	float                                              replicatedRemainingCountdown;                             // 0x0414(0x0004) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.RoundInfo");
		return ptr;
	}


	void Function_cleanupEquipment();
	void Function_cleanup();
	void Function_Restart();
	class UClass_Object_RoundData* Function_currentRound();
	void Function_Tick_Tick(float Delta);
	float Function_remainingRoundTime();
	bool Function_isFinished();
	float Function_remainingCountdown();
	bool Function_isCountdown();
	bool Function_needsCountdown();
	void Function_startNextRound();
	bool Function_moreRoundsToPlay();
};


// Class Object.Actor.PointOfInterest
// 0x0020 (0x0420 - 0x0400)
class AClass_Object_Actor_PointOfInterest : public AClass_Object_Actor
{
public:
	struct FString                                     LabelTextLocalisationTag;                                 // 0x0400(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LabelText;                                                // 0x040C(0x000C) (Edit, Localized, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      radarInfoClass;                                           // 0x0418(0x0004) (Edit)
	unsigned long                                      bPointEnabled : 1;                                        // 0x041C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.PointOfInterest");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_GetRadarInfoClass_GetRadarInfoClass();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.UseableObject.BaseDeviceAccess.ResupplyStationAccess
// 0x0008 (0x0440 - 0x0438)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess_ResupplyStationAccess : public AClass_Object_Actor_UseableObject_BaseDeviceAccess
{
public:
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_ResupplyStation* ResupplyStation;                                          // 0x0438(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* oldUserWeapon;                                            // 0x043C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess.ResupplyStationAccess");
		return ptr;
	}


	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_unlockUser(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User);
	void Function_lockUser(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_Initialise(class AClass_Object_Actor_Pawn_Rook_BaseDevice_ResupplyStation* station);
};


// Class Object.CheatManager.ConsoleCommandManager.TribesCheatManager
// 0x0004 (0x0038 - 0x0034)
class UClass_Object_CheatManager_ConsoleCommandManager_TribesCheatManager : public UClass_Object_CheatManager_ConsoleCommandManager
{
public:
	unsigned long                                      animationDebug : 1;                                       // 0x0034(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CheatManager.ConsoleCommandManager.TribesCheatManager");
		return ptr;
	}


	void Function_debugSpeedhack();
	void Function_EditObjectAtCrosshair();
	void Function_testIntro();
	void Function_killDriver();
	void Function_clark();
	void Function_superman();
	void Function_SetFog(int Start, int End);
	void Function_ScaleFog(float Scale);
	void Function_ToggleSpeechCategoryFrequency();
	void Function_ToggleSpeechChannel(const struct FString& channelName);
	void Function_ToggleSpeechChannelLogging(const struct FString& channelName);
	void Function_campaignNext();
	void Function_killSquad(const struct FName& squadLabel);
	void Function_setCombatRole(class UClass_Object_Field_Struct_State_Class* C);
	void Function_setArmor(class UClass_Object_Field_Struct_State_Class* C);
	void Function_setPlayerTeam(const struct FName& Label);
	void Function_replaceWeapon(class UClass_Object_Field_Struct_State_Class* wc);
	void Function_GiveWeapon(class UClass_Object_Field_Struct_State_Class* C);
	void Function_fastWeapons();
	void Function_allAmmo();
	void Function_allWeapons();
	void Function_giveArmor(class UClass_Object_Field_Struct_State_Class* C);
	void Function_SetPlayerMesh(const struct FString& meshName);
	void Function_runScript(const struct FName& Label);
	void Function_setWeaponFPMesh(const struct FString& meshName);
	void Function_weaponFPOffsetDecZ();
	void Function_weaponFPOffsetDecY();
	void Function_weaponFPOffsetDecX();
	void Function_weaponFPOffsetIncZ();
	void Function_weaponFPOffsetIncY();
	void Function_weaponFPOffsetIncX();
	void Function_weaponFPOffsetZ(float F);
	void Function_weaponFPOffsetY(float F);
	void Function_weaponFPOffsetX(float F);
	void Function_ViewClass(class UClass_Object_Field_Struct_State_Class* aClass, bool bQuiet, bool bCheat);
	void Function_ViewBot();
	void Function_ViewActor(const struct FName& ActorName);
	void Function_ViewPlayer(const struct FString& S);
	void Function_ViewSelf(bool bQuiet);
	void Function_CheatView(class UClass_Object_Field_Struct_State_Class* aClass, bool bQuiet);
	void Function_PlayersOnly();
	void Function_Summon(const struct FString& ClassName);
	void Function_Avatar(const struct FString& ClassName);
	void Function_KillPawns();
	void Function_KillAllPawns(class UClass_Object_Field_Struct_State_Class* aClass);
	void Function_KillAll(class UClass_Object_Field_Struct_State_Class* aClass);
	void Function_SetSpeed(float F);
	void Function_SetGravity(float F);
	void Function_SetJumpZ(float F);
	void Function_SloMo(float t);
	void Function_God();
	void Function_Invisible(bool B);
	void Function_Ghost();
	void Function_Walk();
	void Function_Fly();
	void Function_Amphibious();
	void Function_CauseEvent(const struct FName& EventName);
	void Function_FreeCamera(bool B);
	void Function_EndPath();
	void Function_SetCameraDist(float F);
	void Function_LockCamera();
	void Function_ChangeSize(float F);
	void Function_Teleport();
	void Function_LogScriptedSequences();
	void Function_KillViewedActor();
	void Function_SetFogB(float F);
	void Function_SetFogG(float F);
	void Function_SetFogR(float F);
	void Function_SetFlash(float F);
	void Function_WriteToLog();
	void Function_FreezeFrame(float DelayTime);
	void Function_ListDynamicActors();
	void Function_ReviewJumpSpots(const struct FName& TestLabel);
};


// Class Object.Actor.EquipmentPickupProxy
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_EquipmentPickupProxy : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.EquipmentPickupProxy");
		return ptr;
	}


	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.Actor.EquipmentSpawnPoint
// 0x0018 (0x0418 - 0x0400)
class AClass_Object_Actor_EquipmentSpawnPoint : public AClass_Object_Actor
{
public:
	class UClass_Object_Field_Struct_State_Class*      equipmentClass;                                           // 0x0400(0x0004) (Edit, EditInline, EditInlineUse)
	float                                              respawnTime;                                              // 0x0404(0x0004) (Edit)
	struct FStruct_Vector                              respawnOffset;                                            // 0x0408(0x000C) (Edit)
	class AClass_Object_Actor_Equipment*               spawnedEquipment;                                         // 0x0414(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.EquipmentSpawnPoint");
		return ptr;
	}


	void Function_equipmentTaken();
	void Function_spawnEquipment();
	void Function_Timer_Timer();
	void Function_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Controller.PlayerController.PlayerCharacterController.DemoController
// 0x0004 (0x0BB4 - 0x0BB0)
class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController_DemoController : public AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController
{
public:
	unsigned long                                      bTempBehindView : 1;                                      // 0x0BB0(0x0004)
	unsigned long                                      bFoundPlayer : 1;                                         // 0x0BB0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Controller.PlayerController.PlayerCharacterController.DemoController");
		return ptr;
	}


	void Function_PlayerCalcView_PlayerCalcView_PlayerCalcView(class AClass_Object_Actor** ViewActor, struct FStruct_Vector* CameraLocation, struct FStruct_Rotator* CameraRotation);
	void Function_DemoViewNextPlayer();
	void Function_ViewClass(class UClass_Object_Field_Struct_State_Class* aClass, bool bQuiet, bool bCheat);
	void Function_InitPlayerReplicationInfo_InitPlayerReplicationInfo();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.AimFunctions
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_AimFunctions : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AimFunctions");
		return ptr;
	}


	float STATIC_Function_projectileTimeToTarget(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor_Pawn* Target);
	float STATIC_Function_getMaxEffectiveRange(class UClass_Object_Field_Struct_State_Class* weaponClass);
	float STATIC_Function_getProjectileDamageRadius(class UClass_Object_Field_Struct_State_Class* projectileClass);
	struct FStruct_Vector STATIC_Function_getProjectileVelocity(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, const struct FStruct_Vector& aimLocation);
	bool STATIC_Function_willHurt(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor_Pawn* Target, const struct FStruct_Vector& HitLocation, float timeToHit);
	class AClass_Object_Actor* STATIC_Function_obstacleInPath(class AClass_Object_Actor_Pawn* Target, class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, const struct FStruct_Vector& aimLocation, struct FStruct_Vector* HitLocation, float* timeToHit);
	class AClass_Object_Actor* STATIC_Function_getThingHit(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, const struct FStruct_Vector& projVelocity, struct FStruct_Vector* HitLocation, float* timeToHit);
	float STATIC_Function_getTimeToHitTarget(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor_Pawn* Target);
	float STATIC_Function_getLeadScale(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon);
	struct FStruct_Vector STATIC_Function_getAimLocation(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor_Pawn* Target, float leadScale);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.SensorTower
// 0x0000 (0x0908 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_SensorTower : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.SensorTower");
		return ptr;
	}


	void Function_setTeam_setTeam(class AClass_Object_Actor_Info_TeamInfo* Info);
	void Function_latentBeginActive_latentBeginActive();
};


// Class Object.Actor.Info.PlayerStart.PlayerStart
// 0x0014 (0x0420 - 0x040C)
class AClass_Object_Actor_Info_PlayerStart_PlayerStart : public AClass_Object_Actor_Info_PlayerStart
{
public:
	class AClass_Object_Actor_Info_TeamInfo*           Team;                                                     // 0x040C(0x0004) (Edit, NoClear)
	float                                              invincibleDelay;                                          // 0x0410(0x0004) (Edit, NoClear)
	unsigned long                                      bObserverStart : 1;                                       // 0x0414(0x0004) (Edit, NoClear)
	unsigned long                                      bLockObserverLocation : 1;                                // 0x0414(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Info_BaseInfo*           BaseInfo;                                                 // 0x0418(0x0004) (Edit, NoClear)
	unsigned long                                      bDisallowEquipmentDropOnDeath : 1;                        // 0x041C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.PlayerStart.PlayerStart");
		return ptr;
	}


	void Function_enumBaseInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_BaseInfo*> A);
	struct FString Function_displayActorLabel(class AClass_Object_Actor* t);
	void Function_enumTeamInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_TeamInfo*>* S);
	bool Function_canRespawn();
	void Function_onPlayerSpawned(class AClass_Object_Actor_Controller* aPlayer);
	struct FString Function_defaultPawnClassName();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.SpawnArray
// 0x0030 (0x0938 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_SpawnArray : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	struct FName                                       spawnAnimation;                                           // 0x0908(0x0004) (Edit, NoClear)
	struct FName                                       spawnedEffectEvent;                                       // 0x090C(0x0004) (Edit, NoClear)
	float                                              useableObjectCollisionHeight;                             // 0x0910(0x0004) (Edit)
	float                                              useableObjectCollisionRadius;                             // 0x0914(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      accessClass;                                              // 0x0918(0x0004) (Edit, NoClear)
	float                                              minimumTimeBetweenSpawnEffects;                           // 0x091C(0x0004) (Edit, NoClear)
	unsigned long                                      bSpawnEffect : 1;                                         // 0x0920(0x0004) (Net)
	unsigned long                                      bLocalSpawnEffect : 1;                                    // 0x0920(0x0004)
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_SpawnArrayUseableObject* access;                                                   // 0x0924(0x0004)
	struct FString                                     cantUseSpawnTowerMessage;                                 // 0x0928(0x000C) (Localized, NeedCtorLink)
	float                                              lastSpawnEffectTime;                                      // 0x0934(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.SpawnArray");
		return ptr;
	}


	void Function_Use(class AClass_Object_Actor_Pawn* User);
	void Function_playSpawnEffects();
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PlayerSpawned();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Message.MessageVehicleOccupantChange
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessageVehicleOccupantChange : public UClass_Object_Message
{
public:
	struct FName                                       Vehicle;                                                  // 0x002C(0x0004)
	struct FName                                       occupant;                                                 // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageVehicleOccupantChange");
		return ptr;
	}


	void Function_construct_NameName(const struct FName& _vehicle, const struct FName& _occupant);
};


// Class Object.Message.MessageVehicleOccupantChange.MessageDriverLeave
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageVehicleOccupantChange_MessageDriverLeave : public UClass_Object_Message_MessageVehicleOccupantChange
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageVehicleOccupantChange.MessageDriverLeave");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName_construct_NameName(const struct FName& _vehicle, const struct FName& _occupant);
};


// Class Object.Message.MessageVehicleOccupantChange.MessageGunnerLeave
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageVehicleOccupantChange_MessageGunnerLeave : public UClass_Object_Message_MessageVehicleOccupantChange
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageVehicleOccupantChange.MessageGunnerLeave");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName_construct_NameName(const struct FName& _vehicle, const struct FName& _occupant);
};


// Class Object.Message.MessageVehicleOccupantChange.MessageDriverEnter
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageVehicleOccupantChange_MessageDriverEnter : public UClass_Object_Message_MessageVehicleOccupantChange
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageVehicleOccupantChange.MessageDriverEnter");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName_construct_NameName(const struct FName& _vehicle, const struct FName& _occupant);
};


// Class Object.Message.MessageVehicleOccupantChange.MessageGunnerEnter
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageVehicleOccupantChange_MessageGunnerEnter : public UClass_Object_Message_MessageVehicleOccupantChange
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageVehicleOccupantChange.MessageGunnerEnter");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName_construct_NameName(const struct FName& _vehicle, const struct FName& _occupant);
};


// Class Object.Actor.UseableObject.VehicleEntry
// 0x0020 (0x0440 - 0x0420)
class AClass_Object_Actor_UseableObject_VehicleEntry : public AClass_Object_Actor_UseableObject
{
public:
	float                                              EntryTriggerDelay;                                        // 0x0420(0x0004)
	float                                              TriggerTime;                                              // 0x0424(0x0004)
	TEnumAsByte<EVehiclePositionType>                  primaryPosition;                                          // 0x0428(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0429(0x0003) MISSED OFFSET
	int                                                primaryPositionIndex;                                     // 0x042C(0x0004)
	TArray<TEnumAsByte<EVehiclePositionType>>          secondaryPositions;                                       // 0x0430(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       ownerVehicle;                                             // 0x043C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.VehicleEntry");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_GetPromptDataClass_GetPromptDataClass();
	unsigned char Function_GetPromptIndex_GetPromptIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PotentialUser);
	struct FString STATIC_Function_GetPrompt_GetPrompt(unsigned char PromptIndex, class UClass_Object_Field_Struct_State_Class* dataClass);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	TEnumAsByte<EVehiclePositionType> Function_getPrimaryPosition();
	void Function_initialiseVehicleEntry(TEnumAsByte<EVehiclePositionType> _primaryPosition, class AClass_Object_Actor_Pawn_Rook_Vehicle* _ownerVehicle);
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* Function_getCorrespondingInventoryStation_getCorrespondingInventoryStation();
};


// Class Object.Actor.UseableObject.VehicleFlipTrigger
// 0x0008 (0x0428 - 0x0420)
class AClass_Object_Actor_UseableObject_VehicleFlipTrigger : public AClass_Object_Actor_UseableObject
{
public:
	unsigned char                                      PromptIndex;                                              // 0x0420(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       ownerVehicle;                                             // 0x0424(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.VehicleFlipTrigger");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_GetPromptDataClass_GetPromptDataClass();
	unsigned char Function_GetPromptIndex_GetPromptIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PotentialUser);
	struct FString STATIC_Function_GetPrompt_GetPrompt(unsigned char PromptIndex, class UClass_Object_Field_Struct_State_Class* dataClass);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
};


// Class Object.Actor.Explosion
// 0x0074 (0x0474 - 0x0400)
class AClass_Object_Actor_Explosion : public AClass_Object_Actor
{
public:
	float                                              RadialForce;                                              // 0x0400(0x0004) (Edit, NoClear)
	float                                              LiftForce;                                                // 0x0404(0x0004) (Edit, NoClear)
	float                                              ChaoticForce;                                             // 0x0408(0x0004) (Edit, NoClear)
	float                                              StartRadialVelocity;                                      // 0x040C(0x0004) (Edit, NoClear)
	float                                              RadialAcceleration;                                       // 0x0410(0x0004) (Edit, NoClear)
	float                                              RadialAccelerationChange;                                 // 0x0414(0x0004) (Edit, NoClear)
	unsigned long                                      AllowDownforce : 1;                                       // 0x0418(0x0004) (Edit, NoClear)
	unsigned long                                      AllowForceRepeat : 1;                                     // 0x0418(0x0004) (Edit, NoClear)
	float                                              startRadius;                                              // 0x041C(0x0004) (Edit, NoClear)
	float                                              EndRadius;                                                // 0x0420(0x0004) (Edit, NoClear)
	float                                              FalloffStartRadius;                                       // 0x0424(0x0004) (Edit, NoClear)
	float                                              LingerTime;                                               // 0x0428(0x0004) (Edit, NoClear)
	float                                              MaxDamage;                                                // 0x042C(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      damageTypeClass;                                          // 0x0430(0x0004) (Edit, NoClear)
	float                                              shaketime;                                                // 0x0434(0x0004) (Edit, NoClear)
	float                                              ShakeMagnitude;                                           // 0x0438(0x0004) (Edit, NoClear)
	float                                              ShakeRadius;                                              // 0x043C(0x0004) (Edit, NoClear)
	struct FName                                       effect;                                                   // 0x0440(0x0004) (Edit, NoClear)
	TArray<struct FName>                               UnaffectedActorTypes;                                     // 0x0444(0x000C) (Edit, NeedCtorLink, NoClear)
	unsigned long                                      DestroyOnFinish : 1;                                      // 0x0450(0x0004) (Edit, NoClear)
	unsigned long                                      ShowVisualisation : 1;                                    // 0x0450(0x0004) (Edit, NoClear)
	float                                              Radius;                                                   // 0x0454(0x0004)
	float                                              RadialVelocity;                                           // 0x0458(0x0004)
	float                                              LingerCounter;                                            // 0x045C(0x0004)
	TArray<class AClass_Object_Actor*>                 Affected;                                                 // 0x0460(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn*                    StoredEventInstigator;                                    // 0x046C(0x0004)
	class AClass_Object_Actor_ExplosionVisualisation*  vis;                                                      // 0x0470(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion");
		return ptr;
	}


	bool Function_IsAffected(class AClass_Object_Actor* Object);
	void Function_DoExplosion();
	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.StatData
// 0x000C (0x0034 - 0x0028)
class UClass_Object_StatData : public UClass_Object
{
public:
	class UClass_Object_Field_Struct_State_Class*      statClass;                                                // 0x0028(0x0004)
	int                                                Amount;                                                   // 0x002C(0x0004)
	float                                              lastAwardTimestamp;                                       // 0x0030(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.StatData");
		return ptr;
	}


	void Function_decrement();
	void Function_increment();
};


// Class Object.stat
// 0x0044 (0x006C - 0x0028)
class UClass_Object_stat : public UClass_Object
{
public:
	int                                                offensePointsPerStat;                                     // 0x0028(0x0004) (Edit, NoClear)
	int                                                defensePointsPerStat;                                     // 0x002C(0x0004) (Edit, NoClear)
	int                                                stylePointsPerStat;                                       // 0x0030(0x0004) (Edit, NoClear)
	int                                                logLevel;                                                 // 0x0034(0x0004) (Edit)
	struct FString                                     Acronym;                                                  // 0x0038(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     Description;                                              // 0x0044(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     awardDescription;                                         // 0x0050(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     personalMessage;                                          // 0x005C(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	class UClass_Object_Field_Struct_State_Class*      PersonalMessageClass;                                     // 0x0068(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.stat");
		return ptr;
	}

};


// Class Object.Actor.Info.StatTracker
// 0x0020 (0x0420 - 0x0400)
class AClass_Object_Actor_Info_StatTracker : public AClass_Object_Actor_Info
{
public:
	int                                                globalLogLevel;                                           // 0x0400(0x0004) (Edit, Config, GlobalConfig)
	TArray<class UClass_Object_stat*>                  Stats;                                                    // 0x0404(0x000C) (NeedCtorLink)
	TArray<class AClass_Object_Actor_Info_StatSerializer*> statSerializers;                                          // 0x0410(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	int                                                currentStatID;                                            // 0x041C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.StatTracker");
		return ptr;
	}


	int Function_createStatID();
	void Function_onMapEnd();
	void Function_onMapStart();
	void Function_onClientDisconnect(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_onClientConnect(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_onMessage_onMessage(class UClass_Object_Message* msg);
	void Function_addStatSerializer(class AClass_Object_Actor_Info_StatSerializer* newSerializer);
	void Function_setStat(class AClass_Object_Actor_Controller* C, class UClass_Object_Field_Struct_State_Class* S, int Value);
	void Function_incrementStatAttempt(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C, class UClass_Object_Field_Struct_State_Class* S);
	void Function_awardStat(class AClass_Object_Actor_Controller* C, class UClass_Object_Field_Struct_State_Class* S, class AClass_Object_Actor_Controller* Target, int Value);
	bool Function_statRegistered(class UClass_Object_Field_Struct_State_Class* S);
	void Function_registerStat(class UClass_Object_Field_Struct_State_Class* S);
	void Function_Initialize();
};


// Class Object.GameSpyManager.TribesGameSpyManager
// 0x00A0 (0x019C - 0x00FC)
class UClass_Object_GameSpyManager_TribesGameSpyManager : public UClass_Object_GameSpyManager
{
public:
	struct FStruct_SCreateTeamData                     CreateTeamData;                                           // 0x00FC(0x0034) (NeedCtorLink)
	unsigned long                                      bMapChange : 1;                                           // 0x0130(0x0004)
	struct FScriptDelegate                             __OnGameSpyInitialised__Delegate;                         // 0x0134(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnGameSpyPresenceInitialised__Delegate;                 // 0x013C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnServerDataUpdate__Delegate;                           // 0x0144(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnUpdateComplete__Delegate;                             // 0x014C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnEmailAlreadyTaken__Delegate;                          // 0x0154(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnProfileCreateResult__Delegate;                        // 0x015C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnProfileCheckResult__Delegate;                         // 0x0164(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnProfileAuthError__Delegate;                           // 0x016C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnTeamTagTaken__Delegate;                               // 0x0174(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnTeamRegistrationError__Delegate;                      // 0x017C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnTeamCreated__Delegate;                                // 0x0184(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFindTeamResult__Delegate;                             // 0x018C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLoginTeamResult__Delegate;                            // 0x0194(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GameSpyManager.TribesGameSpyManager");
		return ptr;
	}


	void Function_SetTeamAffiliationResult_SetTeamAffiliationResult(TEnumAsByte<ETeamAffiliationResult> Result, const struct FString& teamTag, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo* PRI);
	void Function_HTTPGetRequestResult_HTTPGetRequestResult(bool succeeded, const struct FString& ResponseData);
	void Function_OnLoginTeamResult(bool succeeded, const struct FString& ResponseData);
	void Function_LoginTeam(int profileId, int TeamID, const struct FString& TeamPassword, bool bBlock);
	void Function_FindTeamResult_FindTeamResult(int TeamID);
	void Function_OnFindTeamResult(int TeamID);
	void Function_SetDataPrivateRWResult_SetDataPrivateRWResult(int success);
	void Function_OnTeamCreated();
	void Function_UniqueNickRegistrationResult_UniqueNickRegistrationResult(TEnumAsByte<EGameSpyResult> Result);
	void Function_OnTeamRegistrationError();
	void Function_OnTeamTagTaken();
	void Function_AuthenticatedProfileResult_AuthenticatedProfileResult(int profileId, int authenticated, const struct FString& Error);
	void Function_UserConnectionResult_UserConnectionResult(TEnumAsByte<EGameSpyResult> Result, int profileId, const struct FString& UniqueNick);
	void Function_OnProfileAuthError();
	void Function_CreateTeam(const struct FString& Nick, const struct FString& Email, const struct FString& Password, const struct FString& teamTag, const struct FString& teamName, const struct FString& TeamPassword);
	struct FString Function_GetGameSpyPassword_GetGameSpyPassword();
	struct FString Function_GetGameSpyProfileId_GetGameSpyProfileId();
	void Function_OnProfileCheckResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_ProfileCheckResult_ProfileCheckResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_OnProfileCreateResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_ProfileCreateResult_ProfileCreateResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_OnEmailAlreadyTaken();
	void Function_EmailAlreadyTaken_EmailAlreadyTaken();
	int Function_GetNumTeams_GetNumTeams();
	struct FString Function_GetValueForTeamKey_GetValueForTeamKey(int Key, int Index);
	class AClass_Object_Actor_Controller_PlayerController* Function_GetPlayerControllerFromIndex(int Index);
	struct FString Function_GetValueForPlayerKey_GetValueForPlayerKey(int Key, int Index);
	struct FString Function_GetValueForKey_GetValueForKey(int Key);
	void Function_OnUpdateComplete(bool bLAN);
	void Function_UpdateComplete_UpdateComplete(bool bLAN);
	void Function_OnServerDataUpdate(const struct FStruct_GameSpyServerData& gssd);
	void Function_UpdatedServerData_UpdatedServerData(int ServerID, const struct FString& ipAddress, int Ping, bool bLAN, TArray<struct FString> serverData, TArray<struct FString> playerData, TArray<struct FString> teamData);
	void Function_OnGameSpyPresenceInitialised();
	void Function_OnGameSpyInitialised();
	void Function_GameSpyInitialised_GameSpyInitialised();
	void Function_checkKeyIds();
	void Function_InitGameSpyData_InitGameSpyData();
	void Function_OnLevelChange_OnLevelChange();
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage
// 0x000C (0x0428 - 0x041C)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage : public AClass_Object_Actor_Info_LocalMessage
{
public:
	TArray<struct FStruct_announcement>                Announcements;                                            // 0x041C(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage");
		return ptr;
	}


	void STATIC_Function_ClientReceive_ClientReceive(class AClass_Object_Actor_Controller_PlayerController* p, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_GetString_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPBaseDeviceMessages
// 0x006C (0x0494 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPBaseDeviceMessages : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage
{
public:
	struct FString                                     friendlyUnderAttack;                                      // 0x0428(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     friendlyInactive;                                         // 0x0434(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     friendlyActive;                                           // 0x0440(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     enemyUnderAttack;                                         // 0x044C(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     enemyInactive;                                            // 0x0458(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     enemyActive;                                              // 0x0464(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       globalFriendlyUnderAttackEffectEvent;                     // 0x0470(0x0004) (Edit)
	struct FName                                       globalFriendlyInactiveEffectEvent;                        // 0x0474(0x0004) (Edit)
	struct FName                                       globalFriendlyActiveEffectEvent;                          // 0x0478(0x0004) (Edit)
	struct FName                                       globalEnemyInactiveEffectEvent;                           // 0x047C(0x0004) (Edit)
	struct FName                                       globalEnemyActiveEffectEvent;                             // 0x0480(0x0004) (Edit)
	struct FName                                       globalEnemyUnderAttackEffectEvent;                        // 0x0484(0x0004) (Edit)
	float                                              timeBetweenUnderAttackMessages;                           // 0x0488(0x0004) (Edit)
	float                                              timeBetweenOfflineMessages;                               // 0x048C(0x0004) (Edit)
	float                                              timeBetweenOnlineMessages;                                // 0x0490(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPBaseDeviceMessages");
		return ptr;
	}

};


// Class Object.Message.MessageBaseDeviceEnabled
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageBaseDeviceEnabled : public UClass_Object_Message
{
public:
	struct FName                                       BaseDevice;                                               // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageBaseDeviceEnabled");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _baseDevice);
};


// Class Object.Message.MessageBaseDeviceDisabled
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageBaseDeviceDisabled : public UClass_Object_Message
{
public:
	struct FName                                       BaseDevice;                                               // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageBaseDeviceDisabled");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _baseDevice);
};


// Class Object.Message.MessageBaseDevicePowerOn
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageBaseDevicePowerOn : public UClass_Object_Message
{
public:
	struct FName                                       BaseDevice;                                               // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageBaseDevicePowerOn");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _baseDevice);
};


// Class Object.Message.MessageBaseDevicePowerOff
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageBaseDevicePowerOff : public UClass_Object_Message
{
public:
	struct FName                                       BaseDevice;                                               // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageBaseDevicePowerOff");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _baseDevice);
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPEventMessage
// 0x0000 (0x0428 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPEventMessage : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPEventMessage");
		return ptr;
	}


	class UClass_Object_Material* STATIC_Function_GetIconMaterial(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_GetStringTwo(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
	struct FString STATIC_Function_GetStringOne(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
	void STATIC_Function_SetMessageTypeByTeam(class AClass_Object_Actor* Other, TEnumAsByte<EMessageType>* messagetype);
	void STATIC_Function_ClientReceive_ClientReceive_ClientReceive(class AClass_Object_Actor_Controller_PlayerController* p, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPEventMessage.MPSecondaryMessage
// 0x000C (0x0434 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPEventMessage_MPSecondaryMessage : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPEventMessage
{
public:
	TArray<struct FStruct_msg>                         secondaryMessages;                                        // 0x0428(0x000C) (Edit, Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPEventMessage.MPSecondaryMessage");
		return ptr;
	}


	class UClass_Object_Material* STATIC_Function_GetIconMaterial_GetIconMaterial(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_GetStringTwo_GetStringTwo(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
	struct FString STATIC_Function_GetStringOne_GetStringOne(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
};


// Class Object.Actor.Info.LatticeInfo
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_Info_LatticeInfo : public AClass_Object_Actor_Info
{
public:
	TArray<struct FStruct_MPActorLink>                 lattice;                                                  // 0x0400(0x000C) (Edit, NeedCtorLink, NoClear)
	unsigned long                                      bInitializeByOwnership : 1;                               // 0x040C(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LatticeInfo");
		return ptr;
	}


	struct FString Function_displayActorLabel(class AClass_Object_Actor* t);
	void Function_enumMPActor(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Pawn_Rook_MPActor*>* S);
	void Function_enumTeamInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_TeamInfo*>* S);
	void Function_makeNeighboursUnavailable(class AClass_Object_Actor_Pawn_Rook_MPActor* A, class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_makeNeighboursAvailable(class AClass_Object_Actor_Pawn_Rook_MPActor* A, class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_revokeAccess(const struct FStruct_MPActorLink& link, class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_grantAccess(const struct FStruct_MPActorLink& link, class AClass_Object_Actor_Info_TeamInfo* t);
	bool Function_isAccessible(class AClass_Object_Actor_Pawn_Rook_MPActor* A, class AClass_Object_Actor_Info_TeamInfo* t);
	void Function_initializeByOwnership();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.ObjectiveInfo
// 0x0140 (0x0540 - 0x0400)
class AClass_Object_Actor_Info_ObjectiveInfo : public AClass_Object_Actor_Info
{
public:
	struct FName                                       Description;                                              // 0x0400(0x0004) (Net)
	struct FString                                     intDescription;                                           // 0x0404(0x000C) (Net, NeedCtorLink)
	TEnumAsByte<EObjectiveStatus>                      status;                                                   // 0x0410(0x0001) (Net)
	unsigned char                                      State;                                                    // 0x0411(0x0001) (Net)
	TEnumAsByte<EObjectiveType>                        Type;                                                     // 0x0412(0x0001) (Net)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0413(0x0001) MISSED OFFSET
	class UClass_Object_Field_Struct_State_Class*      radarInfoClass;                                           // 0x0414(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      TeamInfoClass;                                            // 0x0418(0x0004) (Net)
	class AClass_Object_Actor_Info_ObjectiveInfo*      Next;                                                     // 0x041C(0x0004) (Net)
	unsigned long                                      bShouldFlash : 1;                                         // 0x0420(0x0004)
	unsigned long                                      bIsTallied : 1;                                           // 0x0420(0x0004)
	int                                                TallyMax;                                                 // 0x0424(0x0004) (Net)
	int                                                TallyCurrent;                                             // 0x0428(0x0004) (Net)
	int                                                numObjectiveActors;                                       // 0x042C(0x0004) (Net)
	TArray<class AClass_Object_Actor*>                 ObjectiveActors;                                          // 0x0430(0x000C) (NeedCtorLink)
	float                                              creationTime;                                             // 0x043C(0x0004)
	struct FStruct_Vector                              pos[0xA];                                                 // 0x0440(0x000C) (Net)
	TEnumAsByte<EAllyType>                             allyType[0xA];                                            // 0x04B8(0x0001) (Net)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04C2(0x0002) MISSED OFFSET
	class UClass_Object_Field_Struct_State_Class*      TeamInfoClasses[0xA];                                     // 0x04C4(0x0004) (Net)
	TArray<float>                                      actorRemoveTime;                                          // 0x04EC(0x000C) (NeedCtorLink)
	TArray<TEnumAsByte<EStateType>>                    actorStateOverride;                                       // 0x04F8(0x000C) (NeedCtorLink)
	struct FString                                     Status_Active;                                            // 0x0504(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Status_Completed;                                         // 0x0510(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Status_Failed;                                            // 0x051C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Type_Primary;                                             // 0x0528(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Type_Secondary;                                           // 0x0534(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ObjectiveInfo");
		return ptr;
	}


	void Function_updateObjectiveActors(class AClass_Object_Actor_Info_TeamInfo* Team);
	void Function_removeActor(class AClass_Object_Actor* A);
	void Function_setStatus(TEnumAsByte<EObjectiveStatus> newStatus);
	void Function_UpdateTally(int Current, int Max);
	struct FString Function_getDescription();
	void Function_Initialise();
	struct FString STATIC_Function_typeText(TEnumAsByte<EObjectiveType> Type);
	struct FString STATIC_Function_statusText(TEnumAsByte<EObjectiveStatus> status);
};


// Class Object.DeleteableObject.ObjectiveActors
// 0x000C (0x0040 - 0x0034)
class UClass_Object_DeleteableObject_ObjectiveActors : public UClass_Object_DeleteableObject
{
public:
	TArray<class AClass_Object_Actor*>                 ObjectiveActors;                                          // 0x0034(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.ObjectiveActors");
		return ptr;
	}

};


// Class Object.Message.MessageTeamScored
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageTeamScored : public UClass_Object_Message
{
public:
	class AClass_Object_Actor_Info_TeamInfo*           Team;                                                     // 0x002C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageTeamScored");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_TeamInfo(class AClass_Object_Actor_Info_TeamInfo* _team);
};


// Class Object.Message.MessageCarryableReturned
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageCarryableReturned : public UClass_Object_Message
{
public:
	struct FName                                       carryable;                                                // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageCarryableReturned");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _carryable);
};


// Class Object.Message.MessagePickedUpGameObject
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessagePickedUpGameObject : public UClass_Object_Message
{
public:
	struct FName                                       Object;                                                   // 0x002C(0x0004)
	struct FName                                       carrier;                                                  // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePickedUpGameObject");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _object, const struct FName& _carrier);
};


// Class Object.Message.MessageDroppedGameObject
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessageDroppedGameObject : public UClass_Object_Message
{
public:
	struct FName                                       Object;                                                   // 0x002C(0x0004)
	struct FName                                       dropper;                                                  // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageDroppedGameObject");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _object, const struct FName& _dropper);
};


// Class Object.Actor.Timer
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_Timer : public AClass_Object_Actor
{
public:
	float                                              InitialTime;                                              // 0x0400(0x0004)
	unsigned long                                      Looping : 1;                                              // 0x0404(0x0004)
	unsigned long                                      Running : 1;                                              // 0x0404(0x0004)
	struct FScriptDelegate                             __TimerDelegate__Delegate;                                // 0x0408(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Timer");
		return ptr;
	}


	void Function_TimerDelegate();
	void Function_TimerHook();
	void Function_Timer_Timer();
	void Function_StopTimer();
	void Function_StartTimerHook(float newTime, bool Loop, bool Reset);
	void Function_StartTimer(float newTime, bool Loop, bool Reset);
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPCarryableMessages
// 0x0030 (0x0458 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPCarryableMessages : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage
{
public:
	struct FString                                     EnergyBarrierCollision;                                   // 0x0428(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     cantGrappleAtHome;                                        // 0x0434(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     cantGrappleInField;                                       // 0x0440(0x000C) (Edit, Localized, NeedCtorLink)
	struct FName                                       collidedWithEnergyBarrierEffectEvent;                     // 0x044C(0x0004) (Edit)
	struct FName                                       cantGrappleAtHomeEffectEvent;                             // 0x0450(0x0004) (Edit)
	struct FName                                       cantGrappleInFieldEffectEvent;                            // 0x0454(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPCarryableMessages");
		return ptr;
	}


	void STATIC_Function_ClientReceive_ClientReceive_ClientReceive(class AClass_Object_Actor_Controller_PlayerController* p, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_GetString_GetString_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.PlayerCharacter.SinglePlayerCharacter
// 0x0010 (0x0BDC - 0x0BCC)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter_SinglePlayerCharacter : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_PlayerCharacter
{
public:
	class UClass_Object_Field_Struct_State_Class*      jetpackClass;                                             // 0x0BCC(0x0004) (Edit)
	class UClass_Object_Primitive_Mesh*                armsMesh;                                                 // 0x0BD0(0x0004) (Edit)
	float                                              healthModifier;                                           // 0x0BD4(0x0004) (Edit)
	float                                              loadoutAmmoMultiplier;                                    // 0x0BD8(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.PlayerCharacter.SinglePlayerCharacter");
		return ptr;
	}


	int Function_getModifiedAmmo_getModifiedAmmo(int baseAmmo);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_giveJetpack(class UClass_Object_Field_Struct_State_Class* jpClass);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Message.MessagePlayerStartDelayed
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessagePlayerStartDelayed : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePlayerStartDelayed");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessagePlayerStart
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessagePlayerStart : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePlayerStart");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageClientDisconnected
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageClientDisconnected : public UClass_Object_Message
{
public:
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* Client;                                                   // 0x002C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageClientDisconnected");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_PlayerCharacterController(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* _c);
};


// Class Object.Message.MessageClientConnected
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageClientConnected : public UClass_Object_Message
{
public:
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* Client;                                                   // 0x002C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageClientConnected");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_PlayerCharacterController(class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* _c);
};


// Class Object.Actor.Info.PlayerStart.PlayerStart.SinglePlayerStart
// 0x0010 (0x0430 - 0x0420)
class AClass_Object_Actor_Info_PlayerStart_PlayerStart_SinglePlayerStart : public AClass_Object_Actor_Info_PlayerStart_PlayerStart
{
public:
	struct FString                                     PlayerControllerClassName;                                // 0x0420(0x000C) (Edit, NeedCtorLink)
	class UClass_Object_Field_Struct_State_Class*      PawnClass;                                                // 0x042C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.PlayerStart.PlayerStart.SinglePlayerStart");
		return ptr;
	}


	struct FString Function_defaultPawnClassName_defaultPawnClassName();
};


// Class Object.Message.MessageGameLoaded
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageGameLoaded : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageGameLoaded");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageLevelStart
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageLevelStart : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageLevelStart");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Actor.UseableObject.TurretEntry
// 0x0020 (0x0440 - 0x0420)
class AClass_Object_Actor_UseableObject_TurretEntry : public AClass_Object_Actor_UseableObject
{
public:
	struct FString                                     promptArmor;                                              // 0x0420(0x000C) (Localized, NeedCtorLink)
	struct FString                                     promptHostile;                                            // 0x042C(0x000C) (Localized, NeedCtorLink)
	float                                              EntryTriggerDelay;                                        // 0x0438(0x0004)
	float                                              TriggerTime;                                              // 0x043C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.TurretEntry");
		return ptr;
	}


	unsigned char Function_GetPromptIndex_GetPromptIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PotentialUser);
	struct FString STATIC_Function_GetPrompt_GetPrompt(unsigned char PromptIndex, class UClass_Object_Field_Struct_State_Class* dataClass);
	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.RoundData
// 0x0034 (0x005C - 0x0028)
class UClass_Object_RoundData : public UClass_Object
{
public:
	float                                              duration;                                                 // 0x0028(0x0004) (Edit, NoClear)
	float                                              countdownDuration;                                        // 0x002C(0x0004) (Edit, NoClear)
	int                                                ScoreLimit;                                               // 0x0030(0x0004) (Edit, NoClear)
	int                                                MaxLives;                                                 // 0x0034(0x0004) (Edit, NoClear)
	unsigned long                                      bAllowNewPlayers : 1;                                     // 0x0038(0x0004) (Edit, NoClear)
	unsigned long                                      bKeepEquipmentDuringRound : 1;                            // 0x0038(0x0004) (Edit, NoClear)
	unsigned long                                      bKeepEquipmentAfterRound : 1;                             // 0x0038(0x0004) (Edit, NoClear)
	unsigned long                                      bAllowEquipOnRespawn : 1;                                 // 0x0038(0x0004) (Edit, NoClear)
	float                                              respawnDelay;                                             // 0x003C(0x0004) (Edit, NoClear)
	float                                              respawnWaveInterval;                                      // 0x0040(0x0004) (Edit, NoClear)
	int                                                roundWinPoints;                                           // 0x0044(0x0004) (Edit, NoClear)
	float                                              overtimeDuration;                                         // 0x0048(0x0004) (Edit, NoClear)
	float                                              StartTime;                                                // 0x004C(0x0004)
	float                                              playStartTime;                                            // 0x0050(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           winningTeam;                                              // 0x0054(0x0004)
	float                                              currentWaveTime;                                          // 0x0058(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RoundData");
		return ptr;
	}


	void Function_advanceWaveTime(float Delta);
	void Function_cleanup();
	float Function_getRespawnDelay();
	void Function_setWinningTeam(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class AClass_Object_Actor_Info_TeamInfo* winningTeam);
	bool Function_shouldEndAfterDeathOf(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* C);
	bool Function_shouldEndAfterTeamScored(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, class AClass_Object_Actor_Info_TeamInfo* t);
	bool Function_isFinished(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level);
	float Function_TimeLeft(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level);
	bool Function_isCountdown(float levelTime);
	void Function_End();
	void Function_Start(float levelTime);
};


// Class Object.Message.MessageRoundStart
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageRoundStart : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageRoundStart");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageRoundEnd
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageRoundEnd : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageRoundEnd");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageRoundWarmup
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageRoundWarmup : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageRoundWarmup");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Actor.Info.PlayerStart.PlayerStart.MultiplayerStart
// 0x0008 (0x0428 - 0x0420)
class AClass_Object_Actor_Info_PlayerStart_PlayerStart_MultiplayerStart : public AClass_Object_Actor_Info_PlayerStart_PlayerStart
{
public:
	class UClass_Object_Field_Struct_State_Class*      CombatRole;                                               // 0x0420(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      loadoutOverride;                                          // 0x0424(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.PlayerStart.PlayerStart.MultiplayerStart");
		return ptr;
	}


	struct FString Function_defaultPawnClassName_defaultPawnClassName();
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPGameAnnouncerMessages
// 0x0000 (0x0428 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPGameAnnouncerMessages : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPGameAnnouncerMessages");
		return ptr;
	}

};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPEventMessage.MPDeathMessages
// 0x0018 (0x0440 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPEventMessage_MPDeathMessages : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPEventMessage
{
public:
	struct FString                                     HimselfText;                                              // 0x0428(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HerselfText;                                              // 0x0434(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPEventMessage.MPDeathMessages");
		return ptr;
	}


	class UClass_Object_Material* STATIC_Function_GetIconMaterial_GetIconMaterial(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
	struct FString STATIC_Function_GetStringTwo_GetStringTwo(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
	struct FString STATIC_Function_GetStringOne_GetStringOne(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
};


// Class Object.Actor.Info.LocalMessage.GameMessage.TribesGameMessage
// 0x0048 (0x0524 - 0x04DC)
class AClass_Object_Actor_Info_LocalMessage_GameMessage_TribesGameMessage : public AClass_Object_Actor_Info_LocalMessage_GameMessage
{
public:
	struct FString                                     ReadyMessage;                                             // 0x04DC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NotReadyMessage;                                          // 0x04E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     AwaitingSingleReadyMessage;                               // 0x04F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     AwaitingDoubleReadyMessage;                               // 0x0500(0x000C) (Localized, NeedCtorLink)
	struct FString                                     AwaitingTripleReadyMessage;                               // 0x050C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     UnbalancedMessage;                                        // 0x0518(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.GameMessage.TribesGameMessage");
		return ptr;
	}


	struct FString STATIC_Function_GetString_GetString_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
};


// Class Object.stat.ExtendedStat
// 0x001C (0x0088 - 0x006C)
class UClass_Object_stat_ExtendedStat : public UClass_Object_stat
{
public:
	int                                                minTargetAltitude;                                        // 0x006C(0x0004) (Edit)
	float                                              minTargetSpeed;                                           // 0x0070(0x0004) (Edit)
	float                                              maxTargetSpeed;                                           // 0x0074(0x0004) (Edit)
	int                                                minDistance;                                              // 0x0078(0x0004) (Edit)
	int                                                MaxDistance;                                              // 0x007C(0x0004) (Edit)
	float                                              minDamage;                                                // 0x0080(0x0004) (Edit)
	unsigned long                                      bAllowTargetInVehicleOrTurret : 1;                        // 0x0084(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.stat.ExtendedStat");
		return ptr;
	}


	bool STATIC_Function_isEligible(class AClass_Object_Actor_Controller* Source, class AClass_Object_Actor_Controller* Target, float DamageAmount);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.PowerGenerator
// 0x0000 (0x0908 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_PowerGenerator : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.PowerGenerator");
		return ptr;
	}

};


// Class Object.EquippableAnimator.CharacterEquippableAnimator
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_EquippableAnimator_CharacterEquippableAnimator : public UClass_Object_EquippableAnimator
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EquippableAnimator.CharacterEquippableAnimator");
		return ptr;
	}


	void STATIC_Function_setLocRot_setLocRot(class AClass_Object_Actor_Equipment_Equippable* E, const struct FStruct_Vector& NewLocation, const struct FStruct_Rotator& NewRotation);
	void STATIC_Function_firstPersonStatus_firstPersonStatus(class AClass_Object_Actor_Equipment_Equippable* E, bool bStatus);
	void STATIC_Function_playEquippableAnim_playEquippableAnim(class AClass_Object_Actor_Equipment_Equippable* E, const struct FName& animName, float Rate, float TweenTime, int Channel);
	bool STATIC_Function_hasEquippableAnim_hasEquippableAnim(class AClass_Object_Actor_Equipment_Equippable* E, const struct FName& animName);
	bool STATIC_Function_IsAnimating_IsAnimating(class AClass_Object_Actor_Equipment_Equippable* E);
};


// Class Object.Actor.Projectile.BucklerProjectile
// 0x0068 (0x04B4 - 0x044C)
class AClass_Object_Actor_Projectile_BucklerProjectile : public AClass_Object_Actor_Projectile
{
public:
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* firer;                                                    // 0x044C(0x0004)
	class AClass_Object_Actor_Equipment_Equippable_Weapon_Buckler* Buckler;                                                  // 0x0450(0x0004)
	struct FStruct_Vector                              XAxis;                                                    // 0x0454(0x000C)
	struct FStruct_Vector                              YAxis;                                                    // 0x0460(0x000C)
	struct FStruct_Vector                              ZAxis;                                                    // 0x046C(0x000C)
	float                                              velocitySize;                                             // 0x0478(0x0004) (Net)
	unsigned long                                      bReturning : 1;                                           // 0x047C(0x0004)
	float                                              returnTime;                                               // 0x0480(0x0004) (Edit, NoClear)
	unsigned long                                      bPlayingClosed : 1;                                       // 0x0484(0x0004) (Edit)
	float                                              closeRadius;                                              // 0x0488(0x0004) (Edit, NoClear)
	float                                              xAxisLength;                                              // 0x048C(0x0004)
	struct FStruct_Vector                              Target;                                                   // 0x0490(0x000C) (Net)
	struct FStruct_Vector                              previousTarget;                                           // 0x049C(0x000C)
	TArray<class AClass_Object_Actor*>                 HitActors;                                                // 0x04A8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.BucklerProjectile");
		return ptr;
	}


	void Function_adjustXAxisLengthForBounce();
	void Function_controlProjectile(float Delta);
	void Function_returnBuckler();
	void Function_endLife_endLife(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_lost();
	class AClass_Object_Actor_Projectile* Function_bounce_bounce(const struct FStruct_Vector& HitNormal, const struct FStruct_Vector& HitLocation, const struct FStruct_Vector& TargetVelocity);
	void Function_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	bool Function_hasHit(class AClass_Object_Actor* A);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay();
	void Function_Destroyed_Destroyed();
};


// Class Object.AimFunctions.AimProjectileWeapons
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_AimFunctions_AimProjectileWeapons : public UClass_Object_AimFunctions
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AimFunctions.AimProjectileWeapons");
		return ptr;
	}


	class AClass_Object_Actor* STATIC_Function_getThingHit_getThingHit(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, const struct FStruct_Vector& projVelocity, struct FStruct_Vector* HitLocation, float* timeToHit);
	struct FStruct_Vector STATIC_Function_getAimLocation_getAimLocation(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor_Pawn* Target, float leadScale);
};


// Class Object.Actor.Info.LocalMessage.MPAreaMessages
// 0x0018 (0x0434 - 0x041C)
class AClass_Object_Actor_Info_LocalMessage_MPAreaMessages : public AClass_Object_Actor_Info_LocalMessage
{
public:
	struct FString                                     selfEnter;                                                // 0x041C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     selfExit;                                                 // 0x0428(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.MPAreaMessages");
		return ptr;
	}


	struct FString STATIC_Function_GetString_GetString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString);
};


// Class Object.IMPAreaTriggerable
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IMPAreaTriggerable : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IMPAreaTriggerable");
		return ptr;
	}


	void Function_OnAreaTick();
	void Function_OnAreaExited(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_OnAreaEntered(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* C);
	void Function_OnAreaExitedByActor(class AClass_Object_Actor* A);
	void Function_OnAreaEnteredByActor(class AClass_Object_Actor* A);
};


// Class Object.Message.MessageContainerEmpty
// 0x000C (0x0038 - 0x002C)
class UClass_Object_Message_MessageContainerEmpty : public UClass_Object_Message
{
public:
	struct FName                                       container;                                                // 0x002C(0x0004)
	struct FName                                       Team;                                                     // 0x0030(0x0004) (Edit)
	int                                                Amount;                                                   // 0x0034(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageContainerEmpty");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _container, const struct FName& _team);
};


// Class Object.Message.MessageContainerDeposit
// 0x0010 (0x003C - 0x002C)
class UClass_Object_Message_MessageContainerDeposit : public UClass_Object_Message
{
public:
	struct FName                                       container;                                                // 0x002C(0x0004)
	struct FName                                       depositer;                                                // 0x0030(0x0004) (Edit)
	struct FName                                       Team;                                                     // 0x0034(0x0004) (Edit)
	int                                                Amount;                                                   // 0x0038(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageContainerDeposit");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameNameNameInt(const struct FName& _container, const struct FName& _depositer, const struct FName& _team, int _amount);
};


// Class Object.Message.MessageContainerFull
// 0x000C (0x0038 - 0x002C)
class UClass_Object_Message_MessageContainerFull : public UClass_Object_Message
{
public:
	struct FName                                       container;                                                // 0x002C(0x0004)
	struct FName                                       Team;                                                     // 0x0030(0x0004) (Edit)
	int                                                Amount;                                                   // 0x0034(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageContainerFull");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _container, const struct FName& _team);
};


// Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPContainerMessages
// 0x0000 (0x0428 - 0x0428)
class AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage_MPContainerMessages : public AClass_Object_Actor_Info_LocalMessage_TribesLocalMessage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.TribesLocalMessage.MPContainerMessages");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile
// 0x001C (0x0468 - 0x044C)
class AClass_Object_Actor_Projectile_ExplosiveProjectile : public AClass_Object_Actor_Projectile
{
public:
	unsigned long                                      bEndedLife : 1;                                           // 0x044C(0x0004)
	float                                              radiusDamageAmt;                                          // 0x0450(0x0004) (Edit)
	float                                              radiusDamageSize;                                         // 0x0454(0x0004) (Edit)
	float                                              radiusDamageMomentum;                                     // 0x0458(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      ExplosionClass;                                           // 0x045C(0x0004) (Edit)
	unsigned long                                      orientDecalToVelocity : 1;                                // 0x0460(0x0004) (Edit)
	TEnumAsByte<EDrawType>                             storedDrawType;                                           // 0x0464(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0465(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile");
		return ptr;
	}


	void Function_makeHarmless_makeHarmless();
	void Function_endLife_endLife(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_triggerHitEffect_triggerHitEffect(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal, const struct FName& HitEffect);
	void Function_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_PostBounce_PostBounce(class AClass_Object_Actor_Projectile* newProjectile);
	void Function_Destroyed_Destroyed();
	bool Function_ShouldHit_ShouldHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	void Function_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile
// 0x0018 (0x0480 - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile
{
public:
	unsigned long                                      bReadyToExplode : 1;                                      // 0x0468(0x0004)
	float                                              FuseTimer;                                                // 0x046C(0x0004) (Edit)
	float                                              BounceVelocityModifier;                                   // 0x0470(0x0004) (Edit)
	float                                              noBounceVelocityThreshold;                                // 0x0474(0x0004) (Edit)
	unsigned long                                      bExplodeInAir : 1;                                        // 0x0478(0x0004) (Edit)
	unsigned long                                      bShouldBounce : 1;                                        // 0x0478(0x0004)
	int                                                lastCatapultHitTick;                                      // 0x047C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile");
		return ptr;
	}


	void Function_HitWall_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	void Function_ProjectileHit_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	struct FStruct_Vector Function_CalcBounceVelocity(const struct FStruct_Vector& HitNormal);
	bool Function_projectileTouchProcessing_projectileTouchProcessing(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	bool Function_ShouldHit_ShouldHit_ShouldHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	void Function_Timer_Timer();
	void Function_Tick_Tick_Tick(float Delta);
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
	void Function_construct_RookActorNameVectorRotator_construct_RookActorNameVectorRotator(class AClass_Object_Actor_Pawn_Rook* attacker, class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.HandGrenadeProjectile
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_HandGrenadeProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.HandGrenadeProjectile");
		return ptr;
	}

};


// Class Object.AimFunctions.AimArcWeapons
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_AimFunctions_AimArcWeapons : public UClass_Object_AimFunctions
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AimFunctions.AimArcWeapons");
		return ptr;
	}


	struct FStruct_Vector STATIC_Function_ballisticPosition(const struct FStruct_Vector& Location, const struct FStruct_Vector& Velocity, float t, float Gravity);
	bool STATIC_Function_bEndAngleAdjustment(float Distance, float actualDistance, float angleInc, float multiplicator);
	float STATIC_Function_getTimeToHit(float initialZ, float velZ, float G, float Z, bool secondSolution);
	class AClass_Object_Actor* STATIC_Function_getThingHit_getThingHit(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, const struct FStruct_Vector& projVelocity, struct FStruct_Vector* HitLocation, float* timeToHit);
	struct FStruct_Vector STATIC_Function_getAimLocation_getAimLocation(class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor_Pawn* Target, float leadScale);
};


// Class Object.Message.MessageDestroyed
// 0x000C (0x0038 - 0x002C)
class UClass_Object_Message_MessageDestroyed : public UClass_Object_Message
{
public:
	struct FName                                       Killer;                                                   // 0x002C(0x0004) (Edit)
	struct FName                                       squad;                                                    // 0x0030(0x0004) (Edit)
	struct FName                                       victim;                                                   // 0x0034(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageDestroyed");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _killer, const struct FName& _victim);
};


// Class Object.Message.MessageTrigger
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessageTrigger : public UClass_Object_Message
{
public:
	struct FName                                       Trigger;                                                  // 0x002C(0x0004)
	struct FName                                       Instigator;                                               // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageTrigger");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _trigger, const struct FName& _instigator);
};


// Class Object.Message.MessageTrigger.MessageTriggerExit
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageTrigger_MessageTriggerExit : public UClass_Object_Message_MessageTrigger
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageTrigger.MessageTriggerExit");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageTrigger.MessageTriggerEnter
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_Message_MessageTrigger_MessageTriggerEnter : public UClass_Object_Message_MessageTrigger
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageTrigger.MessageTriggerEnter");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Actor.SphereVisActor
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_SphereVisActor : public AClass_Object_Actor
{
public:
	float                                              Radius;                                                   // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SphereVisActor");
		return ptr;
	}


	void Function_SetSphereCenter(const struct FStruct_Vector& NewLocation);
};


// Class Object.Actor.Projectile.ExplosiveProjectile.SpinfusorProjectile
// 0x0000 (0x0468 - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_SpinfusorProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.SpinfusorProjectile");
		return ptr;
	}

};


// Class Object.Action.WatcherBase
// 0x0008 (0x006C - 0x0064)
class UClass_Object_Action_WatcherBase : public UClass_Object_Action
{
public:
	struct FName                                       watcherName;                                              // 0x0064(0x0004) (Edit, AlwaysInit)
	unsigned long                                      Enabled : 1;                                              // 0x0068(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.WatcherBase");
		return ptr;
	}

};


// Class Object.Message.MessageTimerExpired
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageTimerExpired : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageTimerExpired");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Actor.Info.LocalMessage.MPPersonalMessage
// 0x0000 (0x041C - 0x041C)
class AClass_Object_Actor_Info_LocalMessage_MPPersonalMessage : public AClass_Object_Actor_Info_LocalMessage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.LocalMessage.MPPersonalMessage");
		return ptr;
	}


	struct FString STATIC_Function_GetPersonalString(int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& OptionalString, TEnumAsByte<EMessageType>* messagetype);
};


// Class Object.Actor.Info.StatSerializer
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_Info_StatSerializer : public AClass_Object_Actor_Info
{
public:
	int                                                currentLogLevel;                                          // 0x0400(0x0004) (Edit)
	int                                                serializationFrequency;                                   // 0x0404(0x0004) (Edit)
	unsigned long                                      bSerializeOnMapEnd : 1;                                   // 0x0408(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.StatSerializer");
		return ptr;
	}


	void Function_registerStat(class UClass_Object_stat* S);
	void Function_Timer_Timer();
	void Function_Shutdown();
	void Function_Initialize();
	void Function_onMapEnd();
	void Function_onMapStart();
	void Function_onClientDisconnect(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_onClientConnect(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_setLogLevel(int i);
	bool Function_shouldSerialize(class UClass_Object_stat* S);
	void Function_serializeStat(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI, class UClass_Object_StatData* sd);
	void Function_serializeSnapshot();
};


// Class Object.Message.MessageGameEnd
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageGameEnd : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageGameEnd");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Actor.Info.StatSerializer.GameSpyStatSerializer
// 0x0004 (0x0410 - 0x040C)
class AClass_Object_Actor_Info_StatSerializer_GameSpyStatSerializer : public AClass_Object_Actor_Info_StatSerializer
{
public:
	int                                                nextPlayerStatIndex;                                      // 0x040C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.StatSerializer.GameSpyStatSerializer");
		return ptr;
	}


	void Function_onMapEnd_onMapEnd();
	void Function_serializeSnapshot_serializeSnapshot();
	void Function_sendSnapshot(bool finalSnapshot);
	void Function_serializeStat_serializeStat(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI, class UClass_Object_StatData* sd);
	void Function_onClientDisconnect_onClientDisconnect(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_onClientConnect_onClientConnect(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_onMapStart_onMapStart();
	void Function_gsStatLog(const struct FString& msg);
	int Function_getNextPlayerStatIndex();
	void Function_resetNextPlayerStatIndex();
};


// Class Object.Message.MessageUsed
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessageUsed : public UClass_Object_Message
{
public:
	struct FName                                       Object;                                                   // 0x002C(0x0004)
	struct FName                                       User;                                                     // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageUsed");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _object, const struct FName& _user);
};


// Class Object.CampaignInfo
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_CampaignInfo : public UClass_Object
{
public:
	TArray<struct FStruct_MissionInfo>                 missions;                                                 // 0x0028(0x000C) (Edit, Config, NeedCtorLink)
	int                                                progressIdx;                                              // 0x0034(0x0004) (Edit, Config, NoClear)
	int                                                highestProgressIdx;                                       // 0x0038(0x0004) (Edit, Config, NoClear)
	int                                                selectedDifficulty;                                       // 0x003C(0x0004) (Edit, Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CampaignInfo");
		return ptr;
	}


	void Function_copy(class UClass_Object_CampaignInfo* Dest);
	int Function_findMission(const struct FString& MapName);
};


// Class Object.InventoryStationAccessControl
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_InventoryStationAccessControl : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.InventoryStationAccessControl");
		return ptr;
	}


	bool Function_getCurrentLoadoutWeapons(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, struct FStruct_InventoryStationLoadout* weaponLoadout);
	void Function_accessFinished(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, bool returnToUsualMovment);
	bool Function_directUsage();
	void Function_changeApplied(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access);
	bool Function_isFunctional();
	bool Function_isAccessible(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_accessNoLongerRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_accessRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor, class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access, int armorIndex);
	bool Function_isOnCharactersTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* testCharacter);
};


// Class Object.Actor.StaticMeshActor.PowerIndicator
// 0x0014 (0x0418 - 0x0404)
class AClass_Object_Actor_StaticMeshActor_PowerIndicator : public AClass_Object_Actor_StaticMeshActor
{
public:
	TArray<class UClass_Object_Material*>              powerOffMaterials;                                        // 0x0404(0x000C) (Edit, NeedCtorLink)
	class AClass_Object_Actor_Info_BaseInfo*           ownerBase;                                                // 0x0410(0x0004) (Edit)
	unsigned long                                      basePowerOn : 1;                                          // 0x0414(0x0004) (Net)
	unsigned long                                      localBasePowerOn : 1;                                     // 0x0414(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.StaticMeshActor.PowerIndicator");
		return ptr;
	}


	void Function_Destroyed_Destroyed();
	void Function_powerOn();
	void Function_powerOff();
	void Function_PostNetReceive_PostNetReceive();
	void Function_setPower(bool powerIsOn);
	void Function_enumBaseInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_BaseInfo*> A);
	struct FString Function_displayActorLabel(class AClass_Object_Actor* t);
};


// Class Object.Loadout.TestLoadout
// 0x0000 (0x0058 - 0x0058)
class UClass_Object_Loadout_TestLoadout : public UClass_Object_Loadout
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Loadout.TestLoadout");
		return ptr;
	}

};


// Class Object.Armor.TestArmor
// 0x0000 (0x0128 - 0x0128)
class UClass_Object_Armor_TestArmor : public UClass_Object_Armor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Armor.TestArmor");
		return ptr;
	}

};


// Class Object.Interactions.Interaction.HUDInteraction
// 0x0004 (0x0038 - 0x0034)
class UClass_Object_Interactions_Interaction_HUDInteraction : public UClass_Object_Interactions_Interaction
{
public:
	class AClass_Object_Actor_HUD_TribesHUDBase*       hudOwner;                                                 // 0x0034(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.HUDInteraction");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.EnergyBlade
// 0x0014 (0x0610 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_EnergyBlade : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	int                                                Range;                                                    // 0x05FC(0x0004) (Edit)
	int                                                damageAmt;                                                // 0x0600(0x0004) (Edit)
	float                                              energyUsage;                                              // 0x0604(0x0004) (Edit)
	float                                              knockBackVelocity;                                        // 0x0608(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      damageTypeClass;                                          // 0x060C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.EnergyBlade");
		return ptr;
	}


	void Function_drawDebug_drawDebug_drawDebug(class AClass_Object_Actor_HUD* debugHUD);
	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	bool Function_canFire_canFire();
	bool Function_hasAmmo_hasAmmo();
	void Function_useAmmo_useAmmo();
};


// Class Object.Actor.Equipment.Equippable.Weapon.GrenadeLauncher
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_GrenadeLauncher : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.GrenadeLauncher");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Blaster
// 0x0038 (0x0634 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Blaster : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	float                                              Spread;                                                   // 0x05FC(0x0004) (Edit, NoClear)
	int                                                numberOfBullets;                                          // 0x0600(0x0004) (Edit, NoClear)
	float                                              energyUsage;                                              // 0x0604(0x0004) (Edit, NoClear)
	class UClass_Object_Material_RenderedMaterial_Shader* plasmaShader;                                             // 0x0608(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* plasmaTexPanner;                                          // 0x060C(0x0004)
	int                                                plasmaMaterialIndex;                                      // 0x0610(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_Shader* dialShader;                                               // 0x0614(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* dialTexPanner;                                            // 0x0618(0x0004)
	int                                                dialMaterialIndex;                                        // 0x061C(0x0004) (Edit)
	unsigned long                                      bControllableSkinSet : 1;                                 // 0x0620(0x0004)
	float                                              baseScale;                                                // 0x0624(0x0004)
	float                                              nextFireTime;                                             // 0x0628(0x0004)
	float                                              timeCounter;                                              // 0x062C(0x0004)
	unsigned long                                      bPostFire : 1;                                            // 0x0630(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Blaster");
		return ptr;
	}


	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	bool Function_canFire_canFire();
	bool Function_hasAmmo_hasAmmo();
	void Function_useAmmo_useAmmo();
	void Function_setHasAmmoSkins_setHasAmmoSkins();
	void Function_setControllableSkins();
	void Function_Tick_Tick_Tick(float DeltaTime);
	void Function_FireWeapon_FireWeapon();
	void Function_buildControllableSkins();
};


// Class Object.Actor.Projectile.BurnerProjectile
// 0x0018 (0x0464 - 0x044C)
class AClass_Object_Actor_Projectile_BurnerProjectile : public AClass_Object_Actor_Projectile
{
public:
	float                                              ignitionDelay;                                            // 0x044C(0x0004) (Edit)
	float                                              postIgnitionColRadius;                                    // 0x0450(0x0004) (Edit)
	float                                              postIgnitionColHeight;                                    // 0x0454(0x0004) (Edit)
	float                                              postIgnitionVelocity;                                     // 0x0458(0x0004) (Edit)
	unsigned long                                      weHaveIgnition : 1;                                       // 0x045C(0x0004)
	class UClass_Object_Field_Struct_State_Class*      burningAreaClass;                                         // 0x0460(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.BurnerProjectile");
		return ptr;
	}


	void Function_BurnTarget(class AClass_Object_Actor_Pawn_Rook* Target);
	void Function_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	bool Function_ShouldDeflect_ShouldDeflect(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, struct FStruct_Vector* deflectionNormal);
	bool Function_ShouldHit_ShouldHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation);
	void Function_SpawnBurningArea();
	void Function_HitWall_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* HitWall);
	void Function_Timer_Timer();
	void Function_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.UseableObject.AccessTerminalUseableObject
// 0x0000 (0x0420 - 0x0420)
class AClass_Object_Actor_UseableObject_AccessTerminalUseableObject : public AClass_Object_Actor_UseableObject
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.AccessTerminalUseableObject");
		return ptr;
	}


	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
};


// Class Object.Actor.UseableObject.BaseDeviceAccess.SpawnArrayUseableObject
// 0x0000 (0x0438 - 0x0438)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess_SpawnArrayUseableObject : public AClass_Object_Actor_UseableObject_BaseDeviceAccess
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess.SpawnArrayUseableObject");
		return ptr;
	}


	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
};


// Class Object.Actor.Pawn.Rook.BaseDevice.Catapult
// 0x0018 (0x0920 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_Catapult : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	float                                              throwForce;                                               // 0x0908(0x0004) (Edit, Net, NoClear)
	float                                              actorInfluence;                                           // 0x090C(0x0004) (Edit, Net, NoClear)
	float                                              catapultInfluence;                                        // 0x0910(0x0004) (Edit, Net, NoClear)
	unsigned long                                      bDirectional : 1;                                         // 0x0914(0x0004) (Edit, Net, NoClear)
	float                                              verticalInfluence;                                        // 0x0918(0x0004) (Edit, Net, NoClear)
	unsigned long                                      bIgnoreActorVelocity : 1;                                 // 0x091C(0x0004) (Edit, Net, NoClear)
	unsigned long                                      bReflective : 1;                                          // 0x091C(0x0004) (Edit, Net, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.Catapult");
		return ptr;
	}


	void Function_TouchProcessing(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.Actor.Equipment.Pack.RepairPack
// 0x008C (0x0574 - 0x04E8)
class AClass_Object_Actor_Equipment_Pack_RepairPack : public AClass_Object_Actor_Equipment_Pack
{
public:
	float                                              activePeriod;                                             // 0x04E8(0x0004) (Edit, NoClear)
	float                                              passivePeriod;                                            // 0x04EC(0x0004) (Edit, NoClear)
	float                                              Radius;                                                   // 0x04F0(0x0004) (Edit, NoClear)
	float                                              activeHealthPerPeriod;                                    // 0x04F4(0x0004) (Edit, NoClear)
	float                                              activeExtraSelfHealthPerPeriod;                           // 0x04F8(0x0004) (Edit, NoClear)
	float                                              passiveHealthPerPeriod;                                   // 0x04FC(0x0004) (Edit, NoClear)
	float                                              accumulationScale;                                        // 0x0500(0x0004) (Edit, NoClear)
	struct FString                                     socketFrontUp;                                            // 0x0504(0x000C) (Edit, NeedCtorLink)
	struct FString                                     socketFrontDown;                                          // 0x0510(0x000C) (Edit, NeedCtorLink)
	struct FString                                     socketBackUp;                                             // 0x051C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     socketBackDown;                                           // 0x0528(0x000C) (Edit, NeedCtorLink)
	float                                              radiusSquared;                                            // 0x0534(0x0004)
	class AClass_Object_Actor_RepairRadius*            rr;                                                       // 0x0538(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* repairer;                                                 // 0x053C(0x0004) (Net)
	struct FStruct_Vector                              frontPortUp;                                              // 0x0540(0x000C)
	struct FStruct_Vector                              frontPortDown;                                            // 0x054C(0x000C)
	struct FStruct_Vector                              backPortUp;                                               // 0x0558(0x000C)
	struct FStruct_Vector                              backPortDown;                                             // 0x0564(0x000C)
	unsigned long                                      bGotPorts : 1;                                            // 0x0570(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.RepairPack");
		return ptr;
	}


	bool Function_canStartFXTendril();
	struct FStruct_Vector Function_getFXTendrilTarget(class AClass_Object_Actor* Target);
	struct FStruct_Vector Function_getFXTendrilOrigin(const struct FStruct_Vector& targetPos);
	void Function_onTendrilCreate(class UClass_Object_DeleteableObject_RepairTendril* t);
	class AClass_Object_Actor_Pawn* Function_getFXOriginActor();
	void Function_endRepair(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_beginRepair(class AClass_Object_Actor_Pawn_Rook* R);
	float Function_getRepairRadius();
	bool Function_canRepair(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_finishActiveEffect_finishActiveEffect();
	void Function_startActiveEffect_startActiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_removePassiveEffect_removePassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_applyPassiveEffect_applyPassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.UseableObject.EmergencyStationAccess
// 0x0010 (0x0430 - 0x0420)
class AClass_Object_Actor_UseableObject_EmergencyStationAccess : public AClass_Object_Actor_UseableObject
{
public:
	struct FString                                     AlreadyHavePackPrompt;                                    // 0x0420(0x000C) (Edit, Localized, NeedCtorLink)
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_EmergencyStation* EmergencyStation;                                         // 0x042C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.EmergencyStationAccess");
		return ptr;
	}


	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	struct FString STATIC_Function_GetPrompt_GetPrompt(unsigned char PromptIndex, class UClass_Object_Field_Struct_State_Class* dataClass);
	unsigned char Function_GetPromptIndex_GetPromptIndex(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PotentialUser);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
	void Function_Initialise(class AClass_Object_Actor_Pawn_Rook_BaseDevice_EmergencyStation* station);
};


// Class Object.Actor.ExplosionVisualisation
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_ExplosionVisualisation : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Explosion*               Owner;                                                    // 0x0400(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.ExplosionVisualisation");
		return ptr;
	}


	void Function_UpdateVis();
};


// Class Object.Actor.DamageType.ExplosionDamageType
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_ExplosionDamageType : public AClass_Object_Actor_DamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ExplosionDamageType");
		return ptr;
	}

};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.BuggyHavokData
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_BuggyHavokData : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.BuggyHavokData");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.VehicleMountedTurret.BuggyMountedTurret
// 0x0000 (0x0938 - 0x0938)
class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret_BuggyMountedTurret : public AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.VehicleMountedTurret.BuggyMountedTurret");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.AntiAircraftWeapon
// 0x0004 (0x0600 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_AntiAircraftWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon
{
public:
	float                                              energyUsage;                                              // 0x05FC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.AntiAircraftWeapon");
		return ptr;
	}


	void Function_onThirdPersonFireCount_onThirdPersonFireCount_onThirdPersonFireCount_onThirdPersonFireCount();
	void Function_FireWeapon_FireWeapon();
	bool Function_canFire_canFire();
	bool Function_hasAmmo_hasAmmo();
	void Function_useAmmo_useAmmo();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow
// 0x0038 (0x00EC - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	class UClass_Object_Field_Struct_State_Class*      ClientClass;                                              // 0x00B4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* ClientArea;                                               // 0x00B8(0x0004)
	struct FString                                     WindowTitle;                                              // 0x00BC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     StatusBarText;                                            // 0x00C8(0x000C) (NeedCtorLink)
	float                                              MoveX;                                                    // 0x00D4(0x0004)
	float                                              MoveY;                                                    // 0x00D8(0x0004)
	float                                              MinWinWidth;                                              // 0x00DC(0x0004)
	float                                              MinWinHeight;                                             // 0x00E0(0x0004)
	unsigned long                                      bTLSizing : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bTSizing : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bTRSizing : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bLSizing : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bRSizing : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bBLSizing : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bBSizing : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bBRSizing : 1;                                            // 0x00E4(0x0004)
	unsigned long                                      bMoving : 1;                                              // 0x00E4(0x0004)
	unsigned long                                      bSizable : 1;                                             // 0x00E4(0x0004)
	unsigned long                                      bStatusBar : 1;                                           // 0x00E4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowFrameCloseBox* CloseBox;                                                 // 0x00E8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow");
		return ptr;
	}


	void Function_WindowHidden_WindowHidden();
	void Function_WindowEvent_WindowEvent(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
	void Function_ToolTip_ToolTip(const struct FString& strTip);
	void Function_MouseMove_MouseMove(float X, float Y);
	void Function_Resized_Resized();
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	bool Function_isActive_isActive();
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Function_GetLookAndFeelTexture_GetLookAndFeelTexture();
	void Function_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UWindowMessageBox
// 0x0014 (0x0100 - 0x00EC)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow
{
public:
	TEnumAsByte<EMessageBoxResult>                     Result;                                                   // 0x00EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	float                                              TimeOutTime;                                              // 0x00F0(0x0004)
	int                                                TimeOut;                                                  // 0x00F4(0x0004)
	unsigned long                                      bSetupSize : 1;                                           // 0x00F8(0x0004)
	int                                                FrameCount;                                               // 0x00FC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UWindowMessageBox");
		return ptr;
	}


	void Function_Close_Close(bool bByParent);
	void Function_AfterPaint_AfterPaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_SetupMessageBox(const struct FString& Title, const struct FString& Message, TEnumAsByte<EMessageBoxButtons> Buttons, TEnumAsByte<EMessageBoxResult> InESCResult, TEnumAsByte<EMessageBoxResult> InEnterResult, int InTimeOut);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowLookAndFeel
// 0x0464 (0x0498 - 0x0034)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowLookAndFeel : public UClass_Object_Interactions_Interaction_UWindowBase
{
public:
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Active;                                                   // 0x0034(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Inactive;                                                 // 0x0038(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* ActiveS;                                                  // 0x003C(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* InactiveS;                                                // 0x0040(0x0004) (Edit)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Misc;                                                     // 0x0044(0x0004) (Edit)
	struct FStruct_Region                              FrameTL;                                                  // 0x0048(0x0010) (Edit)
	struct FStruct_Region                              FrameT;                                                   // 0x0058(0x0010) (Edit)
	struct FStruct_Region                              FrameTR;                                                  // 0x0068(0x0010) (Edit)
	struct FStruct_Region                              FrameL;                                                   // 0x0078(0x0010) (Edit)
	struct FStruct_Region                              FrameR;                                                   // 0x0088(0x0010) (Edit)
	struct FStruct_Region                              FrameBL;                                                  // 0x0098(0x0010) (Edit)
	struct FStruct_Region                              FrameB;                                                   // 0x00A8(0x0010) (Edit)
	struct FStruct_Region                              FrameBR;                                                  // 0x00B8(0x0010) (Edit)
	struct FStruct_Color                               FrameActiveTitleColor;                                    // 0x00C8(0x0004) (Edit)
	struct FStruct_Color                               FrameInactiveTitleColor;                                  // 0x00CC(0x0004) (Edit)
	struct FStruct_Color                               HeadingActiveTitleColor;                                  // 0x00D0(0x0004) (Edit)
	struct FStruct_Color                               HeadingInActiveTitleColor;                                // 0x00D4(0x0004) (Edit)
	int                                                FrameTitleX;                                              // 0x00D8(0x0004) (Edit)
	int                                                FrameTitleY;                                              // 0x00DC(0x0004) (Edit)
	struct FStruct_Region                              BevelUpTL;                                                // 0x00E0(0x0010) (Edit)
	struct FStruct_Region                              BevelUpT;                                                 // 0x00F0(0x0010) (Edit)
	struct FStruct_Region                              BevelUpTR;                                                // 0x0100(0x0010) (Edit)
	struct FStruct_Region                              BevelUpL;                                                 // 0x0110(0x0010) (Edit)
	struct FStruct_Region                              BevelUpR;                                                 // 0x0120(0x0010) (Edit)
	struct FStruct_Region                              BevelUpBL;                                                // 0x0130(0x0010) (Edit)
	struct FStruct_Region                              BevelUpB;                                                 // 0x0140(0x0010) (Edit)
	struct FStruct_Region                              BevelUpBR;                                                // 0x0150(0x0010) (Edit)
	struct FStruct_Region                              BevelUpArea;                                              // 0x0160(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelTL[0x4];                                         // 0x0170(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelT[0x4];                                          // 0x01B0(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelTR[0x4];                                         // 0x01F0(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelL[0x4];                                          // 0x0230(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelR[0x4];                                          // 0x0270(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelBL[0x4];                                         // 0x02B0(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelB[0x4];                                          // 0x02F0(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelBR[0x4];                                         // 0x0330(0x0010) (Edit)
	struct FStruct_Region                              MiscBevelArea[0x4];                                       // 0x0370(0x0010) (Edit)
	struct FStruct_Region                              ComboBtnUp;                                               // 0x03B0(0x0010) (Edit)
	struct FStruct_Region                              ComboBtnDown;                                             // 0x03C0(0x0010) (Edit)
	struct FStruct_Region                              ComboBtnDisabled;                                         // 0x03D0(0x0010) (Edit)
	int                                                ColumnHeadingHeight;                                      // 0x03E0(0x0004) (Edit)
	struct FStruct_Region                              HLine;                                                    // 0x03E4(0x0010) (Edit)
	struct FStruct_Color                               EditBoxTextColor;                                         // 0x03F4(0x0004) (Edit)
	int                                                EditBoxBevel;                                             // 0x03F8(0x0004) (Edit)
	struct FStruct_Region                              TabSelectedL;                                             // 0x03FC(0x0010) (Edit)
	struct FStruct_Region                              TabSelectedM;                                             // 0x040C(0x0010) (Edit)
	struct FStruct_Region                              TabSelectedR;                                             // 0x041C(0x0010) (Edit)
	struct FStruct_Region                              TabUnselectedL;                                           // 0x042C(0x0010) (Edit)
	struct FStruct_Region                              TabUnselectedM;                                           // 0x043C(0x0010) (Edit)
	struct FStruct_Region                              TabUnselectedR;                                           // 0x044C(0x0010) (Edit)
	struct FStruct_Region                              TabBackground;                                            // 0x045C(0x0010) (Edit)
	float                                              Size_ScrollbarWidth;                                      // 0x046C(0x0004) (Edit)
	float                                              Size_ScrollbarButtonHeight;                               // 0x0470(0x0004) (Edit)
	float                                              Size_MinScrollbarHeight;                                  // 0x0474(0x0004) (Edit)
	float                                              Size_TabAreaHeight;                                       // 0x0478(0x0004) (Edit)
	float                                              Size_TabAreaOverhangHeight;                               // 0x047C(0x0004) (Edit)
	float                                              Size_TabSpacing;                                          // 0x0480(0x0004) (Edit)
	float                                              Size_TabXOffset;                                          // 0x0484(0x0004) (Edit)
	float                                              Pulldown_ItemHeight;                                      // 0x0488(0x0004) (Edit)
	float                                              Pulldown_VBorder;                                         // 0x048C(0x0004) (Edit)
	float                                              Pulldown_HBorder;                                         // 0x0490(0x0004) (Edit)
	float                                              Pulldown_TextBorder;                                      // 0x0494(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowLookAndFeel");
		return ptr;
	}


	void Function_ControlFrame_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowControlFrame* W, class UClass_Object_Canvas* C);
	void Function_ControlFrame_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowControlFrame* W, class UClass_Object_Canvas* C);
	void Function_PlayMenuSound(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W, TEnumAsByte<EMenuSound> S);
	void Function_Button_DrawSmallButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* B, class UClass_Object_Canvas* C);
	void Function_Menu_DrawPulldownMenuItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* M, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* Item, class UClass_Object_Canvas* C, float X, float Y, float W, float H, bool bSelected);
	void Function_Menu_DrawPulldownMenuBackground(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* W, class UClass_Object_Canvas* C);
	void Function_Menu_DrawMenuBarItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* B, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* i, float X, float Y, float W, float H, class UClass_Object_Canvas* C);
	void Function_Menu_DrawMenuBar(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* W, class UClass_Object_Canvas* C);
	void Function_Tab_DrawTabPageArea(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl_UWindowPageControl* W, class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowPageWindow* p);
	void Function_Tab_SetTabPageSize(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl_UWindowPageControl* W, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowPageWindow* p);
	void Function_Tab_SetupRightButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlRightButton* W);
	void Function_Tab_SetupLeftButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlLeftButton* W);
	void Function_Tab_GetTabSize(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowTabControlTabArea* tab, class UClass_Object_Canvas* C, const struct FString& Text, float* W, float* H);
	void Function_Tab_DrawTab(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowTabControlTabArea* tab, class UClass_Object_Canvas* C, bool bActiveTab, bool bLeftmostTab, float X, float Y, float W, float H, const struct FString& Text, bool bShowText);
	void Function_SB_HDraw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowHScrollbar* W, class UClass_Object_Canvas* C);
	void Function_SB_VDraw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowVScrollbar* W, class UClass_Object_Canvas* C);
	void Function_SB_SetupRightButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBRightButton* W);
	void Function_SB_SetupLeftButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBLeftButton* W);
	void Function_SB_SetupDownButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBDownButton* W);
	void Function_SB_SetupUpButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBUpButton* W);
	void Function_Editbox_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditControl* W, class UClass_Object_Canvas* C);
	void Function_Editbox_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditControl* W, class UClass_Object_Canvas* C);
	void Function_ComboList_DrawItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowComboList* Combo, class UClass_Object_Canvas* C, float X, float Y, float W, float H, const struct FString& Text, bool bSelected);
	void Function_ComboList_DrawBackground(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowComboList* W, class UClass_Object_Canvas* C);
	void Function_Checkbox_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowCheckbox* W, class UClass_Object_Canvas* C);
	void Function_Checkbox_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowCheckbox* W, class UClass_Object_Canvas* C);
	void Function_Combo_SetupRightButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboRightButton* W);
	void Function_Combo_SetupLeftButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboLeftButton* W);
	void Function_Combo_GetButtonBitmaps(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboButton* W);
	void Function_Combo_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* W, class UClass_Object_Canvas* C);
	void Function_Combo_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* W, class UClass_Object_Canvas* C);
	void Function_DrawClientArea(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow* W, class UClass_Object_Canvas* C);
	void Function_FW_SetupFrameButtons(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W, class UClass_Object_Canvas* C);
	TEnumAsByte<EFrameHitTest> Function_FW_HitTest(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W, float X, float Y);
	struct FStruct_Region Function_FW_GetClientArea(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W);
	void Function_FW_DrawWindowFrame(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W, class UClass_Object_Canvas* C);
	void Function_Setup();
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Function_GetTexture(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W);
};


// Class Object.Interactions.Interaction.Console
// 0x00EC (0x0120 - 0x0034)
class UClass_Object_Interactions_Interaction_Console : public UClass_Object_Interactions_Interaction
{
public:
	unsigned char                                      ConsoleKey;                                               // 0x0034(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                HistoryTop;                                               // 0x0038(0x0004)
	int                                                HistoryBot;                                               // 0x003C(0x0004)
	int                                                HistoryCur;                                               // 0x0040(0x0004)
	struct FString                                     TypedStr;                                                 // 0x0044(0x000C) (NeedCtorLink)
	struct FString                                     History[0x10];                                            // 0x0050(0x000C) (NeedCtorLink)
	unsigned long                                      bTyping : 1;                                              // 0x0110(0x0004)
	unsigned long                                      bIgnoreKeys : 1;                                          // 0x0110(0x0004)
	class UClass_Object_Font*                          ConsoleFont;                                              // 0x0114(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* BackgroundTexture;                                        // 0x0118(0x0004)
	unsigned long                                      bAllowed : 1;                                             // 0x011C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.Console");
		return ptr;
	}


	bool Function_KeyEvent_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta);
	void Function_Message_Message(const struct FString& msg, float MsgLife);
	void Function_NotifyLevelChange();
	void Function_TeamTalk();
	void Function_Talk();
	void Function_Type();
	void Function_NativeConsoleOpen();
	void Function_Initialize_Initialize();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList
// 0x0038 (0x006C - 0x0034)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList : public UClass_Object_Interactions_Interaction_UWindowBase
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Next;                                                     // 0x0034(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Last;                                                     // 0x0038(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Prev;                                                     // 0x003C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Sentinel;                                                 // 0x0040(0x0004)
	int                                                InternalCount;                                            // 0x0044(0x0004)
	unsigned long                                      bItemOrderChanged : 1;                                    // 0x0048(0x0004)
	unsigned long                                      bSuspendableSort : 1;                                     // 0x0048(0x0004)
	int                                                CompareCount;                                             // 0x004C(0x0004)
	unsigned long                                      bSortSuspended : 1;                                       // 0x0050(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* CurrentSortItem;                                          // 0x0054(0x0004)
	unsigned long                                      bTreeSort : 1;                                            // 0x0058(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* BranchLeft;                                               // 0x005C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* BranchRight;                                              // 0x0060(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* ParentNode;                                               // 0x0064(0x0004)
	int                                                Tag;                                                      // 0x0068(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList");
		return ptr;
	}


	void Function_Clear();
	void Function_AppendListCopy(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* L);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_FindEntry(int Index);
	void Function_InsertItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewElement);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_Insert(class UClass_Object_Field_Struct_State_Class* C);
	void Function_DoAppendItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewElement);
	void Function_AppendItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewElement);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_Append(class UClass_Object_Field_Struct_State_Class* C);
	void Function_Validate();
	void Function_SetupSentinel(bool bInTreeSort);
	void Function_MoveItemSorted(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item);
	int Function_Count();
	bool Function_ShowThisItem();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_CopyExistingListItem(class UClass_Object_Field_Struct_State_Class* ItemClass, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* SourceItem);
	int Function_CountShown();
	void Function_DestroyListItem();
	void Function_DestroyList();
	void Function_DisconnectList();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_Sort();
	void Function_Tick_Tick(float Delta);
	void Function_ContinueSort();
	void Function_InsertItemAfter(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewElement, bool bCheckShowItem);
	void Function_InsertItemBefore(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewElement);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_InsertAfter(class UClass_Object_Field_Struct_State_Class* C);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_InsertBefore(class UClass_Object_Field_Struct_State_Class* C);
	int Function_Compare(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* t, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* B);
	void Function_Remove();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_LeftMost();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_RightMost();
	void Function_GraftRight(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewRight);
	void Function_GraftLeft(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* NewLeft);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Function_CreateItem(class UClass_Object_Field_Struct_State_Class* C);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowHotkeyWindowList
// 0x0004 (0x0070 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowHotkeyWindowList : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Window;                                                   // 0x006C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowHotkeyWindowList");
		return ptr;
	}


	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowHotkeyWindowList* Function_FindWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UWindowConsoleWindow
// 0x0008 (0x00F4 - 0x00EC)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowConsoleWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow
{
public:
	float                                              OldParentWidth;                                           // 0x00EC(0x0004)
	float                                              OldParentHeight;                                          // 0x00F0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UWindowConsoleWindow");
		return ptr;
	}


	void Function_Close_Close(bool bByParent);
	void Function_SetDimensions();
	void Function_ResolutionChanged_ResolutionChanged(float W, float H);
	void Function_ShowWindow_ShowWindow();
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow
// 0x0000 (0x00B4 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow");
		return ptr;
	}


	void Function_Close_Close(bool bByParent);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow
// 0x000C (0x00C0 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow
{
public:
	float                                              DesiredWidth;                                             // 0x00B4(0x0004)
	float                                              DesiredHeight;                                            // 0x00B8(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* TabLast;                                                  // 0x00BC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow");
		return ptr;
	}


	void Function_GetDesiredDimensions_GetDesiredDimensions(float* W, float* H);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* Function_CreateControl(class UClass_Object_Field_Struct_State_Class* ControlClass, float X, float Y, float W, float H, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* OwnerWindow);
	void Function_Notify(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* C, unsigned char E);
	void Function_OKPressed();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.InventoryStationDialog
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_InventoryStationDialog : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.InventoryStationDialog");
		return ptr;
	}

};


// Class Object.Variable.VariableBool
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Variable_VariableBool : public UClass_Object_Variable
{
public:
	unsigned long                                      Value : 1;                                                // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Variable.VariableBool");
		return ptr;
	}


	bool Function_truth_truth();
	bool Function_not_not();
	bool Function_or_or(const struct FString& rhs);
	bool Function_and_and(const struct FString& rhs);
	bool Function_greater_greater(const struct FString& rhs);
	bool Function_greaterEqual_greaterEqual(const struct FString& rhs);
	bool Function_notEqual_notEqual(const struct FString& rhs);
	bool Function_equal_equal(const struct FString& rhs);
	bool Function_lessEqual_lessEqual(const struct FString& rhs);
	bool Function_less_less(const struct FString& rhs);
	void Function_divide_divide(const struct FString& rhs);
	void Function_multiply_multiply(const struct FString& rhs);
	void Function_subtract_subtract(const struct FString& rhs);
	void Function_Add_Add(const struct FString& rhs);
};


// Class Object.Variable.VariableFloat
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Variable_VariableFloat : public UClass_Object_Variable
{
public:
	float                                              Value;                                                    // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Variable.VariableFloat");
		return ptr;
	}


	bool Function_truth_truth();
	bool Function_not_not();
	bool Function_or_or(const struct FString& rhs);
	bool Function_and_and(const struct FString& rhs);
	bool Function_greater_greater(const struct FString& rhs);
	bool Function_greaterEqual_greaterEqual(const struct FString& rhs);
	bool Function_notEqual_notEqual(const struct FString& rhs);
	bool Function_equal_equal(const struct FString& rhs);
	bool Function_lessEqual_lessEqual(const struct FString& rhs);
	bool Function_less_less(const struct FString& rhs);
	void Function_divide_divide(const struct FString& rhs);
	void Function_multiply_multiply(const struct FString& rhs);
	void Function_subtract_subtract(const struct FString& rhs);
	void Function_Add_Add(const struct FString& rhs);
};


// Class Object.Variable.VariableName
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Variable_VariableName : public UClass_Object_Variable
{
public:
	struct FName                                       Value;                                                    // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Variable.VariableName");
		return ptr;
	}


	bool Function_truth_truth();
	bool Function_not_not();
	bool Function_or_or(const struct FString& rhs);
	bool Function_and_and(const struct FString& rhs);
	bool Function_greater_greater(const struct FString& rhs);
	bool Function_greaterEqual_greaterEqual(const struct FString& rhs);
	bool Function_notEqual_notEqual(const struct FString& rhs);
	bool Function_equal_equal(const struct FString& rhs);
	bool Function_lessEqual_lessEqual(const struct FString& rhs);
	bool Function_less_less(const struct FString& rhs);
	void Function_divide_divide(const struct FString& rhs);
	void Function_multiply_multiply(const struct FString& rhs);
	void Function_subtract_subtract(const struct FString& rhs);
	void Function_Add_Add(const struct FString& rhs);
};


// Class Object.KeyBindings
// 0x0048 (0x0070 - 0x0028)
class UClass_Object_KeyBindings : public UClass_Object
{
public:
	TArray<struct FString>                             CommandCategory;                                          // 0x0028(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             CommandString;                                            // 0x0034(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             LocalizedCommandString;                                   // 0x0040(0x000C) (Edit, Config, Localized, NeedCtorLink)
	TArray<struct FString>                             LocalizedCommandCategories;                               // 0x004C(0x000C) (Edit, Config, Localized, NeedCtorLink)
	TArray<struct FString>                             PrimaryBinds;                                             // 0x0058(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             SecondaryBinds;                                           // 0x0064(0x000C) (Edit, Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.KeyBindings");
		return ptr;
	}


	struct FString STATIC_Function_GetKeyFromBinding(const struct FString& CommandStringSearch, bool bLocalized);
};


// Class Object.DeleteableObject.RepairTendril
// 0x0010 (0x0044 - 0x0034)
class UClass_Object_DeleteableObject_RepairTendril : public UClass_Object_DeleteableObject
{
public:
	class AClass_Object_Actor*                         Target;                                                   // 0x0034(0x0004)
	class AClass_Object_Actor_Emitter*                 System;                                                   // 0x0038(0x0004)
	class AClass_Object_Actor_Pawn*                    originator;                                               // 0x003C(0x0004)
	class UClass_Object_IRepairClient*                 Client;                                                   // 0x0040(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.RepairTendril");
		return ptr;
	}


	struct FStruct_Vector Function_getTargetPos();
	void Function_Update();
	class UClass_Object_ParticleEmitter_BeamEmitter* Function_getBeamEmitter();
};


// Class Object.IRepairClient
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IRepairClient : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IRepairClient");
		return ptr;
	}


	void Function_endRepair(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_beginRepair(class AClass_Object_Actor_Pawn_Rook* R);
	struct FStruct_Vector Function_getFXTendrilTarget(class AClass_Object_Actor* Target);
	struct FStruct_Vector Function_getFXTendrilOrigin(const struct FStruct_Vector& targetPos);
	class AClass_Object_Actor_Pawn* Function_getFXOriginActor();
	float Function_getRepairRadius();
	bool Function_canRepair(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_onTendrilCreate(class UClass_Object_DeleteableObject_RepairTendril* t);
};


// Class Object.Actor.BurningArea
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_BurningArea : public AClass_Object_Actor
{
public:
	float                                              burnTime;                                                 // 0x0400(0x0004) (Edit, NoClear)
	float                                              burnDamageRate;                                           // 0x0404(0x0004) (Edit, NoClear)
	float                                              burnDamageRateReduction;                                  // 0x0408(0x0004) (Edit, NoClear)
	class UClass_Object_Field_Struct_State_Class*      DamageType;                                               // 0x040C(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.BurningArea");
		return ptr;
	}


	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Tick_Tick(float Delta);
	void Function_Destroyed_Destroyed();
	void Function_Timer_Timer();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.GrenadeLauncherProjectile
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_GrenadeLauncherProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.GrenadeLauncherProjectile");
		return ptr;
	}

};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl
// 0x0044 (0x00F8 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow* NotifyWindow;                                             // 0x00B4(0x0004)
	struct FString                                     Text;                                                     // 0x00B8(0x000C) (NeedCtorLink)
	int                                                Font;                                                     // 0x00C4(0x0004)
	struct FStruct_Color                               TextColor;                                                // 0x00C8(0x0004)
	TEnumAsByte<ETextAlign>                            Align;                                                    // 0x00CC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              TextX;                                                    // 0x00D0(0x0004)
	float                                              TextY;                                                    // 0x00D4(0x0004)
	unsigned long                                      bHasKeyboardFocus : 1;                                    // 0x00D8(0x0004)
	unsigned long                                      bNoKeyboard : 1;                                          // 0x00D8(0x0004)
	unsigned long                                      bAcceptExternalDragDrop : 1;                              // 0x00D8(0x0004)
	struct FString                                     HelpText;                                                 // 0x00DC(0x000C) (NeedCtorLink)
	float                                              MinWidth;                                                 // 0x00E8(0x0004)
	float                                              MinHeight;                                                // 0x00EC(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* TabNext;                                                  // 0x00F0(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* TabPrev;                                                  // 0x00F4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl");
		return ptr;
	}


	void Function_MouseLeave_MouseLeave();
	void Function_MouseEnter_MouseEnter();
	void Function_MouseMove_MouseMove(float X, float Y);
	void Function_KeyDown_KeyDown(int Key, float X, float Y);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* Function_CheckExternalDrag(float X, float Y);
	bool Function_ExternalDragOver(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* ExternalControl, float X, float Y);
	void Function_Notify(unsigned char E);
	void Function_Register(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow* W);
	void Function_SetTextColor(const struct FStruct_Color& NewColor);
	void Function_SetFont(int NewFont);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_SetText(const struct FString& NewText);
	void Function_SetHelpText(const struct FString& NewHelpText);
	void Function_KeyFocusExit_KeyFocusExit();
	void Function_KeyFocusEnter_KeyFocusEnter();
	void Function_Created_Created();
};


// Class Object.Actor.Projectile.BlasterProjectile
// 0x000C (0x0458 - 0x044C)
class AClass_Object_Actor_Projectile_BlasterProjectile : public AClass_Object_Actor_Projectile
{
public:
	unsigned long                                      bShouldBounce : 1;                                        // 0x044C(0x0004)
	float                                              bounceTime;                                               // 0x0450(0x0004) (Edit, NoClear)
	int                                                maxBounces;                                               // 0x0454(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.BlasterProjectile");
		return ptr;
	}


	void Function_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_HitWall_HitWall_HitWall(const struct FStruct_Vector& HitNormal, class AClass_Object_Actor* Wall);
	void Function_Timer_Timer();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.Projectile.ExplosiveProjectile.AntiAircraftProjectile
// 0x0014 (0x047C - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_AntiAircraftProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile
{
public:
	float                                              armingPeriod;                                             // 0x0468(0x0004) (Edit)
	float                                              armedCollisionRadius;                                     // 0x046C(0x0004) (Edit)
	float                                              armedCollisionHeight;                                     // 0x0470(0x0004) (Edit)
	class AClass_Object_Actor_ProjectileRadius*        nearCollisionExplode;                                     // 0x0474(0x0004)
	unsigned long                                      armed : 1;                                                // 0x0478(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.AntiAircraftProjectile");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float Delta);
	void Function_Timer_Timer();
	void Function_endLife_endLife_endLife(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_cleanupNearCollisionExplode();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Weapon.Chaingun
// 0x0038 (0x0634 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Chaingun : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	float                                              minSpread;                                                // 0x05FC(0x0004) (Edit, NoClear)
	float                                              maxSpread;                                                // 0x0600(0x0004) (Edit, NoClear)
	float                                              spinPeriod;                                               // 0x0604(0x0004) (Edit, NoClear)
	float                                              spinTime;                                                 // 0x0608(0x0004)
	unsigned long                                      overheated : 1;                                           // 0x060C(0x0004)
	float                                              heatPeriod;                                               // 0x0610(0x0004) (Edit, NoClear)
	float                                              coolDownThreshold;                                        // 0x0614(0x0004) (Edit, NoClear)
	float                                              speedCooldownFactor;                                      // 0x0618(0x0004) (Edit, NoClear)
	float                                              heatTime;                                                 // 0x061C(0x0004)
	class UClass_Object_Material_RenderedMaterial_Shader* heatShader;                                               // 0x0620(0x0004)
	class UClass_Object_Material_RenderedMaterial_ConstantMaterial_ConstantColor* heatColorMaterial;                                        // 0x0624(0x0004)
	struct FStruct_Color                               heatColor;                                                // 0x0628(0x0004)
	int                                                heatMaterialIndex;                                        // 0x062C(0x0004) (Edit)
	unsigned long                                      bControllableSkinSet : 1;                                 // 0x0630(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Chaingun");
		return ptr;
	}


	void Function_coolDown(float Delta);
	void Function_heatUp(float Delta);
	float Function_speedRelativeCooldown();
	bool Function_isInWater();
	void Function_updateHeatGlow();
	float Function_GetProjectileSpreadScale_GetProjectileSpreadScale();
	void Function_unEquip_unEquip();
	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_setControllableSkins();
	void Function_ammoSkinChange();
	void Function_setOutOfAmmo_setOutOfAmmo();
	void Function_setHasAmmoSkins_setHasAmmoSkins();
	void Function_buildControllableSkins();
};


// Class Object.Actor.Equipment.Equippable.Weapon.Burner
// 0x0014 (0x0610 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Burner : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	float                                              energyUsage;                                              // 0x05FC(0x0004) (Edit, NoClear)
	class UClass_Object_Material_RenderedMaterial_Shader* dialShader;                                               // 0x0600(0x0004)
	class UClass_Object_Material_Modifier_TexModifier_ControllableTexturePanner* dialTexPanner;                                            // 0x0604(0x0004)
	int                                                dialMaterialIndex;                                        // 0x0608(0x0004) (Edit)
	unsigned long                                      bControllableSkinSet : 1;                                 // 0x060C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Burner");
		return ptr;
	}


	void Function_setHasAmmoSkins_setHasAmmoSkins();
	void Function_setControllableSkins();
	void Function_Tick_Tick_Tick(float DeltaTime);
	bool Function_hasAmmo_hasAmmo();
	void Function_useAmmo_useAmmo();
	bool Function_canFire_canFire();
	void Function_buildControllableSkins();
};


// Class Object.Actor.Equipment.Equippable.Weapon.RocketPod
// 0x0010 (0x060C - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_RocketPod : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:
	int                                                numProjectiles;                                           // 0x05FC(0x0004) (Edit, NoClear)
	int                                                numProjectilesFired;                                      // 0x0600(0x0004)
	float                                              launchDelay;                                              // 0x0604(0x0004) (Edit, NoClear)
	float                                              angleIncreament;                                          // 0x0608(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.RocketPod");
		return ptr;
	}


	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_playPostFireAnim_playPostFireAnim();
	void Function_playIdleAnim_playIdleAnim_playIdleAnim();
	bool Function_canUnequip_canUnequip();
	void Function_FireWeapon_FireWeapon();
	void Function_Timer_Timer();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Weapon.SniperRifle
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_SniperRifle : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.SniperRifle");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float Delta);
	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
	void Function_useAmmo_useAmmo();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowControlFrame
// 0x0004 (0x00B8 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowControlFrame : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* Framed;                                                   // 0x00B4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowControlFrame");
		return ptr;
	}


	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_SetFrame(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton
// 0x0078 (0x0170 - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	unsigned long                                      bDisabled : 1;                                            // 0x00F8(0x0004)
	unsigned long                                      bStretched : 1;                                           // 0x00F8(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* UpTexture;                                                // 0x00FC(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* DownTexture;                                              // 0x0100(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* DisabledTexture;                                          // 0x0104(0x0004)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* OverTexture;                                              // 0x0108(0x0004)
	struct FStruct_Region                              UpRegion;                                                 // 0x010C(0x0010)
	struct FStruct_Region                              DownRegion;                                               // 0x011C(0x0010)
	struct FStruct_Region                              DisabledRegion;                                           // 0x012C(0x0010)
	struct FStruct_Region                              OverRegion;                                               // 0x013C(0x0010)
	unsigned long                                      bUseRegion : 1;                                           // 0x014C(0x0004)
	float                                              RegionScale;                                              // 0x0150(0x0004)
	struct FString                                     ToolTipString;                                            // 0x0154(0x000C) (NeedCtorLink)
	float                                              ImageX;                                                   // 0x0160(0x0004)
	float                                              ImageY;                                                   // 0x0164(0x0004)
	class UClass_Object_Sound*                         OverSound;                                                // 0x0168(0x0004)
	class UClass_Object_Sound*                         DownSound;                                                // 0x016C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton");
		return ptr;
	}


	void Function_KeyDown_KeyDown_KeyDown(int Key, float X, float Y);
	void Function_MClick_MClick(float X, float Y);
	void Function_RClick_RClick(float X, float Y);
	void Function_DoubleClick_DoubleClick(float X, float Y);
	void Function_Click_Click(float X, float Y);
	void Function_MouseEnter_MouseEnter_MouseEnter();
	void Function_MouseLeave_MouseLeave_MouseLeave();
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton
// 0x0000 (0x0170 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton");
		return ptr;
	}


	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_AutoWidth(class UClass_Object_Canvas* C);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl
// 0x0014 (0x010C - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	class UClass_Object_Field_Struct_State_Class*      ListClass;                                                // 0x00F8(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Items;                                                    // 0x00FC(0x0004)
	struct FStruct_Color                               SelectionBkgColor;                                        // 0x0100(0x0004)
	struct FStruct_Color                               SelectionColor;                                           // 0x0104(0x0004)
	unsigned long                                      bNoSelectionBox : 1;                                      // 0x0108(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl");
		return ptr;
	}


	void Function_Created_Created_Created();
	void Function_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowPulldownMenu
// 0x001C (0x0128 - 0x010C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* Selected;                                                 // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Owner;                                                    // 0x0110(0x0004)
	int                                                ItemHeight;                                               // 0x0114(0x0004)
	int                                                VBorder;                                                  // 0x0118(0x0004)
	int                                                HBorder;                                                  // 0x011C(0x0004)
	int                                                TextBorder;                                               // 0x0120(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* MyMenuBar;                                                // 0x0124(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowPulldownMenu");
		return ptr;
	}


	void Function_MenuCmd(int Item);
	void Function_KeyUp_KeyUp(int Key, float X, float Y);
	void Function_KeyDown_KeyDown_KeyDown(int Key, float X, float Y);
	void Function_FocusOtherWindow_FocusOtherWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* Function_GetMenuBar();
	void Function_CloseUp(bool bByOwner);
	void Function_ExecuteItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* i);
	void Function_BeforeExecuteItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* i);
	void Function_DrawItem_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
	void Function_DrawMenuBackground(class UClass_Object_Canvas* C);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_LMouseUp_LMouseUp(float X, float Y);
	void Function_MouseMove_MouseMove_MouseMove(float X, float Y);
	void Function_ShowWindow_ShowWindow();
	void Function_SetSelected(float X, float Y);
	void Function_PerformSelect(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* NewSelected);
	void Function_Select(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* i);
	void Function_DeSelect();
	void Function_Clear();
	void Function_Created_Created_Created_Created();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* Function_AddMenuItem(const struct FString& C, class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* G);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowPulldownMenuItem
// 0x0024 (0x0090 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     Caption;                                                  // 0x006C(0x000C) (NeedCtorLink)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Graphic;                                                  // 0x0078(0x0004)
	unsigned char                                      HotKey;                                                   // 0x007C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* SubMenu;                                                  // 0x0080(0x0004)
	unsigned long                                      bChecked : 1;                                             // 0x0084(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x0084(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Owner;                                                    // 0x0088(0x0004)
	float                                              ItemTop;                                                  // 0x008C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowPulldownMenuItem");
		return ptr;
	}


	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* Function_GetMenuBar();
	void Function_CloseUp();
	void Function_DeSelect();
	void Function_SetCaption(const struct FString& C);
	void Function_Select();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Function_CreateSubMenu(class UClass_Object_Field_Struct_State_Class* menuClass, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* InOwnerWindow);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowMenuBar
// 0x0010 (0x011C - 0x010C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* Selected;                                                 // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* Over;                                                     // 0x0110(0x0004)
	unsigned long                                      bAltDown : 1;                                             // 0x0114(0x0004)
	int                                                Spacing;                                                  // 0x0118(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowMenuBar");
		return ptr;
	}


	void Function_MenuItemSelected(class UClass_Object_Interactions_Interaction_UWindowBase* Sender, class UClass_Object_Interactions_Interaction_UWindowBase* Item);
	void Function_MenuCmd(int menu, int Item);
	void Function_KeyDown_KeyDown_KeyDown(int Key, float X, float Y);
	bool Function_HotKeyUp_HotKeyUp(int Key, float X, float Y);
	bool Function_HotKeyDown_HotKeyDown(int Key, float X, float Y);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* Function_GetMenuBar();
	void Function_Close_Close(bool bByParent);
	void Function_CloseUp();
	void Function_DrawMenuBar(class UClass_Object_Canvas* C);
	void Function_DrawItem_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_Select(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* i);
	void Function_MouseLeave_MouseLeave_MouseLeave();
	void Function_MouseMove_MouseMove_MouseMove(float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float MouseX, float MouseY);
	void Function_ResolutionChanged_ResolutionChanged(float W, float H);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* Function_AddItem(const struct FString& Caption);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* Function_AddHelpItem(const struct FString& Caption);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowMenuBarItem
// 0x0024 (0x0090 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     Caption;                                                  // 0x006C(0x000C) (NeedCtorLink)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* Owner;                                                    // 0x0078(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* menu;                                                     // 0x007C(0x0004)
	float                                              ItemLeft;                                                 // 0x0080(0x0004)
	float                                              ItemWidth;                                                // 0x0084(0x0004)
	unsigned long                                      bHelp : 1;                                                // 0x0088(0x0004)
	unsigned char                                      HotKey;                                                   // 0x008C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowMenuBarItem");
		return ptr;
	}


	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* Function_GetMenuBar();
	void Function_CloseUp();
	void Function_Select();
	void Function_DeSelect();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Function_CreateMenu(class UClass_Object_Field_Struct_State_Class* menuClass);
	void Function_SetCaption(const struct FString& C);
	void Function_SetHelp(bool B);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowTabControl
// 0x0014 (0x0120 - 0x010C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlLeftButton* LeftButton;                                               // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlRightButton* RightButton;                                              // 0x0110(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowTabControlTabArea* TabArea;                                                  // 0x0114(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* SelectedTab;                                              // 0x0118(0x0004)
	unsigned long                                      bMultiLine : 1;                                           // 0x011C(0x0004)
	unsigned long                                      bSelectNearestTabOnRemove : 1;                            // 0x011C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowTabControl");
		return ptr;
	}


	void Function_DeleteTab(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* tab);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* Function_GetTab(const struct FString& Caption);
	void Function_GotoTab(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* NewSelected, bool bByUser);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* Function_InsertTab(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* BeforeTab, const struct FString& Caption);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* Function_AddTab(const struct FString& Caption);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_SetMultiLine(bool InMultiLine);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowTabControl.UWindowPageControl
// 0x0000 (0x0120 - 0x0120)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl_UWindowPageControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowTabControl.UWindowPageControl");
		return ptr;
	}


	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* Function_FirstPage();
	void Function_GotoTab_GotoTab(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* NewSelected, bool bByUser);
	void Function_Close_Close(bool bByParent);
	void Function_DeletePage(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* p);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* Function_GetPage(const struct FString& Caption);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* Function_InsertPage(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* BeforePage, const struct FString& Caption, class UClass_Object_Field_Struct_State_Class* PageClass, const struct FName& ObjectName);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* Function_AddPage(const struct FString& Caption, class UClass_Object_Field_Struct_State_Class* PageClass, const struct FName& ObjectName);
	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_GetDesiredDimensions_GetDesiredDimensions(float* W, float* H);
	void Function_NotifyAfterLevelChange_NotifyAfterLevelChange();
	void Function_NotifyBeforeLevelChange_NotifyBeforeLevelChange();
	void Function_NotifyQuitUnreal_NotifyQuitUnreal();
	void Function_ResolutionChanged_ResolutionChanged(float W, float H);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UWindowPageWindow
// 0x0004 (0x00C4 - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowPageWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* OwnerTab;                                                 // 0x00C0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UWindowPageWindow");
		return ptr;
	}


	void Function_RightClickTab();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowTabControlRightButton
// 0x0000 (0x0170 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlRightButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowTabControlRightButton");
		return ptr;
	}


	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowTabControlLeftButton
// 0x0000 (0x0170 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlLeftButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowTabControlLeftButton");
		return ptr;
	}


	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowTabControlTabArea
// 0x0024 (0x00D8 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowTabControlTabArea : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	int                                                TabOffset;                                                // 0x00B4(0x0004)
	unsigned long                                      bShowSelected : 1;                                        // 0x00B8(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* FirstShown;                                               // 0x00BC(0x0004)
	unsigned long                                      bDragging : 1;                                            // 0x00C0(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem* DragTab;                                                  // 0x00C4(0x0004)
	int                                                TabRows;                                                  // 0x00C8(0x0004)
	unsigned long                                      bArrangeRowsLikeTimHates : 1;                             // 0x00CC(0x0004) (Config, GlobalConfig)
	float                                              UnFlashTime;                                              // 0x00D0(0x0004)
	unsigned long                                      bFlashShown : 1;                                          // 0x00D4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowTabControlTabArea");
		return ptr;
	}


	bool Function_CheckMousePassThrough_CheckMousePassThrough(float X, float Y);
	void Function_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H, bool bShowText);
	void Function_RMouseDown_RMouseDown(float X, float Y);
	void Function_MouseMove_MouseMove(float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_LayoutTabs(class UClass_Object_Canvas* C);
	void Function_SizeTabsMultiLine(class UClass_Object_Canvas* C);
	void Function_SizeTabsSingleLine(class UClass_Object_Canvas* C);
	void Function_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowHScrollbar
// 0x0034 (0x00E8 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowHScrollbar : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBLeftButton* LeftButton;                                               // 0x00B4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBRightButton* RightButton;                                              // 0x00B8(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x00BC(0x0004)
	float                                              MinPos;                                                   // 0x00C0(0x0004)
	float                                              MaxPos;                                                   // 0x00C4(0x0004)
	float                                              MaxVisible;                                               // 0x00C8(0x0004)
	float                                              pos;                                                      // 0x00CC(0x0004)
	float                                              ThumbStart;                                               // 0x00D0(0x0004)
	float                                              ThumbWidth;                                               // 0x00D4(0x0004)
	float                                              NextClickTime;                                            // 0x00D8(0x0004)
	float                                              DragX;                                                    // 0x00DC(0x0004)
	unsigned long                                      bDragging : 1;                                            // 0x00E0(0x0004)
	float                                              ScrollAmount;                                             // 0x00E4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowHScrollbar");
		return ptr;
	}


	void Function_MouseMove_MouseMove(float X, float Y);
	void Function_Tick_Tick_Tick(float Delta);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created();
	void Function_CheckRange();
	void Function_SetRange(float NewMinPos, float NewMaxPos, float NewMaxVisible, float NewScrollAmount);
	bool Function_Scroll(float Delta);
	void Function_Show(float p);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowVScrollbar
// 0x0034 (0x00E8 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowVScrollbar : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBUpButton* UpButton;                                                 // 0x00B4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBDownButton* DownButton;                                               // 0x00B8(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x00BC(0x0004)
	float                                              MinPos;                                                   // 0x00C0(0x0004)
	float                                              MaxPos;                                                   // 0x00C4(0x0004)
	float                                              MaxVisible;                                               // 0x00C8(0x0004)
	float                                              pos;                                                      // 0x00CC(0x0004)
	float                                              ThumbStart;                                               // 0x00D0(0x0004)
	float                                              ThumbHeight;                                              // 0x00D4(0x0004)
	float                                              NextClickTime;                                            // 0x00D8(0x0004)
	float                                              DragY;                                                    // 0x00DC(0x0004)
	unsigned long                                      bDragging : 1;                                            // 0x00E0(0x0004)
	float                                              ScrollAmount;                                             // 0x00E4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowVScrollbar");
		return ptr;
	}


	void Function_MouseMove_MouseMove(float X, float Y);
	void Function_Tick_Tick_Tick(float Delta);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created();
	void Function_CheckRange();
	void Function_SetRange(float NewMinPos, float NewMaxPos, float NewMaxVisible, float NewScrollAmount);
	bool Function_Scroll(float Delta);
	void Function_Show(float p);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBRightButton
// 0x0004 (0x0174 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBRightButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:
	float                                              NextClickTime;                                            // 0x0170(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBRightButton");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float Delta);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBLeftButton
// 0x0004 (0x0174 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBLeftButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:
	float                                              NextClickTime;                                            // 0x0170(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBLeftButton");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float Delta);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBDownButton
// 0x0004 (0x0174 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBDownButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:
	float                                              NextClickTime;                                            // 0x0170(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBDownButton");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float Delta);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBUpButton
// 0x0004 (0x0174 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBUpButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:
	float                                              NextClickTime;                                            // 0x0170(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSBUpButton");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float Delta);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowEditControl
// 0x0010 (0x0108 - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	float                                              EditBoxWidth;                                             // 0x00F8(0x0004)
	float                                              EditAreaDrawX;                                            // 0x00FC(0x0004)
	float                                              EditAreaDrawY;                                            // 0x0100(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditBox* EditBox;                                                  // 0x0104(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowEditControl");
		return ptr;
	}


	void Function_SetDelayedNotify(bool bDelayedNotify);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_SetMaxLength(int MaxLength);
	void Function_SetValue(const struct FString& NewValue);
	struct FString Function_GetValue();
	void Function_Clear();
	void Function_SetEditTextColor(const struct FStruct_Color& NewColor);
	void Function_SetHistory(bool bInHistory);
	void Function_SetFont_SetFont(int NewFont);
	void Function_SetNumericFloat(bool bNumericFloat);
	void Function_SetNumericOnly(bool bNumericOnly);
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowComboList
// 0x0020 (0x012C - 0x010C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowComboList : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* Owner;                                                    // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowVScrollbar* VertSB;                                                   // 0x0110(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowComboListItem* Selected;                                                 // 0x0114(0x0004)
	int                                                ItemHeight;                                               // 0x0118(0x0004)
	int                                                VBorder;                                                  // 0x011C(0x0004)
	int                                                HBorder;                                                  // 0x0120(0x0004)
	int                                                TextBorder;                                               // 0x0124(0x0004)
	int                                                MaxVisible;                                               // 0x0128(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowComboList");
		return ptr;
	}


	void Function_FocusOtherWindow_FocusOtherWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_CloseUp();
	void Function_ExecuteItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowComboListItem* i);
	void Function_DrawItem_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
	void Function_DrawMenuBackground(class UClass_Object_Canvas* C);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_LMouseUp_LMouseUp(float X, float Y);
	void Function_MouseMove_MouseMove_MouseMove(float X, float Y);
	void Function_SetSelected(float X, float Y);
	void Function_InsertItem(const struct FString& Value, const struct FString& Value2, int SortWeight);
	void Function_AddItem(const struct FString& Value, const struct FString& Value2, int SortWeight);
	struct FString Function_GetItemValue2(int Index);
	void Function_RemoveItem(int Index);
	struct FString Function_GetItemValue(int Index);
	int Function_FindItemIndex2(const struct FString& Value2, bool bIgnoreCase);
	int Function_FindItemIndex(const struct FString& Value, bool bIgnoreCase);
	void Function_Created_Created_Created_Created();
	void Function_Setup();
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* Function_GetLookAndFeelTexture_GetLookAndFeelTexture();
	void Function_Clear();
	void Function_WindowShown_WindowShown();
	void Function_Sort();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowCheckbox
// 0x0004 (0x0174 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowCheckbox : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:
	unsigned long                                      bChecked : 1;                                             // 0x0170(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowCheckbox");
		return ptr;
	}


	void Function_LMouseUp_LMouseUp(float X, float Y);
	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowComboRightButton
// 0x0000 (0x0170 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboRightButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowComboRightButton");
		return ptr;
	}


	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowComboLeftButton
// 0x0000 (0x0170 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboLeftButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowComboLeftButton");
		return ptr;
	}


	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowComboButton
// 0x0004 (0x0174 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* Owner;                                                    // 0x0170(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowComboButton");
		return ptr;
	}


	void Function_FocusOtherWindow_FocusOtherWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_Click_Click_Click(float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowComboControl
// 0x0028 (0x0120 - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	float                                              EditBoxWidth;                                             // 0x00F8(0x0004)
	float                                              EditAreaDrawX;                                            // 0x00FC(0x0004)
	float                                              EditAreaDrawY;                                            // 0x0100(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditBox* EditBox;                                                  // 0x0104(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboButton* Button;                                                   // 0x0108(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboLeftButton* LeftButton;                                               // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboRightButton* RightButton;                                              // 0x0110(0x0004)
	class UClass_Object_Field_Struct_State_Class*      ListClass;                                                // 0x0114(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowComboList* List;                                                     // 0x0118(0x0004)
	unsigned long                                      bListVisible : 1;                                         // 0x011C(0x0004)
	unsigned long                                      bCanEdit : 1;                                             // 0x011C(0x0004)
	unsigned long                                      bButtons : 1;                                             // 0x011C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowComboControl");
		return ptr;
	}


	void Function_FocusOtherWindow_FocusOtherWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_Clear();
	void Function_ClearValue();
	void Function_Sort();
	void Function_DropDown();
	void Function_CloseUp();
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_InsertItem(const struct FString& S, const struct FString& S2, int SortWeight);
	void Function_AddItem(const struct FString& S, const struct FString& S2, int SortWeight);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_SetMaxLength(int MaxLength);
	void Function_SetValue(const struct FString& NewValue, const struct FString& NewValue2);
	struct FString Function_GetValue2();
	struct FString Function_GetValue();
	void Function_SetSelectedIndex(int Index);
	int Function_GetSelectedIndex();
	void Function_SetEditable(bool bNewCanEdit);
	void Function_SetEditTextColor(const struct FStruct_Color& NewColor);
	void Function_SetFont_SetFont(int NewFont);
	void Function_SetNumericFloat(bool bNumericFloat);
	void Function_SetNumericOnly(bool bNumericOnly);
	void Function_Close_Close(bool bByParent);
	int Function_FindItemIndex2(const struct FString& V2, bool bIgnoreCase);
	void Function_RemoveItem(int Index);
	int Function_FindItemIndex(const struct FString& V, bool bIgnoreCase);
	void Function_Notify_Notify(unsigned char E);
	void Function_SetButtons(bool bInButtons);
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowFrameCloseBox
// 0x0000 (0x0170 - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowFrameCloseBox : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowFrameCloseBox");
		return ptr;
	}


	void Function_KeyDown_KeyDown_KeyDown_KeyDown(int Key, float X, float Y);
	void Function_Click_Click_Click(float X, float Y);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UWindowMessageBoxCW
// 0x0048 (0x0108 - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowMessageBoxCW : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:
	TEnumAsByte<EMessageBoxButtons>                    Buttons;                                                  // 0x00C0(0x0001)
	TEnumAsByte<EMessageBoxResult>                     EnterResult;                                              // 0x00C1(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00C2(0x0002) MISSED OFFSET
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* YesButton;                                                // 0x00C4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* NoButton;                                                 // 0x00C8(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* OKButton;                                                 // 0x00CC(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* CancelButton;                                             // 0x00D0(0x0004)
	struct FString                                     YesText;                                                  // 0x00D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NoText;                                                   // 0x00E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     OKText;                                                   // 0x00EC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     CancelText;                                               // 0x00F8(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowMessageBoxArea* MessageArea;                                              // 0x0104(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UWindowMessageBoxCW");
		return ptr;
	}


	void Function_Notify_Notify(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* C, unsigned char E);
	void Function_SetupMessageBoxClient(const struct FString& InMessage, TEnumAsByte<EMessageBoxButtons> InButtons, TEnumAsByte<EMessageBoxResult> InEnterResult);
	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	float Function_GetHeight(class UClass_Object_Canvas* C);
	void Function_Resized_Resized();
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_KeyDown_KeyDown(int Key, float X, float Y);
	void Function_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UWindowConsoleClientWindow
// 0x0008 (0x00C8 - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowConsoleClientWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowDynamicTextArea_UWindowConsoleTextAreaControl* TextArea;                                                 // 0x00C0(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditControl* EditControl;                                              // 0x00C4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UWindowConsoleClientWindow");
		return ptr;
	}


	void Function_Message_Message(const struct FString& msg, float MsgLife);
	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Notify_Notify(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* C, unsigned char E);
	void Function_Created_Created();
};


// Class Object.Actor.Projectile.ExplosiveProjectile.RocketPodProjectile
// 0x0080 (0x04E8 - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_RocketPodProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile
{
public:
	struct FStruct_Vector                              XAxis;                                                    // 0x0468(0x000C)
	struct FStruct_Vector                              YAxis;                                                    // 0x0474(0x000C)
	struct FStruct_Vector                              ZAxis;                                                    // 0x0480(0x000C)
	struct FStruct_InitVec                             initialZAxis;                                             // 0x048C(0x000C) (Net)
	struct FStruct_Vector                              rotationVec;                                              // 0x0498(0x000C) (Net)
	struct FStruct_Vector                              prevRotationVec;                                          // 0x04A4(0x000C)
	float                                              Offset;                                                   // 0x04B0(0x0004)
	float                                              offsetVecAngle;                                           // 0x04B4(0x0004)
	float                                              spiralRate;                                               // 0x04B8(0x0004) (Edit, NoClear)
	unsigned long                                      armed : 1;                                                // 0x04BC(0x0004)
	float                                              armingPeriod;                                             // 0x04C0(0x0004) (Edit, NoClear)
	float                                              spreadRadius;                                             // 0x04C4(0x0004) (Edit, NoClear)
	float                                              spreadPeriod;                                             // 0x04C8(0x0004) (Edit, NoClear)
	float                                              convergeRadius;                                           // 0x04CC(0x0004) (Edit, NoClear)
	float                                              convergePeriod;                                           // 0x04D0(0x0004) (Edit, NoClear)
	float                                              postSpreadVelocity;                                       // 0x04D4(0x0004) (Edit, NoClear)
	float                                              postSpreadAcceleration;                                   // 0x04D8(0x0004) (Edit, NoClear)
	float                                              maxAnglePerSecond;                                        // 0x04DC(0x0004) (Edit, NoClear)
	float                                              rotationModifier;                                         // 0x04E0(0x0004) (Edit, NoClear)
	float                                              timeCounter;                                              // 0x04E4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.RocketPodProjectile");
		return ptr;
	}


	void Function_controlProjectile(float Delta);
	void Function_accelerateProjectile(float Delta);
	void Function_Destroyed_Destroyed_Destroyed();
	void Function_endLife_endLife_endLife(class AClass_Object_Actor* HitActor, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_Timer_Timer();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Projectile.ChaingunProjectile
// 0x0000 (0x044C - 0x044C)
class AClass_Object_Actor_Projectile_ChaingunProjectile : public AClass_Object_Actor_Projectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ChaingunProjectile");
		return ptr;
	}

};


// Class Object.Actor.Projectile.SniperRifleProjectile
// 0x0008 (0x0454 - 0x044C)
class AClass_Object_Actor_Projectile_SniperRifleProjectile : public AClass_Object_Actor_Projectile
{
public:
	class AClass_Object_Actor_SniperRifleBeam*         Beam;                                                     // 0x044C(0x0004)
	float                                              energyModifier;                                           // 0x0450(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.SniperRifleProjectile");
		return ptr;
	}


	void Function_Destroyed_Destroyed();
	void Function_PostBounce_PostBounce(class AClass_Object_Actor_Projectile* newProjectile);
	void Function_ProjectileHit_ProjectileHit(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
	void Function_construct_RookActorNameVectorRotator_construct_RookActorNameVectorRotator(class AClass_Object_Actor_Pawn_Rook* attacker, class AClass_Object_Actor* Owner, const struct FName& Tag, const struct FStruct_Vector& Location, const struct FStruct_Rotator& Rotation);
};


// Class Object.Actor.SniperRifleBeam
// 0x001C (0x041C - 0x0400)
class AClass_Object_Actor_SniperRifleBeam : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Projectile_SniperRifleProjectile* proj;                                                     // 0x0400(0x0004)
	float                                              fadeRate;                                                 // 0x0404(0x0004) (Edit)
	float                                              scaleX;                                                   // 0x0408(0x0004) (Net)
	float                                              scaleZ;                                                   // 0x040C(0x0004) (Net)
	struct FStruct_Vector                              direction;                                                // 0x0410(0x000C) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SniperRifleBeam");
		return ptr;
	}


	void Function_scaleBeam();
	void Function_onProjectileDeath();
	float Function_setBeamScale(float X, float Z);
	void Function_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void Function_construct_SniperRifleProjectile(class AClass_Object_Actor_Projectile_SniperRifleProjectile* p);
};


// Class Object.Actor.ProjectileRadius
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_ProjectileRadius : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.ProjectileRadius");
		return ptr;
	}


	void Function_ProjectileTouch_ProjectileTouch(class AClass_Object_Actor* Other, const struct FStruct_Vector& TouchLocation, const struct FStruct_Vector& TouchNormal);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowEditBox
// 0x003C (0x0134 - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditBox : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	struct FString                                     Value;                                                    // 0x00F8(0x000C) (NeedCtorLink)
	struct FString                                     Value2;                                                   // 0x0104(0x000C) (NeedCtorLink)
	int                                                CaretOffset;                                              // 0x0110(0x0004)
	int                                                MaxLength;                                                // 0x0114(0x0004)
	float                                              LastDrawTime;                                             // 0x0118(0x0004)
	unsigned long                                      bShowCaret : 1;                                           // 0x011C(0x0004)
	float                                              Offset;                                                   // 0x0120(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* NotifyOwner;                                              // 0x0124(0x0004)
	unsigned long                                      bNumericOnly : 1;                                         // 0x0128(0x0004)
	unsigned long                                      bNumericFloat : 1;                                        // 0x0128(0x0004)
	unsigned long                                      bCanEdit : 1;                                             // 0x0128(0x0004)
	unsigned long                                      bAllSelected : 1;                                         // 0x0128(0x0004)
	unsigned long                                      bSelectOnFocus : 1;                                       // 0x0128(0x0004)
	unsigned long                                      bDelayedNotify : 1;                                       // 0x0128(0x0004)
	unsigned long                                      bChangePending : 1;                                       // 0x0128(0x0004)
	unsigned long                                      bControlDown : 1;                                         // 0x0128(0x0004)
	unsigned long                                      bShiftDown : 1;                                           // 0x0128(0x0004)
	unsigned long                                      bHistory : 1;                                             // 0x0128(0x0004)
	unsigned long                                      bKeyDown : 1;                                             // 0x0128(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowEditBoxHistory* HistoryList;                                              // 0x012C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowEditBoxHistory* CurrentHistory;                                           // 0x0130(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowEditBox");
		return ptr;
	}


	void Function_KeyFocusExit_KeyFocusExit_KeyFocusExit();
	void Function_DoubleClick_DoubleClick(float X, float Y);
	void Function_KeyFocusEnter_KeyFocusEnter_KeyFocusEnter();
	void Function_FocusOtherWindow_FocusOtherWindow(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W);
	void Function_Close_Close(bool bByParent);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_Click_Click(float X, float Y);
	void Function_KeyDown_KeyDown_KeyDown(int Key, float X, float Y);
	void Function_KeyUp_KeyUp(int Key, float X, float Y);
	void Function_KeyPressed_KeyPressed(int Key, float MouseX, float MouseY);
	void Function_EditCut();
	void Function_EditPaste();
	void Function_EditCopy();
	bool Function_MoveEnd();
	bool Function_MoveHome();
	bool Function_WordRight();
	bool Function_MoveRight();
	bool Function_MoveLeft();
	bool Function_WordLeft();
	bool Function_Delete();
	bool Function_Backspace();
	bool Function_Insert(unsigned char C);
	void Function_InsertText(const struct FString& Text);
	void Function_Notify_Notify(unsigned char E);
	struct FString Function_GetValue2();
	struct FString Function_GetValue();
	void Function_SelectAll();
	void Function_Clear();
	void Function_SetValue(const struct FString& NewValue, const struct FString& NewValue2);
	void Function_SetEditable(bool bEditable);
	void Function_SetHistory(bool bInHistory);
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowComboListItem
// 0x0020 (0x008C - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowComboListItem : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     Value;                                                    // 0x006C(0x000C) (NeedCtorLink)
	struct FString                                     Value2;                                                   // 0x0078(0x000C) (NeedCtorLink)
	int                                                SortWeight;                                               // 0x0084(0x0004)
	float                                              ItemTop;                                                  // 0x0088(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowComboListItem");
		return ptr;
	}


	int Function_Compare_Compare(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* t, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* B);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowTabControlItem
// 0x0034 (0x00A0 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     Caption;                                                  // 0x006C(0x000C) (NeedCtorLink)
	struct FString                                     HelpText;                                                 // 0x0078(0x000C) (NeedCtorLink)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl* Owner;                                                    // 0x0084(0x0004)
	float                                              TabTop;                                                   // 0x0088(0x0004)
	float                                              TabLeft;                                                  // 0x008C(0x0004)
	float                                              TabWidth;                                                 // 0x0090(0x0004)
	float                                              TabHeight;                                                // 0x0094(0x0004)
	int                                                RowNumber;                                                // 0x0098(0x0004)
	unsigned long                                      bFlash : 1;                                               // 0x009C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowTabControlItem");
		return ptr;
	}


	void Function_RightClickTab();
	void Function_SetCaption(const struct FString& NewCaption);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowTabControlItem.UWindowPageControlPage
// 0x0004 (0x00A4 - 0x00A0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowPageWindow* Page;                                                     // 0x00A0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowTabControlItem.UWindowPageControlPage");
		return ptr;
	}


	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowTabControlItem_UWindowPageControlPage* Function_NextPage();
	void Function_RightClickTab_RightClickTab();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowDynamicTextArea
// 0x0040 (0x0138 - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowDynamicTextArea : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	int                                                MaxLines;                                                 // 0x00F8(0x0004) (Config)
	unsigned long                                      bTopCentric : 1;                                          // 0x00FC(0x0004)
	float                                              DefaultTextHeight;                                        // 0x0100(0x0004)
	unsigned long                                      bScrollOnResize : 1;                                      // 0x0104(0x0004)
	unsigned long                                      bVCenter : 1;                                             // 0x0104(0x0004)
	unsigned long                                      bHCenter : 1;                                             // 0x0104(0x0004)
	unsigned long                                      bAutoScrollbar : 1;                                       // 0x0104(0x0004)
	unsigned long                                      bVariableRowHeight : 1;                                   // 0x0104(0x0004)
	float                                              WrapWidth;                                                // 0x0108(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* List;                                                     // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowVScrollbar* VertSB;                                                   // 0x0110(0x0004)
	float                                              OldW;                                                     // 0x0114(0x0004)
	float                                              OldH;                                                     // 0x0118(0x0004)
	unsigned long                                      bDirty : 1;                                               // 0x011C(0x0004)
	int                                                Count;                                                    // 0x0120(0x0004)
	int                                                VisibleRows;                                              // 0x0124(0x0004)
	int                                                Font;                                                     // 0x0128(0x0004)
	class UClass_Object_Font*                          AbsoluteFont;                                             // 0x012C(0x0004)
	struct FStruct_Color                               TextColor;                                                // 0x0130(0x0004)
	class UClass_Object_Field_Struct_State_Class*      RowClass;                                                 // 0x0134(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowDynamicTextArea");
		return ptr;
	}


	void Function_RemoveWrap(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* L);
	void Function_RemoveNextWord(struct FString* Text, struct FString* NextWord);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* Function_SplitRowAt(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* L, int SplitPos);
	int Function_GetWrapPos(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* L, float MaxWidth);
	float Function_DrawTextLine(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* L, float Y);
	void Function_WrapRow(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* L);
	void Function_WordWrap(class UClass_Object_Canvas* C, bool bForce);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* Function_CheckMaxRows();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* Function_AddText(const struct FString& NewLine);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float MouseX, float MouseY);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_TextAreaTextSize(class UClass_Object_Canvas* C, const struct FString& Text, float* W, float* H);
	void Function_TextAreaClipText(class UClass_Object_Canvas* C, float DrawX, float DrawY, const struct FString& S, bool bCheckHotKey);
	void Function_SetTextColor_SetTextColor(const struct FStruct_Color& C);
	void Function_SetFont_SetFont(int F);
	void Function_SetAbsoluteFont(class UClass_Object_Font* F);
	void Function_Clear();
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowDynamicTextArea.UWindowConsoleTextAreaControl
// 0x0000 (0x0138 - 0x0138)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowDynamicTextArea_UWindowConsoleTextAreaControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowDynamicTextArea
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowDynamicTextArea.UWindowConsoleTextAreaControl");
		return ptr;
	}

};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowMessageBoxArea
// 0x000C (0x00C0 - 0x00B4)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowMessageBoxArea : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow
{
public:
	struct FString                                     Message;                                                  // 0x00B4(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowMessageBoxArea");
		return ptr;
	}


	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	float Function_GetHeight(class UClass_Object_Canvas* C);
};


// Class Object.EffectSpecification.VisualEffectSpecification
// 0x0018 (0x0060 - 0x0048)
class UClass_Object_EffectSpecification_VisualEffectSpecification : public UClass_Object_EffectSpecification
{
public:
	TArray<TEnumAsByte<EMaterialVisualType>>           MaterialType;                                             // 0x0048(0x000C) (Config, NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> EffectClass;                                              // 0x0054(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EffectSpecification.VisualEffectSpecification");
		return ptr;
	}


	void Function_Init_Init(class AClass_Object_Actor_EffectsSubsystem* EffectsSubsystem);
};


// Class Object.Actor.Projector.ProjectedDecal
// 0x000C (0x059C - 0x0590)
class AClass_Object_Actor_Projector_ProjectedDecal : public AClass_Object_Actor_Projector
{
public:
	float                                              PreferredDistance;                                        // 0x0590(0x0004) (Edit, NoClear)
	unsigned long                                      RandomOrient : 1;                                         // 0x0594(0x0004) (Edit, NoClear)
	class AClass_Object_Actor*                         Target;                                                   // 0x0598(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal");
		return ptr;
	}


	void Function_Destroyed_Destroyed();
	void Function_Tick_Tick(float DeltaTime);
	void Function_Init();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowEditBoxHistory
// 0x000C (0x0078 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowEditBoxHistory : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     HistoryText;                                              // 0x006C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowEditBoxHistory");
		return ptr;
	}

};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowDynamicTextRow
// 0x0014 (0x0080 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     Text;                                                     // 0x006C(0x000C) (NeedCtorLink)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowDynamicTextRow* WrapParent;                                               // 0x0078(0x0004)
	unsigned long                                      bRowDirty : 1;                                            // 0x007C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowDynamicTextRow");
		return ptr;
	}

};


// Class Object.EquippableAnimator.EquippableDepTurretAnimator
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_EquippableAnimator_EquippableDepTurretAnimator : public UClass_Object_EquippableAnimator
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EquippableAnimator.EquippableDepTurretAnimator");
		return ptr;
	}


	void STATIC_Function_setLocRot_setLocRot(class AClass_Object_Actor_Equipment_Equippable* E, const struct FStruct_Vector& NewLocation, const struct FStruct_Rotator& NewRotation);
	void STATIC_Function_firstPersonStatus_firstPersonStatus(class AClass_Object_Actor_Equipment_Equippable* E, bool bStatus);
	void STATIC_Function_playEquippableAnim_playEquippableAnim(class AClass_Object_Actor_Equipment_Equippable* E, const struct FName& animName, float Rate, float TweenTime, int Channel);
	bool STATIC_Function_hasEquippableAnim_hasEquippableAnim(class AClass_Object_Actor_Equipment_Equippable* E, const struct FName& animName);
};


// Class Object.Actor.UseableObject.SwitchStationUseableObject
// 0x0000 (0x0420 - 0x0420)
class AClass_Object_Actor_UseableObject_SwitchStationUseableObject : public AClass_Object_Actor_UseableObject
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.SwitchStationUseableObject");
		return ptr;
	}


	void Function_UsedBy_UsedBy_UsedBy(class AClass_Object_Actor_Pawn* User);
	bool Function_CanBeUsedBy_CanBeUsedBy(class AClass_Object_Actor_Pawn* User);
};


// Class Object.Actor.Pawn.Rook.VehicleMountedTurret.TankMountedTurret
// 0x0000 (0x0938 - 0x0938)
class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret_TankMountedTurret : public AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.VehicleMountedTurret.TankMountedTurret");
		return ptr;
	}


	void Function_getThirdPersonEquippableAttachment_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TankGunnerWeapon
// 0x0004 (0x0600 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TankGunnerWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon
{
public:
	float                                              Spread;                                                   // 0x05FC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TankGunnerWeapon");
		return ptr;
	}


	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
};


// Class Object.Actor.Motor.VehicleMotor.CarMotor.TankMotor
// 0x0000 (0x0414 - 0x0414)
class AClass_Object_Actor_Motor_VehicleMotor_CarMotor_TankMotor : public AClass_Object_Actor_Motor_VehicleMotor_CarMotor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor.CarMotor.TankMotor");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TankWeapon
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TankWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TankWeapon");
		return ptr;
	}


	bool Function_firstPersonStatus_firstPersonStatus();
	void Function_moveWeapon_moveWeapon();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.TankHavokData
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_TankHavokData : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.TankHavokData");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.PodWeapon
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_PodWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.PodWeapon");
		return ptr;
	}


	void Function_moveWeapon_moveWeapon();
	bool Function_firstPersonStatus_firstPersonStatus();
	bool Function_canFire_canFire();
};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.PodHavokData
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_PodHavokData : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.PodHavokData");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.PodWeaponProjectile
// 0x0000 (0x0468 - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_PodWeaponProjectile : public AClass_Object_Actor_Projectile_ExplosiveProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.PodWeaponProjectile");
		return ptr;
	}

};


// Class Object.Actor.TsViewFocus
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_TsViewFocus : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.TsViewFocus");
		return ptr;
	}

};


// Class Object.Actor.HavokVehicleFactory
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_HavokVehicleFactory : public AClass_Object_Actor
{
public:
	class UClass_Object_Field_Struct_State_Class*      VehicleClass;                                             // 0x0400(0x0004) (Edit)
	int                                                MaxVehicleCount;                                          // 0x0404(0x0004) (Edit)
	int                                                VehicleCount;                                             // 0x0408(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokVehicleFactory");
		return ptr;
	}


	void Function_Trigger_Trigger(class AClass_Object_Actor* Other, class AClass_Object_Actor_Pawn* EventInstigator);
};


// Class Object.Actor.Triggers.Trigger.ZoneTrigger
// 0x0000 (0x043C - 0x043C)
class AClass_Object_Actor_Triggers_Trigger_ZoneTrigger : public AClass_Object_Actor_Triggers_Trigger
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Triggers.Trigger.ZoneTrigger");
		return ptr;
	}


	void Function_UnTouch_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.IBooleanActionCondition
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IBooleanActionCondition : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IBooleanActionCondition");
		return ptr;
	}


	bool STATIC_Function_actionTest(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
};


// Class Object.Actor.HUD.DefaultHUD
// 0x001C (0x0650 - 0x0634)
class AClass_Object_Actor_HUD_DefaultHUD : public AClass_Object_Actor_HUD
{
public:
	class AClass_Object_Actor_PFTestHarness*           pathfindTestHarness;                                      // 0x0634(0x0004)
	class AClass_Object_Actor_NavigationTestHarness*   NavigationTestHarness;                                    // 0x0638(0x0004)
	struct FString                                     NavigationTestHarnessClass;                               // 0x063C(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_SquadInfo*               debugSquadInfo;                                           // 0x0648(0x0004)
	unsigned long                                      playerWeaponDebug : 1;                                    // 0x064C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HUD.DefaultHUD");
		return ptr;
	}


	void Function_LocalizedMessage_LocalizedMessage(class UClass_Object_Field_Struct_State_Class* Message, int Switch, class UClass_Object* Related1, class UClass_Object* Related2, class UClass_Object* OptionalObject, const struct FString& CriticalString, const struct FString& OptionalString);
	void Function_DrawBox(class UClass_Object_Canvas* C, int X, int Y, int W, int H, int Size);
	void Function_drawScores(class UClass_Object_Canvas* C, int Y);
	void Function_drawJustifiedShadowedText(class UClass_Object_Canvas* Canvas, const struct FString& Text, int X, int Y, int x1, int y1, int justify);
	void Function_drawShadowedText(class UClass_Object_Canvas* Canvas, const struct FString& Text, int X, int Y);
	void Function_debugPlayerWeapon();
	void Function_DrawHUD_DrawHUD(class UClass_Object_Canvas* Canvas);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_CharacterResource
// 0x000C (0x00A0 - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_Pawn*                    m_pawn;                                                   // 0x0094(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction_AI_CommonSenseSensorAction* commonSenseSensorAction;                                  // 0x0098(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction_AI_GoalSpecificSensorAction* goalSpecificSensorAction;                                 // 0x009C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_CharacterResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	bool Function_isActive_isActive();
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* p);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction
// 0x0000 (0x0048 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* Function_BaseAICharacter();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_Character();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_CommonSenseSensorAction
// 0x0028 (0x0070 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction_AI_CommonSenseSensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_GetOutOfWaySensor* getOutOfWaySensor;                                        // 0x0048(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PainSensor* painSensor;                                               // 0x004C(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_EnemySensor* enemySensor;                                              // 0x0050(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_DodgeSensor* dodgeSensor;                                              // 0x0054(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor* targetSensor;                                             // 0x0058(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor_AI_TargetMemorySensor* targetMemorySensor;                                       // 0x005C(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_ReactToFireSensor* reactToFireSensor;                                        // 0x0060(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_NearMissSensor* nearMissSensor;                                           // 0x0064(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_GuardSensor* guardSensor;                                              // 0x0068(0x0004)
	class AClass_Object_Actor_NearMissCollisionVolume* fatVolume;                                                // 0x006C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_CommonSenseSensorAction");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.DeleteableObject.AI_Sensor.AI_PainSensor
// 0x0018 (0x0064 - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PainSensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	class AClass_Object_Actor_Pawn*                    InstigatedBy;                                             // 0x004C(0x0004)
	struct FStruct_Vector                              HitLocation;                                              // 0x0050(0x000C)
	class UClass_Object_Field_Struct_State_Class*      DamageType;                                               // 0x005C(0x0004)
	int                                                tickStamp;                                                // 0x0060(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PainSensor");
		return ptr;
	}


	void Function_SetValue(int Damage, class AClass_Object_Actor_Pawn* InstigatedBy, const struct FStruct_Vector& HitLocation, class UClass_Object_Field_Struct_State_Class* DamageType, int Tick);
};


// Class Object.Message.MessagePreDrawHUD
// 0x0008 (0x0034 - 0x002C)
class UClass_Object_Message_MessagePreDrawHUD : public UClass_Object_Message
{
public:
	class AClass_Object_Actor_HUD_DefaultHUD*          HUD;                                                      // 0x002C(0x0004)
	class UClass_Object_Canvas*                        Canvas;                                                   // 0x0030(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessagePreDrawHUD");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_DefaultHUDCanvas(class AClass_Object_Actor_HUD_DefaultHUD* _hud, class UClass_Object_Canvas* _canvas);
};


// Class Object.Actor.PFTestHarness
// 0x008C (0x048C - 0x0400)
class AClass_Object_Actor_PFTestHarness : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_HUD*                     selfHUD;                                                  // 0x0400(0x0004)
	unsigned long                                      Enabled : 1;                                              // 0x0404(0x0004)
	unsigned long                                      initialised : 1;                                          // 0x0404(0x0004)
	struct FStruct_Vector                              startPoint;                                               // 0x0408(0x000C)
	unsigned long                                      startPointInit : 1;                                       // 0x0414(0x0004)
	struct FStruct_Vector                              endPoint;                                                 // 0x0418(0x000C)
	unsigned long                                      endPointInit : 1;                                         // 0x0424(0x0004)
	unsigned long                                      showNodes : 1;                                            // 0x0424(0x0004)
	unsigned long                                      showReach : 1;                                            // 0x0424(0x0004)
	unsigned long                                      stepEnabled : 1;                                          // 0x0424(0x0004)
	unsigned long                                      stepThroughInProgress : 1;                                // 0x0424(0x0004)
	int                                                currentStep;                                              // 0x0428(0x0004)
	unsigned long                                      traversalCheckEnabled : 1;                                // 0x042C(0x0004)
	TArray<struct FStruct_RouteCacheElement>           routeCacheOne;                                            // 0x0430(0x000C) (NeedCtorLink)
	TArray<struct FStruct_RouteCacheElement>           routeCacheTwo;                                            // 0x043C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_RouteCacheElement>           routeCacheThree;                                          // 0x0448(0x000C) (NeedCtorLink)
	struct FStruct_FindPathAIProperties                AIPropertiesOne;                                          // 0x0454(0x0010)
	struct FStruct_FindPathAIProperties                AIPropertiesTwo;                                          // 0x0464(0x0010)
	struct FStruct_FindPathAIProperties                AIPropertiesThree;                                        // 0x0474(0x0010)
	int                                                routeCahcesInit;                                          // 0x0484(0x0004)
	unsigned long                                      continueFlag : 1;                                         // 0x0488(0x0004)
	unsigned long                                      showQuadtree : 1;                                         // 0x0488(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.PFTestHarness");
		return ptr;
	}


	void Function_logObstacles(TArray<struct FStruct_RouteCacheElement> RouteCache);
	void Function_copyRouteCache(TArray<struct FStruct_RouteCacheElement> Source, TArray<struct FStruct_RouteCacheElement>* Destination);
	void Function_pathfindMarkPoint();
	void Function_markPoint(const struct FStruct_Vector& point);
	void Function_markPointHere();
	void Function_Step();
	void Function_toggleTraversalCheck();
	void Function_toggleStep();
	void Function_diagnostics();
	void Function_toggleShowReach();
	void Function_toggleShowQuadtree();
	void Function_showPathNodes();
	void Function_pathfindDebug();
	void Function_DrawRoute(TArray<struct FStruct_RouteCacheElement> route, const struct FStruct_Color& normalColor, const struct FStruct_Color& jetpackColor);
	void Function_drawDebug();
	void Function_Initialise(class AClass_Object_Actor_HUD* initHUD);
};


// Class Object.Actor.NavigationTestHarness
// 0x0010 (0x0410 - 0x0400)
class AClass_Object_Actor_NavigationTestHarness : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_HUD*                     selfHUD;                                                  // 0x0400(0x0004)
	unsigned long                                      initialised : 1;                                          // 0x0404(0x0004)
	class AClass_Object_Actor_Controller*              workController;                                           // 0x0408(0x0004)
	unsigned long                                      Enabled : 1;                                              // 0x040C(0x0004)
	unsigned long                                      started : 1;                                              // 0x040C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.NavigationTestHarness");
		return ptr;
	}


	void Function_Restart();
	void Function_toggleEnabled();
	void Function_Initialise(class AClass_Object_Actor_HUD* initHUD);
	void Function_markPoint();
};


// Class Object.DeleteableObject.AI_SensorRecipient
// 0x0014 (0x0048 - 0x0034)
class UClass_Object_DeleteableObject_AI_SensorRecipient : public UClass_Object_DeleteableObject
{
public:
	class UClass_Object_ISensorNotification*           Recipient;                                                // 0x0034(0x0004)
	unsigned long                                      bNotify : 1;                                              // 0x0038(0x0004)
	float                                              lowerBound;                                               // 0x003C(0x0004)
	float                                              upperBound;                                               // 0x0040(0x0004)
	class UClass_Object*                               userData;                                                 // 0x0044(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_SensorRecipient");
		return ptr;
	}

};


// Class Object.ISensorNotification
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_ISensorNotification : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ISensorNotification");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* Function_getResource();
	void Function_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_SensorResource
// 0x0004 (0x0098 - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_SensorResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_GlobalSensorAction* globalSensorAction;                                       // 0x0094(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_SensorResource");
		return ptr;
	}


	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_CharacterAction
// 0x001C (0x0080 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_CharacterAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:
	class AClass_Object_Actor_Pawn*                    Pawn;                                                     // 0x0064(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MovementResource* movementResourceStorage;                                  // 0x0068(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_WeaponResource* weaponResourceStorage;                                    // 0x006C(0x0004)
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_HeadResource* headResourceStorage;                                      // 0x0070(0x0004)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* DummyMovementGoal;                                        // 0x0074(0x0004)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* DummyWeaponGoal;                                          // 0x0078(0x0004)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* DummyHeadGoal;                                            // 0x007C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_CharacterAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_HeadResource* Function_headResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_WeaponResource* Function_weaponResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MovementResource* Function_movementResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* Function_BaseAICharacter();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_Character();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
	void Function_initAction_initAction(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
	void Function_useResources(int resourceBits);
	void Function_clearDummyGoals();
	void Function_clearDummyHeadGoal();
	void Function_clearDummyWeaponGoal();
	void Function_clearDummyMovementGoal();
	void Function_cleanup_cleanup();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_GoalSpecificSensorAction
// 0x0014 (0x005C - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction_AI_GoalSpecificSensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_RepairSensor* repairSensor;                                             // 0x0048(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_EnterVehicleSensor* enterVehicleSensor;                                       // 0x004C(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* AI;                                                       // 0x0050(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               Target;                                                   // 0x0054(0x0004)
	int                                                i;                                                        // 0x0058(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_GoalSpecificSensorAction");
		return ptr;
	}


	class AClass_Object_Actor_Pawn_Rook* Function_findDamagedNearbyPawn();
	class AClass_Object_Actor_Pawn_Rook* Function_findDamagedSquadMate();
	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_PlayerSensorAction
// 0x000C (0x0054 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction_AI_PlayerSensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_PlayerProximitySensor* playerProximitySensor;                                    // 0x0048(0x0004)
	class AClass_Object_Actor_Pawn*                    Player;                                                   // 0x004C(0x0004)
	float                                              distanceSquared;                                          // 0x0050(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_PlayerSensorAction");
		return ptr;
	}


	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_TestSensorActionA
// 0x0004 (0x004C - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction_AI_TestSensorActionA : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorCharacterAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor*    sensor1;                                                  // 0x0048(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorCharacterAction.AI_TestSensorActionA");
		return ptr;
	}


	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.DeleteableObject.AI_Sensor.AI_GetOutOfWaySensor
// 0x000C (0x0058 - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_GetOutOfWaySensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	struct FStruct_Vector                              aimLocation;                                              // 0x004C(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_GetOutOfWaySensor");
		return ptr;
	}


	void Function_SetValue(class UClass_Object* Rook, const struct FStruct_Vector& aimLocation);
};


// Class Object.DeleteableObject.AI_Sensor.AI_EnemySensor
// 0x0018 (0x0064 - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_EnemySensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	TArray<class AClass_Object_Actor_Pawn*>            enemies;                                                  // 0x004C(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Pawn_Rook*               lastSeen;                                                 // 0x0058(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               lastLost;                                                 // 0x005C(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               Player;                                                   // 0x0060(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_EnemySensor");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	bool Function_isInEnemiesList(class AClass_Object_Actor_Pawn_Rook* Rook, int* i);
	void Function_initEnemiesListFromMember(class AClass_Object_Actor_Pawn_Rook* me, class AClass_Object_Actor_Pawn_Rook* squadMember);
	void Function_initEnemiesList(class AClass_Object_Actor_Pawn_Rook* me);
	void Function_onTeamChanged(class AClass_Object_Actor_Pawn* changedPawn);
	void Function_OnViewerLostPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
	void Function_OnViewerSawPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
	void Function_setParameters();
	void Function_SetValue(class AClass_Object_Actor_Pawn_Rook* aLastSeen, class AClass_Object_Actor_Pawn_Rook* aLastLost);
};


// Class Object.DeleteableObject.AI_Sensor.AI_DodgeSensor
// 0x0010 (0x005C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_DodgeSensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	class AClass_Object_Actor_Pawn_Rook*               protectee;                                                // 0x004C(0x0004)
	float                                              shieldPackTime;                                           // 0x0050(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_EnemySensor* enemySensor;                                              // 0x0054(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* AI;                                                       // 0x0058(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_DodgeSensor");
		return ptr;
	}


	void Function_setParameters(class AClass_Object_Actor_Pawn_Rook* _protectee, float _shieldPackTime);
	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	bool Function_willHurt(class AClass_Object_Actor_Pawn_Rook* Rook, class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon, class AClass_Object_Actor* Projectile, struct FStruct_Vector* HitLocation, float* timeToHit);
	void Function_OnShooterFiredShot(class AClass_Object_Actor_Pawn* Shooter, class AClass_Object_Actor* Projectile);
	void Function_OnSensorMessage_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.DeleteableObject.AI_Sensor.AI_TargetSensor
// 0x001C (0x0068 - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x004C(0x0004)
	float                                              canStillSeePeriod;                                        // 0x0050(0x0004)
	struct FStruct_Vector                              lastPlaceSeen;                                            // 0x0054(0x000C)
	float                                              lastTimeSeen;                                             // 0x0060(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor*    timerSensor;                                              // 0x0064(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_TargetSensor");
		return ptr;
	}


	void Function_setParameters(class AClass_Object_Actor_Pawn* _target, float _canStillSeePeriod);
	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	void Function_OnSensorMessage_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
	void Function_OnViewerLostPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
	void Function_OnViewerSawPawn(class AClass_Object_Actor_Pawn* Viewer, class AClass_Object_Actor_Pawn* Seen);
};


// Class Object.DeleteableObject.AI_Sensor.AI_TargetSensor.AI_TargetMemorySensor
// 0x0000 (0x0068 - 0x0068)
class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor_AI_TargetMemorySensor : public UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_TargetSensor.AI_TargetMemorySensor");
		return ptr;
	}

};


// Class Object.DeleteableObject.AI_Sensor.AI_ReactToFireSensor
// 0x0014 (0x0060 - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_ReactToFireSensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	class AClass_Object_Actor_Pawn*                    attacker;                                                 // 0x004C(0x0004)
	TEnumAsByte<ETriggerCategories>                    triggerCategory;                                          // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PainSensor* painSensor;                                               // 0x0054(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_NearMissSensor* nearMissSensor;                                           // 0x0058(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               Rook;                                                     // 0x005C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_ReactToFireSensor");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	void Function_OnListenerHeardNoise(class AClass_Object_Actor_Pawn* listener, class AClass_Object_Actor* SoundMaker, const struct FStruct_Vector& SoundOrigin, const struct FName& SoundCategory);
	void Function_OnSensorMessage_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
	void Function_SetValue(class AClass_Object_Actor_Pawn* anAttacker, TEnumAsByte<ETriggerCategories> Trigger);
};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor");
		return ptr;
	}


	void Function_deactivateSensorInternal_deactivateSensorInternal(class UClass_Object_ISensorNotification* Recipient, float lowerBound, float upperBound);
	class UClass_Object_DeleteableObject_AI_Sensor* STATIC_Function_activateSensorInternal_activateSensorInternal(class UClass_Object_Field_Struct_State_Class* sensorClass, class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, float lowerBound, float upperBound, class UClass_Object* userData, class UClass_Object_ISensorNotification* Recipient);
};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_NearMissSensor
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_NearMissSensor : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_NearMissSensor");
		return ptr;
	}

};


// Class Object.DeleteableObject.AI_Sensor.AI_GuardSensor
// 0x0030 (0x007C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_GuardSensor : public UClass_Object_DeleteableObject_AI_Sensor
{
public:
	struct FStruct_Vector                              engagementAreaCenter;                                     // 0x004C(0x000C)
	class AClass_Object_Actor*                         engagementAreaTarget;                                     // 0x0058(0x0004)
	float                                              engagementAreaRadius;                                     // 0x005C(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_EnemySensor* enemySensor;                                              // 0x0060(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor*    timerSensor;                                              // 0x0064(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               Rook;                                                     // 0x0068(0x0004)
	class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret* mountedTurret;                                            // 0x006C(0x0004)
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Turret;                                                   // 0x0070(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       Vehicle;                                                  // 0x0074(0x0004)
	int                                                nEnemies;                                                 // 0x0078(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_GuardSensor");
		return ptr;
	}


	void Function_setParameters(float aEngagementAreaRadius, const struct FStruct_Vector& aEngagementAreaCenter, class AClass_Object_Actor* aEngagementAreaTarget);
	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	bool Function_noShotTimeOut(class AClass_Object_Actor_Pawn_Rook* Rook, class AClass_Object_Actor_Pawn* Target);
	void Function_sanityCheck(class AClass_Object_Actor_Pawn* Target);
	bool Function_isGuardTarget(class AClass_Object_Actor_Pawn* Target);
	class AClass_Object_Actor_Pawn* Function_findGuardTarget();
	void Function_OnSensorMessage_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.IGoalNotification
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IGoalNotification : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IGoalNotification");
		return ptr;
	}


	void Function_OnGoalCompleted(bool bAchieved);
};


// Class Object.IBooleanGoalCondition
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IBooleanGoalCondition : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IBooleanGoalCondition");
		return ptr;
	}


	bool STATIC_Function_goalTest(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_HeadResource
// 0x0004 (0x0098 - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_HeadResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_Pawn*                    m_pawn;                                                   // 0x0094(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_HeadResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	bool Function_doesParentHaveResource_doesParentHaveResource(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* parentAction);
	bool Function_multipleActionsCheck_multipleActionsCheck(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Action);
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	bool Function_isActive_isActive();
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* p);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_WeaponResource
// 0x0004 (0x0098 - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_WeaponResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_Pawn*                    m_pawn;                                                   // 0x0094(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_WeaponResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	bool Function_doesParentHaveResource_doesParentHaveResource(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* parentAction);
	bool Function_multipleActionsCheck_multipleActionsCheck(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Action);
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	bool Function_isActive_isActive();
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* p);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MovementResource
// 0x0004 (0x0098 - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MovementResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_Pawn*                    m_pawn;                                                   // 0x0094(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MovementResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	bool Function_doesParentHaveResource_doesParentHaveResource(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* parentAction);
	bool Function_multipleActionsCheck_multipleActionsCheck(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Action);
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	bool Function_isActive_isActive();
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* p);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_WeaponGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_WeaponGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_WeaponGoal");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_WeaponGoal.AI_DummyWeaponGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_WeaponGoal_AI_DummyWeaponGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_WeaponGoal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_WeaponGoal.AI_DummyWeaponGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceInt(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_MovementGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_MovementGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_MovementGoal");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_MovementGoal.AI_DummyMovementGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_MovementGoal_AI_DummyMovementGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_MovementGoal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_MovementGoal.AI_DummyMovementGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceInt(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_HeadGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_HeadGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_HeadGoal");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_HeadGoal.AI_DummyHeadGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_HeadGoal_AI_DummyHeadGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_HeadGoal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_HeadGoal.AI_DummyHeadGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceInt(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_GlobalSensorAction
// 0x0008 (0x0050 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_GlobalSensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TimerSensor* Timer;                                                    // 0x0048(0x0004)
	int                                                i;                                                        // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_GlobalSensorAction");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TimerSensor
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TimerSensor : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TimerSensor");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Pack.EnergyPack
// 0x000C (0x04F4 - 0x04E8)
class AClass_Object_Actor_Equipment_Pack_EnergyPack : public AClass_Object_Actor_Equipment_Pack
{
public:
	float                                              boostImpulsePerSecond;                                    // 0x04E8(0x0004) (Edit, NoClear)
	float                                              rechargeScale;                                            // 0x04EC(0x0004) (Edit, NoClear)
	float                                              originalEnergyRechargeScale;                              // 0x04F0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.EnergyPack");
		return ptr;
	}


	void Function_removePassiveEffect_removePassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_applyPassiveEffect_applyPassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
};


// Class Object.Actor.Equipment.Pack.ShieldPack
// 0x002C (0x0514 - 0x04E8)
class AClass_Object_Actor_Equipment_Pack_ShieldPack : public AClass_Object_Actor_Equipment_Pack
{
public:
	float                                              passiveFractionDamageBlocked;                             // 0x04E8(0x0004) (Edit)
	float                                              activeFractionDamageBlocked;                              // 0x04EC(0x0004) (Edit)
	class UClass_Object_Material*                      passiveIdleMaterial;                                      // 0x04F0(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      activeIdleMaterial;                                       // 0x04F4(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      passiveHitMaterial;                                       // 0x04F8(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      activeHitMaterial;                                        // 0x04FC(0x0004) (Edit, NoClear)
	float                                              hitStayTime;                                              // 0x0500(0x0004) (Edit, NoClear)
	class UClass_Object_Material*                      currentIdle;                                              // 0x0504(0x0004)
	class UClass_Object_Material*                      currentHit;                                               // 0x0508(0x0004)
	float                                              currentHitTime;                                           // 0x050C(0x0004)
	float                                              lastHealth;                                               // 0x0510(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.ShieldPack");
		return ptr;
	}


	void Function_Tick_Tick_Tick(float DeltaSeconds);
	class UClass_Object_Material* Function_GetOverlayMaterialForOwner_GetOverlayMaterialForOwner(int Index);
	void Function_finishActiveEffect_finishActiveEffect();
	void Function_startActiveEffect_startActiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_removePassiveEffect_removePassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
	void Function_applyPassiveEffect_applyPassiveEffect(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* characterOwner);
};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_EnterVehicleSensor
// 0x0008 (0x0054 - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_EnterVehicleSensor : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:
	class AClass_Object_Actor_Pawn*                    vehicleOrTurret;                                          // 0x004C(0x0004)
	TEnumAsByte<EVehiclePositionType>                  VehiclePosition;                                          // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_EnterVehicleSensor");
		return ptr;
	}


	void Function_setParameters(class AClass_Object_Actor_Pawn* _vehicleOrTurret, TEnumAsByte<EVehiclePositionType> _vehiclePosition);
	bool STATIC_Function_isEnterable(class AClass_Object_Actor_Pawn* vehicleOrTurret, TEnumAsByte<EVehiclePositionType> VehiclePosition);
};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_RepairSensor
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_RepairSensor : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_RepairSensor");
		return ptr;
	}

};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_PlayerProximitySensor
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_PlayerProximitySensor : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_PlayerProximitySensor");
		return ptr;
	}

};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TestSensorA
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TestSensorA : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TestSensorA");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_MovementAction
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_MovementAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_MovementAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	void Function_runAction_runAction_runAction_runAction();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MovementResource* Function_movementResource();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* Function_BaseAICharacter();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_Character();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorMovementAction
// 0x0000 (0x0048 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorMovementAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorMovementAction");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorMovementAction.AI_TestSensorActionB
// 0x0008 (0x0050 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorMovementAction_AI_TestSensorActionB : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_SensorMovementAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TestSentinelA* sentinel1;                                                // 0x0048(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TestSentinelB* sentinel2;                                                // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_SensorMovementAction.AI_TestSensorActionB");
		return ptr;
	}


	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_WeaponAction
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_WeaponAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_WeaponAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	void Function_runAction_runAction_runAction_runAction();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_WeaponResource* Function_weaponResource();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* Function_BaseAICharacter();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_Character();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_HeadAction
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_HeadAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_HeadAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	void Function_runAction_runAction_runAction_runAction();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_CharacterResource* Function_characterResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_HeadResource* Function_headResource();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* Function_BaseAICharacter();
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* Function_Character();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TestSentinelA
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TestSentinelA : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TestSentinelA");
		return ptr;
	}

};


// Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TestSentinelB
// 0x0000 (0x004C - 0x004C)
class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_TestSentinelB : public UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.DeleteableObject.AI_Sensor.AI_PeriodicSensor.AI_TestSentinelB");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_SquadAction
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_SquadAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_SquadAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_SquadResource* Function_squadResource();
	class AClass_Object_Actor_SquadInfo* Function_squad();
};


// Class Object.Player.Viewport.WindowsViewport
// 0x0088 (0x0268 - 0x01E0)
class UClass_Object_Player_Viewport_WindowsViewport : public UClass_Object_Player_Viewport
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x01E0(0x0088) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Player.Viewport.WindowsViewport");
		return ptr;
	}

};


// Class Object.Client.WindowsClient
// 0x0048 (0x0104 - 0x00BC)
class UClass_Object_Client_WindowsClient : public UClass_Object_Client
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	unsigned long                                      UseJoystick : 1;                                          // 0x00C0(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x00C0(0x0001)
	unsigned long                                      StartupFullscreen : 1;                                    // 0x00C4(0x0004) (Config)
	float                                              MouseXMultiplier;                                         // 0x00C8(0x0004) (Config)
	float                                              MouseYMultiplier;                                         // 0x00CC(0x0004) (Config)
	unsigned char                                      UnknownData02[0x34];                                      // 0x00D0(0x0034) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Client.WindowsClient");
		return ptr;
	}

};


// Class Object.Subsystem.RenderDevice.D3DRenderDevice
// 0x35518 (0x355DC - 0x00C4)
class UClass_Object_Subsystem_RenderDevice_D3DRenderDevice : public UClass_Object_Subsystem_RenderDevice
{
public:
	unsigned char                                      UnknownData00[0x403C];                                    // 0x00C4(0x403C) MISSED OFFSET
	unsigned long                                      UseShaderConstantChecking : 1;                            // 0x4100(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x4100(0x0001)
	unsigned long                                      UsePrecaching : 1;                                        // 0x4104(0x0004) (Config)
	unsigned long                                      UnknownData02 : 31;                                       // 0x4104(0x0001)
	unsigned long                                      UseTrilinear : 1;                                         // 0x4108(0x0004) (Config)
	unsigned char                                      UnknownData03[0x4];                                       // 0x410C(0x0004) MISSED OFFSET
	unsigned long                                      UseVSync : 1;                                             // 0x4110(0x0004) (Config)
	unsigned long                                      UnknownData04 : 31;                                       // 0x4110(0x0001)
	unsigned long                                      UseHardwareTL : 1;                                        // 0x4114(0x0004) (Config)
	unsigned long                                      UnknownData05 : 31;                                       // 0x4114(0x0001)
	unsigned long                                      UseHardwareVS : 1;                                        // 0x4118(0x0004) (Config)
	unsigned long                                      UnknownData06 : 31;                                       // 0x4118(0x0001)
	unsigned long                                      UseCubemaps : 1;                                          // 0x411C(0x0004) (Config)
	unsigned char                                      UnknownData07[0x10];                                      // 0x4120(0x0010) MISSED OFFSET
	unsigned long                                      UseTripleBuffering : 1;                                   // 0x4130(0x0004) (Config)
	unsigned long                                      UnknownData08 : 31;                                       // 0x4130(0x0001)
	unsigned long                                      ReduceMouseLag : 1;                                       // 0x4134(0x0004) (Config)
	unsigned long                                      UnknownData09 : 31;                                       // 0x4134(0x0001)
	unsigned long                                      UseXBoxFSAA : 1;                                          // 0x4138(0x0004) (Config)
	unsigned char                                      UnknownData10[0x10];                                      // 0x413C(0x0010) MISSED OFFSET
	unsigned long                                      CheckForOverflow : 1;                                     // 0x414C(0x0004) (Config)
	unsigned long                                      UnknownData11 : 31;                                       // 0x414C(0x0001)
	unsigned long                                      UseNPatches : 1;                                          // 0x4150(0x0004) (Config)
	unsigned long                                      UnknownData12 : 31;                                       // 0x4150(0x0001)
	unsigned long                                      DecompressTextures : 1;                                   // 0x4154(0x0004) (Config)
	unsigned long                                      UnknownData13 : 31;                                       // 0x4154(0x0001)
	unsigned long                                      AvoidHitches : 1;                                         // 0x4158(0x0004) (Config)
	unsigned long                                      UnknownData14 : 31;                                       // 0x4158(0x0001)
	unsigned long                                      OverrideDesktopRefreshRate : 1;                           // 0x415C(0x0004) (Config)
	unsigned char                                      UnknownData15[0x4];                                       // 0x4160(0x0004) MISSED OFFSET
	int                                                AdapterNumber;                                            // 0x4164(0x0004) (Config)
	unsigned char                                      UnknownData16[0x4];                                       // 0x4168(0x0004) MISSED OFFSET
	int                                                MaxPixelShaderVersion;                                    // 0x416C(0x0004) (Config)
	int                                                MaxShaderConstantGap;                                     // 0x4170(0x0004) (Config)
	int                                                LevelOfAnisotropy;                                        // 0x4174(0x0004) (Config)
	float                                              DetailTexMipBias;                                         // 0x4178(0x0004) (Config)
	float                                              DefaultTexMipBias;                                        // 0x417C(0x0004) (Config)
	float                                              TesselationFactor;                                        // 0x4180(0x0004) (Config)
	int                                                DesiredRefreshRate;                                       // 0x4184(0x0004) (Config)
	unsigned char                                      UnknownData17[0x5B0];                                     // 0x4188(0x05B0) MISSED OFFSET
	unsigned long                                      Use16bitNormalMaps : 1;                                   // 0x4738(0x0004) (Config)
	unsigned char                                      UnknownData18[0x30EA0];                                   // 0x473C(0x30EA0) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.RenderDevice.D3DRenderDevice");
		return ptr;
	}

};


// Class Object.Subsystem.AudioSubsystem.ALAudioSubsystem
// 0x00F8 (0x0128 - 0x0030)
class UClass_Object_Subsystem_AudioSubsystem_ALAudioSubsystem : public UClass_Object_Subsystem_AudioSubsystem
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0030(0x0080) MISSED OFFSET
	float                                              DopplerFactor;                                            // 0x00B0(0x0004) (Config)
	float                                              MusicVolume;                                              // 0x00B4(0x0004) (Config)
	float                                              AmbientVolume;                                            // 0x00B8(0x0004) (Config)
	float                                              SoundVolume;                                              // 0x00BC(0x0004) (Config)
	float                                              SpeechVolume;                                             // 0x00C0(0x0004) (Config)
	float                                              TimeBetweenHWUpdates;                                     // 0x00C4(0x0004) (Config)
	float                                              RollOff;                                                  // 0x00C8(0x0004) (Config)
	int                                                channels;                                                 // 0x00CC(0x0004) (Config)
	unsigned long                                      ReverseStereo : 1;                                        // 0x00D0(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x00D0(0x0001)
	unsigned long                                      UsePrecache : 1;                                          // 0x00D4(0x0004) (Config)
	unsigned long                                      UnknownData02 : 31;                                       // 0x00D4(0x0001)
	unsigned long                                      UseEAX : 1;                                               // 0x00D8(0x0004) (Config)
	unsigned long                                      UnknownData03 : 31;                                       // 0x00D8(0x0001)
	unsigned long                                      Use3DSound : 1;                                           // 0x00DC(0x0004) (Config)
	unsigned long                                      UnknownData04 : 31;                                       // 0x00DC(0x0001)
	unsigned long                                      CompatibilityMode : 1;                                    // 0x00E0(0x0004) (Config)
	unsigned long                                      UnknownData05 : 31;                                       // 0x00E0(0x0001)
	unsigned long                                      UseDefaultDriver : 1;                                     // 0x00E4(0x0004) (Config)
	unsigned long                                      UnknownData06 : 31;                                       // 0x00E4(0x0001)
	unsigned long                                      DisablePitch : 1;                                         // 0x00E8(0x0004) (Config)
	unsigned long                                      UnknownData07 : 31;                                       // 0x00E8(0x0001)
	unsigned long                                      LowQualitySound : 1;                                      // 0x00EC(0x0004) (Config)
	unsigned char                                      UnknownData08[0x4];                                       // 0x00F0(0x0004) MISSED OFFSET
	float                                              VolumeModifier;                                           // 0x00F4(0x0004) (Config)
	unsigned char                                      UnknownData09[0x30];                                      // 0x00F8(0x0030) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.AudioSubsystem.ALAudioSubsystem");
		return ptr;
	}

};


// Class Object.Actor.Triggers.Trigger.EffectEventTrigger
// 0x0004 (0x0440 - 0x043C)
class AClass_Object_Actor_Triggers_Trigger_EffectEventTrigger : public AClass_Object_Actor_Triggers_Trigger
{
public:
	struct FName                                       EffectEvent;                                              // 0x043C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Triggers.Trigger.EffectEventTrigger");
		return ptr;
	}


	void Function_DoTrigger_DoTrigger(class AClass_Object_Actor_Pawn* Instigator);
};


// Class Object.EventResponseSet
// 0x000C (0x0034 - 0x0028)
class UClass_Object_EventResponseSet : public UClass_Object
{
public:
	TArray<class UClass_Object_EventResponse*>         EventResponses;                                           // 0x0028(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EventResponseSet");
		return ptr;
	}

};


// Class Object.EffectSpecification.SoundEffectSpecification.NormalSoundEffectSpecification
// 0x000C (0x00E4 - 0x00D8)
class UClass_Object_EffectSpecification_SoundEffectSpecification_NormalSoundEffectSpecification : public UClass_Object_EffectSpecification_SoundEffectSpecification
{
public:
	TArray<struct FStruct_FlaggedSound>                FlaggedSounds;                                            // 0x00D8(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.EffectSpecification.SoundEffectSpecification.NormalSoundEffectSpecification");
		return ptr;
	}


	void Function_PopulateSoundsHook_PopulateSoundsHook();
	void Function_InitHook_InitHook();
	void Function_SetNativeFlagsHook_SetNativeFlagsHook();
};


// Class Object.Actor.Emitter.FX_Dust_Drift
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Dust_Drift : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Dust_Drift");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Dust_Drift.FX_Fog_Drift
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Dust_Drift_FX_Fog_Drift : public AClass_Object_Actor_Emitter_FX_Dust_Drift
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Dust_Drift.FX_Fog_Drift");
		return ptr;
	}

};


// Class Object.Actor.SkeletalDecoration
// 0x000C (0x040C - 0x0400)
class AClass_Object_Actor_SkeletalDecoration : public AClass_Object_Actor
{
public:
	struct FName                                       defaultAnim;                                              // 0x0400(0x0004) (Edit, NoClear)
	unsigned long                                      bLoopAnim : 1;                                            // 0x0404(0x0004) (Edit, NoClear)
	unsigned long                                      bAnimPlayed : 1;                                          // 0x0404(0x0004)
	struct FName                                       playedAnim;                                               // 0x0408(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.SkeletalDecoration");
		return ptr;
	}


	void Function_PlayScriptedAnim_PlayScriptedAnim(const struct FName& AnimToPlay);
	void Function_PostLoadGame_PostLoadGame();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Light.Sunlight
// 0x0000 (0x0414 - 0x0414)
class AClass_Object_Actor_Light_Sunlight : public AClass_Object_Actor_Light
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Light.Sunlight");
		return ptr;
	}

};


// Class Object.Action.ActionViewFromCamera
// 0x0004 (0x0068 - 0x0064)
class UClass_Object_Action_ActionViewFromCamera : public UClass_Object_Action
{
public:
	struct FName                                       cameraLabel;                                              // 0x0064(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Action.ActionViewFromCamera");
		return ptr;
	}


	void Function_enumCameraLabels(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, TArray<struct FName>* S);
	void Function_editorDisplayString_editorDisplayString(struct FString* S);
	class UClass_Object_Variable* Function_execute_execute();
};


// Class Object.Actor.Emitter.FX_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Spin_MflashEntry
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Spin_MflashEntry : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Spin_MflashEntry");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_ImperialMedium_JetPack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_ImperialMedium_JetPack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_ImperialMedium_JetPack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.Fx_ChainGun_MflashEntry
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_Fx_ChainGun_MflashEntry : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.Fx_ChainGun_MflashEntry");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_DeployedArmour_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_DeployedArmour_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_DeployedArmour_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_AshipLargeRight_Jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_AshipLargeRight_Jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_AshipLargeRight_Jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_AshipLargeLeft_Jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_AshipLargeLeft_Jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_AshipLargeLeft_Jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_AshipGun_MflashEntry
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_AshipGun_MflashEntry : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_AshipGun_MflashEntry");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleMedium_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_BloodEagleMedium_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleMedium_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Spin_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Spin_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Spin_Explode");
		return ptr;
	}

};


// Class Object.Actor.Info.AccessControl.AccessControlIni
// 0x0008 (0x04D0 - 0x04C8)
class AClass_Object_Actor_Info_AccessControl_AccessControlIni : public AClass_Object_Actor_Info_AccessControl
{
public:
	class UClass_Object_GameConfigSet*                 ConfigSet;                                                // 0x04C8(0x0004) (Transient)
	class UClass_Object_AdminBase*                     CSEditor;                                                 // 0x04CC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.AccessControl.AccessControlIni");
		return ptr;
	}


	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_GetUser_GetUser(const struct FString& uname);
	class UClass_Object_TribesAdminBase_TribesAdminUser* Function_GetLoggedAdmin_GetLoggedAdmin(class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_ReleaseConfigSet(class UClass_Object_AdminBase* Admin, class UClass_Object_GameConfigSet** GCS);
	bool Function_LockConfigSet(class UClass_Object_AdminBase* Admin, class UClass_Object_GameConfigSet** GCS);
	bool Function_ReportLoggedAdminsTo(class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_CanPerform_CanPerform(class AClass_Object_Actor_Controller_PlayerController* p, const struct FString& Action);
	void Function_AdminPromoted_AdminPromoted(class AClass_Object_Actor_Controller_PlayerController* Promoter, class AClass_Object_Actor_Controller_PlayerController* p, bool bSuccess);
	void Function_AdminEntered_AdminEntered(class AClass_Object_Actor_Controller_PlayerController* p, const struct FString& Username);
	struct FString Function_GetAdminName_GetAdminName(class AClass_Object_Actor_Controller_PlayerController* PC);
	void Function_SetGamePassword_SetGamePassword(const struct FString& p);
	bool Function_AllowPriv_AllowPriv(const struct FString& priv);
	bool Function_SetAdminPassword_SetAdminPassword(const struct FString& p);
	bool Function_IsLogged(class UClass_Object_TribesAdminBase_TribesAdminUser* User);
	bool Function_IsAdmin_IsAdmin(class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_ValidLogin_ValidLogin(const struct FString& Username, const struct FString& Password);
	void Function_SetAdminFromURL_SetAdminFromURL(const struct FString& n, const struct FString& p);
	bool Function_AdminLogout_AdminLogout(class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_AdminPromote_AdminPromote(class AClass_Object_Actor_Controller_PlayerController* Promoter, class AClass_Object_Actor_Controller_PlayerController* p);
	bool Function_AdminLogin_AdminLogin(class AClass_Object_Actor_Controller_PlayerController* p, const struct FString& Username, const struct FString& Password);
	void Function_SaveAdmins_SaveAdmins();
	void Function_PreBeginPlay_PreBeginPlay_PreBeginPlay();
	void Function_InitPrivs_InitPrivs();
	void Function_Destroyed_Destroyed();
};


// Class Object.GameConfigSet
// 0x005C (0x0084 - 0x0028)
class UClass_Object_GameConfigSet : public UClass_Object
{
public:
	class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level;                                                    // 0x0028(0x0004)
	class UClass_Object_Field_Struct_State_Class*      GameClass;                                                // 0x002C(0x0004)
	class UClass_Object_PlayInfo*                      Settings;                                                 // 0x0030(0x0004)
	class AClass_Object_Actor_Info_MapList*            Maps;                                                     // 0x0034(0x0004)
	TArray<int>                                        UsedMutators;                                             // 0x0038(0x000C) (NeedCtorLink)
	struct FString                                     AllMapsPrefix;                                            // 0x0044(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AllMaps;                                                  // 0x0050(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AllMutators;                                              // 0x005C(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_Field_Struct_State_Class*> AllGameTypes;                                             // 0x0068(0x000C) (NeedCtorLink)
	struct FString                                     NextMutators;                                             // 0x0074(0x000C) (NeedCtorLink)
	unsigned long                                      bEdit : 1;                                                // 0x0080(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GameConfigSet");
		return ptr;
	}


	bool Function_MaskedCompare(const struct FString& SettingName, const struct FString& Mask);
	void Function_LoadAllMaps(bool bForceLoad);
	struct FString Function_LoadSettings(class UClass_Object_Field_Struct_State_Class* GameClass);
	void Function_SetUsedMutators();
	void Function_LoadAllMutators();
	class UClass_Object_Field_Struct_State_Class* Function_FindGameType(const struct FString& GameType);
	void Function_LoadGameTypes();
	struct FString Function_GetGameAcronym();
	struct FString Function_GetEditedClass();
	bool Function_DelMutator(const struct FString& MutatorName);
	bool Function_AddMutator(const struct FString& MutatorName);
	TArray<struct FString> Function_GetUnusedMutators();
	TArray<struct FString> Function_GetUsedMutators();
	class AClass_Object_Actor_Info_MapList* Function_GetMaps();
	TArray<struct FString> Function_FindMaps(const struct FString& mapMask);
	TArray<struct FString> Function_RemoveMaps(const struct FString& mapMask);
	TArray<struct FString> Function_AddMaps(const struct FString& mapMask);
	bool Function_SetNamedParam(const struct FString& Parameter, const struct FString& Value);
	bool Function_SetParam(int idx, const struct FString& Value);
	TArray<struct FString> Function_GetMaskedParams(const struct FString& ParamMask);
	struct FString Function_GetNamedParam(const struct FString& Parameter);
	struct FString Function_GetParam(int idx);
	bool Function_CanEdit();
	bool Function_EndEdit(bool bSave);
	bool Function_StartEdit(const struct FString& GameType);
};


// Class Object.TribesAdminBase.TribesAdminConfigBase
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_TribesAdminBase_TribesAdminConfigBase : public UClass_Object_TribesAdminBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase.TribesAdminConfigBase");
		return ptr;
	}


	bool STATIC_Function_Save(class UClass_Object_TribesAdminBase_TribesAdminUserList* Users, class UClass_Object_TribesAdminBase_TribesAdminGroupList* Groups);
	bool STATIC_Function_Load(class UClass_Object_TribesAdminBase_TribesAdminUserList* Users, class UClass_Object_TribesAdminBase_TribesAdminGroupList* Groups, bool bDontAddDefaultAdmin);
};


// Class Object.TribesAdminBase.TribesAdminConfigBase.TribesAdminConfigIni
// 0x0018 (0x0040 - 0x0028)
class UClass_Object_TribesAdminBase_TribesAdminConfigBase_TribesAdminConfigIni : public UClass_Object_TribesAdminBase_TribesAdminConfigBase
{
public:
	TArray<struct FStruct_AdminUser>                   AdminUsers;                                               // 0x0028(0x000C) (Config, NeedCtorLink)
	TArray<struct FStruct_AdminGroup>                  AdminGroups;                                              // 0x0034(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesAdminBase.TribesAdminConfigBase.TribesAdminConfigIni");
		return ptr;
	}


	bool STATIC_Function_Save_Save(class UClass_Object_TribesAdminBase_TribesAdminUserList* Users, class UClass_Object_TribesAdminBase_TribesAdminGroupList* Groups);
	bool STATIC_Function_Load_Load(class UClass_Object_TribesAdminBase_TribesAdminUserList* Users, class UClass_Object_TribesAdminBase_TribesAdminGroupList* Groups, bool bDontAddDefaultAdmin);
};


// Class Object.AdminBase.AdminIni
// 0x0270 (0x029C - 0x002C)
class UClass_Object_AdminBase_AdminIni : public UClass_Object_AdminBase
{
public:
	class AClass_Object_Actor_Info_AccessControl_AccessControlIni* Manager;                                                  // 0x002C(0x0004)
	class UClass_Object_TribesAdminBase_TribesAdminUser* AdminUser;                                                // 0x0030(0x0004)
	class UClass_Object_GameConfigSet*                 ConfigSet;                                                // 0x0034(0x0004)
	struct FString                                     NextMutators;                                             // 0x0038(0x000C) (NeedCtorLink)
	struct FString                                     NextGameType;                                             // 0x0044(0x000C) (NeedCtorLink)
	struct FString                                     Msg_PlayerList;                                           // 0x0050(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_FinishGameEditFirst;                                  // 0x005C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_FinishGameRestart;                                    // 0x0068(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_GameNoSupportBots;                                    // 0x0074(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_StatsNoBots;                                          // 0x0080(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NextMapNotFound;                                      // 0x008C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_ChangingMapTo;                                        // 0x0098(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerBanned;                                         // 0x00A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_SessionBanned;                                        // 0x00B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerKicked;                                         // 0x00BC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoBotGameFull;                                        // 0x00C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoAddNamedBot;                                        // 0x00D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoBotsPlaying;                                        // 0x00E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_SetBotNeedVal;                                        // 0x00EC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_MutNeedGameEdit;                                      // 0x00F8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoMutatorInUse;                                       // 0x0104(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoUnusedMuts;                                         // 0x0110(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_AddedMutator;                                         // 0x011C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_ErrAddingMutator;                                     // 0x0128(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_RemovedMutator;                                       // 0x0134(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_ErrRemovingMutator;                                   // 0x0140(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_MapListNeedGameEdit;                                  // 0x014C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_MapRotationList;                                      // 0x0158(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoMapInRotation;                                      // 0x0164(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoMapsAdded;                                          // 0x0170(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_AddedMapToList;                                       // 0x017C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoMapsRemoved;                                        // 0x0188(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_RemovedMapFromList;                                   // 0x0194(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoMapsFound;                                          // 0x01A0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_MapIsInRotation;                                      // 0x01AC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_MapNotInRotation;                                     // 0x01B8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_MustEndGameEdit;                                      // 0x01C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_EditingClass;                                         // 0x01D0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_EditFailed;                                           // 0x01DC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_AlreadyEdited;                                        // 0x01E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NotEditing;                                           // 0x01F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_EditingCompleted;                                     // 0x0200(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_EditingCancelled;                                     // 0x020C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_UnknownParam;                                         // 0x0218(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_NoParamsFound;                                        // 0x0224(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_ParamModified;                                        // 0x0230(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_ParamNotModified;                                     // 0x023C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerSpectified;                                     // 0x0248(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_TimeLimitChanged;                                     // 0x0254(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_TourneyModeEnabled;                                   // 0x0260(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_TourneyModeDisabled;                                  // 0x026C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_ForceStart;                                           // 0x0278(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_TeamDamageEnabled;                                    // 0x0284(0x000C) (Localized, NeedCtorLink)
	struct FString                                     Msg_TeamDamageDisabled;                                   // 0x0290(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.AdminBase.AdminIni");
		return ptr;
	}


	struct FString Function_ReplaceTag(const struct FString& From, const struct FString& Tag, const struct FString& Value);
	class AClass_Object_Actor_Controller_PlayerController* Function_FindController(const struct FString& playerNameOrId);
	TArray<struct FString> Function_SplitParams(const struct FString& params);
	bool Function_IsNumeric(const struct FString& Param, bool bPositiveOnly);
	bool Function_MaskedCompare(const struct FString& SettingName, const struct FString& Mask);
	struct FString Function_FindGameType(const struct FString& GameType);
	void Function_SendLoggedList();
	void Function_SendUserList(const struct FString& Mask);
	bool Function_CanPerform(const struct FString& priv);
	void Function_SetTeamDamage(const struct FString& Cmd);
	void Function_ForceStart(const struct FString& Cmd);
	void Function_disableTournamentMode(const struct FString& Cmd);
	void Function_enableTournamentMode(const struct FString& Cmd);
	void Function_SetTimeLimit(const struct FString& Cmd);
	void Function_TeamChange(const struct FString& Cmd);
	void Function_Spectify(const struct FString& Cmd);
	void Function_RemoveJoinPassword(const struct FString& Cmd);
	void Function_SetJoinPassword(const struct FString& Cmd);
	void Function_Game(const struct FString& Cmd, const struct FString& Extra);
	void Function_GetMapList(const struct FString& Cmd, const struct FString& Extra);
	void Function_Mutators(const struct FString& Cmd, const struct FString& Extra);
	void Function_User(const struct FString& Cmd, const struct FString& Extra);
	void Function_Map(const struct FString& Cmd);
	void Function_Kick(const struct FString& Cmd, const struct FString& Extra);
	void Function_GotoNextMap();
	void Function_doSwitch(const struct FString& URL);
	void Function_Switch(const struct FString& URL);
	void Function_RestartMap();
	void Function_PlayerList();
	void Function_DoLogout_DoLogout();
	void Function_DoPromote(class AClass_Object_Actor_Controller_PlayerController* Target);
	void Function_DoLogin_DoLogin(const struct FString& Username, const struct FString& Password);
	void Function_Created_Created();
};


// Class Object.TribesPrivilegeBase.TribesKickPrivs
// 0x0000 (0x01CC - 0x01CC)
class UClass_Object_TribesPrivilegeBase_TribesKickPrivs : public UClass_Object_TribesPrivilegeBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesPrivilegeBase.TribesKickPrivs");
		return ptr;
	}

};


// Class Object.TribesPrivilegeBase.TribesGamePrivs
// 0x0000 (0x01CC - 0x01CC)
class UClass_Object_TribesPrivilegeBase_TribesGamePrivs : public UClass_Object_TribesPrivilegeBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesPrivilegeBase.TribesGamePrivs");
		return ptr;
	}

};


// Class Object.TribesPrivilegeBase.TribesUserGroupPrivs
// 0x0000 (0x01CC - 0x01CC)
class UClass_Object_TribesPrivilegeBase_TribesUserGroupPrivs : public UClass_Object_TribesPrivilegeBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesPrivilegeBase.TribesUserGroupPrivs");
		return ptr;
	}

};


// Class Object.TribesPrivilegeBase.TribesExtraPrivs
// 0x0000 (0x01CC - 0x01CC)
class UClass_Object_TribesPrivilegeBase_TribesExtraPrivs : public UClass_Object_TribesPrivilegeBase
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.TribesPrivilegeBase.TribesExtraPrivs");
		return ptr;
	}

};


// Class Object.Utility
// 0x0028 (0x0050 - 0x0028)
class UClass_Object_Utility : public UClass_Object
{
public:
	TArray<struct FStruct_LevelData>                   levels;                                                   // 0x0028(0x000C) (NeedCtorLink)
	TArray<struct FStruct_GameData>                    gameTypes;                                                // 0x0034(0x000C) (NeedCtorLink)
	TArray<struct FStruct_LevelsForGameType>           gameTypeLevels;                                           // 0x0040(0x000C) (NeedCtorLink)
	unsigned long                                      Initialized : 1;                                          // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Utility");
		return ptr;
	}


	void STATIC_Function_scanLevels(TArray<struct FString>* files, TArray<class UClass_Object_LevelSummary*>* levels);
	void STATIC_Function_GetMutatorList(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* Level, TArray<struct FString>* Mutators);
	struct FString STATIC_Function_getGameTypeFromGameClassName(const struct FString& GameClass);
	void STATIC_Function_getLevelListForGameType(const struct FString& GameType, bool bPreferTitles, TArray<struct FString>* levels);
	void STATIC_Function_getLevelList(bool bPreferTitles, TArray<struct FString>* levelNames);
	void STATIC_Function_getGameTypeList(TArray<struct FStruct_GameData>* gameTypeNames);
	void STATIC_Function_Save();
	void STATIC_Function_Refresh();
	void STATIC_Function_smartRefresh();
	void STATIC_Function_Load();
};


// Class Object.Actor.Info.VotingHandler.TribesVotingHandler
// 0x046C (0x086C - 0x0400)
class AClass_Object_Actor_Info_VotingHandler_TribesVotingHandler : public AClass_Object_Actor_Info_VotingHandler
{
public:
	TArray<class AClass_Object_Actor_Info_ReplicationInfo_VotingReplicationInfoBase_VotingReplicationInfo*> MVRI;                                                     // 0x0400(0x000C) (NeedCtorLink)
	int                                                MapCount;                                                 // 0x040C(0x0004)
	unsigned long                                      bLevelSwitchPending : 1;                                  // 0x0410(0x0004)
	unsigned long                                      bMidGameVote : 1;                                         // 0x0410(0x0004)
	int                                                TimeLeft;                                                 // 0x0414(0x0004)
	int                                                ScoreBoardTime;                                           // 0x0418(0x0004)
	int                                                ServerTravelTime;                                         // 0x041C(0x0004)
	TArray<struct FStruct_MapVoteScore>                MapVoteCount;                                             // 0x0420(0x000C) (NeedCtorLink)
	TArray<struct FStruct_KickVoteScore>               KickVoteCount;                                            // 0x042C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_AdminVoteScore>              AdminVoteCount;                                           // 0x0438(0x000C) (NeedCtorLink)
	struct FStruct_TeamDamageVoteScore                 TeamDamageVoteCount;                                      // 0x0444(0x0008)
	struct FStruct_TournamentVoteScore                 TournamentVoteCount;                                      // 0x044C(0x0008)
	TArray<struct FStruct_MapVoteMapList>              MapList;                                                  // 0x0454(0x000C) (NeedCtorLink)
	struct FString                                     TextMessage;                                              // 0x0460(0x000C) (NeedCtorLink)
	struct FString                                     ServerTravelString;                                       // 0x046C(0x000C) (NeedCtorLink)
	TArray<struct FStruct_MapVoteGameConfig>           GameConfig;                                               // 0x0478(0x000C) (Edit, Config, NeedCtorLink)
	int                                                VoteTimeLimit;                                            // 0x0484(0x0004) (Edit, Config)
	int                                                ScoreBoardDelay;                                          // 0x0488(0x0004) (Edit, Config)
	unsigned long                                      bAutoOpen : 1;                                            // 0x048C(0x0004) (Edit, Config)
	int                                                MidGameVotePercent;                                       // 0x0490(0x0004) (Edit, Config)
	unsigned long                                      bScoreMode : 1;                                           // 0x0494(0x0004) (Edit, Config)
	unsigned long                                      bAccumulationMode : 1;                                    // 0x0494(0x0004) (Edit, Config)
	unsigned long                                      bEliminationMode : 1;                                     // 0x0494(0x0004) (Edit, Config)
	int                                                MinMapCount;                                              // 0x0498(0x0004) (Edit, Config)
	struct FString                                     MapVoteHistoryType;                                       // 0x049C(0x000C) (Edit, Config, NeedCtorLink)
	int                                                RepeatLimit;                                              // 0x04A8(0x0004) (Edit, Config)
	int                                                DefaultGameConfig;                                        // 0x04AC(0x0004) (Edit, Config)
	unsigned long                                      bDefaultToCurrentGameType : 1;                            // 0x04B0(0x0004) (Edit, Config)
	unsigned long                                      bMapVote : 1;                                             // 0x04B0(0x0004) (Edit, Config)
	unsigned long                                      bKickVote : 1;                                            // 0x04B0(0x0004) (Edit, Config)
	unsigned long                                      bAdminVote : 1;                                           // 0x04B0(0x0004) (Edit, Config)
	unsigned long                                      bTeamDamageVote : 1;                                      // 0x04B0(0x0004) (Edit, Config)
	unsigned long                                      bTournamentVote : 1;                                      // 0x04B0(0x0004) (Edit, Config)
	unsigned long                                      bMatchSetup : 1;                                          // 0x04B0(0x0004) (Edit, Config)
	int                                                KickPercent;                                              // 0x04B4(0x0004) (Edit, Config)
	int                                                AdminPercent;                                             // 0x04B8(0x0004) (Edit, Config)
	int                                                TeamDamagePercent;                                        // 0x04BC(0x0004) (Edit, Config)
	int                                                TournamentPercent;                                        // 0x04C0(0x0004) (Edit, Config)
	unsigned long                                      bAnonymousKicking : 1;                                    // 0x04C4(0x0004) (Edit, Config)
	unsigned long                                      bAnonymousAdmining : 1;                                   // 0x04C4(0x0004) (Edit, Config)
	TArray<struct FStruct_AccumulationData>            AccInfo;                                                  // 0x04C8(0x000C) (Edit, Config, NeedCtorLink)
	int                                                ServerNumber;                                             // 0x04D4(0x0004) (Edit, Config)
	int                                                CurrentGameConfig;                                        // 0x04D8(0x0004) (Edit, Config)
	struct FString                                     GameConfigPage;                                           // 0x04DC(0x000C) (NeedCtorLink)
	struct FString                                     MapListConfigPage;                                        // 0x04E8(0x000C) (NeedCtorLink)
	struct FString                                     lmsgInvalidPassword;                                      // 0x04F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgMatchSetupPermission;                                 // 0x0500(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgKickVote;                                             // 0x050C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgAnonymousKickVote;                                    // 0x0518(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgKickVoteAdmin;                                        // 0x0524(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgAdminVote;                                            // 0x0530(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgAnonymousAdminVote;                                   // 0x053C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgAdminVoteAdmin;                                       // 0x0548(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgTeamDamageVote;                                       // 0x0554(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgTournamentVote;                                       // 0x0560(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgMapWon;                                               // 0x056C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgMidGameVote;                                          // 0x0578(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgSpectatorsCantVote;                                   // 0x0584(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgMapVotedFor;                                          // 0x0590(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgMapVotedForWithCount;                                 // 0x059C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgTournamentModeEnabled;                                // 0x05A8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgTournamentModeDisabled;                               // 0x05B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgTeamDamageEnabled;                                    // 0x05C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgTeamDamageDisabled;                                   // 0x05CC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PropsDisplayText[0x18];                                   // 0x05D8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     PropDescription[0x18];                                    // 0x06F8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgAdminMapChange;                                       // 0x0818(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgGameConfigColumnTitle[0x6];                           // 0x0824(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.VotingHandler.TribesVotingHandler");
		return ptr;
	}


	void Function_GetServerDetails_GetServerDetails(struct FStruct_ServerResponseLine* ServerState);
	void Function_ReloadMatchConfig(bool bRefreshMaps, bool bRefreshMuts, class AClass_Object_Actor_Controller_PlayerController* Caller);
	void Function_PropagateValue(class AClass_Object_Actor_Info_ReplicationInfo_VotingReplicationInfoBase_VotingReplicationInfo* Sender, const struct FString& Type, const struct FString& SettingName, const struct FString& NewValue);
	void Function_ReloadAll_ReloadAll(bool bParam);
	int Function_GetConfigArrayItemCount_GetConfigArrayItemCount(const struct FString& ConfigArrayName);
	void Function_UpdateConfigArrayItem_UpdateConfigArrayItem(const struct FString& ConfigArrayName, int RowIndex, int ColumnIndex, const struct FString& NewValue);
	int Function_AddConfigArrayItem_AddConfigArrayItem(const struct FString& ConfigArrayName);
	void Function_DeleteConfigArrayItem_DeleteConfigArrayItem(const struct FString& ConfigArrayName, int RowIndex);
	struct FString Function_GetConfigArrayColumnTitle_GetConfigArrayColumnTitle(const struct FString& ConfigArrayName, int ColumnIndex);
	struct FString Function_GetConfigArrayData_GetConfigArrayData(const struct FString& ConfigArrayName, int RowIndex, int ColumnIndex);
	struct FString STATIC_Function_GetDescriptionText(const struct FString& PropName);
	bool STATIC_Function_AcceptPlayInfoProperty_AcceptPlayInfoProperty(const struct FString& PropertyName);
	void STATIC_Function_FillPlayInfo_FillPlayInfo_FillPlayInfo(class UClass_Object_PlayInfo* PlayInfo);
	void Function_MatchSetupLogout(class AClass_Object_Actor* Requestor);
	bool Function_MatchSetupLogin(const struct FString& UserID, const struct FString& Password, class AClass_Object_Actor* Requestor, int* SecLevel);
	void Function_TallyTournamentVotes();
	void Function_UpdateTournamentVoteCount(int yesVoteDelta, int noVoteDelta);
	void Function_SubmitTournamentVote(bool vote, class AClass_Object_Actor* Voter);
	void Function_TallyTeamDamageVotes();
	void Function_UpdateTeamDamageVoteCount(int yesVoteDelta, int noVoteDelta);
	void Function_SubmitTeamDamageVote(bool vote, class AClass_Object_Actor* Voter);
	void Function_AdminPlayer(int PlayerIndex);
	void Function_TallyAdminVotes();
	void Function_UpdateAdminVoteCount(int PlayerID, int VoteCountDelta);
	void Function_SubmitAdminVote(int PlayerID, class AClass_Object_Actor* Voter);
	void Function_KickPlayer(int PlayerIndex);
	void Function_TallyKickVotes();
	void Function_UpdateKickVoteCount(int PlayerID, int VoteCountDelta);
	void Function_SubmitKickVote(int PlayerID, class AClass_Object_Actor* Voter);
	void Function_GetDefaultMap(int* mapidx, int* gameidx);
	void Function_SaveAccVotes(int WinningMapIndex, int WinningGameIndex);
	int Function_GetAccVote(class AClass_Object_Actor_Controller_PlayerController* Player);
	float Function_GetPlayerScore(class AClass_Object_Actor_Controller_PlayerController* Player);
	struct FStruct_MapVoteGameConfigLite Function_GetGameConfig(int p_GameConfigIndex);
	struct FStruct_MapVoteMapList Function_GetMapList(int p_MapIndex);
	bool Function_HandleRestartGame_HandleRestartGame();
	struct FString Function_SetupGameMap(const struct FStruct_MapVoteMapList& MapInfo, int GameIndex);
	void Function_OpenAllVoteWindows();
	void Function_CloseAllVoteWindows();
	void Function_Timer_Timer();
	void Function_TallyMapVotes(bool bForceMapSwitch);
	void Function_UpdateVoteCount(int MapIndex, int GameIndex, int VoteCount);
	void Function_SubmitMapVote(int MapIndex, int GameIndex, class AClass_Object_Actor* Voter);
	int Function_GetMVRIIndex(class AClass_Object_Actor_Controller_PlayerController* Player);
	void Function_LoadMapList();
	void Function_LoadGameTypesInternal();
	void Function_LoadMapListInternal();
	void Function_AddVoteReplicationInfo(class AClass_Object_Actor_Controller_PlayerController* Player);
	void Function_PlayerExit_PlayerExit(class AClass_Object_Actor_Controller* Exiting);
	void Function_PlayerJoin_PlayerJoin(class AClass_Object_Actor_Controller_PlayerController* Player);
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Info.ReplicationInfo.VotingReplicationInfoBase.VotingReplicationInfo
// 0x026C (0x067C - 0x0410)
class AClass_Object_Actor_Info_ReplicationInfo_VotingReplicationInfoBase_VotingReplicationInfo : public AClass_Object_Actor_Info_ReplicationInfo_VotingReplicationInfoBase
{
public:
	TArray<struct FStruct_TickedReplicationQueueItem>  TickedReplicationQueue;                                   // 0x0410(0x000C) (NeedCtorLink)
	TArray<struct FStruct_MapVoteMapList>              MapList;                                                  // 0x041C(0x000C) (NeedCtorLink)
	int                                                MapCount;                                                 // 0x0428(0x0004) (Net)
	TArray<struct FStruct_MapVoteGameConfigLite>       GameConfig;                                               // 0x042C(0x000C) (NeedCtorLink)
	int                                                GameConfigCount;                                          // 0x0438(0x0004) (Net)
	int                                                CurrentGameConfig;                                        // 0x043C(0x0004) (Net)
	unsigned long                                      bWaitingForReply : 1;                                     // 0x0440(0x0004)
	TArray<struct FStruct_MapVoteScore>                MapVoteCount;                                             // 0x0444(0x000C) (NeedCtorLink)
	TArray<struct FStruct_KickVoteScore>               KickVoteCount;                                            // 0x0450(0x000C) (NeedCtorLink)
	TArray<struct FStruct_AdminVoteScore>              AdminVoteCount;                                           // 0x045C(0x000C) (NeedCtorLink)
	struct FStruct_TeamDamageVoteScore                 TeamDamageVoteCount;                                      // 0x0468(0x0008)
	struct FStruct_TournamentVoteScore                 TournamentVoteCount;                                      // 0x0470(0x0008)
	int                                                mapvote;                                                  // 0x0478(0x0004)
	int                                                VoteCount;                                                // 0x047C(0x0004)
	int                                                GameVote;                                                 // 0x0480(0x0004)
	int                                                kickvote;                                                 // 0x0484(0x0004)
	int                                                adminvote;                                                // 0x0488(0x0004)
	int                                                teamdamagevote;                                           // 0x048C(0x0004)
	int                                                tournamentvote;                                           // 0x0490(0x0004)
	class AClass_Object_Actor_Controller_PlayerController* PlayerOwner;                                              // 0x0494(0x0004) (Net)
	int                                                PlayerID;                                                 // 0x0498(0x0004)
	unsigned char                                      Mode;                                                     // 0x049C(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x049D(0x0003) MISSED OFFSET
	unsigned long                                      bMapVote : 1;                                             // 0x04A0(0x0004) (Net)
	unsigned long                                      bKickVote : 1;                                            // 0x04A0(0x0004) (Net)
	unsigned long                                      bAdminVote : 1;                                           // 0x04A0(0x0004) (Net)
	unsigned long                                      bTeamDamageVote : 1;                                      // 0x04A0(0x0004) (Net)
	unsigned long                                      bTournamentVote : 1;                                      // 0x04A0(0x0004) (Net)
	unsigned long                                      bMatchSetup : 1;                                          // 0x04A0(0x0004) (Net)
	unsigned long                                      bMatchSetupPermitted : 1;                                 // 0x04A0(0x0004) (Net)
	unsigned long                                      bMatchSetupAccepted : 1;                                  // 0x04A0(0x0004) (Net)
	unsigned long                                      bSendingMatchSetup : 1;                                   // 0x04A0(0x0004)
	int                                                SecurityLevel;                                            // 0x04A4(0x0004) (Net)
	unsigned long                                      bDebugLog : 1;                                            // 0x04A8(0x0004) (Config)
	struct FName                                       CountDownSounds[0x3C];                                    // 0x04AC(0x0004) (Edit)
	int                                                countDown;                                                // 0x059C(0x0004)
	class AClass_Object_Actor_Info_VotingHandler_TribesVotingHandler* VH;                                                       // 0x05A0(0x0004)
	struct FString                                     lmsgSavedAsDefaultSuccess;                                // 0x05A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     lmsgNotAllAccepted;                                       // 0x05B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MapID;                                                    // 0x05BC(0x000C) (NeedCtorLink)
	struct FString                                     MutatorID;                                                // 0x05C8(0x000C) (NeedCtorLink)
	struct FString                                     OptionID;                                                 // 0x05D4(0x000C) (NeedCtorLink)
	struct FString                                     GeneralID;                                                // 0x05E0(0x000C) (NeedCtorLink)
	struct FString                                     URLID;                                                    // 0x05EC(0x000C) (NeedCtorLink)
	struct FString                                     StatusID;                                                 // 0x05F8(0x000C) (NeedCtorLink)
	struct FString                                     MatchSetupID;                                             // 0x0604(0x000C) (NeedCtorLink)
	struct FString                                     LoginID;                                                  // 0x0610(0x000C) (NeedCtorLink)
	struct FString                                     CompleteID;                                               // 0x061C(0x000C) (NeedCtorLink)
	struct FString                                     AddID;                                                    // 0x0628(0x000C) (NeedCtorLink)
	struct FString                                     RemoveID;                                                 // 0x0634(0x000C) (NeedCtorLink)
	struct FString                                     UpdateID;                                                 // 0x0640(0x000C) (NeedCtorLink)
	struct FString                                     FailedID;                                                 // 0x064C(0x000C) (NeedCtorLink)
	struct FString                                     TournamentID;                                             // 0x0658(0x000C) (NeedCtorLink)
	struct FString                                     DemoRecID;                                                // 0x0664(0x000C) (NeedCtorLink)
	struct FString                                     GameTypeID;                                               // 0x0670(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.ReplicationInfo.VotingReplicationInfoBase.VotingReplicationInfo");
		return ptr;
	}


	bool Function_MatchSetupEnabled_MatchSetupEnabled();
	bool Function_TournamentVoteEnabled_TournamentVoteEnabled();
	bool Function_TeamDamageVoteEnabled_TeamDamageVoteEnabled();
	bool Function_AdminVoteEnabled_AdminVoteEnabled();
	bool Function_KickVoteEnabled_KickVoteEnabled();
	bool Function_MapVoteEnabled_MapVoteEnabled();
	bool Function_MatchSetupLocked_MatchSetupLocked();
	void Function_DebugLog(const struct FString& Text);
	void Function_SendPlayerID(const struct FString& ipAddress, const struct FString& PlayerID);
	void Function_RequestPlayerIP(const struct FString& PlayerName);
	void Function_Timer_Timer();
	void Function_PlayCountDown(int Count);
	void Function_RestoreDefaultProfile();
	void Function_SaveAsDefault();
	void Function_MatchSettingsSubmit();
	void Function_SendResponse_SendResponse(const struct FString& Response);
	void Function_HandleCommand(const struct FString& Type, const struct FString& Info, const struct FString& data);
	void STATIC_Function_DecodeCommand(const struct FString& Response, struct FString* Type, struct FString* Info, struct FString* data);
	void Function_ReceiveCommand(const struct FString& Command);
	void Function_SendClientResponse(const struct FString& Identifier, const struct FString& Response, const struct FString& data);
	void Function_RequestMatchSettings(bool bRefreshMaps, bool bRefreshMutators);
	void Function_MatchSetupLogout();
	void Function_MatchSetupLogin(const struct FString& UserID, const struct FString& Password);
	struct FString Function_GetMapNameString(int Index);
	void Function_OpenWindow();
	void Function_CloseWindow();
	void Function_SendAdminVote(int PlayerID);
	void Function_SendKickVote(int PlayerID);
	void Function_SendMapVote(int MapIndex, int p_GameIndex);
	void Function_SubmitTournamentVote_SubmitTournamentVote(bool vote);
	void Function_SubmitTeamDamageVote_SubmitTeamDamageVote(bool vote);
	void Function_SubmitMapVote_SubmitMapVote(const struct FString& Map, const struct FString& GameType);
	void Function_SubmitAdminVote_SubmitAdminVote(const struct FString& Name);
	void Function_SubmitKickVote_SubmitKickVote(const struct FString& Name);
	void Function_ReplicationReply();
	void Function_ReceiveTournamentVoteCount(const struct FStruct_TournamentVoteScore& data, bool bReply);
	void Function_ReceiveTeamDamageVoteCount(const struct FStruct_TeamDamageVoteScore& data, bool bReply);
	void Function_ReceiveAdminVoteCount(const struct FStruct_AdminVoteScore& data, bool bReply);
	void Function_ReceiveKickVoteCount(const struct FStruct_KickVoteScore& KVCData, bool bReply);
	void Function_ReceiveMapVoteCount(const struct FStruct_MapVoteScore& MVCData, bool bReply);
	void Function_ReceiveMapInfo(const struct FStruct_MapVoteMapList& MapInfo);
	void Function_ReceiveGameConfig(const struct FStruct_MapVoteGameConfigLite& p_GameConfig);
	void Function_TickedReplication_Mutators(int Index, bool bDedicated);
	void Function_TickedReplication_Maps(int Index, bool bDedicated);
	void Function_TickedReplication_TournamentVoteCount(int Index, bool bDedicated);
	void Function_TickedReplication_TeamDamageVoteCount(int Index, bool bDedicated);
	void Function_TickedReplication_AdminVoteCount(int Index, bool bDedicated);
	void Function_TickedReplication_KickVoteCount(int Index, bool bDedicated);
	void Function_TickedReplication_MapVoteCount(int Index, bool bDedicated);
	void Function_TickedReplication_MatchConfig(int Index, bool bDedicated);
	void Function_TickedReplication_MapList(int Index, bool bDedicated);
	void Function_TickedReplication_GameConfig(int Index, bool bDedicated);
	void Function_AddToTickedReplicationQueue(TEnumAsByte<ERepDataType> Type, int Last);
	void Function_Tick_Tick(float DeltaTime);
	void Function_GetServerData();
	class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* Function_GetController();
	bool Function_NeedNetNotify();
	void Function_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowRootWindow.UDebugRootWindow
// 0x0008 (0x0234 - 0x022C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow_UDebugRootWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowRootWindow
{
public:
	class UClass_Object_Field_Struct_State_Class*      MenuBarClass;                                             // 0x022C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar_UDebugMenuBar* MenuBar;                                                  // 0x0230(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowRootWindow.UDebugRootWindow");
		return ptr;
	}


	bool Function_KeyEvent_KeyEvent_KeyEvent(float Delta, TEnumAsByte<EInputKey>* Key, TEnumAsByte<EInputAction>* Action);
	void Function_DoQuitGame_DoQuitGame();
	void Function_Resized_Resized_Resized();
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowMenuBar.UDebugMenuBar
// 0x004C (0x0168 - 0x011C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar_UDebugMenuBar : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Game;                                                     // 0x011C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* RModes;                                                   // 0x0120(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Rend;                                                     // 0x0124(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* KDraw;                                                    // 0x0128(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Stats;                                                    // 0x012C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Show;                                                     // 0x0130(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Player;                                                   // 0x0134(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Options;                                                  // 0x0138(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* GameItem;                                                 // 0x013C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* RModesItem;                                               // 0x0140(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* RendItem;                                                 // 0x0144(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* KDrawItem;                                                // 0x0148(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* StatsItem;                                                // 0x014C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* ShowItem;                                                 // 0x0150(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* PlayerItem;                                               // 0x0154(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* OptionsItem;                                              // 0x0158(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* ShadowItem;                                               // 0x015C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* Shadows;                                                  // 0x0160(0x0004)
	unsigned long                                      bShowMenu : 1;                                            // 0x0164(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowMenuBar.UDebugMenuBar");
		return ptr;
	}


	void Function_MenuItemSelected_MenuItemSelected(class UClass_Object_Interactions_Interaction_UWindowBase* Sender, class UClass_Object_Interactions_Interaction_UWindowBase* Item);
	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float MouseX, float MouseY);
	void Function_WindowEvent_WindowEvent(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
	void Function_MenuCmd_MenuCmd(int menu, int Item);
	void Function_NotifyAfterLevelChange_NotifyAfterLevelChange();
	void Function_NotifyBeforeLevelChange_NotifyBeforeLevelChange();
	void Function_NotifyQuitUnreal_NotifyQuitUnreal();
	void Function_LMouseDown_LMouseDown_LMouseDown(float X, float Y);
	void Function_DrawMenuBar_DrawMenuBar(class UClass_Object_Canvas* C);
	void Function_DrawItem_DrawItem_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_ShowHelpItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* i);
	void Function_SetHelp(const struct FString& NewHelpText);
	void Function_Created_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UDebugMapListWindow
// 0x0000 (0x00EC - 0x00EC)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UDebugMapListWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UDebugMapListWindow");
		return ptr;
	}


	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UDebugOpenWindow
// 0x0014 (0x0100 - 0x00EC)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UDebugOpenWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton* CloseButton;                                              // 0x00EC(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* OKButton;                                                 // 0x00F0(0x0004)
	struct FString                                     OKText;                                                   // 0x00F4(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UDebugOpenWindow");
		return ptr;
	}


	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Resized_Resized_Resized();
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UDebugVideoWindow
// 0x0000 (0x00EC - 0x00EC)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UDebugVideoWindow : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowFramedWindow.UDebugVideoWindow");
		return ptr;
	}

};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UDebugMapListCW
// 0x0020 (0x00E0 - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UDebugMapListCW : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowListBox_UDebugMapListBox* MapList;                                                  // 0x00C0(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton* CloseButton;                                              // 0x00C4(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton_UWindowSmallOKButton_UDebugSmallLoadMapButton* OKButton;                                                 // 0x00C8(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* GameCombo;                                                // 0x00CC(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* NetworkCombo;                                             // 0x00D0(0x0004)
	struct FString                                     LastGameType;                                             // 0x00D4(0x000C) (Config, GlobalConfig, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UDebugMapListCW");
		return ptr;
	}


	void Function_WindowEvent_WindowEvent(TEnumAsByte<EWinMessage> msg, class UClass_Object_Canvas* C, float X, float Y, int Key);
	void Function_Notify_Notify(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* C, unsigned char E);
	void Function_LoadMapList();
	void Function_Resized_Resized();
	void Function_Paint_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton.UWindowSmallCloseButton
// 0x000C (0x017C - 0x0170)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton
{
public:
	struct FString                                     CloseText;                                                // 0x0170(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton.UWindowSmallCloseButton");
		return ptr;
	}


	void Function_Click_Click_Click(float X, float Y);
	void Function_Created_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UDebugOpenCW
// 0x0094 (0x0154 - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UDebugOpenCW : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* OpenCombo;                                                // 0x00C0(0x0004)
	struct FString                                     OpenText;                                                 // 0x00C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     OpenHelp;                                                 // 0x00D0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     OpenHistory[0xA];                                         // 0x00DC(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UDebugOpenCW");
		return ptr;
	}


	void Function_OpenURL();
	void Function_Notify_Notify(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* C, unsigned char E);
	void Function_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UDebugVideoClient
// 0x00BC (0x017C - 0x00C0)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UDebugVideoClient : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow
{
public:
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* ResolutionCombo;                                          // 0x00C0(0x0004)
	struct FString                                     ResolutionText;                                           // 0x00C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ResolutionHelp;                                           // 0x00D0(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowHSliderControl* BrightnessSlider;                                         // 0x00DC(0x0004)
	struct FString                                     BrightnessText;                                           // 0x00E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     BrightnessHelp;                                           // 0x00EC(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* ConfirmSettings;                                          // 0x00F8(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* ConfirmDriver;                                            // 0x00FC(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* ConfirmWorldTextureDetail;                                // 0x0100(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* ConfirmSkinTextureDetail;                                 // 0x0104(0x0004)
	struct FString                                     ConfirmSettingsTitle;                                     // 0x0108(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmSettingsText;                                      // 0x0114(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmSettingsCancelTitle;                               // 0x0120(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmSettingsCancelText;                                // 0x012C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmTextureDetailTitle;                                // 0x0138(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmTextureDetailText;                                 // 0x0144(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmDriverTitle;                                       // 0x0150(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConfirmDriverText;                                        // 0x015C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     OldSettings;                                              // 0x0168(0x000C) (NeedCtorLink)
	unsigned long                                      bInitialized : 1;                                         // 0x0174(0x0004)
	float                                              ControlOffset;                                            // 0x0178(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowClientWindow.UWindowDialogClientWindow.UDebugVideoClient");
		return ptr;
	}


	void Function_BrightnessChanged();
	void Function_MessageBoxDone_MessageBoxDone(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow_UWindowMessageBox* W, TEnumAsByte<EMessageBoxResult> Result);
	void Function_SettingsChanged();
	void Function_Notify_Notify(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* C, unsigned char E);
	void Function_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_ResolutionChanged_ResolutionChanged(float W, float H);
	void Function_LoadAvailableSettings();
	void Function_AfterCreate_AfterCreate();
	void Function_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowListBox
// 0x002C (0x0138 - 0x010C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowListBox : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl
{
public:
	float                                              ItemHeight;                                               // 0x010C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowVScrollbar* VertSB;                                                   // 0x0110(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem* SelectedItem;                                             // 0x0114(0x0004)
	unsigned long                                      bCanDrag : 1;                                             // 0x0118(0x0004)
	unsigned long                                      bCanDragExternal : 1;                                     // 0x0118(0x0004)
	struct FString                                     DefaultHelpText;                                          // 0x011C(0x000C) (NeedCtorLink)
	unsigned long                                      bDragging : 1;                                            // 0x0128(0x0004)
	float                                              DragY;                                                    // 0x012C(0x0004)
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowListBox* DoubleClickList;                                          // 0x0130(0x0004)
	unsigned long                                      bHotTrack : 1;                                            // 0x0134(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowListBox");
		return ptr;
	}


	void Function_KeyUp_KeyUp(int Key, float X, float Y);
	void Function_DrawItem_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
	bool Function_ExternalDragOver_ExternalDragOver(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl* ExternalControl, float X, float Y);
	void Function_MouseMove_MouseMove_MouseMove(float X, float Y);
	void Function_DoubleClickItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem* i);
	void Function_ReceiveDoubleClickItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowListBox* L, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem* i);
	void Function_DoubleClick_DoubleClick(float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_SetSelected(float X, float Y);
	void Function_SetSelectedItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem* NewSelected);
	void Function_MakeSelectedVisible();
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem* Function_GetItemAt(float MouseX, float MouseY);
	void Function_Resized_Resized();
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float MouseX, float MouseY);
	void Function_Sort();
	void Function_SetHelpText_SetHelpText(const struct FString& t);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float MouseX, float MouseY);
	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem* Function_AddItem(const struct FString& C);
	void Function_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowListBoxItem
// 0x001C (0x0088 - 0x006C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList
{
public:
	struct FString                                     Caption;                                                  // 0x006C(0x000C) (NeedCtorLink)
	unsigned long                                      bSelected : 1;                                            // 0x0078(0x0004)
	struct FString                                     HelpText;                                                 // 0x007C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowListBoxItem");
		return ptr;
	}

};


// Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowListBoxItem.UDebugMapList
// 0x0018 (0x00A0 - 0x0088)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem_UDebugMapList : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem
{
public:
	struct FString                                     MapName;                                                  // 0x0088(0x000C) (NeedCtorLink)
	struct FString                                     DisplayName;                                              // 0x0094(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowList.UWindowListBoxItem.UDebugMapList");
		return ptr;
	}


	class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowListBoxItem_UDebugMapList* Function_FindMap(const struct FString& FindMapName);
	int Function_Compare_Compare(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* t, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* B);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowListBox.UDebugMapListBox
// 0x0000 (0x0138 - 0x0138)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowListBox_UDebugMapListBox : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowListBox
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowListControl.UWindowListBox.UDebugMapListBox");
		return ptr;
	}


	void Function_DrawItem_DrawItem_DrawItem(class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList* Item, float X, float Y, float W, float H);
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton.UWindowSmallCloseButton.UWindowSmallOKButton
// 0x000C (0x0188 - 0x017C)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton_UWindowSmallOKButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton
{
public:
	struct FString                                     OKText;                                                   // 0x017C(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton.UWindowSmallCloseButton.UWindowSmallOKButton");
		return ptr;
	}


	void Function_Created_Created_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton.UWindowSmallCloseButton.UWindowSmallOKButton.UDebugSmallLoadMapButton
// 0x0000 (0x0188 - 0x0188)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton_UWindowSmallOKButton_UDebugSmallLoadMapButton : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton_UWindowSmallCloseButton_UWindowSmallOKButton
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowButton.UWindowSmallButton.UWindowSmallCloseButton.UWindowSmallOKButton.UDebugSmallLoadMapButton");
		return ptr;
	}


	void Function_Click_Click_Click_Click(float X, float Y);
	void Function_Created_Created_Created_Created_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowHSliderControl
// 0x0028 (0x0120 - 0x00F8)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowHSliderControl : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl
{
public:
	float                                              MinValue;                                                 // 0x00F8(0x0004)
	float                                              MaxValue;                                                 // 0x00FC(0x0004)
	float                                              Value;                                                    // 0x0100(0x0004)
	int                                                Step;                                                     // 0x0104(0x0004)
	float                                              SliderWidth;                                              // 0x0108(0x0004)
	float                                              SliderDrawX;                                              // 0x010C(0x0004)
	float                                              SliderDrawY;                                              // 0x0110(0x0004)
	float                                              TrackStart;                                               // 0x0114(0x0004)
	float                                              TrackWidth;                                               // 0x0118(0x0004)
	unsigned long                                      bSliding : 1;                                             // 0x011C(0x0004)
	unsigned long                                      bNoSlidingNotify : 1;                                     // 0x011C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowWindow.UWindowDialogControl.UWindowHSliderControl");
		return ptr;
	}


	void Function_KeyDown_KeyDown_KeyDown(int Key, float X, float Y);
	void Function_MouseMove_MouseMove_MouseMove(float X, float Y);
	void Function_LMouseDown_LMouseDown(float X, float Y);
	void Function_LMouseUp_LMouseUp(float X, float Y);
	void Function_Paint_Paint(class UClass_Object_Canvas* C, float X, float Y);
	void Function_BeforePaint_BeforePaint_BeforePaint(class UClass_Object_Canvas* C, float X, float Y);
	float Function_CheckValue(float Test);
	void Function_SetValue(float NewValue, bool bNoNotify);
	float Function_GetValue();
	void Function_SetRange(float Min, float Max, int NewStep);
	void Function_Created_Created_Created();
};


// Class Object.Interactions.Interaction.UWindowBase.UWindowLookAndFeel.UDebugBlueLookAndFeel
// 0x0128 (0x05C0 - 0x0498)
class UClass_Object_Interactions_Interaction_UWindowBase_UWindowLookAndFeel_UDebugBlueLookAndFeel : public UClass_Object_Interactions_Interaction_UWindowBase_UWindowLookAndFeel
{
public:
	struct FStruct_Region                              SBUpUp;                                                   // 0x0498(0x0010) (Edit)
	struct FStruct_Region                              SBUpDown;                                                 // 0x04A8(0x0010) (Edit)
	struct FStruct_Region                              SBUpDisabled;                                             // 0x04B8(0x0010) (Edit)
	struct FStruct_Region                              SBDownUp;                                                 // 0x04C8(0x0010) (Edit)
	struct FStruct_Region                              SBDownDown;                                               // 0x04D8(0x0010) (Edit)
	struct FStruct_Region                              SBDownDisabled;                                           // 0x04E8(0x0010) (Edit)
	struct FStruct_Region                              SBLeftUp;                                                 // 0x04F8(0x0010) (Edit)
	struct FStruct_Region                              SBLeftDown;                                               // 0x0508(0x0010) (Edit)
	struct FStruct_Region                              SBLeftDisabled;                                           // 0x0518(0x0010) (Edit)
	struct FStruct_Region                              SBRightUp;                                                // 0x0528(0x0010) (Edit)
	struct FStruct_Region                              SBRightDown;                                              // 0x0538(0x0010) (Edit)
	struct FStruct_Region                              SBRightDisabled;                                          // 0x0548(0x0010) (Edit)
	struct FStruct_Region                              SBBackground;                                             // 0x0558(0x0010) (Edit)
	struct FStruct_Region                              FrameSBL;                                                 // 0x0568(0x0010) (Edit)
	struct FStruct_Region                              FrameSB;                                                  // 0x0578(0x0010) (Edit)
	struct FStruct_Region                              FrameSBR;                                                 // 0x0588(0x0010) (Edit)
	struct FStruct_Region                              CloseBoxUp;                                               // 0x0598(0x0010) (Edit)
	struct FStruct_Region                              CloseBoxDown;                                             // 0x05A8(0x0010) (Edit)
	int                                                CloseBoxOffsetX;                                          // 0x05B8(0x0004) (Edit)
	int                                                CloseBoxOffsetY;                                          // 0x05BC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.UWindowBase.UWindowLookAndFeel.UDebugBlueLookAndFeel");
		return ptr;
	}


	void Function_PlayMenuSound_PlayMenuSound(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow* W, TEnumAsByte<EMenuSound> S);
	void Function_Button_DrawSmallButton_Button_DrawSmallButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSmallButton* B, class UClass_Object_Canvas* C);
	void Function_Menu_DrawPulldownMenuItem_Menu_DrawPulldownMenuItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* M, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowPulldownMenuItem* Item, class UClass_Object_Canvas* C, float X, float Y, float W, float H, bool bSelected);
	void Function_Menu_DrawPulldownMenuBackground_Menu_DrawPulldownMenuBackground(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowPulldownMenu* W, class UClass_Object_Canvas* C);
	void Function_Menu_DrawMenuBarItem_Menu_DrawMenuBarItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* B, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowList_UWindowMenuBarItem* i, float X, float Y, float W, float H, class UClass_Object_Canvas* C);
	void Function_Menu_DrawMenuBar_Menu_DrawMenuBar(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowMenuBar* W, class UClass_Object_Canvas* C);
	void Function_Tab_GetTabSize_Tab_GetTabSize(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowTabControlTabArea* tab, class UClass_Object_Canvas* C, const struct FString& Text, float* W, float* H);
	void Function_Tab_DrawTabPageArea_Tab_DrawTabPageArea(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl_UWindowPageControl* W, class UClass_Object_Canvas* C, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowPageWindow* p);
	void Function_Tab_SetTabPageSize_Tab_SetTabPageSize(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowTabControl_UWindowPageControl* W, class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow_UWindowDialogClientWindow_UWindowPageWindow* p);
	void Function_Tab_SetupRightButton_Tab_SetupRightButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlRightButton* W);
	void Function_Tab_SetupLeftButton_Tab_SetupLeftButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowTabControlLeftButton* W);
	void Function_SB_HDraw_SB_HDraw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowHScrollbar* W, class UClass_Object_Canvas* C);
	void Function_SB_VDraw_SB_VDraw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowVScrollbar* W, class UClass_Object_Canvas* C);
	void Function_SB_SetupRightButton_SB_SetupRightButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBRightButton* W);
	void Function_SB_SetupLeftButton_SB_SetupLeftButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBLeftButton* W);
	void Function_SB_SetupDownButton_SB_SetupDownButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBDownButton* W);
	void Function_SB_SetupUpButton_SB_SetupUpButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowSBUpButton* W);
	void Function_Tab_DrawTab_Tab_DrawTab(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowTabControlTabArea* tab, class UClass_Object_Canvas* C, bool bActiveTab, bool bLeftmostTab, float X, float Y, float W, float H, const struct FString& Text, bool bShowText);
	void Function_ControlFrame_Draw_ControlFrame_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowControlFrame* W, class UClass_Object_Canvas* C);
	void Function_ControlFrame_SetupSizes_ControlFrame_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowControlFrame* W, class UClass_Object_Canvas* C);
	void Function_Editbox_Draw_Editbox_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditControl* W, class UClass_Object_Canvas* C);
	void Function_Editbox_SetupSizes_Editbox_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowEditControl* W, class UClass_Object_Canvas* C);
	void Function_Combo_SetupRightButton_Combo_SetupRightButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboRightButton* W);
	void Function_Combo_SetupLeftButton_Combo_SetupLeftButton(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboLeftButton* W);
	void Function_Combo_GetButtonBitmaps_Combo_GetButtonBitmaps(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowComboButton* W);
	void Function_Checkbox_SetupSizes_Checkbox_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowButton_UWindowCheckbox* W, class UClass_Object_Canvas* C);
	void Function_ComboList_DrawItem_ComboList_DrawItem(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowComboList* Combo, class UClass_Object_Canvas* C, float X, float Y, float W, float H, const struct FString& Text, bool bSelected);
	void Function_ComboList_DrawBackground_ComboList_DrawBackground(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowListControl_UWindowComboList* W, class UClass_Object_Canvas* C);
	void Function_Combo_Draw_Combo_Draw(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* W, class UClass_Object_Canvas* C);
	void Function_Combo_SetupSizes_Combo_SetupSizes(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowDialogControl_UWindowComboControl* W, class UClass_Object_Canvas* C);
	void Function_DrawClientArea_DrawClientArea(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowClientWindow* W, class UClass_Object_Canvas* C);
	TEnumAsByte<EFrameHitTest> Function_FW_HitTest_FW_HitTest(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W, float X, float Y);
	struct FStruct_Region Function_FW_GetClientArea_FW_GetClientArea(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W);
	void Function_FW_SetupFrameButtons_FW_SetupFrameButtons(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W, class UClass_Object_Canvas* C);
	void Function_FW_DrawWindowFrame_FW_DrawWindowFrame(class UClass_Object_Interactions_Interaction_UWindowBase_UWindowWindow_UWindowFramedWindow* W, class UClass_Object_Canvas* C);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage
// 0x0018 (0x02D0 - 0x02B8)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage
{
public:
	class UClass_Object_TribesGUIConfig*               gc;                                                       // 0x02B8(0x0004) (Edit, EditConst, NoClear, EditInline)
	unsigned long                                      bEscapeable : 1;                                          // 0x02BC(0x0004) (NoClear)
	struct FString                                     PageOpenedAfterEscape;                                    // 0x02C0(0x000C) (NeedCtorLink, NoClear)
	unsigned long                                      bSuppressLevelRender : 1;                                 // 0x02CC(0x0004) (NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage");
		return ptr;
	}


	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_GameResume();
	void Function_GameRestart();
	void Function_GameAbort();
	void Function_GameStart();
	void Function_Quit();
	void Function_DisplayMainMenu();
	void Function_OnPreLevelChange(const struct FString& DestURL, class UClass_Object_LevelSummary* NewSummary);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesSaveGameBase
// 0x0000 (0x02D0 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesSaveGameBase : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesSaveGameBase");
		return ptr;
	}


	void Function_LoadSaveGameList(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* List, bool bKeepList);
	bool Function_DeleteSave(const struct FString& FileName);
	TArray<struct FString> Function_GetSaves();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesPatchCheck
// 0x004C (0x031C - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesPatchCheck : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	unsigned char                                      UnknownData00[0x4C];                                      // 0x02D0(0x004C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesPatchCheck");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMissionLoadingMenu
// 0x004C (0x031C - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesMissionLoadingMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	unsigned char                                      UnknownData00[0x4C];                                      // 0x02D0(0x004C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMissionLoadingMenu");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMainMenu
// 0x0028 (0x02F8 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesMainMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* NewGameButton;                                            // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoadGameButton;                                           // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MultiplayerButton;                                        // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* OptionsButton;                                            // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CreditsButton;                                            // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* QuitButton;                                               // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DebugLoadMapButton;                                       // 0x02E8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ContinueButton;                                           // 0x02EC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* VersionLabel;                                             // 0x02F0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	unsigned long                                      bActivated : 1;                                           // 0x02F4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMainMenu");
		return ptr;
	}


	struct FString Function_GetRecentSave();
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_Timer_Timer();
	void Function_InternalOnShow();
	void Function_InternalOnActivate();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	struct FString Function_GetVersionString();
};


// Class Object.Interactions.Interaction.BaseGUIController.GUIController.TribesGUIControllerBase.TribesGUIController
// 0x0018 (0x02F8 - 0x02E0)
class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController_TribesGUIControllerBase_TribesGUIController : public UClass_Object_Interactions_Interaction_BaseGUIController_GUIController_TribesGUIControllerBase
{
public:
	TArray<class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage*> StorageStack;                                             // 0x02E0(0x000C) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_ProfileManager*                ProfileManager;                                           // 0x02EC(0x0004)
	struct FStruct_Color                               neutralColor;                                             // 0x02F0(0x0004)
	struct FStruct_Color                               neutralHighlightColor;                                    // 0x02F4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Interactions.Interaction.BaseGUIController.GUIController.TribesGUIControllerBase.TribesGUIController");
		return ptr;
	}


	struct FString Function_EncodePlayerName(class UClass_Object_GUI_GUIComponent* Sender, class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_OnGamespyTeamLoginResult(bool succeeded, const struct FString& ResponseData);
	bool Function_OnNetworkBrowse_OnNetworkBrowse(const struct FString& URL, const struct FString& ProfileOption, bool bSelectProfile);
	struct FString Function_GetGameSpyPassword_GetGameSpyPassword();
	bool Function_UseGameSpyTeamAffiliation_UseGameSpyTeamAffiliation();
	int Function_GetGameSpyTeamId_GetGameSpyTeamId();
	int Function_GetGameSpyProfileId_GetGameSpyProfileId();
	void Function_FindQuickChatNames(TArray<struct FString>* Names);
	void Function_OpenEntryStack();
	void Function_SaveEntryStack();
	void Function_PreLevelChange_PreLevelChange_PreLevelChange_PreLevelChange(const struct FString& DestURL, class UClass_Object_LevelSummary* NewSummary);
	void Function_InitializeController_InitializeController_InitializeController_InitializeController();
	bool Function_ShouldSuppressLevelRender_ShouldSuppressLevelRender();
	void Function_AutoLoadMenuClass_AutoLoadMenuClass(class UClass_Object_Field_Struct_State_Class* menuClass);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel
// 0x0004 (0x028C - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel
{
public:
	class UClass_Object_TribesGUIConfig*               gc;                                                       // 0x0288(0x0004) (Edit, EditConst, NoClear, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel");
		return ptr;
	}


	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel
// 0x0004 (0x0290 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel
{
public:
	unsigned long                                      bLoadingSettings : 1;                                     // 0x028C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel");
		return ptr;
	}


	void Function_OnOptionsEnding();
};


// Class Object.PlayerProfile
// 0x0138 (0x0160 - 0x0028)
class UClass_Object_PlayerProfile : public UClass_Object
{
public:
	unsigned long                                      bStoreLogins : 1;                                         // 0x0028(0x0004) (Edit, Config)
	TArray<struct FStruct_AutoLoginInfo>               LoginHistory;                                             // 0x002C(0x000C) (Edit, Config, NeedCtorLink)
	TArray<struct FStruct_ServerFavorite>              serverFavorites;                                          // 0x0038(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     PlayerName;                                               // 0x0044(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bIsFemale : 1;                                            // 0x0050(0x0004) (Edit, Config, NoClear)
	struct FString                                     voiceSet;                                                 // 0x0054(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     SkinName;                                                 // 0x0060(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	TArray<struct FStruct_LoadoutSlot>                 loadoutSlots;                                             // 0x006C(0x000C) (Edit, Config, NeedCtorLink)
	struct FStruct_LoadoutSlot                         activeLoadoutSlot;                                        // 0x0078(0x004C) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             buddyList;                                                // 0x00C4(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bReadOnly : 1;                                            // 0x00D0(0x0004) (Edit, Config)
	unsigned long                                      bShownMPHelp : 1;                                         // 0x00D0(0x0004) (Edit, Config)
	unsigned long                                      bUseStatTracking : 1;                                     // 0x00D0(0x0004) (Edit, Config)
	unsigned long                                      bSaveStatTrackingPassword : 1;                            // 0x00D0(0x0004) (Edit, Config)
	struct FString                                     statTrackingNick;                                         // 0x00D4(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     statTrackingEmail;                                        // 0x00E0(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     statTrackingPassword;                                     // 0x00EC(0x000C) (Edit, Config, NeedCtorLink)
	int                                                statTrackingID;                                           // 0x00F8(0x0004) (Config)
	unsigned long                                      bUseTeamAffiliation : 1;                                  // 0x00FC(0x0004) (Edit, Config)
	unsigned long                                      bSaveTeamPassword : 1;                                    // 0x00FC(0x0004) (Edit, Config)
	int                                                affiliatedTeamId;                                         // 0x0100(0x0004) (Config)
	struct FString                                     affiliatedTeamTag;                                        // 0x0104(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     affiliatedTeamName;                                       // 0x0110(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     affiliatedTeamPassword;                                   // 0x011C(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     ownedTeamTag;                                             // 0x0128(0x000C) (Edit, Config, NeedCtorLink)
	struct FString                                     ownedTeamName;                                            // 0x0134(0x000C) (Edit, Config, NeedCtorLink)
	TArray<class UClass_Object_Loadout_CustomPlayerLoadout*> loadouts;                                                 // 0x0140(0x000C) (NeedCtorLink)
	class UClass_Object_Loadout_CustomPlayerLoadout*   activeLoadout;                                            // 0x014C(0x0004)
	class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* Controller;                                               // 0x0150(0x0004)
	struct FString                                     configFilePath;                                           // 0x0154(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.PlayerProfile");
		return ptr;
	}


	bool Function_hasServerFavorite(const struct FString& IP, const struct FString& Port);
	void Function_toggleServerFavorite(const struct FString& IP, const struct FString& Port);
	void Function_SaveCredentials(const struct FString& Username, const struct FString& Password, const struct FString& IP, const struct FString& Port, bool bAutologin);
	int Function_FindCredentials(const struct FString& IP, const struct FString& Port);
	bool Function_needTeamAffiliationUserInput();
	bool Function_needStatTrackingUserInput();
	void Function_LoadoutFromSlot(const struct FStruct_LoadoutSlot& Slot, class UClass_Object_Loadout_CustomPlayerLoadout** Loadout);
	void Function_SlotFromLoadout(class UClass_Object_Loadout_CustomPlayerLoadout* Loadout, struct FStruct_LoadoutSlot* newSlot);
	struct FString Function_GetURLOptions(const struct FString& originalURL);
	class UClass_Object_Loadout_CustomPlayerLoadout* Function_getLoadout(int slotIndex);
	void Function_SetActiveLoadout(class UClass_Object_Loadout_CustomPlayerLoadout* Loadout);
	class UClass_Object_Loadout_CustomPlayerLoadout* Function_GetActiveLoadout();
	void Function_AddLoadout(int Slot, class UClass_Object_Loadout_CustomPlayerLoadout** Loadout);
	class UClass_Object_Loadout_CustomPlayerLoadout* Function_GetLoadoutAutoCreate(int Slot);
	void Function_Store();
	void Function_LoadProfileData(const struct FString& profileName);
};


// Class Object.ProfileManager
// 0x0028 (0x0050 - 0x0028)
class UClass_Object_ProfileManager : public UClass_Object
{
public:
	struct FString                                     activeProfileName;                                        // 0x0028(0x000C) (Config, NeedCtorLink)
	int                                                nextProfileNumber;                                        // 0x0034(0x0004)
	class UClass_Object_PlayerProfile*                 defaultProfile;                                           // 0x0038(0x0004)
	TArray<class UClass_Object_PlayerProfile*>         profiles;                                                 // 0x003C(0x000C) (NeedCtorLink)
	int                                                activeProfileIndex;                                       // 0x0048(0x0004)
	class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* Controller;                                               // 0x004C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ProfileManager");
		return ptr;
	}


	void Function_Store();
	struct FString Function_GetURLOptions(const struct FString& originalURL);
	class UClass_Object_PlayerProfile* Function_newActiveProfile(const struct FString& newProfileName, const struct FString& baseProfileName, bool bReadOnly);
	class UClass_Object_PlayerProfile* Function_GetProfile(int Index);
	class UClass_Object_PlayerProfile* Function_GetProfileByName(const struct FString& PlayerName);
	int Function_GetProfileIndexByPlayerName(const struct FString& PlayerName);
	bool Function_HasProfile(struct FString* PlayerName);
	int Function_GetProfileIndex(class UClass_Object_PlayerProfile* Profile);
	int Function_NumProfiles();
	bool Function_SetActiveProfile(class UClass_Object_PlayerProfile* newActiveProfile);
	class UClass_Object_PlayerProfile* Function_GetActiveProfile();
	class UClass_Object_PlayerProfile* Function_GetDefaultProfile();
	bool Function_DeleteProfile(class UClass_Object_PlayerProfile* Profile);
	void Function_LoadProfiles(class UClass_Object_Interactions_Interaction_BaseGUIController_GUIController* gc);
};


// Class Object.HUDElement
// 0x018C (0x01B4 - 0x0028)
class UClass_Object_HUDElement : public UClass_Object
{
public:
	struct FStruct_HUDMaterial                         BackgroundTexture;                                        // 0x0028(0x0040) (Edit, Config, NoClear)
	struct FStruct_HUDMaterial                         foregroundTexture;                                        // 0x0068(0x0040) (Edit, Config, NoClear)
	unsigned long                                      bUseResFonts : 1;                                         // 0x00A8(0x0004) (Edit, Config, NoClear)
	TArray<struct FString>                             resFontNames;                                             // 0x00AC(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	TArray<class UClass_Object_Font*>                  resFonts;                                                 // 0x00B8(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	struct FString                                     textFontName;                                             // 0x00C4(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	class UClass_Object_Font*                          textFont;                                                 // 0x00D0(0x0004) (Edit, Config, NoClear)
	struct FStruct_Color                               TextColor;                                                // 0x00D4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bRelativePositioning : 1;                                 // 0x00D8(0x0004) (Edit, Config)
	float                                              RelativePosX;                                             // 0x00DC(0x0004) (Edit, Config)
	float                                              RelativePosY;                                             // 0x00E0(0x0004) (Edit, Config)
	float                                              RelativeWidth;                                            // 0x00E4(0x0004) (Edit, Config)
	float                                              RelativeHeight;                                           // 0x00E8(0x0004) (Edit, Config)
	float                                              aspectRatio;                                              // 0x00EC(0x0004) (Edit, Config)
	float                                              posX;                                                     // 0x00F0(0x0004) (Edit, Config)
	float                                              posY;                                                     // 0x00F4(0x0004) (Edit, Config)
	float                                              Width;                                                    // 0x00F8(0x0004) (Edit, Config)
	float                                              height;                                                   // 0x00FC(0x0004) (Edit, Config)
	int                                                offsetX;                                                  // 0x0100(0x0004) (Edit, Config)
	int                                                offsetY;                                                  // 0x0104(0x0004) (Edit, Config)
	int                                                insetX;                                                   // 0x0108(0x0004) (Edit, Config)
	int                                                insetY;                                                   // 0x010C(0x0004) (Edit, Config)
	int                                                borderTop;                                                // 0x0110(0x0004) (Edit, Config)
	int                                                borderLeft;                                               // 0x0114(0x0004) (Edit, Config)
	int                                                borderBottom;                                             // 0x0118(0x0004) (Edit, Config)
	int                                                borderRight;                                              // 0x011C(0x0004) (Edit, Config)
	TEnumAsByte<EHorizontalAlignment>                  horizontalAlignment;                                      // 0x0120(0x0001) (Edit, Config)
	TEnumAsByte<EHorizontalFill>                       horizontalFill;                                           // 0x0121(0x0001) (Edit, Config)
	TEnumAsByte<EVerticalAlignment>                    verticalAlignment;                                        // 0x0122(0x0001) (Edit, Config)
	TEnumAsByte<EVerticalFill>                         verticalFill;                                             // 0x0123(0x0001) (Edit, Config)
	float                                              Alpha;                                                    // 0x0124(0x0004) (Edit, Config)
	struct FStruct_Color                               defaultDrawColor;                                         // 0x0128(0x0004) (Edit, Config)
	unsigned long                                      bVisible : 1;                                             // 0x012C(0x0004) (Edit, Config)
	struct FString                                     iniOverride;                                              // 0x0130(0x000C) (Edit, NeedCtorLink)
	float                                              initialPosX;                                              // 0x013C(0x0004)
	float                                              initialPosY;                                              // 0x0140(0x0004)
	float                                              initialWidth;                                             // 0x0144(0x0004)
	float                                              initialHeight;                                            // 0x0148(0x0004)
	float                                              ScreenWidth;                                              // 0x014C(0x0004)
	float                                              screenHeight;                                             // 0x0150(0x0004)
	unsigned long                                      bNeedsLayout : 1;                                         // 0x0154(0x0004)
	class UClass_Object_HUDElement_HUDContainer*       ParentElement;                                            // 0x0158(0x0004)
	class UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase_TribesHUDScript* BaseScript;                                               // 0x015C(0x0004)
	class UClass_Object_RefCount_ClientSideCharacter*  LocalData;                                                // 0x0160(0x0004)
	unsigned long                                      bRenderedOnce : 1;                                        // 0x0164(0x0004)
	float                                              TimeSeconds;                                              // 0x0168(0x0004)
	unsigned long                                      bIsLayingOut : 1;                                         // 0x016C(0x0004)
	class UClass_Object_HUDElement*                    previousSibling;                                          // 0x0170(0x0004)
	class UClass_Object_HUDElement*                    nextSibling;                                              // 0x0174(0x0004)
	struct FString                                     HelpLabel;                                                // 0x0178(0x000C) (NeedCtorLink)
	struct FString                                     HelpFontName;                                             // 0x0184(0x000C) (NeedCtorLink)
	class UClass_Object_Font*                          HelpFont;                                                 // 0x0190(0x0004)
	unsigned long                                      bFlashing : 1;                                            // 0x0194(0x0004)
	float                                              FlashPeriod;                                              // 0x0198(0x0004)
	float                                              FlashDuration;                                            // 0x019C(0x0004)
	float                                              FlashStartTime;                                           // 0x01A0(0x0004)
	float                                              FlashAlphaMin;                                            // 0x01A4(0x0004)
	float                                              FlashAlphaMax;                                            // 0x01A8(0x0004)
	float                                              TargetAlpha;                                              // 0x01AC(0x0004)
	float                                              FlashSwitchTime;                                          // 0x01B0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement");
		return ptr;
	}


	struct FString Function_EncodePlayerName(const struct FString& PlayerName, const struct FString& teamTag, TEnumAsByte<ETeamAlignment> alignment, class UClass_Object_Field_Struct_State_Class* playerTeam);
	void Function_FlashElement(float period, float duration, float AlphaMin, float AlphaMax);
	bool Function_PointInRegion(int PointX, int PointY, int x1, int y1, int x2, int y2);
	bool Function_PointInElement(int PointX, int PointY);
	void Function_GetScreenPos(int* ScreenPosX, int* ScreenPosY);
	class UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase_TribesHUDScript* Function_RootHUDScript();
	int Function_MaterialHeight(const struct FStruct_HUDMaterial& Mat);
	int Function_MaterialWidth(const struct FStruct_HUDMaterial& Mat);
	float Function_GetMaximumY();
	float Function_GetMaximumX();
	float Function_GetMaximumRelativeY();
	float Function_GetMaximumRelativeX();
	void Function_SetHeight(int NewHeight);
	void Function_SetWidth(int newWidth);
	void Function_SetY(int newY);
	void Function_SetX(int newX);
	int Function_InternalHeight();
	int Function_InternalWidth();
	int Function_InternalLeft();
	int Function_InternalTop();
	int Function_GetHeight();
	int Function_GetWidth();
	int Function_GetY();
	int Function_GetX();
	void Function_SetColor(class UClass_Object_Canvas* C, const struct FStruct_Color& NewColor);
	float Function_GetAlpha();
	void Function_SetAlpha(float newAlpha);
	struct FStruct_HUDMaterial Function_MakeHUDMaterial(class UClass_Object_Material* Mat);
	void Function_ResetHUDMaterial(struct FStruct_HUDMaterial* Mat);
	class UClass_Object_HUDElement* Function_CreateClonedElement(const struct FString& ClassName, const struct FString& ObjectName, const struct FString& newObjectName);
	class UClass_Object_HUDElement* STATIC_Function_StaticCreateHUDElement(class UClass_Object_Field_Struct_State_Class* elementClass, const struct FString& elementName, class UClass_Object* ownerObject);
	class UClass_Object_HUDElement* Function_CreateHUDElement(class UClass_Object_Field_Struct_State_Class* elementClass, const struct FString& elementName, class UClass_Object* ownerObject);
	void Function_RenderElement(class UClass_Object_Canvas* C);
	void Function_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_ResetFont();
	void Function_LoadFont(const struct FString& FontName, class UClass_Object_Font** Font);
	void Function_LoadFonts();
	void Function_ForceNeedsLayout();
	void Function_SetNeedsLayout();
	void Function_DoLayout(class UClass_Object_Canvas* C);
	void Function_InitElementHeirachy(class UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase_TribesHUDScript* Base, class UClass_Object_HUDElement_HUDContainer* Parent);
	void Function_InitElement();
	void Function_Construct_Void_Construct_Void();
	void Function_OnMouseDoubleClicked(class UClass_Object_HUDElement* Sender);
	void Function_OnMouseClicked(class UClass_Object_HUDElement* Sender);
	void Function_OnMouseExited(class UClass_Object_HUDElement* Sender);
	void Function_OnMouseEntered(class UClass_Object_HUDElement* Sender);
	bool Function_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta, class UClass_Object_HUDAction* Response);
	bool Function_KeyType(TEnumAsByte<EInputKey> Key, const struct FString& Unicode, class UClass_Object_HUDAction* Response);
	struct FString STATIC_Function_EncodeColor(const struct FStruct_Color& InColor);
	void Function_LoadConfig(const struct FString& objectConfigName, class UClass_Object_Field_Struct_State_Class* ObjectClass, const struct FString& FileName);
	void Function_ResizeForWidth(class UClass_Object_Canvas* C, int pixelWidth);
	void Function_NativeRenderElement(class UClass_Object_Canvas* C);
	void Function_Render(class UClass_Object_Canvas* C);
	void Function_Layout(class UClass_Object_Canvas* Canvas);
	void Function_RenderHUDMaterial(class UClass_Object_Canvas* C, float matWidth, float matHeight, float tileSizeX, float tileSizeY, struct FStruct_HUDMaterial* Mat);
};


// Class Object.HUDElement.HUDContainer
// 0x000C (0x01C0 - 0x01B4)
class UClass_Object_HUDElement_HUDContainer : public UClass_Object_HUDElement
{
public:
	TArray<class UClass_Object_HUDElement*>            Children;                                                 // 0x01B4(0x000C) (Edit, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer");
		return ptr;
	}


	void Function_ForceNeedsLayout_ForceNeedsLayout();
	void Function_RemoveAll();
	void Function_RemoveElementAt(int Index);
	void Function_ElementRemoved(class UClass_Object_HUDElement* oldChild, int Index);
	void Function_ElementAdded(class UClass_Object_HUDElement* newChild, int Index);
	class UClass_Object_HUDElement* Function_AddClonedElement(const struct FString& ClassName, const struct FString& ObjectName, const struct FString& newObjectName);
	class UClass_Object_HUDElement* Function_AddElement(const struct FString& ClassName, const struct FString& ObjectName, bool bNoInit);
	void Function_AddExistingElement(class UClass_Object_HUDElement* NewElement, bool bNoInit);
	bool Function_HasElement(class UClass_Object_HUDElement* element);
	void Function_SetAlpha_SetAlpha(float newAlpha);
	void Function_InitElementHeirachy_InitElementHeirachy(class UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase_TribesHUDScript* Base, class UClass_Object_HUDElement_HUDContainer* Parent);
};


// Class Object.HUDElement.HUDContainer.HUDList
// 0x0014 (0x01D4 - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_HUDList : public UClass_Object_HUDElement_HUDContainer
{
public:
	unsigned long                                      bAutoHeight : 1;                                          // 0x01C0(0x0004) (Edit, Config)
	int                                                RowSpacing;                                               // 0x01C4(0x0004) (Edit, Config)
	TArray<class UClass_Object_HUDElement_HUDContainer_HUDList*> columns;                                                  // 0x01C8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDList");
		return ptr;
	}


	bool Function_IsListEmpty();
	bool Function_HasMultipleColumns();
	void Function_ElementRemoved_ElementRemoved(class UClass_Object_HUDElement* removedChild, int Index);
	void Function_ElementAdded_ElementAdded(class UClass_Object_HUDElement* newChild, int Index);
};


// Class Object.HUDElement.HUDContainer.HUDValueBar
// 0x0138 (0x02F8 - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_HUDValueBar : public UClass_Object_HUDElement_HUDContainer
{
public:
	struct FStruct_HUDMaterial                         emptyTexture;                                             // 0x01C0(0x0040) (Edit, Config, NoClear)
	struct FStruct_HUDMaterial                         fullTexture;                                              // 0x0200(0x0040) (Edit, Config, NoClear)
	float                                              barStartOffset;                                           // 0x0240(0x0004) (Edit, Config, NoClear)
	float                                              barEndOffset;                                             // 0x0244(0x0004) (Edit, Config, NoClear)
	float                                              Value;                                                    // 0x0248(0x0004) (Edit, Config, NoClear)
	float                                              maximumValue;                                             // 0x024C(0x0004) (Edit, Config, NoClear)
	struct FStruct_HUDMaterial                         activeEmptyTexture;                                       // 0x0250(0x0040) (Edit, Config, NoClear)
	struct FStruct_HUDMaterial                         activeFullTexture;                                        // 0x0290(0x0040) (Edit, Config, NoClear)
	struct FString                                     LabelConfigName;                                          // 0x02D0(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	int                                                MaxDisplayDigits;                                         // 0x02DC(0x0004) (Edit, Config, NoClear)
	class UClass_Object_HUDElement_HUDNumericTextureLabel* ValueLabel;                                               // 0x02E0(0x0004) (NoClear)
	float                                              barStart;                                                 // 0x02E4(0x0004)
	float                                              barEnd;                                                   // 0x02E8(0x0004)
	float                                              barWidth;                                                 // 0x02EC(0x0004)
	float                                              ratio;                                                    // 0x02F0(0x0004)
	unsigned long                                      bReverse : 1;                                             // 0x02F4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDValueBar");
		return ptr;
	}


	void Function_CalculateRatio();
	void Function_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_InitElement_InitElement();
	void Function_ClipToValue(class UClass_Object_Canvas* C, const struct FStruct_HUDMaterial& Mat, float clipRatio);
};


// Class Object.HUDElement.HUDNumericTextureLabel
// 0x0040 (0x01F4 - 0x01B4)
class UClass_Object_HUDElement_HUDNumericTextureLabel : public UClass_Object_HUDElement
{
public:
	class UClass_Object_Material*                      FontMaterial;                                             // 0x01B4(0x0004) (Edit, Config)
	TArray<int>                                        DigitWidths;                                              // 0x01B8(0x000C) (Edit, Config, NeedCtorLink)
	TArray<int>                                        TrailingSpaces;                                           // 0x01C4(0x000C) (Edit, Config, NeedCtorLink)
	struct FStruct_Color                               TextColor;                                                // 0x01D0(0x0004) (Edit, Config)
	int                                                DigitHeight;                                              // 0x01D4(0x0004) (Edit, Config)
	unsigned long                                      bCenterText : 1;                                          // 0x01D8(0x0004) (Edit, Config)
	struct FString                                     data;                                                     // 0x01DC(0x000C) (NeedCtorLink)
	TArray<int>                                        DigitIndex;                                               // 0x01E8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDNumericTextureLabel");
		return ptr;
	}


	void Function_SetDataString(const struct FString& newData);
};


// Class Object.HUDElement.LabelElement
// 0x0040 (0x01F4 - 0x01B4)
class UClass_Object_HUDElement_LabelElement : public UClass_Object_HUDElement
{
public:
	struct FString                                     Text;                                                     // 0x01B4(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bCentered : 1;                                            // 0x01C0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bShadowed : 1;                                            // 0x01C0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAutoWrapText : 1;                                        // 0x01C0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAutoScrollText : 1;                                      // 0x01C0(0x0004) (Edit, Config, NoClear)
	int                                                shadowPixelOffset;                                        // 0x01C4(0x0004) (Edit, Config, NoClear)
	float                                              textInsetX;                                               // 0x01C8(0x0004) (Edit, Config, NoClear)
	float                                              textInsetY;                                               // 0x01CC(0x0004) (Edit, Config, NoClear)
	int                                                hangingIndent;                                            // 0x01D0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bHTMLEncoded : 1;                                         // 0x01D4(0x0004) (Edit, Config, NoClear)
	struct FStruct_Color                               shadowColor;                                              // 0x01D8(0x0004) (Edit, Config, NoClear)
	TEnumAsByte<ETextAlignment>                        Justification;                                            // 0x01DC(0x0001) (Edit, Config, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET
	unsigned long                                      bAutoSize : 1;                                            // 0x01E0(0x0004)
	TArray<struct FString>                             textLineArray;                                            // 0x01E4(0x000C) (NeedCtorLink)
	int                                                firstVisibleLineIndex;                                    // 0x01F0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.LabelElement");
		return ptr;
	}


	void Function_SetText(const struct FString& NewText);
	struct FString Function_GetText();
};


// Class Object.HUDElement.HUDContainer.HUDRadarBase
// 0x004C (0x020C - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_HUDRadarBase : public UClass_Object_HUDElement_HUDContainer
{
public:
	unsigned char                                      UnknownData00[0x4C];                                      // 0x01C0(0x004C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDRadarBase");
		return ptr;
	}

};


// Class Object.HUDElement.HUDContainer.TribesHUDScriptBase
// 0x000C (0x01CC - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase : public UClass_Object_HUDElement_HUDContainer
{
public:
	TArray<struct FStruct_HUDExtension>                ExtensionSpecs;                                           // 0x01C0(0x000C) (Edit, Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.TribesHUDScriptBase");
		return ptr;
	}


	void Function_LoadExtensions();
	void Function_Construct_Void_Construct_Void_Construct_Void();
};


// Class Object.HUDElement.HUDContainer.TribesHUDScriptBase.TribesHUDScript
// 0x0074 (0x0240 - 0x01CC)
class UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase_TribesHUDScript : public UClass_Object_HUDElement_HUDContainer_TribesHUDScriptBase
{
public:
	TArray<class UClass_Object_HUDElement*>            keyEventReceptors;                                        // 0x01CC(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_HUDElement*>            mouseEventReceptors;                                      // 0x01D8(0x000C) (NeedCtorLink)
	int                                                LastMouseX;                                               // 0x01E4(0x0004)
	int                                                LastMouseY;                                               // 0x01E8(0x0004)
	unsigned long                                      bIsChatEnabled : 1;                                       // 0x01EC(0x0004)
	unsigned long                                      bIsQuickChatEnabled : 1;                                  // 0x01EC(0x0004)
	class UClass_Object_HUDElement_LabelElement_HUDChatEntry* chatEntry;                                                // 0x01F0(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* QuickChatMenu;                                            // 0x01F4(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane_HUDMessageWindow* messageWindow;                                            // 0x01F8(0x0004)
	class UClass_Object_HUDElement_HUDContainer*       messageContainer;                                         // 0x01FC(0x0004)
	class UClass_Object_HUDElement_HUDContainer*       quickChatMenuContainer;                                   // 0x0200(0x0004)
	class UClass_Object_QuickChatMenu*                 rootQuickChatMenuObject;                                  // 0x0204(0x0004)
	struct FString                                     rootQuickChatMenuObjectName;                              // 0x0208(0x000C) (NeedCtorLink)
	unsigned long                                      bOldQuickChat : 1;                                        // 0x0214(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane_HUDAnnouncerMessageWindow* AnnouncementsWindow;                                      // 0x0218(0x0004)
	unsigned long                                      bIsAnnouncmentsEnabled : 1;                               // 0x021C(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane_HUDEventMessageWindow* EventMessageWindow;                                       // 0x0220(0x0004)
	unsigned long                                      bEventMessagesEnabled : 1;                                // 0x0224(0x0004)
	unsigned long                                      bShowScoreboard : 1;                                      // 0x0224(0x0004)
	class UClass_Object_HUDElement_HUDContainer*       scoreboardGroup;                                          // 0x0228(0x0004)
	class UClass_Object_HUDElement_LabelElement*       teamOneScoreLabel;                                        // 0x022C(0x0004)
	class UClass_Object_HUDElement_LabelElement*       teamOneLabel;                                             // 0x0230(0x0004)
	class UClass_Object_HUDElement_HUDNumericTextureLabel_HUDCountDown* countDown;                                                // 0x0234(0x0004)
	class UClass_Object_HUDElement_LabelElement*       teamTwoLabel;                                             // 0x0238(0x0004)
	class UClass_Object_HUDElement_LabelElement*       teamTwoScoreLabel;                                        // 0x023C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.TribesHUDScriptBase.TribesHUDScript");
		return ptr;
	}


	bool Function_KeyEvent_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta, class UClass_Object_HUDAction* Response);
	bool Function_KeyType_KeyType(TEnumAsByte<EInputKey> Key, const struct FString& Unicode, class UClass_Object_HUDAction* Response);
	void Function_UnRegisterKeyEventReceptor(class UClass_Object_HUDElement* element);
	void Function_RegisterKeyEventReceptor(class UClass_Object_HUDElement* element);
	void Function_UnRegisterMouseEventReceptor(class UClass_Object_HUDElement* element);
	void Function_RegisterMouseEventReceptor(class UClass_Object_HUDElement* element);
	void Function_DoUpdate(class UClass_Object_Canvas* Canvas, float NewTimeSeconds);
	void Function_UpdateScoreBoard();
	void Function_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_ConstructBaseComponents();
	void Function_PreShow(class UClass_Object_RefCount_ClientSideCharacter* csc);
	void Function_Construct_Void_Construct_Void_Construct_Void_Construct_Void();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsVideoPanel
// 0x00B8 (0x0348 - 0x0290)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel_TribesOptionsVideoPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* BMDBox;                                                   // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* DSDBox;                                                   // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* GlowDBox;                                                 // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* TexDBox;                                                  // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* ResolutionBox;                                            // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* RenderDetailBox;                                          // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* MacroBox;                                                 // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* DecoBox;                                                  // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* FluidBox;                                                 // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* FogBox;                                                   // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* WorldBox;                                                 // 0x02B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* PS2Box;                                                   // 0x02BC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUISlider*    BrightnessSlider;                                         // 0x02C0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUISlider*    ContrastSlider;                                           // 0x02C4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUISlider*    GammaSlider;                                              // 0x02C8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ApplyButton;                                              // 0x02CC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DefaultsButton;                                           // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	TArray<struct FString>                             DetailChoices;                                            // 0x02D4(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	TArray<struct FString>                             RenderDetailChoices;                                      // 0x02E0(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	TArray<struct FString>                             OnOffChoices;                                             // 0x02EC(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     SwitchingResText;                                         // 0x02F8(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     ResSwitchedText;                                          // 0x0304(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     ResFailedText;                                            // 0x0310(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     ChangesText;                                              // 0x031C(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     LastResolution;                                           // 0x0328(0x000C) (NeedCtorLink)
	unsigned long                                      bIsDataDirty : 1;                                         // 0x0334(0x0004)
	unsigned long                                      bTimerHack : 1;                                           // 0x0334(0x0004)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_GUIDlg* promptDlg;                                                // 0x0338(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* targetPanel;                                              // 0x033C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                InitialRenderDetail;                                      // 0x0340(0x0004)
	unsigned long                                      bExiting : 1;                                             // 0x0344(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsVideoPanel");
		return ptr;
	}


	void Function_OnGamma(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnContrast(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnBrightness(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_RestoreDefaults();
	void Function_OnDefaults(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnPostPrecache();
	void Function_InternalOnDlgReturned(int Button, const struct FString& Passback);
	void Function_Timer_Timer();
	void Function_TryResSwitch();
	void Function_SetRenderDetailSetting(const struct FString& Cmd, int idx);
	void Function_GetRenderDetailSetting(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* Box, const struct FString& Cmd);
	void Function_LoadSettings(bool UpdateRes);
	void Function_ApplyVidSettings();
	void Function_SetRenderDetail(bool Save);
	void Function_OnRenderDetail(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnCustomSelection(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnApply(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnConfirmApplyDlgReturned(int Button, const struct FString& Passback);
	void Function_OnVideoApplyFinished();
	void Function_OnOptionsEnding_OnOptionsEnding();
	bool Function_OnOwnerTabSwitch(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Target);
	void Function_OnSettingsDirty();
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsControlsPanel
// 0x003C (0x02CC - 0x0290)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel_TribesOptionsControlsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* MyKeyBindingsBox;                                         // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MyKeyChoose;                                              // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* InvertMouseButton;                                        // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* TeamColorsButton;                                         // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUISlider*    MyMouseSensSlider;                                        // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DefaultsButton;                                           // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     LastCategory;                                             // 0x02A8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     KeyChangeMessage;                                         // 0x02B4(0x000C) (Edit, Config, Localized, NeedCtorLink)
	struct FString                                     NoBindKeyChangeMessage;                                   // 0x02C0(0x000C) (Edit, Config, Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsControlsPanel");
		return ptr;
	}


	void Function_EnsureConsistency();
	void Function_RestoreDefaults();
	void Function_OnDefaults(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnTeamColorsClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnInvertMouseClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnSensitivityChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_CategorySelectorOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnPopupReturned(const struct FStruct_GUIListElem& returnObj, const struct FString& Passback);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_LoadCategory(const struct FString& category);
	void Function_LoadSettings(bool bEnsureConsistency);
	void Function_SaveSettings();
	void Function_InternalOnHide();
	void Function_InternalOnActivate();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsAudioPanel
// 0x002C (0x02BC - 0x0290)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel_TribesOptionsAudioPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUISlider*    SoundVolumeSlider;                                        // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUISlider*    MusicVolumeSlider;                                        // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUISlider*    SpeechVolumeSlider;                                       // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DefaultsButton;                                           // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* Use3DCheck;                                               // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* UseDefaultDriverCheck;                                    // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* CompatibilityCheck;                                       // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* ReverseStereoCheck;                                       // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* LowQualityCheck;                                          // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* ChatWindowCheck;                                          // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	unsigned long                                      bIsDataDirty : 1;                                         // 0x02B8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsAudioPanel");
		return ptr;
	}


	void Function_RestoreDefaults();
	void Function_OnDefaults(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnChatWindow(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLowQuality(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnReverseStereo(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnCompatibility(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnUseEAX(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnUseDefaultDriver(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnUse3D(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnSliderChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.Actor.Info.InternetInfo.InternetLink
// 0x001C (0x041C - 0x0400)
class AClass_Object_Actor_Info_InternetInfo_InternetLink : public AClass_Object_Actor_Info_InternetInfo
{
public:
	TEnumAsByte<ELinkMode>                             LinkMode;                                                 // 0x0400(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0401(0x0003) MISSED OFFSET
	int                                                Socket;                                                   // 0x0404(0x0004) (Const)
	int                                                Port;                                                     // 0x0408(0x0004) (Const)
	int                                                RemoteSocket;                                             // 0x040C(0x0004) (Const)
	int                                                PrivateResolveInfo;                                       // 0x0410(0x0004) (Const, Native)
	int                                                DataPending;                                              // 0x0414(0x0004) (Const)
	TEnumAsByte<EReceiveMode>                          ReceiveMode;                                              // 0x0418(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0419(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.InternetInfo.InternetLink");
		return ptr;
	}


	void Function_ResolveFailed();
	void Function_Resolved(const struct FStruct_IpAddr& Addr);
	void Function_GetLocalIP(struct FStruct_IpAddr* Arg);
	struct FString Function_GameSpyGameName();
	struct FString Function_GameSpyValidate(const struct FString& ValidationString);
	bool Function_StringToIpAddr(const struct FString& str, struct FStruct_IpAddr* Addr);
	struct FString Function_IpAddrToString(const struct FStruct_IpAddr& Arg);
	int Function_GetLastError();
	void Function_Resolve(const struct FString& Domain);
	bool Function_ParseURL(const struct FString& URL, struct FString* Addr, int* Port, struct FString* LevelName, struct FString* EntryName);
	bool Function_IsDataPending();
};


// Class Object.Actor.Info.InternetInfo.InternetLink.UdpLink
// 0x0004 (0x0420 - 0x041C)
class AClass_Object_Actor_Info_InternetInfo_InternetLink_UdpLink : public AClass_Object_Actor_Info_InternetInfo_InternetLink
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x041C(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.InternetInfo.InternetLink.UdpLink");
		return ptr;
	}

};


// Class Object.Commandlet.DecompressCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_DecompressCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.DecompressCommandlet");
		return ptr;
	}

};


// Class Object.Commandlet.CompressCommandlet
// 0x0000 (0x01DC - 0x01DC)
class UClass_Object_Commandlet_CompressCommandlet : public UClass_Object_Commandlet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Commandlet.CompressCommandlet");
		return ptr;
	}

};


// Class Object.Subsystem.NetDriver.TcpNetDriver
// 0x0024 (0x00C0 - 0x009C)
class UClass_Object_Subsystem_NetDriver_TcpNetDriver : public UClass_Object_Subsystem_NetDriver
{
public:
	unsigned long                                      AllowPlayerPortUnreach : 1;                               // 0x009C(0x0004) (Config)
	unsigned long                                      UnknownData00 : 31;                                       // 0x009C(0x0001)
	unsigned long                                      LogPortUnreach : 1;                                       // 0x00A0(0x0004) (Config)
	int                                                MaxConnPerIPPerMinute;                                    // 0x00A4(0x0004) (Config)
	unsigned long                                      LogMaxConnPerIPPerMin : 1;                                // 0x00A8(0x0004) (Config)
	unsigned char                                      UnknownData01[0x14];                                      // 0x00AC(0x0014) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Subsystem.NetDriver.TcpNetDriver");
		return ptr;
	}

};


// Class Object.Player.NetConnection.TcpipConnection
// 0x0024 (0x3F9C - 0x3F78)
class UClass_Object_Player_NetConnection_TcpipConnection : public UClass_Object_Player_NetConnection
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x3F78(0x0024) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Player.NetConnection.TcpipConnection");
		return ptr;
	}

};


// Class Object.Actor.Info.InternetInfo.InternetLink.TcpLink
// 0x001C (0x0438 - 0x041C)
class AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink : public AClass_Object_Actor_Info_InternetInfo_InternetLink
{
public:
	TEnumAsByte<ELinkState>                            LinkState;                                                // 0x041C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	struct FStruct_IpAddr                              RemoteAddr;                                               // 0x0420(0x0008)
	class UClass_Object_Field_Struct_State_Class*      AcceptClass;                                              // 0x0428(0x0004)
	TArray<unsigned char>                              SendFIFO;                                                 // 0x042C(0x000C) (Const, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.InternetInfo.InternetLink.TcpLink");
		return ptr;
	}


	void Function_ReceivedBinary(int Count, unsigned char B);
	void Function_ReceivedLine(const struct FString& Line);
	void Function_ReceivedText(const struct FString& Text);
	void Function_Closed();
	void Function_Opened();
	void Function_Accepted();
	int Function_ReadBinary(int Count, unsigned char* B);
	int Function_ReadText(struct FString* str);
	int Function_SendBinary(int Count, unsigned char B);
	int Function_SendText(const struct FString& str);
	bool Function_IsConnected();
	bool Function_Close();
	bool Function_Open(const struct FStruct_IpAddr& Addr);
	bool Function_Listen();
	int Function_BindPort(int Port, bool bUseNextAvailable);
};


// Class Object.Actor.Info.GameStats.MasterServerGameStats
// 0x0004 (0x0410 - 0x040C)
class AClass_Object_Actor_Info_GameStats_MasterServerGameStats : public AClass_Object_Actor_Info_GameStats
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x040C(0x0004) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.GameStats.MasterServerGameStats");
		return ptr;
	}

};


// Class Object.Actor.Info.MasterServerLink
// 0x0060 (0x0460 - 0x0400)
class AClass_Object_Actor_Info_MasterServerLink : public AClass_Object_Actor_Info
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0400(0x0060) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MasterServerLink");
		return ptr;
	}

};


// Class Object.Actor.Info.MasterServerLink.MasterServerUplink
// 0x0074 (0x04D4 - 0x0460)
class AClass_Object_Actor_Info_MasterServerLink_MasterServerUplink : public AClass_Object_Actor_Info_MasterServerLink
{
public:
	unsigned char                                      UnknownData00[0x74];                                      // 0x0460(0x0074) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MasterServerLink.MasterServerUplink");
		return ptr;
	}

};


// Class Object.Actor.Info.MasterServerLink.ServerQueryClient
// 0x0014 (0x0474 - 0x0460)
class AClass_Object_Actor_Info_MasterServerLink_ServerQueryClient : public AClass_Object_Actor_Info_MasterServerLink
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0460(0x0014) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MasterServerLink.ServerQueryClient");
		return ptr;
	}

};


// Class Object.Actor.Info.MasterServerLink.ServerQueryClient.MasterServerClient
// 0x002C (0x04A0 - 0x0474)
class AClass_Object_Actor_Info_MasterServerLink_ServerQueryClient_MasterServerClient : public AClass_Object_Actor_Info_MasterServerLink_ServerQueryClient
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0474(0x002C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.MasterServerLink.ServerQueryClient.MasterServerClient");
		return ptr;
	}

};


// Class Object.Download.HTTPDownload
// 0x00A0 (0x04F4 - 0x0454)
class UClass_Object_Download_HTTPDownload : public UClass_Object_Download
{
public:
	struct FString                                     ProxyServerHost;                                          // 0x0454(0x000C) (Config, NeedCtorLink)
	int                                                ProxyServerPort;                                          // 0x0460(0x0004) (Config)
	unsigned char                                      UnknownData00[0x90];                                      // 0x0464(0x0090) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Download.HTTPDownload");
		return ptr;
	}

};


// Class Object.WebResponse
// 0x0028 (0x0050 - 0x0028)
class UClass_Object_WebResponse : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.WebResponse");
		return ptr;
	}

};


// Class Object.WebRequest
// 0x004C (0x0074 - 0x0028)
class UClass_Object_WebRequest : public UClass_Object
{
public:
	unsigned char                                      UnknownData00[0x4C];                                      // 0x0028(0x004C) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.WebRequest");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMultiplayerMenu
// 0x0034 (0x0304 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesMultiplayerMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MainMenuButton;                                           // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* QuitButton;                                               // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUITabControl* MyTabControl;                                             // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPProfilePanel* MPProfilePanel;                                           // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPQuickPlayPanel* MPQuickPlayPanel;                                         // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPHostPanel* MPHostPanel;                                              // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPGameGuidePanel* MPGameGuidePanel;                                         // 0x02E8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPCommunityPanel* MPCommunityPanel;                                         // 0x02EC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPRecordingsPanel* MPRecordingsPanel;                                        // 0x02F0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* GamespyJoin;                                              // 0x02F4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     GamespyURL;                                               // 0x02F8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMultiplayerMenu");
		return ptr;
	}


	void Function_JoinGamespy();
	void Function_OnGamespyJoin(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SetGamespyMode(bool bOn, const struct FString& URL);
	void Function_InternalOnPopupReturned(const struct FStruct_GUIListElem& retval, const struct FString& Passback);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUITabControl
// 0x0028 (0x02B0 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUITabControl : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	TArray<struct FStruct_sTabButtonPair>              MyTabs;                                                   // 0x0288(0x000C) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_sTabButtonPair                      InitialTab;                                               // 0x0294(0x0008) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_sTabButtonPair                      ActiveTab;                                                // 0x029C(0x0008) (Edit, EditConst, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bAlwaysUseInitialTabWhenShown : 1;                        // 0x02A4(0x0004) (Edit, Config, NoClear, EditInline)
	struct FScriptDelegate                             __OnSwitch__Delegate;                                     // 0x02A8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUITabControl");
		return ptr;
	}


	void Function_AlignTabs(TEnumAsByte<EeProgressDirection> AlignDirection, bool ButtonsAlignedTopLeft, int MaxButtonsPerRow, float RowSize, float RowSpacing, float ButtonSpacing);
	bool Function_IsEmpty();
	int Function_Num();
	void Function_Clear();
	int Function_GetTabIndexByHeaderCaption(const struct FString& HeaderCaption);
	int Function_GetTabIndexByHeader(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header);
	int Function_GetTabIndexByPanel(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Panel);
	struct FStruct_sTabButtonPair Function_GetTabByHeader(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header);
	struct FStruct_sTabButtonPair Function_GetTabByPanel(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Panel);
	struct FStruct_sTabButtonPair Function_GetTab(int Index);
	void Function_RemoveTab_Str(const struct FString& HeaderCaption);
	void Function_RemoveTab_GUIButton(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header);
	void Function_RemoveTab_GUIPanel(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Panel);
	void Function_RemoveTab_Int(int Index);
	void Function_RemoveTab();
	void Function_InternalAddTab(int Index, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Panel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab_IntGUIPanelGUIButtonGUIPanelGUIButton(int Index, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Panel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab_GUIPanelGUIButtonGUIPanelGUIButton(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Panel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab_IntStrStrStrStrGUIPanelGUIButton(int Index, const struct FString& PanelClassName, const struct FString& PanelName, const struct FString& ButtonClassName, const struct FString& ButtonName, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab_StrStrStrStrGUIPanelGUIButton(const struct FString& PanelClassName, const struct FString& PanelName, const struct FString& ButtonClassName, const struct FString& ButtonName, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab_IntsTabButtonPairGUIPanelGUIButton(int Index, const struct FStruct_sTabButtonPair& NewPair, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab_sTabButtonPairGUIPanelGUIButton(const struct FStruct_sTabButtonPair& NewPair, class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel** NewPanel, class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton** NewButton);
	void Function_AddTab();
	struct FStruct_sTabButtonPair Function_CreateNewPair(const struct FString& PanelClassName, const struct FString& PanelName, const struct FString& ButtonClassName, const struct FString& ButtonName);
	void Function_InternalOpenTabPair(const struct FStruct_sTabButtonPair& theTab);
	void Function_OpenTab_GUIButton(class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* Header);
	void Function_OpenTab_GUIPanel(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* tab);
	void Function_OpenTab_Int(int Index);
	void Function_OpenTab();
	void Function_TabHeaderClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SetTabEnabled(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* tab, bool bEnabled);
	void Function_DeActivate_DeActivate_DeActivate();
	void Function_Activate_Activate_Activate();
	void Function_Hide_Hide_Hide();
	void Function_Show_Show_Show();
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	bool Function_OnSwitch(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Target);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel
// 0x0000 (0x028C - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPGameGuidePanel
// 0x0100 (0x038C - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPGameGuidePanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* JoinServerButton;                                         // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* RefreshButton;                                            // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* FiltersButton;                                            // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MarkFavoriteButton;                                       // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* BuddyButton;                                              // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* PropertiesButton;                                         // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* PatchButton;                                              // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* FilterBox;                                                // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ServerCountLabel;                                         // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* PlayerCountLabel;                                         // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* ServerListBox;                                            // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* BuddiesOnlyButton;                                        // 0x02B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* LANOnlyButton;                                            // 0x02BC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* FavsOnlyButton;                                           // 0x02C0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     ServerPasswordText;                                       // 0x02C4(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyTimeoutText;                                       // 0x02D0(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	int                                                GamespyTimeout;                                           // 0x02DC(0x0004) (Edit, Config, EditInline)
	struct FString                                     GamespyLoginSuccessText;                                  // 0x02E0(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthPasswordText;                                      // 0x02EC(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadParamText;                                             // 0x02F8(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     NoResponse;                                               // 0x0304(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadServerIdText;                                          // 0x0310(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	float                                              PatchCheckPeriod;                                         // 0x031C(0x0004) (Edit, Config, NoClear, EditInline)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* LockedIcon;                                               // 0x0320(0x0004) (Edit, Config, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     LockedIconImage;                                          // 0x0324(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* StatsIcon;                                                // 0x0328(0x0004) (Edit, Config, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     StatsIconImage;                                           // 0x032C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* FavIcon;                                                  // 0x0330(0x0004) (Edit, Config, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     FavIconImage;                                             // 0x0334(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	unsigned long                                      bShowUnsupportedVersions : 1;                             // 0x0338(0x0004) (Edit, Config, EditInline)
	class UClass_Object_GameSpyManager_TribesGameSpyManager* gm;                                                       // 0x033C(0x0004)
	class UClass_Object_ServerFilterInfo*              filterInfo;                                               // 0x0340(0x0004)
	struct FString                                     joinURL;                                                  // 0x0344(0x000C) (NeedCtorLink)
	struct FString                                     joinPassword;                                             // 0x0350(0x000C) (NeedCtorLink)
	float                                              LastPatchCheckTime;                                       // 0x035C(0x0004)
	int                                                numServers;                                               // 0x0360(0x0004)
	int                                                NumPlayers;                                               // 0x0364(0x0004)
	struct FString                                     noneString;                                               // 0x0368(0x000C) (Localized, NeedCtorLink)
	struct FString                                     playerCountText;                                          // 0x0374(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      bRefreshingFilters : 1;                                   // 0x0380(0x0004)
	unsigned long                                      bShowingMPHelp : 1;                                       // 0x0380(0x0004)
	int                                                maxQueryLength;                                           // 0x0384(0x0004)
	unsigned long                                      bSuppressMPHelp : 1;                                      // 0x0388(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPGameGuidePanel");
		return ptr;
	}


	void Function_OnQueryPatchResult(bool bNeeded, bool bMandatory, const struct FString& versionName, const struct FString& URL);
	void Function_OnPatch(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnFilterChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_RefreshFilters();
	void Function_ReceiveServerData(const struct FStruct_GameSpyServerData& gssd);
	void Function_UpdateCountLabels();
	void Function_ConnectToSelectedServer();
	void Function_toggleFavorite();
	struct FString Function_getSelectedPort();
	struct FString Function_getSelectedIPAddress();
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnServerPropertiesConnect(const struct FString& ipAddress, const struct FString& Port);
	void Function_OnServerListUpdateComplete(bool bLAN);
	struct FString Function_BuildBuddyFilter();
	void Function_StartListUpdate();
	void Function_FinaliseAttemptURL(const struct FString& URL);
	void Function_UpdateProfile(const struct FString& teamTag, const struct FString& teamName);
	void Function_OnGamespyTeamLoginResult(bool succeeded, const struct FString& ResponseData);
	void Function_DoGamespyTeamLogin();
	void Function_ShowGamespyTeamLogin();
	void Function_OnGamespyTeamLoginScreenCancel();
	void Function_OnGamespyTeamLoginScreenLogin();
	void Function_ShowGamespyLogin();
	void Function_OnGamespyLoginResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_OnGamespyLoginScreenCancel();
	void Function_OnGamespyLoginScreenLogin();
	void Function_Timer_Timer();
	void Function_AttemptURL(const struct FString& URL);
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InternalOnDeActivate();
	void Function_InternalOnActivate();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPProfilePanel
// 0x00C8 (0x0354 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPProfilePanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* ProfileBox;                                               // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* NewButton;                                                // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DeleteButton;                                             // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* PlayerNameDataLabel;                                      // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* GenderCombo;                                              // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* VoiceChatCombo;                                           // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoadoutButton;                                            // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* UseGamespy;                                               // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* SaveGamespyPassword;                                      // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* SaveGamespyPasswordTitle;                                 // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CreateGamespy;                                            // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* UseTeam;                                                  // 0x02B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* SaveTeamPassword;                                         // 0x02BC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* SaveTeamPasswordTitle;                                    // 0x02C0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CreateTeam;                                               // 0x02C4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoginGamespy;                                             // 0x02C8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoginTeam;                                                // 0x02CC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* GamespyEmailLabel;                                        // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* GamespyEmailTitleLabel;                                   // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TeamLoginLabel;                                           // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TeamLoginTitleLabel;                                      // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TeamNameLabel;                                            // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TeamNameTitleLabel;                                       // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_ProfileManager*                playerProfileManager;                                     // 0x02E8(0x0004)
	class UClass_Object_PlayerProfile*                 ActiveProfile;                                            // 0x02EC(0x0004)
	struct FString                                     femaleText;                                               // 0x02F0(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     maleText;                                                 // 0x02FC(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     StoredText;                                               // 0x0308(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     NotStoredText;                                            // 0x0314(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     NotSetText;                                               // 0x0320(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     needGameSpyLoginString;                                   // 0x032C(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     createProfileText;                                        // 0x0338(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	TArray<struct FString>                             VoiceChatPreviewType;                                     // 0x0344(0x000C) (NeedCtorLink)
	int                                                MaxQCPool;                                                // 0x0350(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPProfilePanel");
		return ptr;
	}


	void Function_OnClickUseTeam(class UClass_Object_GUI_GUIComponent* Who);
	void Function_OnLoginTeam(class UClass_Object_GUI_GUIComponent* Who);
	void Function_OnCreateTeam(class UClass_Object_GUI_GUIComponent* Who);
	void Function_OnClickUseGamespy(class UClass_Object_GUI_GUIComponent* Who);
	void Function_OnLoginGamespy(class UClass_Object_GUI_GUIComponent* Who);
	void Function_OnCreateGamespy(class UClass_Object_GUI_GUIComponent* Who);
	void Function_CreateProfile(const struct FString& PlayerName);
	void Function_OnVoiceChatComboChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnGenderChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnActiveProfileEditLoadouts(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnActiveProfileChange(class UClass_Object_GUI_GUIComponent* Box);
	void Function_OnActiveProfileDelete(class UClass_Object_GUI_GUIComponent* Component);
	void Function_Refresh();
	void Function_LoadSettings();
	void Function_SaveSettings();
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPQuickPlayPanel
// 0x0000 (0x028C - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPQuickPlayPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPQuickPlayPanel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPHostPanel
// 0x007C (0x0308 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPHostPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* StartServerButton;                                        // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* AdvancedButton;                                           // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* DedicatedButton;                                          // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* MapListBox;                                               // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* GameTypeListBox;                                          // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* GameTypeDescriptionLabel;                                 // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* MapDescriptionLabel;                                      // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIProgressBar* progressBar;                                              // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     screenshotImage;                                          // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* ServerNameBox;                                            // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* PasswordBox;                                              // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     BadPassword;                                              // 0x02B8(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	unsigned long                                      bInitialized : 1;                                         // 0x02C4(0x0004)
	TArray<class UClass_Object_LevelSummary*>          summaryList;                                              // 0x02C8(0x000C) (NeedCtorLink)
	TArray<struct FString>                             fileList;                                                 // 0x02D4(0x000C) (NeedCtorLink)
	TArray<struct FString>                             gameTypeDescriptions;                                     // 0x02E0(0x000C) (NeedCtorLink)
	struct FString                                     currentGameType;                                          // 0x02EC(0x000C) (NeedCtorLink)
	struct FString                                     CurrentMap;                                               // 0x02F8(0x000C) (NeedCtorLink)
	class UClass_Object_Canvas*                        progressCanvas;                                           // 0x0304(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPHostPanel");
		return ptr;
	}


	void Function_Timer_Timer();
	void Function_InternalOnActivate();
	void Function_GameTypeListOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_MapListOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnAdvancedClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnStartServerClick(class UClass_Object_GUI_GUIComponent* Sender);
	struct FString Function_getSelectedGameInfoName();
	void Function_LoadGameTypes();
	void Function_LoadMapList();
	void Function_LoadLevelSummaries(TArray<struct FString>* levelFileList, TArray<class UClass_Object_LevelSummary*>* levelSummaryList);
	bool Function_ProgressOnDraw(class UClass_Object_Canvas* C);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPCommunityPanel
// 0x0054 (0x02E0 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPCommunityPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* connectButton;                                            // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* disconnectButton;                                         // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* leaveButton;                                              // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUITabControl* c_Channel;                                                // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCSystem* tp_System;                                                // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel* DefaultChannel;                                           // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     SystemPageClass;                                          // 0x02A4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PublicChannelClass;                                       // 0x02B0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PrivateChannelClass;                                      // 0x02BC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SystemLabel;                                              // 0x02C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ChooseNewNickText;                                        // 0x02D4(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPCommunityPanel");
		return ptr;
	}


	void Function_OnLeaveClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnDisconnectClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnConnectClicked(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_IsJoinAvailable(struct FString* ButtonCaption);
	bool Function_IsSpectateAvailable(struct FString* ButtonCaption);
	bool Function_IsRefreshAvailable(struct FString* ButtonCaption);
	void Function_RefreshClicked();
	void Function_SpectateClicked();
	void Function_JoinClicked();
	bool Function_RemoveChannel(const struct FString& channelName);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel* Function_AddChannel(const struct FString& channelName, bool bPrivate);
	void Function_SetCloseCaption(const struct FString& newName);
	void Function_UpdateCurrentChannel(int Index);
	void Function_SetCurrentChannel(int Index);
	bool Function_TabChange(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* Target);
	void Function_ShowPanel(bool bShow);
	void Function_Closed(class UClass_Object_GUI_GUIComponent* Sender, bool bCancelled);
	void Function_IRCDisconnected();
	void Function_Realign();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPRecordingsPanel
// 0x0014 (0x02A0 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPRecordingsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* PlayButton;                                               // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CancelButton;                                             // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DeleteButton;                                             // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* RenameButton;                                             // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* DemoListBox;                                              // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPPanel.TribesMPRecordingsPanel");
		return ptr;
	}


	struct FString Function_getSelectedDemoName();
	void Function_OnRenameClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnDeleteClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnCancelClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnPlayClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_RefreshList();
	void Function_InternalOnActivate();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.ServerFilterInfo
// 0x000C (0x0034 - 0x0028)
class UClass_Object_ServerFilterInfo : public UClass_Object
{
public:
	TArray<struct FStruct_serverFilter>                filterList;                                               // 0x0028(0x000C) (Config, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.ServerFilterInfo");
		return ptr;
	}


	struct FString Function_getQueryForName(const struct FString& filterName);
	void Function_addFilter(const struct FString& filterName, const struct FString& Query);
	void Function_removeFilter(const struct FString& filterName);
	void Function_copy(class UClass_Object_ServerFilterInfo* Source);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMPServerPropertiesMenu
// 0x006C (0x033C - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesMPServerPropertiesMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ServerNameLabel;                                          // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ServerIPAddressLabel;                                     // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ServerEmailLabel;                                         // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* MapNameLabel;                                             // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* GameTypeLabel;                                            // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TimeLeftLabel;                                            // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* teamOneNameLabel;                                         // 0x02E8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* teamTwoNameLabel;                                         // 0x02EC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* teamOneScoreLabel;                                        // 0x02F0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* teamTwoScoreLabel;                                        // 0x02F4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* VersionLabel;                                             // 0x02F8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* PingLabel;                                                // 0x02FC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CancelButton;                                             // 0x0300(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* connectButton;                                            // 0x0304(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* RefreshButton;                                            // 0x0308(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* TeamOneBox;                                               // 0x030C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* TeamTwoBox;                                               // 0x0310(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GameSpyManager_TribesGameSpyManager* gm;                                                       // 0x0314(0x0004)
	int                                                currServerId;                                             // 0x0318(0x0004)
	struct FString                                     currIpAddress;                                            // 0x031C(0x000C) (NeedCtorLink)
	struct FString                                     currPort;                                                 // 0x0328(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnConnect__Delegate;                                    // 0x0334(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMPServerPropertiesMenu");
		return ptr;
	}


	void Function_OnRefreshClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnConnect(const struct FString& ipAddress, const struct FString& Port);
	void Function_OnConnectClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnCancelClicked(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_RefreshData();
	void Function_AddNewRowToList(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* List, const struct FString& Name, const struct FString& Ping, const struct FString& Score);
	void Function_ReceiveServerData(const struct FStruct_GameSpyServerData& gssd);
	void Function_InternalOnActivate();
	void Function_HandleParameters_HandleParameters(const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesGamespyTeamLogin
// 0x0108 (0x03D8 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesGamespyTeamLogin : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ActionButton;                                             // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CancelButton;                                             // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* EditTeamTag;                                              // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* EditPassword;                                             // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     GamespyConnectingText;                                    // 0x02E0(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyCreateSuccessText;                                 // 0x02EC(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyLoginSuccessText;                                  // 0x02F8(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyTeamTagTakenText;                                  // 0x0304(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyTimeoutText;                                       // 0x0310(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     NoGamespyText;                                            // 0x031C(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadTeamNameText;                                          // 0x0328(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadTeamTagLength;                                         // 0x0334(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadTeamTagText;                                           // 0x0340(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadPasswordText;                                          // 0x034C(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthTeamTagText;                                       // 0x0358(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthPasswordText;                                      // 0x0364(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadParamText;                                             // 0x0370(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     PasswordMismatchText;                                     // 0x037C(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     NoResponse;                                               // 0x0388(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthText;                                              // 0x0394(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     RegistrationError;                                        // 0x03A0(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     AcceptedGamespyChars;                                     // 0x03AC(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink, EditInline)
	int                                                InitTimeout;                                              // 0x03B8(0x0004) (Edit, Config, GlobalConfig, EditInline)
	int                                                ActionTimeout;                                            // 0x03BC(0x0004) (Edit, Config, GlobalConfig, EditInline)
	class UClass_Object_GameSpyManager_TribesGameSpyManager* gm;                                                       // 0x03C0(0x0004)
	int                                                TeamID;                                                   // 0x03C4(0x0004)
	struct FScriptDelegate                             __OnSuccess__Delegate;                                    // 0x03C8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCancel__Delegate;                                     // 0x03D0(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesGamespyTeamLogin");
		return ptr;
	}


	void Function_OnPerformGamespyAction();
	void Function_FillProfile(const struct FString& teamTag, const struct FString& teamName);
	void Function_OnGamespyTeamLoginResult(bool succeeded, const struct FString& ResponseData);
	void Function_GamespyLogin();
	void Function_StartLogin();
	void Function_OnGamespyFindTeamResult(int foundTeamId);
	void Function_OnGamespyTimeout();
	void Function_Timer_Timer();
	void Function_OnCancelButton(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnAction(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_Validate();
	bool Function_VerifyGamespyInput(const struct FString& S);
	void Function_InternalPopupOk(int Selection, const struct FString& Passback);
	void Function_SetupGamespyVars();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnCancel();
	void Function_OnSuccess();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesGamespyLogin
// 0x00F0 (0x03C0 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesGamespyLogin : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ActionButton;                                             // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CancelButton;                                             // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* EditNick;                                                 // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* EditEmail;                                                // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* EditPassword;                                             // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     GamespyConnectingText;                                    // 0x02E4(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyCreateSuccessText;                                 // 0x02F0(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyLoginSuccessText;                                  // 0x02FC(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyEmailTakenText;                                    // 0x0308(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GamespyTimeoutText;                                       // 0x0314(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     NoGamespyText;                                            // 0x0320(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadNickText;                                              // 0x032C(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadEmailText;                                             // 0x0338(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadPasswordText;                                          // 0x0344(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthNickText;                                          // 0x0350(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthEmailText;                                         // 0x035C(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     BadAuthPasswordText;                                      // 0x0368(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     PasswordMismatchText;                                     // 0x0374(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     GeneralFailureText;                                       // 0x0380(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     InvalidCharacterText;                                     // 0x038C(0x000C) (Edit, Config, Localized, GlobalConfig, NeedCtorLink, EditInline)
	struct FString                                     AcceptedGamespyChars;                                     // 0x0398(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink, EditInline)
	int                                                InitTimeout;                                              // 0x03A4(0x0004) (Edit, Config, GlobalConfig, EditInline)
	int                                                ActionTimeout;                                            // 0x03A8(0x0004) (Edit, Config, GlobalConfig, EditInline)
	class UClass_Object_GameSpyManager_TribesGameSpyManager* gm;                                                       // 0x03AC(0x0004)
	struct FScriptDelegate                             __OnSuccess__Delegate;                                    // 0x03B0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCancel__Delegate;                                     // 0x03B8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesGamespyLogin");
		return ptr;
	}


	bool Function_InternalOnKeyEvent_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_OnPerformGamespyAction();
	void Function_FillProfile(int Id);
	void Function_OnGamespyLoginResult(TEnumAsByte<EGameSpyResult> Result, int profileId);
	void Function_GamespyLogin();
	void Function_OnGamespyTimeout();
	void Function_Timer_Timer();
	void Function_OnCancelButton(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnAction(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_Validate();
	bool Function_VerifyGamespyInput(const struct FString& S);
	void Function_InternalPopupOk(int Selection, const struct FString& Passback);
	void Function_SetupGamespyVars();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnCancel();
	void Function_OnSuccess();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage
// 0x009C (0x0328 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* ed_TextEntry;                                             // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_GUISplitter* sp_Main;                                                  // 0x0290(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	float                                              MainSplitterPosition;                                     // 0x0294(0x0004) (Edit, Config)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIScrollTextBox* lb_TextDisplay;                                           // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     HasLeftText;                                              // 0x029C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HasJoinedText;                                            // 0x02A8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     WasKickedByText;                                          // 0x02B4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NowKnownAsText;                                           // 0x02C0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     QuitText;                                                 // 0x02CC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     SetsModeText;                                             // 0x02D8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NewTopicText;                                             // 0x02E4(0x000C) (Localized, NeedCtorLink)
	int                                                MaxChatScrollback;                                        // 0x02F0(0x0004) (Config)
	int                                                InputHistorySize;                                         // 0x02F4(0x0004) (Config)
	unsigned long                                      bIRCTextToSpeechEnabled : 1;                              // 0x02F8(0x0004) (Config, GlobalConfig)
	TArray<struct FString>                             InputHistory;                                             // 0x02FC(0x000C) (Transient, NeedCtorLink)
	int                                                InputHistoryPos;                                          // 0x0308(0x0004) (Transient)
	unsigned long                                      bDoneInputScroll : 1;                                     // 0x030C(0x0004) (Transient)
	struct FStruct_Color                               IRCTextColor;                                             // 0x0310(0x0004) (Config)
	struct FStruct_Color                               IRCNickColor;                                             // 0x0314(0x0004) (Config)
	struct FStruct_Color                               IRCActionColor;                                           // 0x0318(0x0004) (Config)
	struct FStruct_Color                               IRCInfoColor;                                             // 0x031C(0x0004) (Config)
	struct FStruct_Color                               IRCLinkColor;                                             // 0x0320(0x0004) (Config)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MyButton;                                                 // 0x0324(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage");
		return ptr;
	}


	struct FStruct_Color Function_DecodeColor(int ColorCode);
	void Function_InterpretColorCodes(struct FString* Text);
	void Function_InternalOnCreateComponent(class UClass_Object_GUI_GUIComponent* NewComp, class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_IRCTextDblClick(class UClass_Object_GUI_GUIComponent* Sender);
	struct FString Function_ColorizeLinks(const struct FString& InString);
	bool Function_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_Free_Free_Free(bool bForce);
	void Function_processInput(const struct FString& Text);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage.TribesIRCChannel
// 0x00A8 (0x03D0 - 0x0328)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCSystem* tp_System;                                                // 0x0328(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     channelName;                                              // 0x032C(0x000C) (NeedCtorLink)
	struct FString                                     ChannelTopic;                                             // 0x0338(0x000C) (NeedCtorLink)
	struct FString                                     DefaultListClass;                                         // 0x0344(0x000C) (NeedCtorLink)
	struct FString                                     OpUserText;                                               // 0x0350(0x000C) (Localized, NeedCtorLink)
	struct FString                                     HelpUserText;                                             // 0x035C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     VoiceUserText;                                            // 0x0368(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ReasonText;                                               // 0x0374(0x000C) (Localized, NeedCtorLink)
	struct FString                                     MessageUserText;                                          // 0x0380(0x000C) (Localized, NeedCtorLink)
	struct FString                                     WhoisUserText;                                            // 0x038C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DeopUserText;                                             // 0x0398(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DehelpUserText;                                           // 0x03A4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DevoiceUserText;                                          // 0x03B0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     KickUserText;                                             // 0x03BC(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      IsPrivate : 1;                                            // 0x03C8(0x0004)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* lb_User;                                                  // 0x03CC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage.TribesIRCChannel");
		return ptr;
	}


	void Function_KickReasonClose(bool bCancelled);
	int Function_GetAbsoluteIndex(class UClass_Object_GUI_GUIComponent_GUIContextMenu* menu, int Index);
	void Function_ContextMenuClick(class UClass_Object_GUI_GUIComponent_GUIContextMenu* Sender, int ClickIndex);
	void Function_AddControlContextOptions(class UClass_Object_GUI_GUIComponent_GUIContextMenu* menu, const struct FString& Nick);
	void Function_AddUserContextOptions(class UClass_Object_GUI_GUIComponent_GUIContextMenu* menu, const struct FString& Nick);
	bool Function_ContextMenuOpen(class UClass_Object_GUI_GUIComponent_GUIContextMenu* Sender);
	void Function_UserSetFlag(int i, const struct FString& Flag, bool bSet);
	void Function_ChangeNick(const struct FString& OldNick, const struct FString& NewNick);
	bool Function_UserIsVoice(const struct FString& NickName);
	bool Function_UserIsHelper(const struct FString& NickName);
	bool Function_UserIsOp(const struct FString& NickName);
	bool Function_FindNick(const struct FString& Nick);
	struct FString Function_GetFlags(const struct FString& NickName);
	int Function_GetUser(const struct FString& Nick);
	void Function_MyOnDrawItem(class UClass_Object_Canvas* Canvas, int i, float X, float Y, float W, float H, bool bSelected);
	bool Function_MyCompareItem(const struct FStruct_GUIListElem& ElemA, const struct FStruct_GUIListElem& ElemB);
	void Function_MyListDblClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnReleaseSplitter(class UClass_Object_GUI_GUIComponent* Sender, float NewPos);
	void Function_InternalOnLoadIni(class UClass_Object_GUI_GUIComponent* Sender, const struct FString& S);
	void Function_InternalOnCreateComponent_InternalOnCreateComponent(class UClass_Object_GUI_GUIComponent* NewComp, class UClass_Object_GUI_GUIComponent* Sender);
	void Function_ShowPanel(bool bShow);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_ChangeMode(const struct FString& Nick, const struct FString& Mode);
	void Function_UserQuit(const struct FString& Nick, const struct FString& Reason);
	void Function_KickUser(const struct FString& KickedNick, const struct FString& Kicker, const struct FString& Reason);
	void Function_PartedChannel(const struct FString& Nick);
	void Function_JoinedChannel(const struct FString& Nick);
	void Function_UserNotice(const struct FString& Nick, const struct FString& Text);
	void Function_ChannelAction(const struct FString& Nick, const struct FString& Text);
	void Function_ChannelText(const struct FString& Nick, const struct FString& Text);
	void Function_ChangeTopic(const struct FString& NewTopic);
	void Function_ChangedNick(const struct FString& OldNick, const struct FString& NewNick);
	void Function_ChangeVoice(const struct FString& Nick, bool NewVoice);
	void Function_ChangeHalfOp(const struct FString& Nick, bool NewHalfOp);
	void Function_ChangeOp(const struct FString& Nick, bool NewOp);
	void Function_RemoveUser(const struct FString& Nick);
	void Function_AddUser(const struct FString& Nick);
	void Function_UserInChannel(const struct FString& Nick);
	void Function_Unban(const struct FString& Nick);
	void Function_Ban(const struct FString& Nick, const struct FString& Reason);
	void Function_Kick(const struct FString& Nick, const struct FString& Reason);
	void Function_DeHelp(const struct FString& Nick);
	void Function_Help(const struct FString& Nick);
	void Function_DeVoice(const struct FString& Nick);
	void Function_Voice(const struct FString& Nick);
	void Function_Deop(const struct FString& Nick);
	void Function_Op(const struct FString& Nick);
	void Function_Whois(const struct FString& Nick);
	void Function_processInput_processInput(const struct FString& Text);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage.TribesIRCSystem
// 0x0160 (0x0488 - 0x0328)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCSystem : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage
{
public:
	TArray<class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel*> channels;                                                 // 0x0328(0x000C) (NeedCtorLink)
	struct FString                                     LinkClassName;                                            // 0x0334(0x000C) (NeedCtorLink)
	class AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink_BufferedTCPLink_TribesIRCLink* link;                                                     // 0x0340(0x0004)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPPanel_TribesMPCommunityPanel* tp_Main;                                                  // 0x0344(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPanel* p_IRC;                                                    // 0x0348(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     TestIRCString;                                            // 0x034C(0x000C) (NeedCtorLink)
	struct FString                                     LastServer;                                               // 0x0358(0x000C) (NeedCtorLink)
	int                                                CurChannel;                                               // 0x0364(0x0004)
	int                                                PrevChannel;                                              // 0x0368(0x0004)
	unsigned long                                      bConnected : 1;                                           // 0x036C(0x0004)
	unsigned long                                      bAway : 1;                                                // 0x036C(0x0004)
	unsigned long                                      bSysInitialized : 1;                                      // 0x036C(0x0004)
	struct FString                                     NewNickMenu;                                              // 0x0370(0x000C) (Config, NeedCtorLink)
	struct FString                                     OldPlayerName;                                            // 0x037C(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     NickName;                                                 // 0x0388(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     FullName;                                                 // 0x0394(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     UserIdent;                                                // 0x03A0(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     DefaultChannel;                                           // 0x03AC(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ChanKeyMenu;                                              // 0x03B8(0x000C) (Config, NeedCtorLink)
	struct FString                                     NotInAChannelText;                                        // 0x03C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     KickedFromText;                                           // 0x03D0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ByText;                                                   // 0x03DC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     IsAwayText;                                               // 0x03E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ChooseNewNickText;                                        // 0x03F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NickInUseText;                                            // 0x0400(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NickInvalidText;                                          // 0x040C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     LeavePrivateText;                                         // 0x0418(0x000C) (Localized, NeedCtorLink)
	struct FString                                     CloseWindowCaption;                                       // 0x0424(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DisconnectCaption;                                        // 0x0430(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ChangeNickCaption;                                        // 0x043C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InvalidModeText;                                          // 0x0448(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InvalidKickText;                                          // 0x0454(0x000C) (Localized, NeedCtorLink)
	struct FString                                     NewNickString;                                            // 0x0460(0x000C) (Localized, NeedCtorLink)
	TEnumAsByte<EAwayMode>                             AwayMode;                                                 // 0x046C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnConnect__Delegate;                                    // 0x0470(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDisconnect__Delegate;                                 // 0x0478(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __NewChannelSelected__Delegate;                           // 0x0480(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage.TribesIRCSystem");
		return ptr;
	}


	void Function_InternalOnCreateComponent_InternalOnCreateComponent(class UClass_Object_GUI_GUIComponent* NewComp, class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_ValidChannelIndex(int Index);
	void Function_RemoveChannel(const struct FString& Channel);
	bool Function_RemoveChannelAt(int Index);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel* Function_AddChannel(const struct FString& channelName, bool bPrivate, bool bActivate);
	class AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink_BufferedTCPLink_TribesIRCLink* Function_CreateNewLink();
	void Function_IRCClosed();
	void Function_PrintAwayMessage(const struct FString& Nick, const struct FString& Message);
	void Function_UpdateAway();
	void Function_UpdateCurrentChannel(int NewCurrent);
	void Function_SetCurrentChannel(int idx);
	void Function_SetCurrentChannelPage(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel* ChannelPage);
	int Function_FindPrivateChannelIndex(const struct FString& channelName);
	int Function_FindPublicChannelIndex(const struct FString& channelName, bool bIncludePrivate);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel_TribesIRCPrivate* Function_FindPrivateWindow(const struct FString& Nick);
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel* Function_FindChannelWindow(const struct FString& Channel, bool bIncludePrivate);
	struct FString Function_GetDefaultChannel();
	struct FString Function_GetCurrentChannelName();
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage* Function_GetCurrentChannel();
	void Function_CTCP(const struct FString& Channel, const struct FString& Nick, const struct FString& Message);
	void Function_ChangeTopic(const struct FString& Channel, const struct FString& NewTopic);
	void Function_ChangeVoice(const struct FString& Channel, const struct FString& Nick, bool bVoice);
	void Function_ChangeHalfOp(const struct FString& Channel, const struct FString& Nick, bool bHalfOp);
	void Function_ChangeOp(const struct FString& Channel, const struct FString& Nick, bool bOp);
	void Function_ChangeMode(const struct FString& Channel, const struct FString& Nick, const struct FString& Mode);
	void Function_UserNotice(const struct FString& Nick, const struct FString& Text);
	void Function_UserQuit(const struct FString& Nick, const struct FString& Reason);
	void Function_ChangedNick(const struct FString& OldNick, const struct FString& NewNick);
	void Function_NotifyChannelKey(const struct FString& chan);
	void Function_NotifyInvalidNick();
	void Function_NotifyNickInUse();
	void Function_UserInChannel(const struct FString& Channel, const struct FString& Nick);
	void Function_KickUser(const struct FString& Channel, const struct FString& KickedNick, const struct FString& Kicker, const struct FString& Reason);
	void Function_PartedChannel(const struct FString& Channel, const struct FString& Nick);
	void Function_JoinedChannel(const struct FString& Channel, const struct FString& Nick);
	void Function_PrivateAction(const struct FString& Nick, const struct FString& Text);
	void Function_ChannelAction(const struct FString& Channel, const struct FString& Nick, const struct FString& Text);
	void Function_PrivateText(const struct FString& Nick, const struct FString& Text);
	void Function_ChannelText(const struct FString& Channel, const struct FString& Nick, const struct FString& Text);
	void Function_SystemText(const struct FString& Text);
	void Function_SetMode(const struct FString& Modes, const struct FString& Target, bool On, const struct FString& Extra);
	void Function_Unban(const struct FString& Nick, const struct FString& channelName);
	void Function_Ban(const struct FString& Nick, const struct FString& channelName, const struct FString& Reason);
	void Function_Kick(const struct FString& Nick, const struct FString& channelName, const struct FString& Reason);
	void Function_DeHelp(const struct FString& Nick, const struct FString& channelName);
	void Function_Help(const struct FString& Nick, const struct FString& channelName);
	void Function_DeVoice(const struct FString& Nick, const struct FString& channelName);
	void Function_Voice(const struct FString& Nick, const struct FString& channelName);
	void Function_Deop(const struct FString& Nick, const struct FString& channelName);
	void Function_Op(const struct FString& Nick, const struct FString& channelName);
	void Function_Whois(const struct FString& Nick);
	void Function_ChangeCurrentNick();
	void Function_PartChannel(const struct FString& channelName);
	void Function_PartCurrentChannel();
	void Function_JoinChannel(const struct FString& channelName);
	void Function_processInput_processInput(const struct FString& Text);
	void Function_CloseLink(class AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink_BufferedTCPLink_TribesIRCLink* OldLink, bool bSwitchingServers, const struct FString& Reason);
	void Function_Disconnect();
	bool Function_Connect(const struct FString& NewServer);
	void Function_ChanKeyPageClosed(bool bCancelled);
	void Function_NewNickPageClosed(bool bCancelled);
	void Function_ChangeAwayStatus(bool newStatus);
	void Function_ChangeConnectStatus(bool newStatus);
	void Function_NotifyQuitUnreal();
	bool Function_IsAway();
	bool Function_IsConnected();
	bool Function_IsMe(const struct FString& Test);
	void Function_UpdateIdent();
	bool Function_InMenus();
	bool Function_InGame();
	bool Function_SetNickAvailable(struct FString* ButtonCaption);
	bool Function_DisconnectAvailable(struct FString* ButtonCaption);
	bool Function_LeaveAvailable(struct FString* ButtonCaption);
	void Function_Timer_Timer();
	void Function_ShowPanel(bool bShow);
	bool Function_CanShowPanel();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_NewChannelSelected(int CurrentChannel);
	void Function_OnDisconnect();
	void Function_OnConnect();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesInventorySelectionMenu
// 0x026C (0x053C - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesInventorySelectionMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	TArray<class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryArmorButton*> ArmorButtons;                                             // 0x02D0(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* ArmorButtonsContainer;                                    // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_ButtonParams                        ArmorParams;                                              // 0x02E0(0x0018) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryPackButton*> PackButtons;                                              // 0x02F8(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* PackButtonsContainer;                                     // 0x0304(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_ButtonParams                        PackParams;                                               // 0x0308(0x0018) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryWeaponButton*> WeaponButtons;                                            // 0x0320(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* WeaponButtonsContainer;                                   // 0x032C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_ButtonParams                        WeaponParams;                                             // 0x0330(0x0018) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryLoadoutButton*> LoadoutButtons;                                           // 0x0348(0x000C) (Edit, NeedCtorLink, NoClear)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* LoadoutButtonsContainer;                                  // 0x0354(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_ButtonParams                        LoadoutParams;                                            // 0x0358(0x0018) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* WeaponSlotsContainer;                                     // 0x0370(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_ButtonParams                        WeaponSlotParams;                                         // 0x0374(0x0018) (Edit, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* titleLabel;                                               // 0x038C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoadoutGroupUpButton;                                     // 0x0390(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoadoutGroupDownButton;                                   // 0x0394(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ResetLoadoutButton;                                       // 0x0398(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DoneButton;                                               // 0x039C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* NextSkinButton;                                           // 0x03A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* PreviousSkinButton;                                       // 0x03A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* WatchedItemNameLabel;                                     // 0x03A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* WatchedItemInfoLabel;                                     // 0x03AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WatchedItemIcon;                                          // 0x03B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WatchedLoadoutArmorIcon;                                  // 0x03B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WatchedLoadoutPackIcon;                                   // 0x03B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WatchedLoadoutWeaponIcon1;                                // 0x03BC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WatchedLoadoutWeaponIcon2;                                // 0x03C0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WatchedLoadoutWeaponIcon3;                                // 0x03C4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* CharacterContainer;                                       // 0x03C8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel* ExternalViewportPanel;                                    // 0x03CC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     ArmorText;                                                // 0x03D0(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     PackText;                                                 // 0x03DC(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     WeaponText;                                               // 0x03E8(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     AcceptText;                                               // 0x03F4(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     currentLoadoutText;                                       // 0x0400(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	struct FString                                     TitleText;                                                // 0x040C(0x000C) (Edit, Localized, NeedCtorLink, NoClear)
	unsigned long                                      bAutoAdvanceSlotSelection : 1;                            // 0x0418(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bSwapDuplicateWeaponSlots : 1;                            // 0x0418(0x0004) (Edit, Config, NoClear)
	int                                                MaxLoadoutSlots;                                          // 0x041C(0x0004) (Edit, Config, NoClear)
	int                                                NumVisibleLoadoutSlots;                                   // 0x0420(0x0004) (Edit, Config, NoClear)
	int                                                NumWeaponSlots;                                           // 0x0424(0x0004) (Edit, Config, NoClear)
	int                                                MaxLoadoutNameLength;                                     // 0x0428(0x0004) (Edit, Config, NoClear)
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* inventory;                                                // 0x042C(0x0004)
	class AClass_Object_Actor_Controller_PlayerController_PlayerCharacterController* CharacterController;                                      // 0x0430(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* PlayerCharacter;                                          // 0x0434(0x0004)
	class UClass_Object_PlayerProfile*                 ActiveProfile;                                            // 0x0438(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           playerTeam;                                               // 0x043C(0x0004)
	struct FStruct_InventoryStationLoadout             selectedLoadout;                                          // 0x0440(0x007C) (NeedCtorLink)
	struct FStruct_InventoryStationWeapon              NoWeapon;                                                 // 0x04BC(0x0008)
	TArray<class UClass_Object_Field_Struct_State_Class*> availableSkins;                                           // 0x04C4(0x000C) (NeedCtorLink)
	int                                                currentSkinIndex;                                         // 0x04D0(0x0004)
	int                                                lastAppliedWeaponSlotIndex;                               // 0x04D4(0x0004)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* loadoutEditBox;                                           // 0x04D8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryLoadoutButton* CurrentLoadoutTab;                                        // 0x04DC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UClass_Object_GUI_GUIComponent_GUIMultiComponent_TribesInventoryWeaponSlot*> weaponSlots;                                              // 0x04E0(0x000C) (NeedCtorLink)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_TribesInventoryWeaponSlot* SelectedWeaponSlot;                                       // 0x04EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryWeaponButton* SelectedWeaponButton;                                     // 0x04F0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryLoadoutButton* SelectedLoadoutButton;                                    // 0x04F4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryLoadoutButton* editedLoadoutButton;                                      // 0x04F8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIActorContainerBase_GUIActorContainer_TribesInventoryCharacterView* CharacterView;                                            // 0x04FC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_HUDElement_HUDContainer_HUDValueBar_HUDHealthBar* HealthBar;                                                // 0x0500(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDValueBar_HUDEnergyBar* EnergyBar;                                                // 0x0504(0x0004)
	class UClass_Object_HUDElement_HUDContainer*       healthEnergyContainer;                                    // 0x0508(0x0004)
	class UClass_Object_RefCount_ClientSideCharacter*  clientData;                                               // 0x050C(0x0004)
	int                                                currentLoadoutArrayStart;                                 // 0x0510(0x0004)
	class UClass_Object_Field_Struct_State_Class*      lastAccessClass;                                          // 0x0514(0x0004)
	unsigned long                                      bUseProfiles : 1;                                         // 0x0518(0x0004)
	struct FStruct_Rotator                             PreviousCameraRotation;                                   // 0x051C(0x000C)
	unsigned long                                      bOldBehindView : 1;                                       // 0x0528(0x0004)
	class UClass_Object_Material*                      ExternalViewportSurround;                                 // 0x052C(0x0004)
	unsigned long                                      bNotInGame : 1;                                           // 0x0530(0x0004)
	unsigned long                                      bIsFemale : 1;                                            // 0x0530(0x0004)
	struct FScriptDelegate                             __OnCapturedMouseMove__Delegate;                          // 0x0534(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesInventorySelectionMenu");
		return ptr;
	}


	void Function_ConvertToCustomLoadout(const struct FStruct_InventoryStationLoadout& InLoadout, class UClass_Object_Loadout_CustomPlayerLoadout** OutLoadout);
	void Function_ConvertToInventoryLoadout(class UClass_Object_Loadout_CustomPlayerLoadout* InLoadout, struct FStruct_InventoryStationLoadout* OutLoadout);
	void Function_SetActiveProfileLoadout(const struct FStruct_InventoryStationLoadout& Loadout);
	void Function_UpdateAvailableSkins();
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryPackButton* Function_FindPackButton(class UClass_Object_Field_Struct_State_Class* packClass, int* Index);
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryArmorButton* Function_FindArmorButton(class UClass_Object_Field_Struct_State_Class* combatRoleClass, int* Index);
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryWeaponButton* Function_FindWeaponButton(class UClass_Object_Field_Struct_State_Class* weaponClass, int* Index);
	int Function_GetSlotIndexHoldingWeapon(class UClass_Object_Field_Struct_State_Class* weaponClass);
	void Function_AssignWeaponToSlot(int slotIndex, const struct FStruct_InventoryStationWeapon& Weapon);
	void Function_SelectPack(const struct FStruct_InventoryStationPack& Pack);
	void Function_SelectArmor(const struct FStruct_InventoryStationCombatRole& Role);
	void Function_SetCurrentLoadout(const struct FStruct_InventoryStationLoadout& Loadout);
	void Function_OnLoadoutGroupDown(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutGroupUp(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutReset(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutEditStart(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutEditFocusGained(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutEditFocusLost(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutEditCompleted(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutWatched(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadoutClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnArmorWatched(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnArmorClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnPackWatched(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnPackClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnWeaponWatched(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnWeaponClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SetWeaponSlotsEnabled();
	void Function_OnAssignWeapon(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_TribesInventoryWeaponSlot* AssignedSlot);
	void Function_UpdateSkin();
	void Function_OnSkinPrevious(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnSkinNext(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnHide_OnHide();
	void Function_OnExitInventory(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SaveCurrentLoadout();
	bool Function_InternalOnKeyEvent_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_InternalOnActivate();
	bool Function_OnCapturedMouseMove_OnCapturedMouseMove(float deltaX, float deltaY);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnPageWatched(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnClientDraw_OnClientDraw(class UClass_Object_Canvas* C);
	void Function_UpdateLoadoutTabs();
	void Function_UpdateWeaponSlots(int NewNumSlots);
	void Function_ApplyButtonParams(TArray<class UClass_Object_GUI_GUIComponent*> Buttons, const struct FStruct_ButtonParams& params, int startIndex);
	void Function_InternalOnMousePressed(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_ConfigureInventoryStation();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_EnableExit();
	void Function_FlashWeapon(class UClass_Object_Field_Struct_State_Class* ItemClass, float duration);
	void Function_FlashArmor(class UClass_Object_Field_Struct_State_Class* ItemClass, float duration);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPanel
// 0x0054 (0x02E0 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCSystem* tp_System;                                                // 0x028C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMenuOption_moComboBox* co_Server;                                                // 0x0290(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMenuOption_moComboBox* co_Channel;                                               // 0x0294(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* b_Connect;                                                // 0x0298(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* b_RemServer;                                              // 0x029C(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* b_JoinChannel;                                            // 0x02A0(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* b_RemChannel;                                             // 0x02A4(0x0004) (ExportObject, DuplicateTransient, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* SizingButton;                                             // 0x02A8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FString>                             ServerHistory;                                            // 0x02AC(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	TArray<struct FString>                             ChannelHistory;                                           // 0x02B8(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ConnectText;                                              // 0x02C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     DisconnectText;                                           // 0x02D0(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      bDirty : 1;                                               // 0x02DC(0x0004) (Edit, Transient, NoExport)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPanel");
		return ptr;
	}


	void Function_Free_Free_Free(bool bForce);
	bool Function_IsCurrentServer(const struct FString& ServerAddress);
	int Function_FindChannelHistoryIndex(const struct FString& channelName);
	int Function_FindServerHistoryIndex(const struct FString& ServerName);
	bool Function_RemoveServerFromHistory(const struct FString& ServerName);
	bool Function_AddServerToHistory(const struct FString& NewServerName, int Position);
	bool Function_RemoveChannelFromHistory(const struct FString& channelName);
	bool Function_AddChannelToHistory(const struct FString& NewChannelName, int Position);
	void Function_UpdateConnectionStatus(bool NowConnected);
	bool Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_PositionButtons(class UClass_Object_Canvas* C);
	void Function_GetSizingButton();
	void Function_LoadChannelHistory();
	void Function_LoadServerHistory();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.Actor.Info.InternetInfo.InternetLink.TcpLink.BufferedTCPLink
// 0x0064 (0x049C - 0x0438)
class AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink_BufferedTCPLink : public AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink
{
public:
	struct FString                                     InputBuffer;                                              // 0x0438(0x000C) (NeedCtorLink)
	struct FString                                     OutputBuffer;                                             // 0x0444(0x000C) (NeedCtorLink)
	struct FString                                     CRLF;                                                     // 0x0450(0x000C) (NeedCtorLink)
	struct FString                                     CR;                                                       // 0x045C(0x000C) (NeedCtorLink)
	struct FString                                     LF;                                                       // 0x0468(0x000C) (NeedCtorLink)
	unsigned long                                      bWaiting : 1;                                             // 0x0474(0x0004)
	float                                              WaitTimeoutTime;                                          // 0x0478(0x0004)
	struct FString                                     WaitingFor;                                               // 0x047C(0x000C) (NeedCtorLink)
	int                                                WaitForCountChars;                                        // 0x0488(0x0004)
	struct FString                                     WaitResult;                                               // 0x048C(0x000C) (NeedCtorLink)
	int                                                WaitMatchData;                                            // 0x0498(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.InternetInfo.InternetLink.TcpLink.BufferedTCPLink");
		return ptr;
	}


	void Function_DoBufferQueueIO();
	void Function_ReceivedText_ReceivedText(const struct FString& Text);
	void Function_SendBufferedData(const struct FString& Text);
	bool Function_ReadBufferedLine(struct FString* Text);
	int Function_PeekChar();
	int Function_ReadChar();
	struct FString Function_ParseDelimited(const struct FString& Text, const struct FString& Delimiter, int Count, bool bToEndOfLine);
	void Function_GotMatchTimeout(int MatchData);
	void Function_GotMatch(int MatchData);
	void Function_WaitForCount(int Count, float TimeOut, int MatchData);
	void Function_WaitFor(const struct FString& What, float TimeOut, int MatchData);
	void Function_ResetBuffer();
};


// Class Object.Actor.Info.InternetInfo.InternetLink.TcpLink.BufferedTCPLink.TribesIRCLink
// 0x00C8 (0x0564 - 0x049C)
class AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink_BufferedTCPLink_TribesIRCLink : public AClass_Object_Actor_Info_InternetInfo_InternetLink_TcpLink_BufferedTCPLink
{
public:
	struct FStruct_IpAddr                              ServerIpAddr;                                             // 0x049C(0x0008)
	struct FString                                     ServerAddress;                                            // 0x04A4(0x000C) (NeedCtorLink)
	int                                                ServerPort;                                               // 0x04B0(0x0004)
	struct FString                                     NickName;                                                 // 0x04B4(0x000C) (NeedCtorLink)
	struct FString                                     UserIdent;                                                // 0x04C0(0x000C) (NeedCtorLink)
	struct FString                                     FullName;                                                 // 0x04CC(0x000C) (NeedCtorLink)
	struct FString                                     DefaultChannel;                                           // 0x04D8(0x000C) (NeedCtorLink)
	struct FString                                     InvalidAddressText;                                       // 0x04E4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ErrorBindingText;                                         // 0x04F0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ResolveFailedText;                                        // 0x04FC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConnectedText;                                            // 0x0508(0x000C) (Localized, NeedCtorLink)
	struct FString                                     ConnectingToText;                                         // 0x0514(0x000C) (Localized, NeedCtorLink)
	struct FString                                     TimeOutError;                                             // 0x0520(0x000C) (Localized, NeedCtorLink)
	struct FString                                     InviteString;                                             // 0x052C(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCSystem* SystemPage;                                               // 0x0538(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FString                                     DisconnectReason;                                         // 0x053C(0x000C) (NeedCtorLink)
	struct FString                                     VersionString;                                            // 0x0548(0x000C) (NeedCtorLink)
	TArray<struct FStruct_CommandAlias>                Shortcuts;                                                // 0x0554(0x000C) (Config, NeedCtorLink)
	float                                              SinceLastLevCheck;                                        // 0x0560(0x0004) (Transient)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.InternetInfo.InternetLink.TcpLink.BufferedTCPLink.TribesIRCLink");
		return ptr;
	}


	void Function_DestroyLink();
	void Function_SetAway(const struct FString& AwayText);
	void Function_SetNick(const struct FString& NewNick);
	void Function_PartChannel(const struct FString& Channel);
	void Function_JoinChannel(const struct FString& Channel);
	void Function_processInput(const struct FString& Line);
	void Function_SendChannelAction(const struct FString& Channel, const struct FString& Text);
	void Function_SendChannelText(const struct FString& Channel, const struct FString& Text);
	void Function_SendBufferedData_SendBufferedData(const struct FString& Text);
	void Function_ReplaceCommandAlias(struct FString* Text);
	void Function_SendCommandText(const struct FString& Cmd);
	void Function_Tick_Tick(float DeltaTime);
	void Function_Opened_Opened();
	void Function_Timer_Timer();
	void Function_ResolveFailed_ResolveFailed();
	void Function_Closed_Closed();
	void Function_Resolved_Resolved(const struct FStruct_IpAddr& Addr);
	struct FString Function_Chop(const struct FString& Text);
	struct FString Function_RemoveNickPrefix(const struct FString& Nick);
	struct FString Function_ChopLeft(const struct FString& Text);
	void Function_Connect(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCSystem* InSystemPage, const struct FString& InServer, const struct FString& InNickName, const struct FString& InUserIdent, const struct FString& InFullName, const struct FString& InDefaultChannel);
	void Function_CloseMe();
	void Function_PostBeginPlay_PostBeginPlay();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage.TribesIRCChannel.TribesIRCPrivate
// 0x0000 (0x03D0 - 0x03D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel_TribesIRCPrivate : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesIRCPage_TribesIRCChannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesIRCPage.TribesIRCChannel.TribesIRCPrivate");
		return ptr;
	}


	bool Function_ContextMenuOpen_ContextMenuOpen(class UClass_Object_GUI_GUIComponent_GUIContextMenu* Sender);
	void Function_ChangeVoice_ChangeVoice(const struct FString& Nick, bool NewVoice);
	void Function_ChangeHalfOp_ChangeHalfOp(const struct FString& Nick, bool NewHalfOp);
	void Function_ChangeOp_ChangeOp(const struct FString& Nick, bool NewOp);
	void Function_ChangeNick_ChangeNick(const struct FString& OldNick, const struct FString& NewNick);
	void Function_RemoveUser_RemoveUser(const struct FString& Nick);
	void Function_AddUser_AddUser(const struct FString& Nick);
	bool Function_FindNick_FindNick(const struct FString& Nick);
	int Function_GetUser_GetUser(const struct FString& Nick);
	void Function_PrintAwayMessage(const struct FString& Nick, const struct FString& Message);
	void Function_PrivateAction(const struct FString& Nick, const struct FString& Text);
	void Function_PrivateText(const struct FString& Nick, const struct FString& Text);
	void Function_processInput_processInput_processInput(const struct FString& Text);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesIRCChanKey
// 0x0030 (0x02E8 - 0x02B8)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesIRCChanKey : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage
{
public:
	struct FString                                     EditCaption;                                              // 0x02B8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     EditHint;                                                 // 0x02C4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     msgCaption;                                               // 0x02D0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     kchan;                                                    // 0x02DC(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesIRCChanKey");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesIRCNewNick
// 0x0000 (0x02B8 - 0x02B8)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesIRCNewNick : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesIRCNewNick");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIContextMenu
// 0x0044 (0x02A0 - 0x025C)
class UClass_Object_GUI_GUIComponent_GUIContextMenu : public UClass_Object_GUI_GUIComponent
{
public:
	TArray<struct FString>                             ContextItems;                                             // 0x025C(0x000C) (Localized, NeedCtorLink)
	int                                                ItemIndex;                                                // 0x0268(0x0004)
	struct FString                                     SelectionStyleName;                                       // 0x026C(0x000C) (NeedCtorLink)
	class UClass_Object_GUI_GUIStyles*                 SelectionStyle;                                           // 0x0278(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                ItemHeight;                                               // 0x027C(0x0004)
	struct FScriptDelegate                             __OnOpen__Delegate;                                       // 0x0280(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnClose__Delegate;                                      // 0x0288(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSelect__Delegate;                                     // 0x0290(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnContextHitTest__Delegate;                             // 0x0298(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIContextMenu");
		return ptr;
	}


	bool Function_ReplaceItem(int Index, const struct FString& NewItem);
	bool Function_RemoveItemByIndex(int Index);
	bool Function_RemoveItemByName(const struct FString& ItemName);
	int Function_InsertItem(const struct FString& NewItem, int Index);
	int Function_AddItem(const struct FString& NewItem);
	bool Function_OnContextHitTest(float MouseX, float MouseY);
	void Function_OnSelect(class UClass_Object_GUI_GUIComponent_GUIContextMenu* Sender, int ClickIndex);
	bool Function_OnClose(class UClass_Object_GUI_GUIComponent_GUIContextMenu* Sender);
	bool Function_OnOpen(class UClass_Object_GUI_GUIComponent_GUIContextMenu* Sender);
};


// Class Object.GUI.GUIComponent.GUIActorContainerBase.GUIActorContainer
// 0x0040 (0x02C4 - 0x0284)
class UClass_Object_GUI_GUIComponent_GUIActorContainerBase_GUIActorContainer : public UClass_Object_GUI_GUIComponent_GUIActorContainerBase
{
public:
	class UClass_Object_Field_Struct_State_Class*      actorClass;                                               // 0x0284(0x0004) (Edit, Config, NoClear)
	float                                              ScaleFactor;                                              // 0x0288(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Primitive_StaticMesh*          StaticMesh;                                               // 0x028C(0x0004) (Edit, Config, NoClear)
	class UClass_Object_Primitive_Mesh*                Mesh;                                                     // 0x0290(0x0004) (Edit, Config, NoClear)
	float                                              DrawScale;                                                // 0x0294(0x0004) (Edit, Config, NoClear)
	struct FStruct_Vector                              DrawScale3D;                                              // 0x0298(0x000C) (Edit, Config, NoClear)
	TArray<class UClass_Object_Material*>              Skins;                                                    // 0x02A4(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	unsigned long                                      bUnlit : 1;                                               // 0x02B0(0x0004) (Edit, Config, NoClear)
	struct FStruct_Rotator                             RotationRate;                                             // 0x02B4(0x000C) (Edit, Config, NoClear)
	unsigned long                                      bHighDetail : 1;                                          // 0x02C0(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bSuperHighDetail : 1;                                     // 0x02C0(0x0004) (Edit, Config, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIActorContainerBase.GUIActorContainer");
		return ptr;
	}


	void Function_PositionActor_PositionActor();
	void Function_OnModify_OnModify();
	void Function_SpawnActor_SpawnActor();
};


// Class Object.GUI.GUIComponent.GUIActorContainerBase.GUIActorContainer.TribesInventoryCharacterView
// 0x001C (0x02E0 - 0x02C4)
class UClass_Object_GUI_GUIComponent_GUIActorContainerBase_GUIActorContainer_TribesInventoryCharacterView : public UClass_Object_GUI_GUIComponent_GUIActorContainerBase_GUIActorContainer
{
public:
	float                                              ZoomLevel;                                                // 0x02C4(0x0004)
	struct FStruct_Rotator                             CameraRotation;                                           // 0x02C8(0x000C)
	class AClass_Object_Actor_TribesInventoryCharacter* inventoryCharacter;                                       // 0x02D4(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           playerTeam;                                               // 0x02D8(0x0004)
	unsigned long                                      bPlayerIsFemale : 1;                                      // 0x02DC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIActorContainerBase.GUIActorContainer.TribesInventoryCharacterView");
		return ptr;
	}


	void Function_SetHeldWeapon(class UClass_Object_Field_Struct_State_Class* weaponClass);
	void Function_UpdateLoadout(const struct FStruct_InventoryStationLoadout& newLoadout);
	void Function_PositionActor_PositionActor_PositionActor();
	bool Function_InternalOnDraw_InternalOnDraw(class UClass_Object_Canvas* Canvas);
	void Function_Hide_Hide_Hide();
	void Function_SpawnActor_SpawnActor_SpawnActor();
	void Function_InitCharacterProperties(class AClass_Object_Actor_Info_TeamInfo* Team, bool bIsFemale);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton
// 0x0014 (0x0298 - 0x0284)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton
{
public:
	unsigned long                                      bWasChecked : 1;                                          // 0x0284(0x0004)
	float                                              FlashDuration;                                            // 0x0288(0x0004)
	float                                              flashFrequency;                                           // 0x028C(0x0004)
	float                                              FlashTimeStarted;                                         // 0x0290(0x0004)
	unsigned long                                      bIsFlashing : 1;                                          // 0x0294(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton");
		return ptr;
	}


	void Function_Timer_Timer();
	void Function_DoFlash(float CurrentTime, float duration);
	bool Function_IsChecked();
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryPackButton
// 0x0008 (0x02A0 - 0x0298)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryPackButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton
{
public:
	struct FStruct_InventoryStationPack                packData;                                                 // 0x0298(0x0008)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryPackButton");
		return ptr;
	}


	void Function_SetPackData(const struct FStruct_InventoryStationPack& data);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryArmorButton
// 0x0008 (0x02A0 - 0x0298)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryArmorButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton
{
public:
	struct FStruct_InventoryStationCombatRole          RoleData;                                                 // 0x0298(0x0008)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryArmorButton");
		return ptr;
	}


	void Function_SetArmorData(class AClass_Object_Actor_Info_TeamInfo* Team, const struct FStruct_InventoryStationCombatRole& data);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryWeaponButton
// 0x000C (0x02A4 - 0x0298)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryWeaponButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton
{
public:
	struct FStruct_InventoryStationWeapon              weaponData;                                               // 0x0298(0x0008)
	unsigned long                                      bIsFallback : 1;                                          // 0x02A0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryWeaponButton");
		return ptr;
	}


	void Function_SetWeaponData(const struct FStruct_InventoryStationWeapon& data);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.TribesInventoryWeaponSlot
// 0x0028 (0x02B0 - 0x0288)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_TribesInventoryWeaponSlot : public UClass_Object_GUI_GUIComponent_GUIMultiComponent
{
public:
	struct FString                                     SlotText;                                                 // 0x0288(0x000C) (Localized, NeedCtorLink)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* AssignButton;                                             // 0x0294(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     WeaponImage;                                              // 0x0298(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* SlotLabel;                                                // 0x029C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UClass_Object_Field_Struct_State_Class*      weaponClass;                                              // 0x02A0(0x0004)
	int                                                slotIndex;                                                // 0x02A4(0x0004)
	struct FScriptDelegate                             __OnAssign__Delegate;                                     // 0x02A8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.TribesInventoryWeaponSlot");
		return ptr;
	}


	void Function_SetEnabled_SetEnabled(bool Value);
	void Function_SetWeaponClass(class UClass_Object_Field_Struct_State_Class* NewClass);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnAssign(class UClass_Object_GUI_GUIComponent_GUIMultiComponent_TribesInventoryWeaponSlot* AssignedSlot);
	void Function_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryLoadoutButton
// 0x0094 (0x032C - 0x0298)
class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton_TribesInventoryLoadoutButton : public UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIToggleButton_TribesInventoryButton
{
public:
	struct FStruct_InventoryStationLoadout             loadoutData;                                              // 0x0298(0x007C) (NeedCtorLink)
	class UClass_Object_Loadout_CustomPlayerLoadout*   customLoadoutData;                                        // 0x0314(0x0004)
	int                                                slotIndex;                                                // 0x0318(0x0004)
	unsigned long                                      bEmptySlot : 1;                                           // 0x031C(0x0004)
	struct FString                                     emptyText;                                                // 0x0320(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUITextComponent.GUIButton.GUIToggleButton.TribesInventoryButton.TribesInventoryLoadoutButton");
		return ptr;
	}


	void Function_SetEmpty(bool Empty);
	void Function_Refresh();
};


// Class Object.Message.MessageInventoryUIWeaponSelected
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageInventoryUIWeaponSelected : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageInventoryUIWeaponSelected");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_Construct_Void_Construct_Void();
};


// Class Object.Message.MessageInventoryUIExited
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageInventoryUIExited : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageInventoryUIExited");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_Construct_Void_Construct_Void();
};


// Class Object.Message.MessageInventoryUIDisplayed
// 0x0000 (0x002C - 0x002C)
class UClass_Object_Message_MessageInventoryUIDisplayed : public UClass_Object_Message
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageInventoryUIDisplayed");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_Construct_Void_Construct_Void();
};


// Class Object.HUDElement.HUDContainer.HUDValueBar.HUDHealthBar
// 0x00C8 (0x03C0 - 0x02F8)
class UClass_Object_HUDElement_HUDContainer_HUDValueBar_HUDHealthBar : public UClass_Object_HUDElement_HUDContainer_HUDValueBar
{
public:
	struct FStruct_HUDMaterial                         healthInjectionMaterial;                                  // 0x02F8(0x0040) (Edit, Config)
	struct FStruct_HUDMaterial                         healthInjectionRemainingMaterial;                         // 0x0338(0x0040) (Edit, Config)
	struct FStruct_HUDMaterial                         lowHealthAlertMaterial;                                   // 0x0378(0x0040) (Edit, Config)
	float                                              lowHealthThreshold;                                       // 0x03B8(0x0004) (Edit, Config)
	float                                              healthInjectionAmount;                                    // 0x03BC(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDValueBar.HUDHealthBar");
		return ptr;
	}


	void Function_RenderElement_RenderElement(class UClass_Object_Canvas* C);
	void Function_UpdateData_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
};


// Class Object.HUDElement.HUDContainer.HUDValueBar.HUDEnergyBar
// 0x0054 (0x034C - 0x02F8)
class UClass_Object_HUDElement_HUDContainer_HUDValueBar_HUDEnergyBar : public UClass_Object_HUDElement_HUDContainer_HUDValueBar
{
public:
	struct FStruct_HUDMaterial                         depletionMaterial;                                        // 0x02F8(0x0040) (Edit, Config)
	float                                              depletionFadeTime;                                        // 0x0338(0x0004) (Edit, Config)
	float                                              energyWeaponDepleted;                                     // 0x033C(0x0004)
	float                                              depletionAlpha;                                           // 0x0340(0x0004)
	float                                              depletionStartTime;                                       // 0x0344(0x0004)
	float                                              depletionStartRatio;                                      // 0x0348(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDValueBar.HUDEnergyBar");
		return ptr;
	}


	void Function_RenderElement_RenderElement(class UClass_Object_Canvas* C);
	void Function_UpdateData_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
};


// Class Object.Actor.TribesInventoryCharacter
// 0x009C (0x049C - 0x0400)
class AClass_Object_Actor_TribesInventoryCharacter : public AClass_Object_Actor
{
public:
	struct FStruct_InventoryStationLoadout             currentLoadout;                                           // 0x0400(0x007C) (NeedCtorLink)
	struct FName                                       jetpackBone;                                              // 0x047C(0x0004)
	class AClass_Object_Actor_jetpack*                 jetpack;                                                  // 0x0480(0x0004)
	struct FName                                       packLeftBone;                                             // 0x0484(0x0004)
	struct FName                                       packRightBone;                                            // 0x0488(0x0004)
	class AClass_Object_Actor_StaticMeshAttachment*    leftPack;                                                 // 0x048C(0x0004)
	class AClass_Object_Actor_StaticMeshAttachment*    rightPack;                                                // 0x0490(0x0004)
	struct FName                                       weaponBone;                                               // 0x0494(0x0004)
	class AClass_Object_Actor_StaticMeshAttachment*    Weapon;                                                   // 0x0498(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.TribesInventoryCharacter");
		return ptr;
	}


	void Function_SetHeldWeapon(class UClass_Object_Field_Struct_State_Class* weaponClass);
	void Function_UpdateLoadout(const struct FStruct_InventoryStationLoadout& newLoadout, class AClass_Object_Actor_Info_TeamInfo* Team, bool bIsFemale);
	void Function_UpdateSkin(class UClass_Object_Field_Struct_State_Class* newSkin);
	void Function_Destroyed_Destroyed();
};


// Class Object.HUDAction
// 0x0020 (0x0048 - 0x0028)
class UClass_Object_HUDAction : public UClass_Object
{
public:
	struct FScriptDelegate                             __CancelChat__Delegate;                                   // 0x0028(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SendChatMessage__Delegate;                              // 0x0030(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SendQuickChatMessage__Delegate;                         // 0x0038(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SelectLoadout__Delegate;                                // 0x0040(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDAction");
		return ptr;
	}


	void Function_SelectLoadout(int Slot);
	void Function_SendQuickChatMessage(class UClass_Object_QuickChatMenu* menuItem);
	void Function_SendChatMessage(const struct FString& msg);
	void Function_CancelChat();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIMenuOption.moComboBox
// 0x0008 (0x02D4 - 0x02CC)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMenuOption_moComboBox : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIMenuOption
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* MyComboBox;                                               // 0x02CC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bReadOnly : 1;                                            // 0x02D0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIMenuOption.moComboBox");
		return ptr;
	}


	void Function_ReadOnly(bool B);
	void Function_SetText(const struct FString& NewText);
	struct FString Function_GetExtra();
	class UClass_Object* Function_GetObject();
	struct FString Function_GetText();
	class UClass_Object* Function_GetItemObject(int Index);
	struct FString Function_GetItem(int Index);
	void Function_RemoveItem(int Item, int Count);
	void Function_AddItem(const struct FString& Item, class UClass_Object* Extra, const struct FString& str);
	struct FString Function_find(const struct FString& Test, bool bExact);
	int Function_GetIndex();
	void Function_setIndex(int i);
	int Function_ItemCount();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.QuickChatMenu
// 0x0054 (0x007C - 0x0028)
class UClass_Object_QuickChatMenu : public UClass_Object
{
public:
	struct FName                                       ChatTag;                                                  // 0x0028(0x0004) (Edit, Config)
	struct FName                                       sayType;                                                  // 0x002C(0x0004) (Edit, Config)
	struct FString                                     AnimationName;                                            // 0x0030(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bLocal : 1;                                               // 0x003C(0x0004) (Edit, Config)
	struct FString                                     messageOverride;                                          // 0x0040(0x000C) (Edit, Config, NeedCtorLink)
	TEnumAsByte<EInputKey>                             keyBinding;                                               // 0x004C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	TArray<struct FName>                               subMenuNames;                                             // 0x0050(0x000C) (Edit, Config, NeedCtorLink)
	unsigned long                                      bDummyItem : 1;                                           // 0x005C(0x0004) (Edit, Config)
	struct FString                                     messageText;                                              // 0x0060(0x000C) (NeedCtorLink)
	TArray<class UClass_Object_QuickChatMenu*>         SubMenu;                                                  // 0x006C(0x000C) (NeedCtorLink)
	class UClass_Object_QuickChatMenu*                 parentMenu;                                               // 0x0078(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.QuickChatMenu");
		return ptr;
	}


	bool Function_IsCategoryMenu();
	void Function_InitMenu();
};


// Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane
// 0x00A4 (0x0278 - 0x01D4)
class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane : public UClass_Object_HUDElement_HUDContainer_HUDList
{
public:
	struct FString                                     TemplateMessageLabelName;                                 // 0x01D4(0x000C) (Edit, Config, NeedCtorLink, NoClear)
	int                                                MaxMessages;                                              // 0x01E0(0x0004) (Edit, Config, NoClear)
	int                                                MaxDisplayableLines;                                      // 0x01E4(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bAlwaysVisible : 1;                                       // 0x01E8(0x0004) (Edit, Config, NoClear)
	unsigned long                                      bScrollable : 1;                                          // 0x01E8(0x0004) (Edit, Config, NoClear)
	float                                              MessageFadeDuration;                                      // 0x01EC(0x0004) (Edit, Config, NoClear)
	float                                              MessageLifetime;                                          // 0x01F0(0x0004) (Edit, Config, NoClear)
	float                                              SecondsPerWord;                                           // 0x01F4(0x0004) (Edit, Config, NoClear)
	float                                              MinimumLifetime;                                          // 0x01F8(0x0004) (Edit, Config, NoClear)
	struct FString                                     MessageStyles[0x9];                                       // 0x01FC(0x000C) (Edit, Config, NeedCtorLink)
	class UClass_Object_HUDElement_HUDContainer_HUDMessage_HUDTextMessage* PaddingMessage;                                           // 0x0268(0x0004)
	int                                                TotalLines;                                               // 0x026C(0x0004)
	int                                                FirstLineOffset;                                          // 0x0270(0x0004)
	class UClass_Object_ObjectPool*                    MessagePool;                                              // 0x0274(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane");
		return ptr;
	}


	void Function_DoLayout_DoLayout(class UClass_Object_Canvas* C);
	void Function_UpdateMessageVisibility();
	void Function_ScrollMessages(int ScrollDelta);
	void Function_AddMessage(class UClass_Object_HUDElement_HUDContainer_HUDMessage* NewMessage);
	void Function_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
	int Function_GetLineHeight(class UClass_Object_Canvas* Canvas);
	void Function_GetNewMessages(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_InitElement_InitElement();
};


// Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane.HUDMessageWindow
// 0x0008 (0x0280 - 0x0278)
class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane_HUDMessageWindow : public UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane
{
public:
	int                                                NumMessages;                                              // 0x0278(0x0004)
	int                                                ForcedMaxVisibleLines;                                    // 0x027C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane.HUDMessageWindow");
		return ptr;
	}


	void Function_UpdateData_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_GetNewMessages_GetNewMessages(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_InitElement_InitElement_InitElement();
};


// Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane.HUDEventMessageWindow
// 0x0048 (0x02C0 - 0x0278)
class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane_HUDEventMessageWindow : public UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane
{
public:
	struct FStruct_HUDMaterial                         IconMaterial;                                             // 0x0278(0x0040) (Edit, Config)
	int                                                IconWidth;                                                // 0x02B8(0x0004) (Edit, Config)
	int                                                IconHeight;                                               // 0x02BC(0x0004) (Edit, Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane.HUDEventMessageWindow");
		return ptr;
	}


	void Function_GetNewMessages_GetNewMessages(class UClass_Object_RefCount_ClientSideCharacter* C);
};


// Class Object.HUDElement.LabelElement.HUDChatEntry
// 0x0128 (0x031C - 0x01F4)
class UClass_Object_HUDElement_LabelElement_HUDChatEntry : public UClass_Object_HUDElement_LabelElement
{
public:
	int                                                HistoryTop;                                               // 0x01F4(0x0004)
	int                                                HistoryBot;                                               // 0x01F8(0x0004)
	int                                                HistoryCur;                                               // 0x01FC(0x0004)
	struct FString                                     TypedStr;                                                 // 0x0200(0x000C) (NeedCtorLink)
	struct FString                                     History[0x14];                                            // 0x020C(0x000C) (NeedCtorLink)
	unsigned long                                      bTyping : 1;                                              // 0x02FC(0x0004)
	unsigned long                                      bIgnoreKeys : 1;                                          // 0x02FC(0x0004)
	unsigned long                                      bTeamText : 1;                                            // 0x02FC(0x0004)
	int                                                MaxMessageTextLength;                                     // 0x0300(0x0004)
	struct FString                                     allText;                                                  // 0x0304(0x000C) (Localized, NeedCtorLink)
	struct FString                                     teamText;                                                 // 0x0310(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.LabelElement.HUDChatEntry");
		return ptr;
	}


	bool Function_KeyEvent_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta, class UClass_Object_HUDAction* Response);
	bool Function_KeyType_KeyType(TEnumAsByte<EInputKey> Key, const struct FString& Unicode, class UClass_Object_HUDAction* Response);
	void Function_SetText_SetText(const struct FString& str);
	void Function_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
};


// Class Object.HUDElement.HUDContainer.HUDQuickChatMenu
// 0x0034 (0x01F4 - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu : public UClass_Object_HUDElement_HUDContainer
{
public:
	float                                              GutterX;                                                  // 0x01C0(0x0004) (Edit, Config)
	float                                              GutterY;                                                  // 0x01C4(0x0004) (Edit, Config)
	int                                                numRows;                                                  // 0x01C8(0x0004) (Edit, Config)
	int                                                numColumns;                                               // 0x01CC(0x0004) (Edit, Config)
	float                                              animateTime;                                              // 0x01D0(0x0004) (Edit, Config)
	class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* activeChildMenu;                                          // 0x01D4(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* parentMenu;                                               // 0x01D8(0x0004)
	float                                              animatePosX;                                              // 0x01DC(0x0004)
	float                                              animatePosY;                                              // 0x01E0(0x0004)
	TEnumAsByte<EOpeningState>                         MenuState;                                                // 0x01E4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E5(0x0003) MISSED OFFSET
	float                                              animateStartTime;                                         // 0x01E8(0x0004)
	float                                              animateProgress;                                          // 0x01EC(0x0004)
	class UClass_Object_QuickChatMenu*                 menu;                                                     // 0x01F0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDQuickChatMenu");
		return ptr;
	}


	bool Function_KeyEvent_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta, class UClass_Object_HUDAction* Response);
	void Function_CancelAll();
	class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* Function_GetRootMenu();
	void Function_DoLayout_DoLayout(class UClass_Object_Canvas* C);
	void Function_CloseMenu(class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenuItem* Trigger);
	void Function_OpenMenu(class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenuItem* Trigger);
	void Function_InitMenu(class UClass_Object_QuickChatMenu* menuObject, class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* Parent, class UClass_Object_HUDElement_HUDContainer* parentContainer);
};


// Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane.HUDAnnouncerMessageWindow
// 0x0000 (0x0278 - 0x0278)
class UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane_HUDAnnouncerMessageWindow : public UClass_Object_HUDElement_HUDContainer_HUDList_HUDMessagePane
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDList.HUDMessagePane.HUDAnnouncerMessageWindow");
		return ptr;
	}


	void Function_GetNewMessages_GetNewMessages(class UClass_Object_RefCount_ClientSideCharacter* C);
	void Function_InitElement_InitElement_InitElement();
};


// Class Object.HUDElement.HUDNumericTextureLabel.HUDCountDown
// 0x0008 (0x01FC - 0x01F4)
class UClass_Object_HUDElement_HUDNumericTextureLabel_HUDCountDown : public UClass_Object_HUDElement_HUDNumericTextureLabel
{
public:
	unsigned long                                      bCountDown : 1;                                           // 0x01F4(0x0004)
	float                                              FlashStart;                                               // 0x01F8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDNumericTextureLabel.HUDCountDown");
		return ptr;
	}


	void Function_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
};


// Class Object.HUDElement.HUDContainer.HUDMessage
// 0x0018 (0x01D8 - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_HUDMessage : public UClass_Object_HUDElement_HUDContainer
{
public:
	unsigned long                                      bIrrelevant : 1;                                          // 0x01C0(0x0004)
	float                                              AppearTime;                                               // 0x01C4(0x0004)
	float                                              lifetime;                                                 // 0x01C8(0x0004)
	float                                              TimeOfDeath;                                              // 0x01CC(0x0004)
	float                                              FadeOutDuration;                                          // 0x01D0(0x0004)
	int                                                firstVisibleLine;                                         // 0x01D4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDMessage");
		return ptr;
	}


	void Function_UpdateVisibility();
	void Function_MarkAsIrrelevant();
	void Function_Reset();
	void Function_SetFirstVisibleLine(int newFirstVisibleLine);
	int Function_GetLineHeight(class UClass_Object_Canvas* Canvas);
	int Function_GetNumLines();
	struct FString Function_GetText();
};


// Class Object.HUDElement.HUDContainer.HUDMessage.HUDTextMessage
// 0x0004 (0x01DC - 0x01D8)
class UClass_Object_HUDElement_HUDContainer_HUDMessage_HUDTextMessage : public UClass_Object_HUDElement_HUDContainer_HUDMessage
{
public:
	class UClass_Object_HUDElement_LabelElement*       TextLabel;                                                // 0x01D8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDMessage.HUDTextMessage");
		return ptr;
	}


	void Function_SetFirstVisibleLine_SetFirstVisibleLine(int newFirstVisibleLine);
	int Function_GetNumLines_GetNumLines();
	void Function_SetTextColor(const struct FStruct_Color& C);
	int Function_GetLineHeight_GetLineHeight(class UClass_Object_Canvas* Canvas);
	void Function_SetText(const struct FString& LabelTemplateName, const struct FString& NewText);
	struct FString Function_GetText_GetText();
};


// Class Object.HUDElement.HUDContainer.HUDQuickChatMenuItem
// 0x0014 (0x01D4 - 0x01C0)
class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenuItem : public UClass_Object_HUDElement_HUDContainer
{
public:
	class UClass_Object_HUDElement_LabelElement*       KeyLabel;                                                 // 0x01C0(0x0004)
	class UClass_Object_HUDElement_LabelElement*       TextLabel;                                                // 0x01C4(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* SubMenu;                                                  // 0x01C8(0x0004)
	class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* parentMenu;                                               // 0x01CC(0x0004)
	class UClass_Object_QuickChatMenu*                 menu;                                                     // 0x01D0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDQuickChatMenuItem");
		return ptr;
	}


	bool Function_KeyEvent_KeyEvent(TEnumAsByte<EInputKey> Key, TEnumAsByte<EInputAction> Action, float Delta, class UClass_Object_HUDAction* Response);
	void Function_ActivateMenu();
	void Function_InitMenu(class UClass_Object_QuickChatMenu* menuObject, class UClass_Object_HUDElement_HUDContainer_HUDQuickChatMenu* Parent, class UClass_Object_HUDElement_HUDContainer* parentContainer);
	void Function_UpdateData_UpdateData(class UClass_Object_RefCount_ClientSideCharacter* C);
};


// Class Object.HUDElement.HUDContainer.HUDMessage.HUDEventMessage
// 0x000C (0x01E4 - 0x01D8)
class UClass_Object_HUDElement_HUDContainer_HUDMessage_HUDEventMessage : public UClass_Object_HUDElement_HUDContainer_HUDMessage
{
public:
	class UClass_Object_HUDElement_LabelElement*       LabelOne;                                                 // 0x01D8(0x0004)
	class UClass_Object_HUDElement_LabelElement*       LabelTwo;                                                 // 0x01DC(0x0004)
	class UClass_Object_HUDElement_hudIcon*            Icon;                                                     // 0x01E0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.HUDContainer.HUDMessage.HUDEventMessage");
		return ptr;
	}


	int Function_GetLineHeight_GetLineHeight(class UClass_Object_Canvas* Canvas);
	void Function_Initialise(const struct FString& StringOne, const struct FString& TemplateOneName, const struct FString& StringTwo, const struct FString& TemplateTwoName, const struct FStruct_HUDMaterial& IconMaterial, int IconWidth, int IconHeight);
};


// Class Object.HUDElement.hudIcon
// 0x0048 (0x01FC - 0x01B4)
class UClass_Object_HUDElement_hudIcon : public UClass_Object_HUDElement
{
public:
	struct FStruct_HUDMaterial                         IconMaterial;                                             // 0x01B4(0x0040) (Config)
	int                                                FixedIconWidth;                                           // 0x01F4(0x0004) (Config)
	int                                                FixedIconHeight;                                          // 0x01F8(0x0004) (Config)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HUDElement.hudIcon");
		return ptr;
	}


	void Function_SetFixedIconSize(int newWidth, int NewHeight);
	void Function_RenderElement_RenderElement(class UClass_Object_Canvas* C);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMPEscapeMenu
// 0x0034 (0x0304 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesMPEscapeMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ResumeGameButton;                                         // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* disconnectButton;                                         // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* OptionsButton;                                            // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* QuitButton;                                               // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUITabControl* MyTabControl;                                             // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPPlayersPanel* MPPlayersPanel;                                           // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPAdminPanel* MPAdminPanel;                                             // 0x02E8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPStatsPanel* MPStatsPanel;                                             // 0x02EC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPWeaponStatsPanel* MPWeaponStatsPanel;                                       // 0x02F0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPGameStatsPanel* MPGameStatsPanel;                                         // 0x02F4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPHintsPanel* MPHintsPanel;                                             // 0x02F8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* ServerNameLabel;                                          // 0x02FC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* EmailLabel;                                               // 0x0300(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesMPEscapeMenu");
		return ptr;
	}


	bool Function_InternalOnKeyEvent_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	int Function_getKeyCode(const struct FString& Key);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnActivate();
	void Function_HandleParameters_HandleParameters(const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel
// 0x0000 (0x028C - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPPlayersPanel
// 0x00EC (0x0378 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPPlayersPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* TeamOneListBox;                                           // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* TeamTwoListBox;                                           // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* SpectatorListBox;                                         // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ChangeTeamButton;                                         // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* SpectateButton;                                           // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* AddBuddyButton;                                           // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* VoteToKickButton;                                         // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MuteButton;                                               // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* KickButton;                                               // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* BanButton;                                                // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* GrantAdminButton;                                         // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* SpectifyButton;                                           // 0x02B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* TeamChangeButton;                                         // 0x02BC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* VoteAdminButton;                                          // 0x02C0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* JoinTeamOneButton;                                        // 0x02C4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* JoinTeamTwoButton;                                        // 0x02C8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ForceTeamOneButton;                                       // 0x02CC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ForceTeamTwoButton;                                       // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* RecordButton;                                             // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* StatusIcon;                                               // 0x02D8(0x0004) (Edit, Config, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     StatusIconImage;                                          // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	class UClass_Object_Material_RenderedMaterial_BitmapMaterial_Texture* DeathIcon;                                                // 0x02E0(0x0004) (Edit, Config, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIImage*     DeathIconImage;                                           // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, EditInline)
	struct FString                                     unSpectate;                                               // 0x02E8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     spectate;                                                 // 0x02F4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     addedBuddyString;                                         // 0x0300(0x000C) (Localized, NeedCtorLink)
	struct FString                                     failedToAddBuddyString;                                   // 0x030C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     joinTeamString;                                           // 0x0318(0x000C) (Localized, NeedCtorLink)
	struct FString                                     forceTeamString;                                          // 0x0324(0x000C) (Localized, NeedCtorLink)
	struct FString                                     startRecordingString;                                     // 0x0330(0x000C) (Localized, NeedCtorLink)
	struct FString                                     stopRecordingString;                                      // 0x033C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     muteString;                                               // 0x0348(0x000C) (Localized, NeedCtorLink)
	struct FString                                     unmuteString;                                             // 0x0354(0x000C) (Localized, NeedCtorLink)
	struct FStruct_Color                               ownNameColor;                                             // 0x0360(0x0004) (Edit, Config)
	unsigned long                                      bDebugAdmin : 1;                                          // 0x0364(0x0004)
	unsigned long                                      bRecordingDemo : 1;                                       // 0x0364(0x0004)
	unsigned long                                      bRefreshingLists : 1;                                     // 0x0364(0x0004)
	float                                              pollingDelay;                                             // 0x0368(0x0004)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* currentlySelectedList;                                    // 0x036C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class AClass_Object_Actor_Info_TeamInfo*           TeamOne;                                                  // 0x0370(0x0004)
	class AClass_Object_Actor_Info_TeamInfo*           TeamTwo;                                                  // 0x0374(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPPlayersPanel");
		return ptr;
	}


	struct FString Function_getColoredPlayerName(class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* TRI);
	void Function_OnListChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_RecordClick(class UClass_Object_GUI_GUIComponent* Sender);
	struct FString Function_constructRecordingName();
	struct FString Function_FullTimeDate();
	void Function_ForceTeamTwoClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_ForceTeamOneClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_JoinTeamTwoClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_JoinTeamOneClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SpectatorListClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_TeamTwoListClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_TeamOneListClick(class UClass_Object_GUI_GUIComponent* Sender);
	bool Function_AddBuddy(const struct FString& buddy);
	void Function_Timer_Timer();
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InternalOnActivate();
	bool Function_hasAdminPrivileges();
	void Function_UpdateButtons();
	void Function_executeCommand(const struct FString& Command, const struct FString& PlayerName);
	struct FString Function_getSelectedPlayerName(bool bDontStripCodes);
	void Function_MessageClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_TeamChangeClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SpectifyClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_GrantAdminClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_BanClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_KickClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_MuteClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_VoteAdminClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_VoteToKickClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_AddBuddyClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SpectateClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_ChangeTeamClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_UpdateTeamLists();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPAdminPanel
// 0x00B8 (0x0344 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPAdminPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* MapListBox;                                               // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIListBox* GameTypeListBox;                                          // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* SwitchButton;                                             // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* RestartButton;                                            // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* TimeLimitBox;                                             // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* TimeLimitLabel;                                           // 0x02A0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* UpdateButton;                                             // 0x02A4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoginButton;                                              // 0x02A8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* TournamentButton;                                         // 0x02AC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* VoteMapChangeButton;                                      // 0x02B0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* VoteTournamentButton;                                     // 0x02B4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* StatusLabel;                                              // 0x02B8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ForceStartButton;                                         // 0x02BC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* TeamDamageButton;                                         // 0x02C0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* VoteTeamDamageButton;                                     // 0x02C4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     loginString;                                              // 0x02C8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     logoutString;                                             // 0x02D4(0x000C) (Localized, NeedCtorLink)
	struct FString                                     tourneyString;                                            // 0x02E0(0x000C) (Localized, NeedCtorLink)
	struct FString                                     publicString;                                             // 0x02EC(0x000C) (Localized, NeedCtorLink)
	struct FString                                     enableTeamDamageString;                                   // 0x02F8(0x000C) (Localized, NeedCtorLink)
	struct FString                                     disableTeamDamageString;                                  // 0x0304(0x000C) (Localized, NeedCtorLink)
	struct FString                                     voteTeamDamageOnString;                                   // 0x0310(0x000C) (Localized, NeedCtorLink)
	struct FString                                     voteTeamDamageOffString;                                  // 0x031C(0x000C) (Localized, NeedCtorLink)
	struct FString                                     voteTourneyString;                                        // 0x0328(0x000C) (Localized, NeedCtorLink)
	struct FString                                     votePublicString;                                         // 0x0334(0x000C) (Localized, NeedCtorLink)
	unsigned long                                      bInitialized : 1;                                         // 0x0340(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPAdminPanel");
		return ptr;
	}


	void Function_OnVoteTeamDamageClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnTeamDamageClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnForceStartClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnTournamentClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnVoteTournamentClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnVoteMapChangeClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoginClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnUpdateClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_GameTypeListOnChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnRestartClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnSwitchClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_RefreshComponents();
	void Function_RefreshGameInfoData();
	void Function_RefreshMaps();
	void Function_RefreshGameTypes();
	void Function_Refresh();
	void Function_Timer_Timer();
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InternalOnActivate();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPStatsPanel
// 0x0038 (0x02C4 - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPStatsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* StatsListBox;                                             // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* OffenseLabel;                                             // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* DefenseLabel;                                             // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* StyleLabel;                                               // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* totalLabel;                                               // 0x029C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     defenseString;                                            // 0x02A0(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     offenseString;                                            // 0x02AC(0x000C) (Edit, Localized, NeedCtorLink)
	struct FString                                     StyleString;                                              // 0x02B8(0x000C) (Edit, Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPStatsPanel");
		return ptr;
	}


	void Function_Timer_Timer();
	void Function_InternalOnDeActivate();
	void Function_InternalOnActivate();
	class AClass_Object_Actor_Info_ReplicationInfo_PlayerReplicationInfo_TribesReplicationInfo* Function_OwnerTRI();
	void Function_UpdateStats();
	struct FString Function_createEquation(int offense, int defense, int Style);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* Owner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPWeaponStatsPanel
// 0x0000 (0x028C - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPWeaponStatsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPWeaponStatsPanel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPGameStatsPanel
// 0x0000 (0x028C - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPGameStatsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPGameStatsPanel");
		return ptr;
	}

};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPHintsPanel
// 0x0020 (0x02AC - 0x028C)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel_TribesMPHintsPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesMPEscapePanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* nextButton;                                               // 0x028C(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* PrevButton;                                               // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* HintLabel;                                                // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* HelpButton;                                               // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FStruct_Color                               HintColor;                                                // 0x029C(0x0004) (Edit)
	struct FStruct_Color                               BindColor;                                                // 0x02A0(0x0004) (Edit)
	int                                                currentHintIndex;                                         // 0x02A4(0x0004)
	class UClass_Object_Field_Struct_State_Class*      G;                                                        // 0x02A8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesMPEscapePanel.TribesMPHintsPanel");
		return ptr;
	}


	void Function_OnHelpClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnPrevClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnNextClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_UpdateHint();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesSPEscapeMenu
// 0x0044 (0x0314 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesSPEscapeMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* RestartButton;                                            // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* LoadButton;                                               // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* SaveButton;                                               // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* OptionsButton;                                            // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* QuitButton;                                               // 0x02E0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* returnButton;                                             // 0x02E4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* ExitGameButton;                                           // 0x02E8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     SaveConfirmText;                                          // 0x02EC(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     ExitConfirmText;                                          // 0x02F8(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     EndGameConfirmText;                                       // 0x0304(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	unsigned long                                      bHasSaved : 1;                                            // 0x0310(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesSPEscapeMenu");
		return ptr;
	}


	bool Function_InternalOnKeyEvent_InternalOnKeyEvent(float Delta, unsigned char* Key, unsigned char* State);
	void Function_OnExitGameClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnReturnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_DoQuitToMainMenu();
	void Function_DoExitGame();
	void Function_OnQuitClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnOptionsClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnDlgReturned(int Selection, const struct FString& Passback);
	void Function_OnSaved();
	void Function_OnSaveClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnLoadClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnRestartClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnActivate();
	void Function_InternalOnShow();
	void Function_PauseGame(bool bPause);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesSaveGameBase.TribesSaveGameMenu
// 0x0064 (0x0334 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesSaveGameBase_TribesSaveGameMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesSaveGameBase
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* SaveButton;                                               // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DeleteButton;                                             // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* CancelButton;                                             // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIListBoxBase_GUIMultiColumnListBox* SaveGameBox;                                              // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     EnterNameText;                                            // 0x02E0(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     OverwriteText;                                            // 0x02EC(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     DeleteText;                                               // 0x02F8(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	struct FString                                     NewSavegameText;                                          // 0x0304(0x000C) (Edit, Config, Localized, NeedCtorLink, EditInline)
	unsigned long                                      bHasSaved : 1;                                            // 0x0310(0x0004)
	struct FString                                     CallingDlg;                                               // 0x0314(0x000C) (NeedCtorLink)
	struct FString                                     savehackname;                                             // 0x0320(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnUserSaved__Delegate;                                  // 0x032C(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesSaveGameBase.TribesSaveGameMenu");
		return ptr;
	}


	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	struct FString Function_DefaultSaveName();
	void Function_InternalDlgReturned(int Selection, const struct FString& Passback);
	void Function_Timer_Timer();
	void Function_InternalOnPopupReturned(const struct FStruct_GUIListElem& returnObj, const struct FString& Passback);
	void Function_InternalOnShow();
	void Function_InternalOnActivate();
	void Function_HandleParameters_HandleParameters(const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
	void Function_OnUserSaved();
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesDefaultTextEntryPopup
// 0x001C (0x02EC - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesDefaultTextEntryPopup : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIEditBox* MyEditBox;                                                // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUILabel* MyTitleLabel;                                             // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MyOKButton;                                               // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MyCancelButton;                                           // 0x02DC(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     Passback;                                                 // 0x02E0(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesDefaultTextEntryPopup");
		return ptr;
	}


	void Function_InternalOnEntryCompleted(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_HandleParameters_HandleParameters(const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesOptionsMenu
// 0x0018 (0x02E8 - 0x02D0)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage_TribesOptionsMenu : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPage_TribesGuiPage
{
public:
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* MainMenuButton;                                           // 0x02D0(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DoneButton;                                               // 0x02D4(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUITabControl* MyTabControl;                                             // 0x02D8(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	struct FString                                     menuCallerName;                                           // 0x02DC(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPage.TribesGuiPage.TribesOptionsMenu");
		return ptr;
	}


	void Function_EndOptions();
	void Function_InternalOnClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_HandleParameters_HandleParameters(const struct FString& Param1, const struct FString& Param2, int param3);
	void Function_InitComponent_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsNetworkPanel
// 0x001C (0x02AC - 0x0290)
class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel_TribesOptionsNetworkPanel : public UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIPanel_TribesGUIPanel_TribesSettingsPanel
{
public:
	class UClass_Object_GUI_GUIComponent_GUIMultiComponent_GUIComboBox* ConnectionSpeedBox;                                       // 0x0290(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton_GUIGFXButton_GUICheckBoxButton* DynamicNetspeedCheckBox;                                  // 0x0294(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	class UClass_Object_GUI_GUIComponent_GUITextComponent_GUIButton* DefaultsButton;                                           // 0x0298(0x0004) (Edit, ExportObject, Config, NeedCtorLink, NoClear, EditInline)
	int                                                iNetSpeed;                                                // 0x029C(0x0004)
	TArray<struct FString>                             ConnectionStrings;                                        // 0x02A0(0x000C) (Localized, NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.GUI.GUIComponent.GUIMultiComponent.GUIPanel.TribesGUIPanel.TribesSettingsPanel.TribesOptionsNetworkPanel");
		return ptr;
	}


	void Function_OnDefaultsClick(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_OnConnectionSpeedChange(class UClass_Object_GUI_GUIComponent* Sender);
	void Function_SaveSettings();
	void Function_Refresh();
	void Function_InternalOnHide();
	void Function_InternalOnShow();
	void Function_InitComponent_InitComponent_InitComponent_InitComponent(class UClass_Object_GUI_GUIComponent* MyOwner);
};


// Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess.InventoryStationAccessDefault
// 0x0000 (0x04A4 - 0x04A4)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess_InventoryStationAccessDefault : public AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess.InventoryStationAccessDefault");
		return ptr;
	}

};


// Class Object.CombatRole.CombatRoleLight
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_CombatRole_CombatRoleLight : public UClass_Object_CombatRole
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CombatRole.CombatRoleLight");
		return ptr;
	}

};


// Class Object.CombatRole.CombatRoleMedium
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_CombatRole_CombatRoleMedium : public UClass_Object_CombatRole
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CombatRole.CombatRoleMedium");
		return ptr;
	}

};


// Class Object.CombatRole.CombatRoleHeavy
// 0x0000 (0x0034 - 0x0034)
class UClass_Object_CombatRole_CombatRoleHeavy : public UClass_Object_CombatRole
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.CombatRole.CombatRoleHeavy");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.EnergyBlade.WeaponEnergyBlade
// 0x0000 (0x0610 - 0x0610)
class AClass_Object_Actor_Equipment_Equippable_Weapon_EnergyBlade_WeaponEnergyBlade : public AClass_Object_Actor_Equipment_Equippable_Weapon_EnergyBlade
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.EnergyBlade.WeaponEnergyBlade");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Spinfusor.WeaponSpinfusor
// 0x0000 (0x0610 - 0x0610)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Spinfusor_WeaponSpinfusor : public AClass_Object_Actor_Equipment_Equippable_Weapon_Spinfusor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Spinfusor.WeaponSpinfusor");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Chaingun.WeaponChaingun
// 0x0000 (0x0634 - 0x0634)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Chaingun_WeaponChaingun : public AClass_Object_Actor_Equipment_Equippable_Weapon_Chaingun
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Chaingun.WeaponChaingun");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Blaster.WeaponBlaster
// 0x0000 (0x0634 - 0x0634)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Blaster_WeaponBlaster : public AClass_Object_Actor_Equipment_Equippable_Weapon_Blaster
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Blaster.WeaponBlaster");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.GrenadeLauncher.WeaponGrenadeLauncher
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_GrenadeLauncher_WeaponGrenadeLauncher : public AClass_Object_Actor_Equipment_Equippable_Weapon_GrenadeLauncher
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.GrenadeLauncher.WeaponGrenadeLauncher");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.RocketPod.WeaponRocketPod
// 0x0000 (0x060C - 0x060C)
class AClass_Object_Actor_Equipment_Equippable_Weapon_RocketPod_WeaponRocketPod : public AClass_Object_Actor_Equipment_Equippable_Weapon_RocketPod
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.RocketPod.WeaponRocketPod");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Burner.WeaponBurner
// 0x0000 (0x0610 - 0x0610)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Burner_WeaponBurner : public AClass_Object_Actor_Equipment_Equippable_Weapon_Burner
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Burner.WeaponBurner");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Grappler.WeaponGrappler
// 0x0000 (0x0628 - 0x0628)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Grappler_WeaponGrappler : public AClass_Object_Actor_Equipment_Equippable_Weapon_Grappler
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Grappler.WeaponGrappler");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.SniperRifle.WeaponSniperRifle
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_SniperRifle_WeaponSniperRifle : public AClass_Object_Actor_Equipment_Equippable_Weapon_SniperRifle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.SniperRifle.WeaponSniperRifle");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Buckler.WeaponBuckler
// 0x0000 (0x0654 - 0x0654)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Buckler_WeaponBuckler : public AClass_Object_Actor_Equipment_Equippable_Weapon_Buckler
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Buckler.WeaponBuckler");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Mortar
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Mortar : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Mortar");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.Mortar.WeaponMortar
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_Mortar_WeaponMortar : public AClass_Object_Actor_Equipment_Equippable_Weapon_Mortar
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.Mortar.WeaponMortar");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Pack.EnergyPack.PackEnergy
// 0x0000 (0x04F4 - 0x04F4)
class AClass_Object_Actor_Equipment_Pack_EnergyPack_PackEnergy : public AClass_Object_Actor_Equipment_Pack_EnergyPack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.EnergyPack.PackEnergy");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Pack.ShieldPack.PackShield
// 0x0000 (0x0514 - 0x0514)
class AClass_Object_Actor_Equipment_Pack_ShieldPack_PackShield : public AClass_Object_Actor_Equipment_Pack_ShieldPack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.ShieldPack.PackShield");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Pack.RepairPack.PackRepair
// 0x0000 (0x0574 - 0x0574)
class AClass_Object_Actor_Equipment_Pack_RepairPack_PackRepair : public AClass_Object_Actor_Equipment_Pack_RepairPack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.RepairPack.PackRepair");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Pack.SpeedPack.PackSpeed
// 0x0000 (0x0504 - 0x0504)
class AClass_Object_Actor_Equipment_Pack_SpeedPack_PackSpeed : public AClass_Object_Actor_Equipment_Pack_SpeedPack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Pack.SpeedPack.PackSpeed");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon.HandGrenade.WeaponHandGrenade
// 0x0000 (0x0634 - 0x0634)
class AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_HandGrenade_WeaponHandGrenade : public AClass_Object_Actor_Equipment_Equippable_Weapon_ChargeUpWeapon_TimeChargeUpWeapon_HandGrenade
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.ChargeUpWeapon.TimeChargeUpWeapon.HandGrenade.WeaponHandGrenade");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.SpinfusorProjectile.ProjectileSpinfusor
// 0x0000 (0x0468 - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_SpinfusorProjectile_ProjectileSpinfusor : public AClass_Object_Actor_Projectile_ExplosiveProjectile_SpinfusorProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.SpinfusorProjectile.ProjectileSpinfusor");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ChaingunProjectile.ProjectileChaingun
// 0x0000 (0x044C - 0x044C)
class AClass_Object_Actor_Projectile_ChaingunProjectile_ProjectileChaingun : public AClass_Object_Actor_Projectile_ChaingunProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ChaingunProjectile.ProjectileChaingun");
		return ptr;
	}

};


// Class Object.Actor.Projectile.BlasterProjectile.ProjectileBlaster
// 0x0000 (0x0458 - 0x0458)
class AClass_Object_Actor_Projectile_BlasterProjectile_ProjectileBlaster : public AClass_Object_Actor_Projectile_BlasterProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.BlasterProjectile.ProjectileBlaster");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.GrenadeLauncherProjectile.ProjectileGrenadeLauncher
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_GrenadeLauncherProjectile_ProjectileGrenadeLauncher : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_GrenadeLauncherProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.GrenadeLauncherProjectile.ProjectileGrenadeLauncher");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.RocketPodProjectile.ProjectileRocketPod
// 0x0000 (0x04E8 - 0x04E8)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_RocketPodProjectile_ProjectileRocketPod : public AClass_Object_Actor_Projectile_ExplosiveProjectile_RocketPodProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.RocketPodProjectile.ProjectileRocketPod");
		return ptr;
	}

};


// Class Object.Actor.Projectile.BurnerProjectile.ProjectileBurner
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_Projectile_BurnerProjectile_ProjectileBurner : public AClass_Object_Actor_Projectile_BurnerProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.BurnerProjectile.ProjectileBurner");
		return ptr;
	}

};


// Class Object.Actor.Projectile.BucklerProjectile.ProjectileBuckler
// 0x0000 (0x04B4 - 0x04B4)
class AClass_Object_Actor_Projectile_BucklerProjectile_ProjectileBuckler : public AClass_Object_Actor_Projectile_BucklerProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.BucklerProjectile.ProjectileBuckler");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.HandGrenadeProjectile.ProjectileHandGrenade
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_HandGrenadeProjectile_ProjectileHandGrenade : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_HandGrenadeProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.HandGrenadeProjectile.ProjectileHandGrenade");
		return ptr;
	}

};


// Class Object.Actor.Projectile.SniperRifleProjectile.ProjectileSniperRifle
// 0x0000 (0x0454 - 0x0454)
class AClass_Object_Actor_Projectile_SniperRifleProjectile_ProjectileSniperRifle : public AClass_Object_Actor_Projectile_SniperRifleProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.SniperRifleProjectile.ProjectileSniperRifle");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile.ProjectileMortar
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile_ProjectileMortar : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile.ProjectileMortar");
		return ptr;
	}

};


// Class Object.Armor.ArmorDefault
// 0x0000 (0x0128 - 0x0128)
class UClass_Object_Armor_ArmorDefault : public UClass_Object_Armor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Armor.ArmorDefault");
		return ptr;
	}

};


// Class Object.Armor.ArmorDefault.ArmorMedium
// 0x0000 (0x0128 - 0x0128)
class UClass_Object_Armor_ArmorDefault_ArmorMedium : public UClass_Object_Armor_ArmorDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Armor.ArmorDefault.ArmorMedium");
		return ptr;
	}

};


// Class Object.Loadout.LoadoutDefault
// 0x0000 (0x0058 - 0x0058)
class UClass_Object_Loadout_LoadoutDefault : public UClass_Object_Loadout
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Loadout.LoadoutDefault");
		return ptr;
	}

};


// Class Object.Armor.ArmorDefault.ArmorLight
// 0x0000 (0x0128 - 0x0128)
class UClass_Object_Armor_ArmorDefault_ArmorLight : public UClass_Object_Armor_ArmorDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Armor.ArmorDefault.ArmorLight");
		return ptr;
	}

};


// Class Object.Armor.ArmorDefault.ArmorHeavy
// 0x0000 (0x0128 - 0x0128)
class UClass_Object_Armor_ArmorDefault_ArmorHeavy : public UClass_Object_Armor_ArmorDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Armor.ArmorDefault.ArmorHeavy");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault : public AClass_Object_Actor_DamageType_ProjectileDamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeChaingun
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet_ProjectileDamageTypeChaingun : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeChaingun");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeMortar
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion_ProjectileDamageTypeMortar : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeMortar");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Consumable.HealthKit.HealthKitConsumable
// 0x0000 (0x049C - 0x049C)
class AClass_Object_Actor_Equipment_Consumable_HealthKit_HealthKitConsumable : public AClass_Object_Actor_Equipment_Consumable_HealthKit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Consumable.HealthKit.HealthKitConsumable");
		return ptr;
	}


	void Function_requestConsumeHealthKit();
	void Function_Use_Use();
	void Function_onPickup_onPickup();
	bool Function_canPickup_canPickup_canPickup(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* potentialOwner);
};


// Class Object.Actor.Equipment.Consumable.HealthKit.HealthKitConsumable.ConsumableHealth
// 0x0000 (0x049C - 0x049C)
class AClass_Object_Actor_Equipment_Consumable_HealthKit_HealthKitConsumable_ConsumableHealth : public AClass_Object_Actor_Equipment_Consumable_HealthKit_HealthKitConsumable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Consumable.HealthKit.HealthKitConsumable.ConsumableHealth");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Consumable.HealthKit.HealthKitConsumable.ConsumableHealth.ConsumableHealthMP
// 0x0000 (0x049C - 0x049C)
class AClass_Object_Actor_Equipment_Consumable_HealthKit_HealthKitConsumable_ConsumableHealth_ConsumableHealthMP : public AClass_Object_Actor_Equipment_Consumable_HealthKit_HealthKitConsumable_ConsumableHealth
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Consumable.HealthKit.HealthKitConsumable.ConsumableHealth.ConsumableHealthMP");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCollisionDamageType.DamageTypeMovement
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCollisionDamageType_DamageTypeMovement : public AClass_Object_Actor_DamageType_MovementCollisionDamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCollisionDamageType.DamageTypeMovement");
		return ptr;
	}

};


// Class Object.Actor.DamageType.Suicided.DamageTypeSuicided
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_Suicided_DamageTypeSuicided : public AClass_Object_Actor_DamageType_Suicided
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.Suicided.DamageTypeSuicided");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable
// 0x0008 (0x05DC - 0x05D4)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable : public AClass_Object_Actor_Equipment_Equippable_Deployable
{
public:
	class UClass_Object_Field_Struct_State_Class*      baseDeviceClass;                                          // 0x05D4(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_BaseDevice*    spawnedBaseDevice;                                        // 0x05D8(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable");
		return ptr;
	}


	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.ShockMineDeployable
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_ShockMineDeployable : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.ShockMineDeployable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.ShockMineDeployable.DeployableShockMine
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_ShockMineDeployable_DeployableShockMine : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_ShockMineDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.ShockMineDeployable.DeployableShockMine");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.InventoryStationDeployable
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_InventoryStationDeployable : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.InventoryStationDeployable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.InventoryStationDeployable.DeployableInventoryStation
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_InventoryStationDeployable_DeployableInventoryStation : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_InventoryStationDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.InventoryStationDeployable.DeployableInventoryStation");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.CatapultDeployable
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_CatapultDeployable : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.CatapultDeployable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.CatapultDeployable.DeployableCatapult
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_CatapultDeployable_DeployableCatapult : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_CatapultDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.CatapultDeployable.DeployableCatapult");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.RepairDeployable
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_RepairDeployable : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.RepairDeployable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.RepairDeployable.DeployableRepairer
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_RepairDeployable_DeployableRepairer : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_RepairDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.RepairDeployable.DeployableRepairer");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.TurretDeployable
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_TurretDeployable : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.TurretDeployable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.TurretDeployable.DeployableTurret
// 0x0000 (0x05DC - 0x05DC)
class AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_TurretDeployable_DeployableTurret : public AClass_Object_Actor_Equipment_Equippable_Deployable_BaseDeviceDeployable_TurretDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Deployable.BaseDeviceDeployable.TurretDeployable.DeployableTurret");
		return ptr;
	}

};


// Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll
// 0x0000 (0x005C - 0x005C)
class UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll : public UClass_Object_HavokObject_HavokSkeletalSystem
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll");
		return ptr;
	}

};


// Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll.MediumRagdoll
// 0x0000 (0x005C - 0x005C)
class UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll_MediumRagdoll : public UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll.MediumRagdoll");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault : public UClass_Object_RadarInfo
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor : public UClass_Object_RadarInfo_RadarInfoDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor.RadarInfoArmorMedium
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor_RadarInfoArmorMedium : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor.RadarInfoArmorMedium");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Consumable.HealthKit.KitHealth
// 0x0000 (0x049C - 0x049C)
class AClass_Object_Actor_Equipment_Consumable_HealthKit_KitHealth : public AClass_Object_Actor_Equipment_Consumable_HealthKit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Consumable.HealthKit.KitHealth");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar.Buggy.VehicleBuggy
// 0x0000 (0x0E60 - 0x0E60)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar_Buggy_VehicleBuggy : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar_Buggy
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar.Buggy.VehicleBuggy");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.Pod.VehiclePod
// 0x0000 (0x0DD4 - 0x0DD4)
class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_Pod_VehiclePod : public AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_Pod
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.Pod.VehiclePod");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.AssaultShip
// 0x0070 (0x0E18 - 0x0DA8)
class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_AssaultShip : public AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft
{
public:
	struct FName                                       leftTurretBone;                                           // 0x0DA8(0x0004) (Edit)
	struct FName                                       rightTurretBone;                                          // 0x0DAC(0x0004) (Edit)
	class UClass_Object_Field_Struct_State_Class*      turretClass;                                              // 0x0DB0(0x0004)
	class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret* leftTurret;                                               // 0x0DB4(0x0004) (Net)
	class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret* rightTurret;                                              // 0x0DB8(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      turretWeaponClass;                                        // 0x0DBC(0x0004) (Edit)
	float                                              gunnerMinimumPitch;                                       // 0x0DC0(0x0004) (Edit)
	float                                              gunnerMaximumPitch;                                       // 0x0DC4(0x0004) (Edit)
	float                                              gunnerYawStart;                                           // 0x0DC8(0x0004) (Edit)
	float                                              gunnerYawRange;                                           // 0x0DCC(0x0004) (Edit)
	struct FStruct_Vector                              gunnerCameraOffset;                                       // 0x0DD0(0x000C) (Edit)
	struct FStruct_Vector                              gunnerWeaponOffset;                                       // 0x0DDC(0x000C) (Edit)
	float                                              gunnerAITurnRate;                                         // 0x0DE8(0x0004) (Edit)
	float                                              gunnerClientTurnRate;                                     // 0x0DEC(0x0004) (Edit)
	int                                                leftEngineDustEffectIndex;                                // 0x0DF0(0x0004)
	int                                                rightEngineDustEffectIndex;                               // 0x0DF4(0x0004)
	struct FStruct_Vector                              leftEngineDustEffectLocation;                             // 0x0DF8(0x000C)
	struct FStruct_Vector                              rightEngineDustEffectLocation;                            // 0x0E04(0x000C)
	float                                              engineDustTraceLength;                                    // 0x0E10(0x0004) (Edit)
	float                                              engineDustGroundOffset;                                   // 0x0E14(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.AssaultShip");
		return ptr;
	}


	void Function_updateEffectsStates_updateEffectsStates_updateEffectsStates();
	bool Function_ShouldProjectileHit_ShouldProjectileHit_ShouldProjectileHit(class AClass_Object_Actor* projInstigator);
	void Function_VehicleUpdateParams_VehicleUpdateParams();
	void Function_updateDynamicEffectStates_updateDynamicEffectStates();
	bool Function_isEffectCauserActive_isEffectCauserActive_isEffectCauserActive(int effectCauserIndex);
	void Function_initialiseEffects_initialiseEffects_initialiseEffects();
	class AClass_Object_Actor* Function_getEffectsBaseActor_getEffectsBaseActor();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed_Destroyed();
	class UClass_Object_Material* Function_getTeamSkin_getTeamSkin();
	struct FStruct_Vector Function_getProjectileSpawnLocation_getProjectileSpawnLocation();
	void Function_Tick_Tick_Tick_Tick(float DeltaSeconds);
	void Function_PostNetReceive_PostNetReceive_PostNetReceive_PostNetReceive();
	void Function_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay_PostNetBeginPlay();
};


// Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.AssaultShip.VehicleAssaultShip
// 0x0000 (0x0E18 - 0x0E18)
class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_AssaultShip_VehicleAssaultShip : public AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_AssaultShip
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.AssaultShip.VehicleAssaultShip");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.TreadVehicle.Tank.VehicleTank
// 0x0000 (0x0E64 - 0x0E64)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_TreadVehicle_Tank_VehicleTank : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car_TreadVehicle_Tank
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.TreadVehicle.Tank.VehicleTank");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.AssaultShip.VehicleASOld
// 0x0000 (0x0E18 - 0x0E18)
class AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_AssaultShip_VehicleASOld : public AClass_Object_Actor_Pawn_Rook_Vehicle_JointControlledAircraft_AssaultShip
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.JointControlledAircraft.AssaultShip.VehicleASOld");
		return ptr;
	}

};


// Class Object.Actor.BurningArea.ProjectileBurnerBurningArea
// 0x0000 (0x0410 - 0x0410)
class AClass_Object_Actor_BurningArea_ProjectileBurnerBurningArea : public AClass_Object_Actor_BurningArea
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.BurningArea.ProjectileBurnerBurningArea");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBurner
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBurner : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBurner");
		return ptr;
	}

};


// Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll.HeavyRagdoll
// 0x0000 (0x005C - 0x005C)
class UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll_HeavyRagdoll : public UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll.HeavyRagdoll");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor.RadarInfoArmorHeavy
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor_RadarInfoArmorHeavy : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor.RadarInfoArmorHeavy");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeSpinfusor
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion_ProjectileDamageTypeSpinfusor : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeSpinfusor");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBuckler
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBuckler : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBuckler");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeHandGrenade
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion_ProjectileDamageTypeHandGrenade : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeHandGrenade");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeGrenadeLauncher
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion_ProjectileDamageTypeGrenadeLauncher : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeGrenadeLauncher");
		return ptr;
	}

};


// Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll.LightRagdoll
// 0x0000 (0x005C - 0x005C)
class UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll_LightRagdoll : public UClass_Object_HavokObject_HavokSkeletalSystem_HavokRagdoll
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokSkeletalSystem.HavokRagdoll.LightRagdoll");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor.RadarInfoArmorLight
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor_RadarInfoArmorLight : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoArmor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoArmor.RadarInfoArmorLight");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeRocketPod
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion_ProjectileDamageTypeRocketPod : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeExplosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeExplosion.ProjectileDamageTypeRocketPod");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeSniperRifle
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet_ProjectileDamageTypeSniperRifle : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeSniperRifle");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeBlaster
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet_ProjectileDamageTypeBlaster : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeBlaster");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.VehicleMountedTurret.AssaultShipMountedTurret
// 0x0000 (0x0938 - 0x0938)
class AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret_AssaultShipMountedTurret : public AClass_Object_Actor_Pawn_Rook_VehicleMountedTurret
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.VehicleMountedTurret.AssaultShipMountedTurret");
		return ptr;
	}


	void Function_getThirdPersonEquippableAttachment_getThirdPersonEquippableAttachment(class AClass_Object_Actor_Equipment_Equippable* subject, class AClass_Object_Actor_Pawn_Rook** AttachTo, struct FName* BoneName);
};


// Class Object.Actor.Motor.VehicleMotor.AircraftMotor.AssaultShipMotor
// 0x0000 (0x0414 - 0x0414)
class AClass_Object_Actor_Motor_VehicleMotor_AircraftMotor_AssaultShipMotor : public AClass_Object_Actor_Motor_VehicleMotor_AircraftMotor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Motor.VehicleMotor.AircraftMotor.AssaultShipMotor");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.AssaultShipWeapon
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_AssaultShipWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.AssaultShipWeapon");
		return ptr;
	}


	bool Function_firstPersonStatus_firstPersonStatus();
	void Function_moveWeapon_moveWeapon();
	bool Function_canFire_canFire();
};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.AssaultShipHavokData
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_AssaultShipHavokData : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.AssaultShipHavokData");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.DeployedInventoryStation
// 0x0010 (0x0918 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_DeployedInventoryStation : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access;                                                   // 0x0908(0x0004) (Net)
	class UClass_Object_Field_Struct_State_Class*      accessClass;                                              // 0x090C(0x0004) (Edit)
	float                                              accessRadius;                                             // 0x0910(0x0004) (Edit)
	float                                              accessHeight;                                             // 0x0914(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.DeployedInventoryStation");
		return ptr;
	}


	bool Function_getCurrentLoadoutWeapons(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, struct FStruct_InventoryStationLoadout* weaponLoadout);
	bool Function_directUsage();
	void Function_changeApplied(class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access);
	void Function_accessNoLongerRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_accessRequired(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor, class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess* access, int armorIndex);
	void Function_accessFinished(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* User, bool returnToUsualMovment);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	bool Function_isOnCharactersTeam(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* testCharacter);
	bool Function_isFunctional_isFunctional();
	bool Function_isAccessible(class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* accessor);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.DeployedRepairer
// 0x0074 (0x097C - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_DeployedRepairer : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	class AClass_Object_Actor_RepairRadius*            rr;                                                       // 0x0908(0x0004)
	float                                              Radius;                                                   // 0x090C(0x0004) (Edit)
	float                                              repairRate;                                               // 0x0910(0x0004) (Edit)
	float                                              accumulationScale;                                        // 0x0914(0x0004) (Edit)
	float                                              selfRepairRate;                                           // 0x0918(0x0004) (Edit)
	struct FString                                     socketFrontLeft;                                          // 0x091C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     socketFrontRight;                                         // 0x0928(0x000C) (Edit, NeedCtorLink)
	struct FString                                     socketBackLeft;                                           // 0x0934(0x000C) (Edit, NeedCtorLink)
	struct FString                                     socketBackRight;                                          // 0x0940(0x000C) (Edit, NeedCtorLink)
	struct FStruct_Vector                              frontPortLeft;                                            // 0x094C(0x000C)
	struct FStruct_Vector                              frontPortRight;                                           // 0x0958(0x000C)
	struct FStruct_Vector                              backPortLeft;                                             // 0x0964(0x000C)
	struct FStruct_Vector                              backPortRight;                                            // 0x0970(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.DeployedRepairer");
		return ptr;
	}


	void Function_onTendrilCreate(class UClass_Object_DeleteableObject_RepairTendril* t);
	struct FStruct_Vector Function_getFXTendrilTarget(class AClass_Object_Actor* Target);
	struct FStruct_Vector Function_getFXTendrilOrigin(const struct FStruct_Vector& targetPos);
	class AClass_Object_Actor_Pawn* Function_getFXOriginActor();
	void Function_endRepair(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_beginRepair(class AClass_Object_Actor_Pawn_Rook* R);
	float Function_getRepairRadius();
	bool Function_canRepair(class AClass_Object_Actor_Pawn_Rook* R);
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_initRepairRadius();
	void Function_Tick_Tick(float Delta);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Pawn.Rook.BaseDevice.ShockMine
// 0x001C (0x0924 - 0x0908)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_ShockMine : public AClass_Object_Actor_Pawn_Rook_BaseDevice
{
public:
	float                                              armingDelay;                                              // 0x0908(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Controller*              deployerController;                                       // 0x090C(0x0004)
	unsigned long                                      bIsArmed : 1;                                             // 0x0910(0x0004) (Net)
	unsigned long                                      bExploded : 1;                                            // 0x0910(0x0004) (Net)
	class AClass_Object_Actor*                         Explosion;                                                // 0x0914(0x0004)
	class AClass_Object_Actor_ShockMineProximity*      proximity;                                                // 0x0918(0x0004)
	float                                              proximityHeight;                                          // 0x091C(0x0004) (Edit)
	float                                              proximityRadius;                                          // 0x0920(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.ShockMine");
		return ptr;
	}


	class AClass_Object_Actor_Controller* Function_GetKillerController_GetKillerController();
	void Function_WithinProximity(class AClass_Object_Actor* Other);
	void Function_Timer_Timer();
	void Function_Destroyed_Destroyed_Destroyed_Destroyed();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.AntiAircraftWeapon.WeaponVehicleAssaultShip
// 0x0000 (0x0600 - 0x0600)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_AntiAircraftWeapon_WeaponVehicleAssaultShip : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_AntiAircraftWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.AntiAircraftWeapon.WeaponVehicleAssaultShip");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.AssaultShipWeapon.WeaponVehicleAssaultShipBomb
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_AssaultShipWeapon_WeaponVehicleAssaultShipBomb : public AClass_Object_Actor_Equipment_Equippable_Weapon_AssaultShipWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.AssaultShipWeapon.WeaponVehicleAssaultShipBomb");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal : public AClass_Object_Actor_HavokActor_DynamicObject
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipShell
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynAshipShell : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipShell");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle : public UClass_Object_RadarInfo_RadarInfoDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleAssaultShip
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle_RadarInfoVehicleAssaultShip : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleAssaultShip");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipPANELA
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynAshipPANELA : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipPANELA");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipPANELB
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynAshipPANELB : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipPANELB");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipPANELC
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynAshipPANELC : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynAshipPANELC");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal
// 0x0004 (0x007C - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal
{
public:
	TEnumAsByte<EVehiclePositionType>                  Position;                                                 // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_VehicleResource* Function_vehicleResource();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal
// 0x0004 (0x0080 - 0x007C)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal
{
public:
	float                                              engagementAreaRadius;                                     // 0x007C(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal");
		return ptr;
	}


	void Function_setUpDeactivationSentinel_setUpDeactivationSentinel();
	void Function_Init_Init(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
	void Function_construct_AI_ResourceIntByteFloat(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, TEnumAsByte<EVehiclePositionType> aPosition, float aEngagementAreaRadius);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal.Class0
// 0x0000 (0x0080 - 0x0080)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal_Class0 : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal.Class0");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal.Class1
// 0x0000 (0x0080 - 0x0080)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal_Class1 : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal.Class1");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	void Function_runAction_runAction_runAction_runAction();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_VehicleResource* Function_vehicleResource();
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_Vehicle();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleMoveTo
// 0x0028 (0x008C - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleMoveTo : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction
{
public:
	struct FName                                       destinationName;                                          // 0x0064(0x0004) (Edit, NoClear, EditInline)
	float                                              DesiredSpeed;                                             // 0x0068(0x0004) (Edit, EditInline)
	unsigned long                                      skipIntermediateNodes : 1;                                // 0x006C(0x0004) (Edit)
	struct FName                                       attackTargetName;                                         // 0x0070(0x0004) (Edit, NoClear, EditInline)
	struct FStruct_Vector                              Destination;                                              // 0x0074(0x000C) (Edit, EditConst)
	class AClass_Object_Actor_Pawn_Rook*               attackTarget;                                             // 0x0080(0x0004) (Edit, EditConst)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	class AClass_Object_Actor*                         Node;                                                     // 0x0088(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleMoveTo");
		return ptr;
	}


	void Function_actionFailedCB_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_actionSucceededCB_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleMoveTo.Class2
// 0x0000 (0x008C - 0x008C)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleMoveTo_Class2 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleMoveTo
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleMoveTo.Class2");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction
// 0x0000 (0x0064 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource_AI_GunnerResource* Function_gunnerResource(TEnumAsByte<EVehiclePositionType> Position);
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource_AI_GunnerResource_AI_DriverResource* Function_driverResource();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_VehicleResource* Function_vehicleResource();
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Function_Turret();
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_Vehicle();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleExpellOccupant
// 0x000C (0x0070 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleExpellOccupant : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction
{
public:
	struct FName                                       occupantName;                                             // 0x0064(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant;                                                 // 0x0068(0x0004) (Edit)
	int                                                i;                                                        // 0x006C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleExpellOccupant");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleExpellOccupant.Class3
// 0x0000 (0x0070 - 0x0070)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleExpellOccupant_Class3 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleExpellOccupant
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleExpellOccupant.Class3");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePatrol
// 0x0040 (0x00A4 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePatrol : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction
{
public:
	TArray<struct FName>                               patrolPointNames;                                         // 0x0064(0x000C) (Edit, EditConst, NeedCtorLink)
	float                                              DesiredSpeed;                                             // 0x0070(0x0004) (Edit, EditInline)
	unsigned long                                      bExecuteOnce : 1;                                         // 0x0074(0x0004) (Edit, NoClear)
	unsigned long                                      skipIntermediateNodes : 1;                                // 0x0074(0x0004) (Edit)
	struct FName                                       attackTargetName;                                         // 0x0078(0x0004) (Edit, NoClear, EditInline)
	class AClass_Object_Actor_Pawn_Rook*               attackTarget;                                             // 0x007C(0x0004)
	TArray<struct FStruct_Vector>                      patrolPoints;                                             // 0x0080(0x000C) (NeedCtorLink)
	int                                                patrolIndex;                                              // 0x008C(0x0004)
	int                                                closestIndex;                                             // 0x0090(0x0004)
	float                                              distSquared;                                              // 0x0094(0x0004)
	float                                              closestDistSquared;                                       // 0x0098(0x0004)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x009C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	class AClass_Object_Actor*                         Node;                                                     // 0x00A0(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePatrol");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_actionFailedCB_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_actionSucceededCB_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePatrol.Class4
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePatrol_Class4 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePatrol
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePatrol.Class4");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleFollow
// 0x0024 (0x0088 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleFollow : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction
{
public:
	struct FName                                       targetName;                                               // 0x0064(0x0004) (Edit, NoClear, EditInline)
	float                                              proximity;                                                // 0x0068(0x0004) (Edit, NoClear, EditInline)
	float                                              TerminalVelocity;                                         // 0x006C(0x0004) (Edit)
	float                                              terminalHeight;                                           // 0x0070(0x0004) (Edit, NoClear)
	float                                              DesiredSpeed;                                             // 0x0074(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0078(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x007C(0x0004) (Edit, EditConst)
	int                                                positionIndex;                                            // 0x0080(0x0004) (Edit, EditConst)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleFollow");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_actionFailedCB_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_actionSucceededCB_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleFollow.Class5
// 0x0000 (0x0088 - 0x0088)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleFollow_Class5 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleFollow
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleFollow.Class5");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction
// 0x0004 (0x0068 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action
{
public:
	TEnumAsByte<EVehiclePositionType>                  Position;                                                 // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction");
		return ptr;
	}


	void Function_ClassConstruct_ClassConstruct();
	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_VehicleResource* Function_vehicleResource();
	class AClass_Object_Actor_Pawn_Rook* Function_localRook();
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Function_Turret();
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_Vehicle();
	class AClass_Object_Actor_Pawn_Rook* Function_Rook();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerFireAt
// 0x0088 (0x00F0 - 0x0068)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerFireAt : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction
{
public:
	struct FName                                       targetName;                                               // 0x0068(0x0004) (Edit, NoClear, EditInline)
	unsigned long                                      bGiveUpIfTargetLost : 1;                                  // 0x006C(0x0004) (Edit, NoClear)
	unsigned long                                      bFireWithoutLOS : 1;                                      // 0x006C(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0070(0x0004) (Edit, EditConst)
	class AClass_Object_Actor_Equipment_Equippable_Weapon* Weapon;                                                   // 0x0074(0x0004)
	struct FStruct_Vector                              aimLocation;                                              // 0x0078(0x000C)
	struct FStruct_Vector                              inaccurateAimLocation;                                    // 0x0084(0x000C)
	struct FStruct_Rotator                             aimRotation;                                              // 0x0090(0x000C)
	int                                                yawDiff;                                                  // 0x009C(0x0004)
	int                                                pitchDiff;                                                // 0x00A0(0x0004)
	int                                                rollDiff;                                                 // 0x00A4(0x0004)
	int                                                maxDeviation;                                             // 0x00A8(0x0004)
	struct FStruct_Vector                              HitLocation;                                              // 0x00AC(0x000C)
	float                                              timeToHit;                                                // 0x00B8(0x0004)
	class AClass_Object_Actor*                         obstacle;                                                 // 0x00BC(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               rookObstacle;                                             // 0x00C0(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor* targetSensor;                                             // 0x00C4(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               mount;                                                    // 0x00C8(0x0004)
	class UClass_Object_IFiringMotor*                  firingMotor;                                              // 0x00CC(0x0004)
	struct FStruct_Rotator                             ViewRotation;                                             // 0x00D0(0x000C)
	unsigned long                                      bAssaultShip : 1;                                         // 0x00DC(0x0004)
	unsigned long                                      bPod : 1;                                                 // 0x00DC(0x0004)
	unsigned long                                      bChainGun : 1;                                            // 0x00DC(0x0004)
	class UClass_Object_Field_Struct_State_Class*      projectileClass;                                          // 0x00E0(0x0004)
	struct FString                                     DebugString;                                              // 0x00E4(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerFireAt");
		return ptr;
	}


	void Function_cleanup_cleanup();
	struct FString Function_actionDebuggingString_actionDebuggingString();
	struct FStruct_Rotator Function_computeAIspread();
	void Function_OnSensorMessage_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerFireAt.Class6
// 0x0000 (0x00F0 - 0x00F0)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerFireAt_Class6 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerFireAt
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerFireAt.Class6");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerGuard
// 0x0008 (0x0070 - 0x0068)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerGuard : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction
{
public:
	float                                              engagementAreaRadius;                                     // 0x0068(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x006C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerGuard");
		return ptr;
	}


	void Function_cleanup_cleanup();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerGuard.Class7
// 0x0000 (0x0070 - 0x0070)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerGuard_Class7 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerGuard
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerGuard.Class7");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_AssaultShipAttack
// 0x0030 (0x0094 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_AssaultShipAttack : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction
{
public:
	struct FName                                       targetName;                                               // 0x0064(0x0004) (Edit, NoClear, EditInline)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0068(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x006C(0x0004) (Edit, EditConst)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       V;                                                        // 0x0070(0x0004)
	TEnumAsByte<EVehiclePositionType>                  driverPosition;                                           // 0x0074(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	struct FStruct_Vector                              Destination;                                              // 0x0078(0x000C)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* fireAtGoal;                                               // 0x0084(0x0004)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* followGoal;                                               // 0x0088(0x0004)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x008C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor_AI_TargetMemorySensor* targetMemorySensor;                                       // 0x0090(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_AssaultShipAttack");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_goalNotAchievedCB_goalNotAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_goalAchievedCB_goalAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_AssaultShipAttack.Class8
// 0x0000 (0x0094 - 0x0094)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_AssaultShipAttack_Class8 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_AssaultShipAttack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_AssaultShipAttack.Class8");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleLocalAttack
// 0x001C (0x0080 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleLocalAttack : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0064(0x000C) (Edit, EditConst)
	float                                              terminalDistance;                                         // 0x0070(0x0004) (Edit, EditConst)
	float                                              speed;                                                    // 0x0074(0x0004) (Edit, EditConst)
	class AClass_Object_Actor_Pawn_Rook*               Target;                                                   // 0x0078(0x0004) (Edit, EditConst)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x007C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleLocalAttack");
		return ptr;
	}


	void Function_actionFailedCB_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_actionSucceededCB_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleLocalAttack.Class9
// 0x0000 (0x0080 - 0x0080)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleLocalAttack_Class9 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleLocalAttack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleLocalAttack.Class9");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleGuard
// 0x0008 (0x006C - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleGuard : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction
{
public:
	float                                              engagementAreaRadius;                                     // 0x0064(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0068(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleGuard");
		return ptr;
	}


	void Function_cleanup_cleanup();
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleGuard.Class10
// 0x0000 (0x006C - 0x006C)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleGuard_Class10 : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleGuard
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleGuard.Class10");
		return ptr;
	}

};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.AssaultShipHavokData.VehicleASOldHavok
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_AssaultShipHavokData_VehicleASOldHavok : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_AssaultShipHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.AssaultShipHavokData.VehicleASOldHavok");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.DeployedRepairer.DeployedRepairer
// 0x0000 (0x097C - 0x097C)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_DeployedRepairer_DeployedRepairer : public AClass_Object_Actor_Pawn_Rook_BaseDevice_DeployedRepairer
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.DeployedRepairer.DeployedRepairer");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.Catapult.DeployedCatapult
// 0x0000 (0x0920 - 0x0920)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_Catapult_DeployedCatapult : public AClass_Object_Actor_Pawn_Rook_BaseDevice_Catapult
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.Catapult.DeployedCatapult");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.Catapult.DeployedCatapult.DeployedCatapult
// 0x0000 (0x0920 - 0x0920)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_Catapult_DeployedCatapult_DeployedCatapult : public AClass_Object_Actor_Pawn_Rook_BaseDevice_Catapult_DeployedCatapult
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.Catapult.DeployedCatapult.DeployedCatapult");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.DeployedInventoryStation.DeployedInventoryStation
// 0x0000 (0x0918 - 0x0918)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_DeployedInventoryStation_DeployedInventoryStation : public AClass_Object_Actor_Pawn_Rook_BaseDevice_DeployedInventoryStation
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.DeployedInventoryStation.DeployedInventoryStation");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.Turret.DeployedTurret.DeployedTurret
// 0x0000 (0x0998 - 0x0998)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret_DeployedTurret_DeployedTurret : public AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret_DeployedTurret
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.Turret.DeployedTurret.DeployedTurret");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.BaseDevice.ShockMine.DeployedShockMine
// 0x0000 (0x0924 - 0x0924)
class AClass_Object_Actor_Pawn_Rook_BaseDevice_ShockMine_DeployedShockMine : public AClass_Object_Actor_Pawn_Rook_BaseDevice_ShockMine
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.BaseDevice.ShockMine.DeployedShockMine");
		return ptr;
	}

};


// Class Object.Actor.Explosion.Explosion
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion : public AClass_Object_Actor_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion");
		return ptr;
	}

};


// Class Object.Actor.Explosion.Explosion.ExplosionVehicleFighter
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion_ExplosionVehicleFighter : public AClass_Object_Actor_Explosion_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion.ExplosionVehicleFighter");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.PodWeapon.WeaponVehicleFighterRocket
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_PodWeapon_WeaponVehicleFighterRocket : public AClass_Object_Actor_Equipment_Equippable_Weapon_PodWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.PodWeapon.WeaponVehicleFighterRocket");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynPodShell
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynPodShell : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynPodShell");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType : public AClass_Object_Actor_DamageType_MovementCrushingDamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle : public AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingFighter
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle_DamageTypeCrushingFighter : public AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingFighter");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleFighter
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle_RadarInfoVehicleFighter : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleFighter");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynPodPanelA
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynPodPanelA : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynPodPanelA");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynPodPanelB
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynPodPanelB : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynPodPanelB");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynPodPanelC
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynPodPanelC : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynPodPanelC");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleMoveTo.AI_VehicleMoveTo
// 0x0000 (0x008C - 0x008C)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleMoveTo_AI_VehicleMoveTo : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleMoveTo
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleMoveTo.AI_VehicleMoveTo");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleExpellOccupant.AI_VehicleExpellOccupant
// 0x0000 (0x0070 - 0x0070)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleExpellOccupant_AI_VehicleExpellOccupant : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleExpellOccupant
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleExpellOccupant.AI_VehicleExpellOccupant");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePatrol.AI_VehiclePatrol
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePatrol_AI_VehiclePatrol : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePatrol
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePatrol.AI_VehiclePatrol");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleFollow.AI_VehicleFollow
// 0x0000 (0x0088 - 0x0088)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleFollow_AI_VehicleFollow : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleFollow
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleFollow.AI_VehicleFollow");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePursue
// 0x0030 (0x0094 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePursue : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction
{
public:
	struct FName                                       targetName;                                               // 0x0064(0x0004) (Edit, NoClear, EditInline)
	float                                              proximity;                                                // 0x0068(0x0004) (Edit, NoClear, EditInline)
	float                                              TerminalVelocity;                                         // 0x006C(0x0004) (Edit)
	float                                              terminalHeight;                                           // 0x0070(0x0004) (Edit, NoClear)
	float                                              DesiredSpeed;                                             // 0x0074(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0078(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x007C(0x0004) (Edit, EditConst)
	int                                                positionIndex;                                            // 0x0080(0x0004) (Edit, EditConst)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor_AI_TargetMemorySensor* targetMemorySensor;                                       // 0x0088(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* follow;                                                   // 0x008C(0x0004)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* moveToGoal;                                               // 0x0090(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePursue");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_actionFailedCB_actionFailedCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_actionSucceededCB_actionSucceededCB(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	void Function_goalNotAchievedCB_goalNotAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child, TEnumAsByte<EACT_ErrorCodes> errorCode);
	void Function_goalAchievedCB_goalAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child);
	void Function_OnSensorMessage_OnSensorMessage(class UClass_Object_DeleteableObject_AI_Sensor* sensor, class UClass_Object_DeleteableObject_AI_SensorData* Value, class UClass_Object* userData);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePursue.AI_VehiclePursue
// 0x0000 (0x0094 - 0x0094)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePursue_AI_VehiclePursue : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehiclePursue
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehiclePursue.AI_VehiclePursue");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerFireAt.AI_GunnerFireAt
// 0x0000 (0x00F0 - 0x00F0)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerFireAt_AI_GunnerFireAt : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerFireAt
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerFireAt.AI_GunnerFireAt");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerGuard.AI_GunnerGuard
// 0x0000 (0x0070 - 0x0070)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerGuard_AI_GunnerGuard : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_GunnerAction_AI_GunnerGuard
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_GunnerAction.AI_GunnerGuard.AI_GunnerGuard");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_PodAttack
// 0x0030 (0x0094 - 0x0064)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_PodAttack : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction
{
public:
	struct FName                                       targetName;                                               // 0x0064(0x0004) (Edit, NoClear, EditInline)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0068(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x006C(0x0004) (Edit, EditConst)
	class AClass_Object_Actor_Pawn_Rook_Vehicle*       V;                                                        // 0x0070(0x0004)
	TEnumAsByte<EVehiclePositionType>                  driverPosition;                                           // 0x0074(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	struct FStruct_Vector                              Destination;                                              // 0x0078(0x000C)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* fireAtGoal;                                               // 0x0084(0x0004)
	class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* followGoal;                                               // 0x0088(0x0004)
	TEnumAsByte<EACT_ErrorCodes>                       errorCode;                                                // 0x008C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor_AI_TargetMemorySensor* targetMemorySensor;                                       // 0x0090(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_PodAttack");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_goalNotAchievedCB_goalNotAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child, TEnumAsByte<EACT_ErrorCodes> anErrorCode);
	void Function_goalAchievedCB_goalAchievedCB(class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal* goal, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Child);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_PodAttack.AI_PodAttack
// 0x0000 (0x0094 - 0x0094)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_PodAttack_AI_PodAttack : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_PodAttack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_PodAttack.AI_PodAttack");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleLocalAttack.AI_VehicleLocalAttack
// 0x0000 (0x0080 - 0x0080)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleLocalAttack_AI_VehicleLocalAttack : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_DriverAction_AI_VehicleLocalAttack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_DriverAction.AI_VehicleLocalAttack.AI_VehicleLocalAttack");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleGuard.AI_VehicleGuard
// 0x0000 (0x006C - 0x006C)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleGuard_AI_VehicleGuard : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_VehicleGuard
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_VehicleGuard.AI_VehicleGuard");
		return ptr;
	}

};


// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.PodHavokData.HavokDataPod
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_PodHavokData_HavokDataPod : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_PodHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.PodHavokData.HavokDataPod");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.AntiAircraftWeapon.WeaponVehicleBuggy
// 0x0000 (0x0600 - 0x0600)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_AntiAircraftWeapon_WeaponVehicleBuggy : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_AntiAircraftWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.AntiAircraftWeapon.WeaponVehicleBuggy");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar.Buggy.VehicleBuggy.VehicleBuggyBoost
// 0x0000 (0x0E60 - 0x0E60)
class AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar_Buggy_VehicleBuggy_VehicleBuggyBoost : public AClass_Object_Actor_Pawn_Rook_Vehicle_Car_HavokCar_Buggy_VehicleBuggy
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Vehicle.Car.HavokCar.Buggy.VehicleBuggy.VehicleBuggyBoost");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyFrontBoostWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel_BuggyFrontBoostWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyFrontBoostWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyRearBoostWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel_BuggyRearBoostWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyRearBoostWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyFrontLeftWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel_BuggyFrontLeftWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyFrontLeftWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyFrontRightWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel_BuggyFrontRightWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyFrontRightWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyRearLeftWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel_BuggyRearLeftWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyRearLeftWheel");
		return ptr;
	}

};


// Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyRearRightWheel
// 0x0000 (0x00A4 - 0x00A4)
class UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel_BuggyRearRightWheel : public UClass_Object_HavokVehicleWheel_HavokCarWheel_BuggyWheel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokVehicleWheel.HavokCarWheel.BuggyWheel.BuggyRearRightWheel");
		return ptr;
	}

};


// Class Object.Actor.Explosion.Explosion.ExplosionVehicleRover
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion_ExplosionVehicleRover : public AClass_Object_Actor_Explosion_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion.ExplosionVehicleRover");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynRoverShell
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynRoverShell : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynRoverShell");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingRover
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle_DamageTypeCrushingRover : public AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingRover");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleRover
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle_RadarInfoVehicleRover : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleRover");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynBuggyPANELA
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynBuggyPANELA : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynBuggyPANELA");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynBuggyPANELB
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynBuggyPANELB : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynBuggyPANELB");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynBuggyPANELC
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynBuggyPANELC : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynBuggyPANELC");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal.AI_GunnerGuardGoal
// 0x0000 (0x0080 - 0x0080)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal_AI_GunnerGuardGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerGuardGoal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerGuardGoal.AI_GunnerGuardGoal");
		return ptr;
	}

};

// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.BuggyHavokData.HavokDataBuggy
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_BuggyHavokData_HavokDataBuggy : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_BuggyHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.BuggyHavokData.HavokDataBuggy");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon
// 0x0004 (0x0600 - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon
{
public:
	float                                              Spread;                                                   // 0x05FC(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon");
		return ptr;
	}


	class AClass_Object_Actor_Projectile* Function_makeProjectile_makeProjectile(const struct FStruct_Rotator& fireRot, const struct FStruct_Vector& fireLoc);
};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.WeaponTurretSentry
// 0x0000 (0x0600 - 0x0600)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon_WeaponTurretSentry : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.WeaponTurretSentry");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.WeaponTurretSentry.WeaponVehicleTurretSentry
// 0x0000 (0x0600 - 0x0600)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon_WeaponTurretSentry_WeaponVehicleTurretSentry : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon_WeaponTurretSentry
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.WeaponTurretSentry.WeaponVehicleTurretSentry");
		return ptr;
	}

};


// Class Object.Actor.Explosion.Explosion.ExplosionVehicleTank
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion_ExplosionVehicleTank : public AClass_Object_Actor_Explosion_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion.ExplosionVehicleTank");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TankWeapon.WeaponVehicleTank
// 0x0000 (0x05FC - 0x05FC)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TankWeapon_WeaponVehicleTank : public AClass_Object_Actor_Equipment_Equippable_Weapon_TankWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TankWeapon.WeaponVehicleTank");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynTankShell
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynTankShell : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynTankShell");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingTank
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle_DamageTypeCrushingTank : public AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingTank");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleTank
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle_RadarInfoVehicleTank : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoVehicle.RadarInfoVehicleTank");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynTankPannelA
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynTankPannelA : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynTankPannelA");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynTankPannelB
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynTankPannelB : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynTankPannelB");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynTankPannelC
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynTankPannelC : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynTankPannelC");
		return ptr;
	}

};

// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.TankHavokData.HavokDataTank
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_TankHavokData_HavokDataTank : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_TankHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.TankHavokData.HavokDataTank");
		return ptr;
	}

};


// Class Object.Actor.Explosion.Explosion.ExplosionVehicleAssault
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion_ExplosionVehicleAssault : public AClass_Object_Actor_Explosion_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion.ExplosionVehicleAssault");
		return ptr;
	}

};


// Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingAssaultShip
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle_DamageTypeCrushingAssaultShip : public AClass_Object_Actor_DamageType_MovementCrushingDamageType_VehicleCrushingDamageType_DamageTypeCrushingVehicle
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.MovementCrushingDamageType.VehicleCrushingDamageType.DamageTypeCrushingVehicle.DamageTypeCrushingAssaultShip");
		return ptr;
	}

};

// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_AssaultShipAttack.AI_AssaultShipAttack
// 0x0000 (0x0094 - 0x0094)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_AssaultShipAttack_AI_AssaultShipAttack : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action_AI_VehicleAction_AI_AssaultShipAttack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_Action.AI_VehicleAction.AI_AssaultShipAttack.AI_AssaultShipAttack");
		return ptr;
	}

};

// Class Object.HavokObject.HavokRigidBody.VehicleHavokData.AssaultShipHavokData.HavokDataAssaultShip
// 0x0000 (0x008C - 0x008C)
class UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_AssaultShipHavokData_HavokDataAssaultShip : public UClass_Object_HavokObject_HavokRigidBody_VehicleHavokData_AssaultShipHavokData
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.HavokObject.HavokRigidBody.VehicleHavokData.AssaultShipHavokData.HavokDataAssaultShip");
		return ptr;
	}

};


// Class Object.Actor.ShockMineProximity
// 0x0000 (0x0400 - 0x0400)
class AClass_Object_Actor_ShockMineProximity : public AClass_Object_Actor
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.ShockMineProximity");
		return ptr;
	}


	void Function_Touch_Touch(class AClass_Object_Actor* Other);
};


// Class Object.Actor.Projectile.SentryProjectile
// 0x0000 (0x044C - 0x044C)
class AClass_Object_Actor_Projectile_SentryProjectile : public AClass_Object_Actor_Projectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.SentryProjectile");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_VehicleResource
// 0x0008 (0x009C - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_VehicleResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_Pawn*                    m_pawn;                                                   // 0x0094(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_VehicleSensorAction* vehicleSensorAction;                                      // 0x0098(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_VehicleResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Function_Turret();
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_Vehicle();
	bool Function_isActive_isActive();
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* aVehicle);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MountResource
// 0x0008 (0x009C - 0x0094)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource
{
public:
	class AClass_Object_Actor_Pawn*                    m_pawn;                                                   // 0x0094(0x0004)
	int                                                Index;                                                    // 0x0098(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MountResource");
		return ptr;
	}


	bool Function_isActive_isActive();
	bool Function_doesParentHaveResource_doesParentHaveResource(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* parentAction);
	bool Function_multipleActionsCheck_multipleActionsCheck(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_Action* Action);
	bool Function_requiredResourcesAvailable_requiredResourcesAvailable(int legsPriority, int armsPriority, int headPriority);
	void Function_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init();
	class AClass_Object_Actor_Pawn_Rook* Function_localRook_localRook();
	class AClass_Object_Actor_Pawn_Rook_BaseDevice_Turret* Function_Turret();
	class AClass_Object_Actor_Pawn_Rook_Vehicle* Function_Vehicle();
	class AClass_Object_Actor_Pawn* Function_Pawn_Pawn();
	void Function_setIndex_setIndex(int aIndex);
	void Function_setResourceOwner_setResourceOwner(class AClass_Object_Actor* Amount);
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MountResource.AI_GunnerResource
// 0x0004 (0x00A0 - 0x009C)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource_AI_GunnerResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource
{
public:
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_GunnerSensorAction* gunnerSensorAction;                                       // 0x009C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MountResource.AI_GunnerResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass();
	void Function_cleanup_cleanup_cleanup_cleanup();
	void Function_Init_Init_Init_Init();
};


// Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MountResource.AI_GunnerResource.AI_DriverResource
// 0x0000 (0x00A0 - 0x00A0)
class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource_AI_GunnerResource_AI_DriverResource : public UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource_AI_MountResource_AI_GunnerResource
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ResourceBase.AI_Resource.AI_MountResource.AI_GunnerResource.AI_DriverResource");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* Function_getActionClass_getActionClass_getActionClass();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal.AI_VehicleAttackGoal
// 0x000C (0x0084 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal_AI_VehicleAttackGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal
{
public:
	struct FName                                       targetName;                                               // 0x0078(0x0004) (Edit, NoClear, EditInline)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x007C(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x0080(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal.AI_VehicleAttackGoal");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_construct_AI_ResourceIntPawnIFollowFunction(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, class AClass_Object_Actor_Pawn* aTarget, class UClass_Object_IFollowFunction* aFollowFunction);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal.AI_VehicleGuardGoal
// 0x0004 (0x007C - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal_AI_VehicleGuardGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal
{
public:
	float                                              engagementAreaRadius;                                     // 0x0078(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal.AI_VehicleGuardGoal");
		return ptr;
	}


	void Function_setUpDeactivationSentinel_setUpDeactivationSentinel();
	void Function_Init_Init(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
	void Function_construct_AI_ResourceIntFloat(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, float _engagementAreaRadius);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal
// 0x0000 (0x0078 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ResourceBase* STATIC_Function_findResource_findResource(class AClass_Object_Actor_Pawn* p, class UClass_Object_RefCount_Tyrion_GoalBase* goal);
	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehicleLocalAttackGoal
// 0x0018 (0x0090 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal_AI_VehicleLocalAttackGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0078(0x000C) (Edit, EditConst)
	float                                              terminalDistance;                                         // 0x0084(0x0004) (Edit, EditConst)
	float                                              speed;                                                    // 0x0088(0x0004) (Edit, EditConst)
	class AClass_Object_Actor_Pawn_Rook*               Target;                                                   // 0x008C(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehicleLocalAttackGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceIntVectorFloatFloatRook(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, const struct FStruct_Vector& aDestination, float aTerminalDistance, float aSpeed, class AClass_Object_Actor_Pawn_Rook* aTarget);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerFireAtGoal
// 0x000C (0x0088 - 0x007C)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal_AI_GunnerFireAtGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_GunnerGoal
{
public:
	struct FName                                       targetName;                                               // 0x007C(0x0004) (Edit, NoClear, EditInline)
	unsigned long                                      bGiveUpIfTargetLost : 1;                                  // 0x0080(0x0004) (Edit, NoClear)
	unsigned long                                      bFireWithoutLOS : 1;                                      // 0x0080(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x0084(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_GunnerGoal.AI_GunnerFireAtGoal");
		return ptr;
	}


	void Function_Init_Init(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R);
	void Function_construct_AI_ResourceIntPawnByteBoolBool(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, class AClass_Object_Actor_Pawn* _target, TEnumAsByte<EVehiclePositionType> _position, bool _bGiveUpIfTargetLost, bool _bFireWithoutLOS);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehiclePursueGoal
// 0x0020 (0x0098 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal_AI_VehiclePursueGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal
{
public:
	struct FName                                       targetName;                                               // 0x0078(0x0004) (Edit, NoClear, EditInline)
	float                                              proximity;                                                // 0x007C(0x0004) (Edit, NoClear, EditInline)
	float                                              TerminalVelocity;                                         // 0x0080(0x0004) (Edit)
	float                                              terminalHeight;                                           // 0x0084(0x0004) (Edit, NoClear)
	float                                              DesiredSpeed;                                             // 0x0088(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x008C(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x0090(0x0004) (Edit, EditConst)
	int                                                positionIndex;                                            // 0x0094(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehiclePursueGoal");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_construct_AI_ResourceIntPawnFloatIFollowFunctionIntFloatFloatFl(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, class AClass_Object_Actor_Pawn* aTarget, float aProximity, class UClass_Object_IFollowFunction* aFollowFunction, int aPositionIndex, float aTerminalVelocity, float aTerminalHeight, float aDesiredSpeed);
};


// Class Object.IFollowFunction
// 0x0000 (0x0028 - 0x0028)
class UClass_Object_IFollowFunction : public UClass_Object
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.IFollowFunction");
		return ptr;
	}


	float Function_proximityFunction();
	bool Function_validDestination(const struct FStruct_Vector& point);
	struct FStruct_Vector Function_Offset(class AClass_Object_Actor_Pawn* Leader, int positionIndex);
	bool Function_updateOffset(class AClass_Object_Actor_Pawn* Follower, class AClass_Object_Actor_Pawn* Leader, int positionIndex);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_Follow
// 0x006C (0x00C4 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_Follow : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	class AClass_Object_Actor*                         Target;                                                   // 0x0058(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               targetRook;                                               // 0x005C(0x0004)
	float                                              proximity;                                                // 0x0060(0x0004)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x0064(0x0004)
	int                                                positionIndex;                                            // 0x0068(0x0004)
	float                                              energyUsage;                                              // 0x006C(0x0004)
	float                                              TerminalVelocity;                                         // 0x0070(0x0004)
	float                                              terminalHeight;                                           // 0x0074(0x0004)
	float                                              DesiredSpeed;                                             // 0x0078(0x0004)
	int                                                tickCounter;                                              // 0x007C(0x0004)
	float                                              Distance;                                                 // 0x0080(0x0004)
	struct FStruct_Vector                              Destination;                                              // 0x0084(0x000C)
	struct FStruct_Vector                              Offset;                                                   // 0x0090(0x000C)
	float                                              height;                                                   // 0x009C(0x0004)
	unsigned long                                      bDoLOSCheck : 1;                                          // 0x00A0(0x0004)
	unsigned long                                      bPredictedLocation : 1;                                   // 0x00A0(0x0004)
	TEnumAsByte<EGroundMovementLevels>                 groundMovement;                                           // 0x00A4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	struct FStruct_TerminalConditions                  TerminalConditions;                                       // 0x00A8(0x0010)
	TArray<class AClass_Object_Actor*>                 ignore;                                                   // 0x00B8(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_Follow");
		return ptr;
	}


	void Function_cleanup_cleanup();
	struct FString Function_actionDebuggingString_actionDebuggingString();
	void Function_computeDestinationAndDistance();
	float Function_maxWaitingDistance();
	float Function_proximityFunction();
	struct FStruct_Vector Function_predictedLocation(const struct FStruct_Vector& Destination);
	bool Function_bLOSCheck();
	bool STATIC_Function_actionTest(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_Follow* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, class AClass_Object_Actor* Target, float proximity, class UClass_Object_IFollowFunction* followFunction, int positionIndex, float energyUsage, float TerminalVelocity, float terminalHeight, float DesiredSpeed);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehicleFollowGoal
// 0x0020 (0x0098 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal_AI_VehicleFollowGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal
{
public:
	struct FName                                       targetName;                                               // 0x0078(0x0004) (Edit, NoClear, EditInline)
	float                                              proximity;                                                // 0x007C(0x0004) (Edit, NoClear, EditInline)
	float                                              TerminalVelocity;                                         // 0x0080(0x0004) (Edit)
	float                                              terminalHeight;                                           // 0x0084(0x0004) (Edit, NoClear)
	float                                              DesiredSpeed;                                             // 0x0088(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn*                    Target;                                                   // 0x008C(0x0004) (Edit, EditConst)
	class UClass_Object_IFollowFunction*               followFunction;                                           // 0x0090(0x0004) (Edit, EditConst)
	int                                                positionIndex;                                            // 0x0094(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehicleFollowGoal");
		return ptr;
	}


	void Function_cleanup_cleanup();
	void Function_construct_AI_ResourceIntPawnFloatIFollowFunctionIntFloatFloatFl(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, class AClass_Object_Actor_Pawn* aTarget, float aProximity, class UClass_Object_IFollowFunction* aFollowFunction, int aPositionIndex, float aTerminalVelocity, float aTerminalHeight, float aDesiredSpeed);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.CarMoveToLocation
// 0x002C (0x0084 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarMoveToLocation : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	float                                              DesiredSpeed;                                             // 0x0064(0x0004)
	struct FStruct_FindPathAIProperties                workAIProperties;                                         // 0x0068(0x0010)
	TArray<class AClass_Object_Actor*>                 ignore;                                                   // 0x0078(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.CarMoveToLocation");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarMoveToLocation* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, float DesiredSpeed);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.AircraftMoveToLocation
// 0x0034 (0x008C - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftMoveToLocation : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	unsigned long                                      skipIntermediateNodes : 1;                                // 0x0064(0x0004)
	float                                              DesiredSpeed;                                             // 0x0068(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               attackTarget;                                             // 0x006C(0x0004)
	struct FStruct_FindPathAIProperties                workAIProperties;                                         // 0x0070(0x0010)
	TArray<class AClass_Object_Actor*>                 ignore;                                                   // 0x0080(0x000C) (NeedCtorLink)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.AircraftMoveToLocation");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftMoveToLocation* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, bool skipIntermediateNodes, float DesiredSpeed, class AClass_Object_Actor_Pawn_Rook* attackTarget);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehiclePatrolGoal
// 0x0018 (0x0090 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal_AI_VehiclePatrolGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal
{
public:
	TArray<struct FName>                               patrolPointNames;                                         // 0x0078(0x000C) (Edit, NeedCtorLink, NoClear, EditInline)
	float                                              DesiredSpeed;                                             // 0x0084(0x0004) (Edit, EditInline)
	unsigned long                                      bExecuteOnce : 1;                                         // 0x0088(0x0004) (Edit, NoClear)
	unsigned long                                      skipIntermediateNodes : 1;                                // 0x0088(0x0004) (Edit)
	struct FName                                       attackTargetName;                                         // 0x008C(0x0004) (Edit, NoClear, EditInline)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehiclePatrolGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceInt(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal.AI_VehicleExpellOccupantGoal
// 0x0008 (0x0080 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal_AI_VehicleExpellOccupantGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_VehicleGoal
{
public:
	struct FName                                       occupantName;                                             // 0x0078(0x0004) (Edit, NoClear)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* occupant;                                                 // 0x007C(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_VehicleGoal.AI_VehicleExpellOccupantGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceIntCharacter(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character* aOccupant);
};


// Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehicleMoveToGoal
// 0x0020 (0x0098 - 0x0078)
class UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal_AI_VehicleMoveToGoal : public UClass_Object_RefCount_Tyrion_GoalBase_AI_Goal_AI_DriverGoal
{
public:
	struct FName                                       destinationName;                                          // 0x0078(0x0004) (Edit, NoClear, EditInline)
	float                                              DesiredSpeed;                                             // 0x007C(0x0004) (Edit, EditInline)
	unsigned long                                      skipIntermediateNodes : 1;                                // 0x0080(0x0004) (Edit)
	struct FName                                       attackTargetName;                                         // 0x0084(0x0004) (Edit, NoClear, EditInline)
	struct FStruct_Vector                              Destination;                                              // 0x0088(0x000C) (Edit, EditConst)
	class AClass_Object_Actor_Pawn_Rook*               attackTarget;                                             // 0x0094(0x0004) (Edit, EditConst)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_GoalBase.AI_Goal.AI_DriverGoal.AI_VehicleMoveToGoal");
		return ptr;
	}


	void Function_construct_AI_ResourceIntVectorFloatBoolRook(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* R, int PRI, const struct FStruct_Vector& _destination, float _desiredSpeed, bool _skipIntermediateNodes, class AClass_Object_Actor_Pawn_Rook* _attackTarget);
};


// Class Object.Actor.Explosion.Explosion.ExplosionMine
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion_ExplosionMine : public AClass_Object_Actor_Explosion_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion.ExplosionMine");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable : public UClass_Object_RadarInfo_RadarInfoDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable");
		return ptr;
	}

};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.DeployedTurretSentryWeapon
// 0x0000 (0x0600 - 0x0600)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon_DeployedTurretSentryWeapon : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.DeployedTurretSentryWeapon");
		return ptr;
	}


	struct FStruct_Vector Function_calcProjectileSpawnLocation_calcProjectileSpawnLocation(const struct FStruct_Rotator& fireRot);
};


// Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.DeployedTurretSentryWeapon.WeaponDeployedTurretSentry
// 0x0000 (0x0600 - 0x0600)
class AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon_DeployedTurretSentryWeapon_WeaponDeployedTurretSentry : public AClass_Object_Actor_Equipment_Equippable_Weapon_TurretWeapon_TurretSentryWeapon_DeployedTurretSentryWeapon
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Equipment.Equippable.Weapon.TurretWeapon.TurretSentryWeapon.DeployedTurretSentryWeapon.WeaponDeployedTurretSentry");
		return ptr;
	}

};


// Class Object.Actor.Explosion.Explosion.ExplosionSmall
// 0x0000 (0x0474 - 0x0474)
class AClass_Object_Actor_Explosion_Explosion_ExplosionSmall : public AClass_Object_Actor_Explosion_Explosion
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Explosion.Explosion.ExplosionSmall");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable.RadarInfoDeployableCatapult
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable_RadarInfoDeployableCatapult : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable.RadarInfoDeployableCatapult");
		return ptr;
	}

};


// Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess.InventoryStationAccessDefault.DeployedInventoryStationAccess
// 0x0000 (0x04A4 - 0x04A4)
class AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess_InventoryStationAccessDefault_DeployedInventoryStationAccess : public AClass_Object_Actor_UseableObject_BaseDeviceAccess_InventoryStationAccess_InventoryStationAccessDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.UseableObject.BaseDeviceAccess.InventoryStationAccess.InventoryStationAccessDefault.DeployedInventoryStationAccess");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable.RadarInfoDeployableInventory
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable_RadarInfoDeployableInventory : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable.RadarInfoDeployableInventory");
		return ptr;
	}

};


// Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable.RadarInfoDeployableRepairer
// 0x0000 (0x00C0 - 0x00C0)
class UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable_RadarInfoDeployableRepairer : public UClass_Object_RadarInfo_RadarInfoDefault_RadarInfoDeployable
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RadarInfo.RadarInfoDefault.RadarInfoDeployable.RadarInfoDeployableRepairer");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ChaingunProjectile.ProjectileChaingun.ProjectileChaingunSentry
// 0x0000 (0x044C - 0x044C)
class AClass_Object_Actor_Projectile_ChaingunProjectile_ProjectileChaingun_ProjectileChaingunSentry : public AClass_Object_Actor_Projectile_ChaingunProjectile_ProjectileChaingun
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ChaingunProjectile.ProjectileChaingun.ProjectileChaingunSentry");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile.ProjectileMortar.ProjectileMortarBomb
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile_ProjectileMortar_ProjectileMortarBomb : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile_ProjectileMortar
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile.ProjectileMortar.ProjectileMortarBomb");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.AntiAircraftProjectile.ProjectileAntiAircraft
// 0x0000 (0x047C - 0x047C)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_AntiAircraftProjectile_ProjectileAntiAircraft : public AClass_Object_Actor_Projectile_ExplosiveProjectile_AntiAircraftProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.AntiAircraftProjectile.ProjectileAntiAircraft");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile.ProjectileMortar.ProjectileMortarTank
// 0x0000 (0x0480 - 0x0480)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile_ProjectileMortar_ProjectileMortarTank : public AClass_Object_Actor_Projectile_ExplosiveProjectile_ArcProjectile_MortarProjectile_ProjectileMortar
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.ArcProjectile.MortarProjectile.ProjectileMortar.ProjectileMortarTank");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ExplosiveProjectile.PodWeaponProjectile.ProjectileVehicleFighterRocket
// 0x0000 (0x0468 - 0x0468)
class AClass_Object_Actor_Projectile_ExplosiveProjectile_PodWeaponProjectile_ProjectileVehicleFighterRocket : public AClass_Object_Actor_Projectile_ExplosiveProjectile_PodWeaponProjectile
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ExplosiveProjectile.PodWeaponProjectile.ProjectileVehicleFighterRocket");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK01
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynAshipCHUNK01 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK01");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK02
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynAshipCHUNK02 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK02");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK03
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynAshipCHUNK03 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK03");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK04
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynAshipCHUNK04 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynAshipCHUNK04");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenSmall
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit_DynChunkGenSmall : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenSmall");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenTiny
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit_DynChunkGenTiny : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenTiny");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK06
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynBuggyCHUNK06 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK06");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK01
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynBuggyCHUNK01 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK01");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK02
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynBuggyCHUNK02 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK02");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK03
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynBuggyCHUNK03 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK03");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK04
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynBuggyCHUNK04 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK04");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK05
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynBuggyCHUNK05 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynBuggyCHUNK05");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynPodChunk01
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynPodChunk01 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynPodChunk01");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynPodChunk02
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynPodChunk02 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynPodChunk02");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynPodChunk03
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynPodChunk03 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynPodChunk03");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenSquare
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit_DynChunkGenSquare : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenSquare");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenRectangle
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit_DynChunkGenRectangle : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleBit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleBit.DynChunkGenRectangle");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk01
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynTankChunk01 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk01");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk02
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynTankChunk02 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk02");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk03
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynTankChunk03 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk03");
		return ptr;
	}

};


// Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk04
// 0x0000 (0x0464 - 0x0464)
class AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk_DynTankChunk04 : public AClass_Object_Actor_HavokActor_DynamicObject_DynamicMetal_DynamicMetalVehcilePannel_DynamicMetalVehicleChunk
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.HavokActor.DynamicObject.DynamicMetal.DynamicMetalVehcilePannel.DynamicMetalVehicleChunk.DynTankChunk04");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ExplosionDamageType.DamageTypeExplosionDefault
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_ExplosionDamageType_DamageTypeExplosionDefault : public AClass_Object_Actor_DamageType_ExplosionDamageType
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ExplosionDamageType.DamageTypeExplosionDefault");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ExplosionDamageType.DamageTypeExplosionDefault.DamageTypeExplosionVehicle
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_ExplosionDamageType_DamageTypeExplosionDefault_DamageTypeExplosionVehicle : public AClass_Object_Actor_DamageType_ExplosionDamageType_DamageTypeExplosionDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ExplosionDamageType.DamageTypeExplosionDefault.DamageTypeExplosionVehicle");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_MoveToLocation
// 0x0084 (0x00DC - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_MoveToLocation : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	class AClass_Object_Actor*                         Target;                                                   // 0x0064(0x0004)
	TEnumAsByte<ESkiCompetencyLevels>                  skiCompetency;                                            // 0x0068(0x0001)
	TEnumAsByte<EJetCompetencyLevels>                  jetCompetency;                                            // 0x0069(0x0001)
	TEnumAsByte<EGroundMovementLevels>                 groundMovement;                                           // 0x006A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006B(0x0001) MISSED OFFSET
	float                                              terminalDistanceXY;                                       // 0x006C(0x0004)
	float                                              terminalDistanceZ;                                        // 0x0070(0x0004)
	float                                              energyUsage;                                              // 0x0074(0x0004)
	float                                              TerminalVelocity;                                         // 0x0078(0x0004)
	float                                              terminalHeight;                                           // 0x007C(0x0004)
	struct FStruct_FindPathAIProperties                workAIProperties;                                         // 0x0080(0x0010)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* forwardAction;                                            // 0x0090(0x0004)
	struct FStruct_Vector                              jetSkiDestination;                                        // 0x0094(0x000C)
	unsigned long                                      jetpackCapable : 1;                                       // 0x00A0(0x0004)
	unsigned long                                      bInZeroG : 1;                                             // 0x00A0(0x0004)
	int                                                routeCacheI;                                              // 0x00A4(0x0004)
	TArray<class AClass_Object_Actor*>                 ignore;                                                   // 0x00A8(0x000C) (NeedCtorLink)
	unsigned long                                      preliminaryMove : 1;                                      // 0x00B4(0x0004)
	struct FStruct_Vector                              workVector;                                               // 0x00B8(0x000C)
	TArray<struct FStruct_Vector>                      workPoints;                                               // 0x00C4(0x000C) (NeedCtorLink)
	struct FStruct_Vector                              originalDestination;                                      // 0x00D0(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_MoveToLocation");
		return ptr;
	}


	void Function_cleanup_cleanup();
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_MoveToLocation* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& Destination, class AClass_Object_Actor* Target, TEnumAsByte<ESkiCompetencyLevels> skiCompetency, TEnumAsByte<EJetCompetencyLevels> jetCompetency, TEnumAsByte<EGroundMovementLevels> groundMovement, float energyUsage, const struct FStruct_TerminalConditions& TerminalConditions);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_GunnerSensorAction
// 0x000C (0x0054 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_GunnerSensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_GuardSensor* guardSensor;                                              // 0x0048(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_EnemySensor* enemySensor;                                              // 0x004C(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor* targetSensor;                                             // 0x0050(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_GunnerSensorAction");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_VehicleSensorAction
// 0x0020 (0x0068 - 0x0048)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction_AI_VehicleSensorAction : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_AI_RunnableAction_AI_SensorAction
{
public:
	class UClass_Object_DeleteableObject_AI_Sensor_AI_GuardSensor* guardSensor;                                              // 0x0048(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_EnemySensor* enemySensor;                                              // 0x004C(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor* targetSensor;                                             // 0x0050(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_TargetSensor_AI_TargetMemorySensor* targetMemorySensor;                                       // 0x0054(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_ReactToFireSensor* reactToFireSensor;                                        // 0x0058(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PainSensor* painSensor;                                               // 0x005C(0x0004)
	class UClass_Object_DeleteableObject_AI_Sensor_AI_PeriodicSensor_AI_NearMissSensor* nearMissSensor;                                           // 0x0060(0x0004)
	class AClass_Object_Actor_NearMissCollisionVolume* fatVolume;                                                // 0x0064(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.AI_RunnableAction.AI_SensorAction.AI_VehicleSensorAction");
		return ptr;
	}


	class UClass_Object_Field_Struct_State_Class* STATIC_Function_getResourceClass_getResourceClass();
	void Function_cleanup_cleanup();
	void Function_Begin_Begin();
	void Function_setupSensors_setupSensors(class UClass_Object_RefCount_Tyrion_ResourceBase_AI_Resource* resource);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.AircraftMoveAlongWaypoints
// 0x0010 (0x0068 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftMoveAlongWaypoints : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	int                                                Index;                                                    // 0x0058(0x0004)
	unsigned long                                      skipIntermediateNodes : 1;                                // 0x005C(0x0004)
	float                                              DesiredSpeed;                                             // 0x0060(0x0004)
	class AClass_Object_Actor_Pawn_Rook*               attackTarget;                                             // 0x0064(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.AircraftMoveAlongWaypoints");
		return ptr;
	}


	int Function_lookAhead(int currentRouteCacheIndex);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_AircraftMoveAlongWaypoints* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, bool skipIntermediateNodes, float DesiredSpeed, class AClass_Object_Actor_Pawn_Rook* attackTarget);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.CarMoveAlongWaypoints
// 0x0008 (0x0060 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarMoveAlongWaypoints : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	int                                                Index;                                                    // 0x0058(0x0004)
	float                                              DesiredSpeed;                                             // 0x005C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.CarMoveAlongWaypoints");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_CarMoveAlongWaypoints* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, float DesiredSpeed);
};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeAntiAirTurret
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeAntiAirTurret : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeAntiAirTurret");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBomb
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBomb : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBomb");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeTank
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeTank : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeTank");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeFighterRocket
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeFighterRocket : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeFighterRocket");
		return ptr;
	}

};


// Class Object.Actor.Projectile.ChaingunProjectile.ProjectileChaingun.ProjectileChaingunSentryDeployable
// 0x0000 (0x044C - 0x044C)
class AClass_Object_Actor_Projectile_ChaingunProjectile_ProjectileChaingun_ProjectileChaingunSentryDeployable : public AClass_Object_Actor_Projectile_ChaingunProjectile_ProjectileChaingun
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projectile.ChaingunProjectile.ProjectileChaingun.ProjectileChaingunSentryDeployable");
		return ptr;
	}

};


// Class Object.Actor.DamageType.ExplosionDamageType.DamageTypeExplosionDefault.DamageTypeExplosionMine
// 0x0000 (0x04C4 - 0x04C4)
class AClass_Object_Actor_DamageType_ExplosionDamageType_DamageTypeExplosionDefault_DamageTypeExplosionMine : public AClass_Object_Actor_DamageType_ExplosionDamageType_DamageTypeExplosionDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ExplosionDamageType.DamageTypeExplosionDefault.DamageTypeExplosionMine");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_MoveAlongWaypoints
// 0x006C (0x00C4 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_MoveAlongWaypoints : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	int                                                routeSegmentI;                                            // 0x0058(0x0004)
	TEnumAsByte<ESkiCompetencyLevels>                  skiCompetency;                                            // 0x005C(0x0001)
	TEnumAsByte<EJetCompetencyLevels>                  jetCompetency;                                            // 0x005D(0x0001)
	TEnumAsByte<EGroundMovementLevels>                 groundMovement;                                           // 0x005E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x005F(0x0001) MISSED OFFSET
	float                                              terminalDistanceXY;                                       // 0x0060(0x0004)
	float                                              terminalDistanceZ;                                        // 0x0064(0x0004)
	float                                              energyUsage;                                              // 0x0068(0x0004)
	float                                              TerminalVelocity;                                         // 0x006C(0x0004)
	float                                              terminalHeight;                                           // 0x0070(0x0004)
	int                                                routeCacheStartIndex;                                     // 0x0074(0x0004)
	int                                                routeCacheEndIndex;                                       // 0x0078(0x0004)
	class AClass_Object_Actor*                         Target;                                                   // 0x007C(0x0004)
	float                                              dlmEnergyUsage;                                           // 0x0080(0x0004)
	float                                              energyRequired;                                           // 0x0084(0x0004)
	float                                              initialEnergy;                                            // 0x0088(0x0004)
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* moveAction;                                               // 0x008C(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* AI;                                                       // 0x0090(0x0004)
	float                                              nextTerminalDistanceXY;                                   // 0x0094(0x0004)
	float                                              nextTerminalDistanceZ;                                    // 0x0098(0x0004)
	unsigned long                                      bJetpack : 1;                                             // 0x009C(0x0004)
	unsigned long                                      bSkippedNodes : 1;                                        // 0x009C(0x0004)
	TArray<class AClass_Object_Actor*>                 ignore;                                                   // 0x00A0(0x000C) (NeedCtorLink)
	struct FStruct_Vector                              landingSpot;                                              // 0x00AC(0x000C)
	struct FStruct_Vector                              jetSkiDestination;                                        // 0x00B8(0x000C)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_MoveAlongWaypoints");
		return ptr;
	}


	void Function_cleanup_cleanup();
	bool Function_bDoLongRangeJetSki(struct FStruct_Vector* landingSpot, struct FStruct_Vector* jetSkiDestination, int* routeSegmentI);
	bool Function_bHeadRoom(class AClass_Object_Actor_Pawn* AI);
	bool Function_bRoomToSki(const struct FStruct_RouteCacheElement& element);
	bool Function_skipNodes(float* dlmEnergyUsage, int* routeSegmentI);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_MoveAlongWaypoints* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Parent, int routeCacheStartIndexIn, int routeCacheEndIndexIn, class AClass_Object_Actor* Target, TEnumAsByte<ESkiCompetencyLevels> skiCompetency, TEnumAsByte<EJetCompetencyLevels> jetCompetency, TEnumAsByte<EGroundMovementLevels> groundMovement, float energyUsage, float TerminalVelocity, float terminalHeight, float terminalDistanceXY, float terminalDistanceZ);
};


// Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeChaingun.ProjectileDamageTypeChaingunSentryDeployable
// 0x0000 (0x04D0 - 0x04D0)
class AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet_ProjectileDamageTypeChaingun_ProjectileDamageTypeChaingunSentryDeployable : public AClass_Object_Actor_DamageType_ProjectileDamageType_ProjectileDamageTypeDefault_ProjectileDamageTypeBullet_ProjectileDamageTypeChaingun
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DamageType.ProjectileDamageType.ProjectileDamageTypeDefault.ProjectileDamageTypeBullet.ProjectileDamageTypeChaingun.ProjectileDamageTypeChaingunSentryDeployable");
		return ptr;
	}

};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_JetSkiManager
// 0x0050 (0x00A8 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_JetSkiManager : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              Destination;                                              // 0x0058(0x000C)
	class AClass_Object_Actor*                         Target;                                                   // 0x0064(0x0004)
	TEnumAsByte<ESkiCompetencyLevels>                  skiCompetency;                                            // 0x0068(0x0001)
	TEnumAsByte<EJetCompetencyLevels>                  jetCompetency;                                            // 0x0069(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              terminalDistanceXY;                                       // 0x006C(0x0004)
	float                                              terminalDistanceZ;                                        // 0x0070(0x0004)
	float                                              energyUsage;                                              // 0x0074(0x0004)
	float                                              TerminalVelocity;                                         // 0x0078(0x0004)
	float                                              terminalHeight;                                           // 0x007C(0x0004)
	class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter* AI;                                                       // 0x0080(0x0004)
	unsigned long                                      bJetpacking : 1;                                          // 0x0084(0x0004)
	unsigned long                                      bSkiing : 1;                                              // 0x0084(0x0004)
	struct FStruct_Vector                              landingSpot;                                              // 0x0088(0x000C)
	struct FStruct_Vector                              walkDestination;                                          // 0x0094(0x000C)
	int                                                landingSpotUpdateTick;                                    // 0x00A0(0x0004)
	float                                              skiStartTime;                                             // 0x00A4(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_JetSkiManager");
		return ptr;
	}


	void Function_cleanup_cleanup();
	bool Function_bCloseToDestination();
	bool Function_destinationReached();
	struct FStruct_Vector Function_getDestination();
	bool STATIC_Function_actionTest(class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Child);
	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_JetSkiManager* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action* Parent, const struct FStruct_Vector& Destination, const struct FStruct_Vector& landingSpot, class AClass_Object_Actor* Target, TEnumAsByte<ESkiCompetencyLevels> skiCompetency, TEnumAsByte<EJetCompetencyLevels> jetCompetency, float energyUsage, float TerminalVelocity, float terminalHeight, float terminalDistanceXY, float terminalDistanceZ);
};


// Class Object.Actor.Mover.Mover
// 0x0004 (0x0768 - 0x0764)
class AClass_Object_Actor_Mover_Mover : public AClass_Object_Actor_Mover
{
public:
	class UClass_Object_Field_Struct_State_Class*      triggerMessageType;                                       // 0x0764(0x0004) (Edit, NoClear)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Mover.Mover");
		return ptr;
	}


	void Function_onMessage_onMessage(class UClass_Object_Message* msg);
	void Function_DoClose_DoClose();
	void Function_FinishedClosing_FinishedClosing();
	void Function_DoOpen_DoOpen();
	void Function_FinishedOpening_FinishedOpening();
	void Function_DoBumpEvent_DoBumpEvent(class AClass_Object_Actor* Other);
	void Function_DoPlayerBumpEvent_DoPlayerBumpEvent(class AClass_Object_Actor* Other);
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay();
};


// Class Object.Actor.Mover.Mover.Door
// 0x0020 (0x0788 - 0x0768)
class AClass_Object_Actor_Mover_Mover_Door : public AClass_Object_Actor_Mover_Mover
{
public:
	class AClass_Object_Actor_Info_BaseInfo*           ownerBase;                                                // 0x0768(0x0004) (Edit, NoClear)
	unsigned long                                      bLocked : 1;                                              // 0x076C(0x0004) (Edit, Net, NoClear)
	class UClass_Object_Material*                      lockedMaterial;                                           // 0x0770(0x0004) (Edit, NoClear)
	int                                                lockedMaterialIndex;                                      // 0x0774(0x0004) (Edit, NoClear)
	unsigned long                                      bOldLocked : 1;                                           // 0x0778(0x0004)
	unsigned long                                      bBumped : 1;                                              // 0x0778(0x0004)
	unsigned long                                      bCanClose : 1;                                            // 0x0778(0x0004)
	class UClass_Object_Material*                      unlockedMaterial;                                         // 0x077C(0x0004)
	unsigned long                                      bWasPowered : 1;                                          // 0x0780(0x0004)
	unsigned long                                      bPowered : 1;                                             // 0x0780(0x0004)
	unsigned long                                      bUsesPower : 1;                                           // 0x0780(0x0004)
	class AClass_Object_Actor_DoorSensor*              DoorSensor;                                               // 0x0784(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Mover.Mover.Door");
		return ptr;
	}


	bool Function_canBePassed(const struct FName& teamName);
	void Function_onLockedChange(bool bVal);
	void Function_DoOpen_DoOpen_DoOpen();
	void Function_Tick_Tick(float Delta);
	bool Function_isPowered();
	void Function_PostBeginPlay_PostBeginPlay_PostBeginPlay_PostBeginPlay();
	struct FString Function_displayActorLabel(class AClass_Object_Actor* t);
	void Function_enumBaseInfo(class AClass_Object_Actor_Info_ZoneInfo_LevelInfo* L, TArray<class AClass_Object_Actor_Info_BaseInfo*> A);
};


// Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_DoDoorMove
// 0x0030 (0x0088 - 0x0058)
class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoDoorMove : public UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action
{
public:
	struct FStruct_Vector                              beforeDoorLocation;                                       // 0x0058(0x000C)
	class AClass_Object_Actor_Mover_Mover_Door*        Door;                                                     // 0x0064(0x0004)
	struct FStruct_Vector                              afterDoorLocation;                                        // 0x0068(0x000C)
	unsigned long                                      nextLocationValid : 1;                                    // 0x0074(0x0004)
	struct FStruct_Vector                              nextLocation;                                             // 0x0078(0x000C)
	float                                              waitStartTime;                                            // 0x0084(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.RefCount.Tyrion_ActionBase.ActionBase.NS_Action.NS_DoDoorMove");
		return ptr;
	}


	class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase_NS_Action_NS_DoDoorMove* STATIC_Function_startAction(class AClass_Object_Actor_Controller_AI_Controller* C, class UClass_Object_RefCount_Tyrion_ActionBase_ActionBase* Parent, const struct FStruct_Vector& beforeDoorLocation, class AClass_Object_Actor_Mover_Mover_Door* Door, const struct FStruct_Vector& afterDoorLocation, bool nextLocationValid, const struct FStruct_Vector& nextLocation);
};


// Class Object.Message.MessageMover
// 0x0004 (0x0030 - 0x002C)
class UClass_Object_Message_MessageMover : public UClass_Object_Message
{
public:
	struct FName                                       moverLabel;                                               // 0x002C(0x0004)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_Name(const struct FName& _moverLabel);
};


// Class Object.Message.MessageMover.MessageMoverClosing
// 0x0000 (0x0030 - 0x0030)
class UClass_Object_Message_MessageMover_MessageMoverClosing : public UClass_Object_Message_MessageMover
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover.MessageMoverClosing");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageMover.MessageMoverClosed
// 0x0000 (0x0030 - 0x0030)
class UClass_Object_Message_MessageMover_MessageMoverClosed : public UClass_Object_Message_MessageMover
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover.MessageMoverClosed");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageMover.MessageMoverOpening
// 0x0000 (0x0030 - 0x0030)
class UClass_Object_Message_MessageMover_MessageMoverOpening : public UClass_Object_Message_MessageMover
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover.MessageMoverOpening");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageMover.MessageMoverOpened
// 0x0000 (0x0030 - 0x0030)
class UClass_Object_Message_MessageMover_MessageMoverOpened : public UClass_Object_Message_MessageMover
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover.MessageMoverOpened");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
};


// Class Object.Message.MessageMover.MessageMoverBump
// 0x0004 (0x0034 - 0x0030)
class UClass_Object_Message_MessageMover_MessageMoverBump : public UClass_Object_Message_MessageMover
{
public:
	struct FName                                       bumperLabel;                                              // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover.MessageMoverBump");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _moverLabel, const struct FName& _bumperLabel);
};


// Class Object.Message.MessageMover.MessageMoverPlayerBump
// 0x0004 (0x0034 - 0x0030)
class UClass_Object_Message_MessageMover_MessageMoverPlayerBump : public UClass_Object_Message_MessageMover
{
public:
	struct FName                                       playerLabel;                                              // 0x0030(0x0004) (Edit)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Message.MessageMover.MessageMoverPlayerBump");
		return ptr;
	}


	struct FString STATIC_Function_editorDisplay_editorDisplay_editorDisplay(const struct FName& TriggeredBy, class UClass_Object_Message* Filter);
	void Function_construct_NameName(const struct FName& _moverLabel, const struct FName& _playerLabel);
};


// Class Object.Actor.DoorSensor
// 0x0004 (0x0404 - 0x0400)
class AClass_Object_Actor_DoorSensor : public AClass_Object_Actor
{
public:
	class AClass_Object_Actor_Mover_Mover_Door*        ownerDoor;                                                // 0x0400(0x0004) (Net)

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.DoorSensor");
		return ptr;
	}


	void Function_Timer_Timer();
	void Function_UnTouch_UnTouch(class AClass_Object_Actor* Other);
	void Function_Touch_Touch(class AClass_Object_Actor* Other);
	void Function_Init(class AClass_Object_Actor_Mover_Mover_Door* Owner);
};


// Class Object.Actor.Info.TeamInfo.TeamInfoImperial
// 0x0000 (0x05F8 - 0x05F8)
class AClass_Object_Actor_Info_TeamInfo_TeamInfoImperial : public AClass_Object_Actor_Info_TeamInfo
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Info.TeamInfo.TeamInfoImperial");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault : public AClass_Object_Actor_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault.JetpackLight
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault_JetpackLight : public AClass_Object_Actor_jetpack_JetpackDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault.JetpackLight");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault.JetpackLight.JetpackLightImperial
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault_JetpackLight_JetpackLightImperial : public AClass_Object_Actor_jetpack_JetpackDefault_JetpackLight
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault.JetpackLight.JetpackLightImperial");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault.JetpackLight.JetpackLightImperialFem
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault_JetpackLight_JetpackLightImperialFem : public AClass_Object_Actor_jetpack_JetpackDefault_JetpackLight
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault.JetpackLight.JetpackLightImperialFem");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault.JetpackMedium
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault_JetpackMedium : public AClass_Object_Actor_jetpack_JetpackDefault
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault.JetpackMedium");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault.JetpackMedium.JetpackMediumImperial
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault_JetpackMedium_JetpackMediumImperial : public AClass_Object_Actor_jetpack_JetpackDefault_JetpackMedium
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault.JetpackMedium.JetpackMediumImperial");
		return ptr;
	}

};


// Class Object.Actor.jetpack.JetpackDefault.JetpackMedium.JetpackMediumImperialFem
// 0x0000 (0x0404 - 0x0404)
class AClass_Object_Actor_jetpack_JetpackDefault_JetpackMedium_JetpackMediumImperialFem : public AClass_Object_Actor_jetpack_JetpackDefault_JetpackMedium
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.jetpack.JetpackDefault.JetpackMedium.JetpackMediumImperialFem");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagle_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_BloodEagle_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagle_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Mortar_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Mortar_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Mortar_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Landing
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Landing : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Landing");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Dust_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Dust_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Dust_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Metal_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Metal_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Metal_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Water_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Water_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Water_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Snow_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Snow_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Snow_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Glass_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Glass_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Glass_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_WaterPipe_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_WaterPipe_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_WaterPipe_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Concrete_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Concrete_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Concrete_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Mud_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Mud_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Mud_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Grass_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Grass_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Grass_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Wood_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Wood_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Wood_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_BloodPipe_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_BloodPipe_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_BloodPipe_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_SandStone_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_SandStone_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_SandStone_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_MeadowStone_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_MeadowStone_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_MeadowStone_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Armour_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Armour_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Armour_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_BlackStone_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_BlackStone_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_BlackStone_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_Mortar_round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_Mortar_round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_Mortar_round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_Grenade_Round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_Grenade_Round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_Grenade_Round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Grenade_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Grenade_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Grenade_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_Mercury_JetPack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_Mercury_JetPack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_Mercury_JetPack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_Imperial_JetPack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_Imperial_JetPack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_Imperial_JetPack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_PhoenixMedium_JetPack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_PhoenixMedium_JetPack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_PhoenixMedium_JetPack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_ImperialMediumFem_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_ImperialMediumFem_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_ImperialMediumFem_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_PhoenixMediumFem_JetPack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_PhoenixMediumFem_JetPack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_PhoenixMediumFem_JetPack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Rocket_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Rocket_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Rocket_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_Rocket_Round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_Rocket_Round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_Rocket_Round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_SniperRifle_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_SniperRifle_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_SniperRifle_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_SniperRifle_MissHit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_SniperRifle_MissHit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_SniperRifle_MissHit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_Spinfusor_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_Spinfusor_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_Spinfusor_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_ChainGun_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_ChainGun_MFlash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_ChainGun_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_ChainGun_MFlash.FX_Chaingun_MF3rd
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_ChainGun_MFlash_FX_Chaingun_MF3rd : public AClass_Object_Actor_Emitter_FX_MFlash_FX_ChainGun_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_ChainGun_MFlash.FX_Chaingun_MF3rd");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Spin_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Spin_MFlash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Spin_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Spin_MFlash.FX_Spin_MF3rd
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Spin_MFlash_FX_Spin_MF3rd : public AClass_Object_Actor_Emitter_FX_MFlash_FX_Spin_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Spin_MFlash.FX_Spin_MF3rd");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_BaseLoadout_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_BaseLoadout_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_BaseLoadout_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_BaseActivation_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_BaseActivation_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_BaseActivation_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_Chaingun_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_Chaingun_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_Chaingun_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_GrenadeLauncher_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_GrenadeLauncher_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_GrenadeLauncher_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_RocketPod_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_RocketPod_MFlash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_RocketPod_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_GrenadeLauncher01_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_GrenadeLauncher01_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_GrenadeLauncher01_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_RocketPod_STeam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_RocketPod_STeam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_RocketPod_STeam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleHeavy_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_BloodEagleHeavy_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleHeavy_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_ImperialHeavy_JetPack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_ImperialHeavy_JetPack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_ImperialHeavy_JetPack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_PhoenixHeavy_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_PhoenixHeavy_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_PhoenixHeavy_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_SpinfusorDiscTrail_Round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_SpinfusorDiscTrail_Round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_SpinfusorDiscTrail_Round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_PodJet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_PodJet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_PodJet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_PodJet.FX_PodJet_NoLight
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_PodJet_FX_PodJet_NoLight : public AClass_Object_Actor_Emitter_FX_jetpack_FX_PodJet
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_PodJet.FX_PodJet_NoLight");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_RocketPod_MFlash.FX_RocketPod_MF3rd
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_RocketPod_MFlash_FX_RocketPod_MF3rd : public AClass_Object_Actor_Emitter_FX_MFlash_FX_RocketPod_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_RocketPod_MFlash.FX_RocketPod_MF3rd");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_ImperialFemale_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_ImperialFemale_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_ImperialFemale_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Destroyed
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Destroyed : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Destroyed");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Destroyed.FX_PowerGen_Destroyed
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Destroyed_FX_PowerGen_Destroyed : public AClass_Object_Actor_Emitter_FX_Destroyed
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Destroyed.FX_PowerGen_Destroyed");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_Julia_Jetpack_Right
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_Julia_Jetpack_Right : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_Julia_Jetpack_Right");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_Julia_Jetpack_Left
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_Julia_Jetpack_Left : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_Julia_Jetpack_Left");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_BlasterEnergy_Round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_BlasterEnergy_Round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_BlasterEnergy_Round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.Fx_Smoke
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_Fx_Smoke : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.Fx_Smoke");
		return ptr;
	}

};


// Class Object.Actor.Emitter.Fx_Smoke.FX_Smoke_Grey
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_Fx_Smoke_FX_Smoke_Grey : public AClass_Object_Actor_Emitter_Fx_Smoke
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.Fx_Smoke.FX_Smoke_Grey");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Fire
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Fire : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Fire");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Fire.FX_Smoke_Fire
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Fire_FX_Smoke_Fire : public AClass_Object_Actor_Emitter_FX_Fire
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Fire.FX_Smoke_Fire");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleFemale_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_BloodEagleFemale_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleFemale_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleMediumFemale_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_BloodEagleMediumFemale_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_BloodEagleMediumFemale_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_Female_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_Female_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_Female_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Landing.FX_Landing_Water
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Landing_FX_Landing_Water : public AClass_Object_Actor_Emitter_FX_Landing
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Landing.FX_Landing_Water");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_Steam_Ship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_Steam_Ship : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_Steam_Ship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Drill
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Drill : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Drill");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Flak_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Flak_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Flak_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Turret_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Turret_MFlash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Turret_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Burner
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Burner : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Burner");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Burner.FX_Burner_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Burner_FX_Burner_Hit : public AClass_Object_Actor_Emitter_FX_Burner
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Burner.FX_Burner_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Mortar_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Mortar_MFlash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Mortar_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Mortar_MFlash.FX_Mortar_MF3rd
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Mortar_MFlash_FX_Mortar_MF3rd : public AClass_Object_Actor_Emitter_FX_MFlash_FX_Mortar_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Mortar_MFlash.FX_Mortar_MF3rd");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_Mud_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_Mud_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_Mud_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_Ice_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_Ice_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_Ice_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_Snow_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_Snow_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_Snow_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_RockDig_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_RockDig_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_RockDig_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_Rocklight_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_Rocklight_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_Rocklight_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_Grass_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_Grass_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_Grass_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_Concrete_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_Concrete_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_Concrete_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_RockDark_Wheel
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_RockDark_Wheel : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_RockDark_Wheel");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_ImperialBuggy_jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_ImperialBuggy_jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_ImperialBuggy_jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_AshipSmallLeft_Jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_AshipSmallLeft_Jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_AshipSmallLeft_Jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_AshipSmallRight_Jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_AshipSmallRight_Jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_AshipSmallRight_Jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.Fx_Buckler_trail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_Fx_Buckler_trail : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.Fx_Buckler_trail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Buckler_hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Buckler_hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Buckler_hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Blade_Mflash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Blade_Mflash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Blade_Mflash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Blade3rd_Mflash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Blade3rd_Mflash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Blade3rd_Mflash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_JumpPad_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_JumpPad_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_JumpPad_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_Puff_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_Puff_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_Puff_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_VehicleSpawn_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_VehicleSpawn_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_VehicleSpawn_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_RepairPack_Active
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_RepairPack_Active : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_RepairPack_Active");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_RepairPack_Activating
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_RepairPack_Activating : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_RepairPack_Activating");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_EnergyPack_Active
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_EnergyPack_Active : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_EnergyPack_Active");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_EnergyPack_Activating
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_EnergyPack_Activating : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_EnergyPack_Activating");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_ShieldPack_Activating
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_ShieldPack_Activating : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_ShieldPack_Activating");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_SpeedPack_Activating
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_SpeedPack_Activating : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_SpeedPack_Activating");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_SpeedPack_Active
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_SpeedPack_Active : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_SpeedPack_Active");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_BaseChunk_Trail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_BaseChunk_Trail : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_BaseChunk_Trail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_BaseChunk_Trail.FX_BurningLongTime_Trail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_BaseChunk_Trail_FX_BurningLongTime_Trail : public AClass_Object_Actor_Emitter_FX_BaseChunk_Trail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_BaseChunk_Trail.FX_BurningLongTime_Trail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Buckler_MFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Buckler_MFlash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Buckler_MFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Grapper_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Grapper_Hit : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Grapper_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_BaseObject_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_BaseObject_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_BaseObject_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_VehicleSpawnFighter_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_VehicleSpawnFighter_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_VehicleSpawnFighter_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_VehicleSpawnAShip_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_VehicleSpawnAShip_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_VehicleSpawnAShip_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_Concrete_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_Concrete_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_Concrete_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_Dirt_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_Dirt_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_Dirt_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_Grass_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_Grass_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_Grass_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.Fx_Ice_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_Fx_Ice_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.Fx_Ice_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_Metal_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_Metal_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_Metal_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_Mud_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_Mud_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_Mud_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_Snow_SkiTrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_Snow_SkiTrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_Snow_SkiTrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SpawnTower
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SpawnTower : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SpawnTower");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Rain
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Rain : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Rain");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Rain.FX_CamFlash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Rain_FX_CamFlash : public AClass_Object_Actor_Emitter_FX_Rain
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Rain.FX_CamFlash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Steam.FX_SpawnTower_Steam
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Steam_FX_SpawnTower_Steam : public AClass_Object_Actor_Emitter_FX_Steam
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Steam.FX_SpawnTower_Steam");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Deployed_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Deployed_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Deployed_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_BaseChunk_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_BaseChunk_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_BaseChunk_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Diving
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Diving : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Diving");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Mine_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Mine_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Mine_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_Bubble_Jetpack
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_Bubble_Jetpack : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_Bubble_Jetpack");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Blaster_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Blaster_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Blaster_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_BlasterArmour_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_BlasterArmour_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_BlasterArmour_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Landing.Fx_LandingSmall_Water
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Landing_Fx_LandingSmall_Water : public AClass_Object_Actor_Emitter_FX_Landing
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Landing.Fx_LandingSmall_Water");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Landing.FX_LandingLarge_Water
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Landing_FX_LandingLarge_Water : public AClass_Object_Actor_Emitter_FX_Landing
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Landing.FX_LandingLarge_Water");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Bubbles
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Bubbles : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Bubbles");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Bubbles.FX_Character_Bubbles
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Bubbles_FX_Character_Bubbles : public AClass_Object_Actor_Emitter_FX_Bubbles
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Bubbles.FX_Character_Bubbles");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Bubbles.FX_CharacterBig_Bubbles
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Bubbles_FX_CharacterBig_Bubbles : public AClass_Object_Actor_Emitter_FX_Bubbles
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Bubbles.FX_CharacterBig_Bubbles");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.fx_water_Skitrail
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_fx_water_Skitrail : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.fx_water_Skitrail");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Burner.FX_Burner_Expand
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Burner_FX_Burner_Expand : public AClass_Object_Actor_Emitter_FX_Burner
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Burner.FX_Burner_Expand");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_ChainGun_MFlash.FX_Deployed_MF3rd
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_ChainGun_MFlash_FX_Deployed_MF3rd : public AClass_Object_Actor_Emitter_FX_MFlash_FX_ChainGun_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_ChainGun_MFlash.FX_Deployed_MF3rd");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal : public AClass_Object_Actor_Projector_ProjectedDecal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Concrete_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_Concrete_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Concrete_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Metal_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_Metal_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Metal_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Paint_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_Paint_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Paint_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Dirt_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_Dirt_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Dirt_Decal");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_PowerIndicator
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_PowerIndicator : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_PowerIndicator");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_TakeOffDust_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_TakeOffDust_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_TakeOffDust_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_TakeOffMetal_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_TakeOffMetal_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_TakeOffMetal_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_TakeOffSnow_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_TakeOffSnow_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_TakeOffSnow_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Wheels.FX_BuggyDust
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Wheels_FX_BuggyDust : public AClass_Object_Actor_Emitter_FX_Wheels
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Wheels.FX_BuggyDust");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_Dust_Pod
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_Dust_Pod : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_Dust_Pod");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Small_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Small_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Small_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.FX_SkiBoot
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_FX_SkiBoot : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.FX_SkiBoot");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_SkiTrail.Fx_SkiBoot_Heavy
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_SkiTrail_Fx_SkiBoot_Heavy : public AClass_Object_Actor_Emitter_FX_SkiTrail
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_SkiTrail.Fx_SkiBoot_Heavy");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_barrier_collisiondamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_barrier_collisiondamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_barrier_collisiondamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_snow_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_snow_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_snow_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_dirt_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_dirt_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_dirt_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Tank_Mflash
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Tank_Mflash : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Tank_Mflash");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_bomb_Round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_bomb_Round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_bomb_Round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Tank_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Tank_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Tank_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_TankRight_Jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_TankRight_Jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_TankRight_Jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_jetpack.FX_TankLeft_Jet
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_jetpack_FX_TankLeft_Jet : public AClass_Object_Actor_Emitter_FX_jetpack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_jetpack.FX_TankLeft_Jet");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_BucklerDeflects_hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_BucklerDeflects_hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_BucklerDeflects_hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_AirJetIdle_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_AirJetIdle_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_AirJetIdle_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_AirJetIdle02_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_AirJetIdle02_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_AirJetIdle02_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_AirJet02_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_AirJet02_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_AirJet02_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Aship.FX_AirJet_Aship
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Aship_FX_AirJet_Aship : public AClass_Object_Actor_Emitter_FX_Aship
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Aship.FX_AirJet_Aship");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.FX_Chaingun_Shell
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_FX_Chaingun_Shell : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.FX_Chaingun_Shell");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_WaterLeave_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_WaterLeave_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_WaterLeave_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Bomb_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Bomb_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Bomb_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_Vehicle_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_Vehicle_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_Vehicle_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_SnowMedium_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_SnowMedium_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_SnowMedium_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_DirtMedium_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_DirtMedium_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_DirtMedium_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_medium_CollisonDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_medium_CollisonDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_medium_CollisonDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_small_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_small_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_small_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_CollisionDamage.FX_SnowSmall_CollisionDamage
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_CollisionDamage_FX_SnowSmall_CollisionDamage : public AClass_Object_Actor_Emitter_FX_CollisionDamage
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_CollisionDamage.FX_SnowSmall_CollisionDamage");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Spark
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Spark : public AClass_Object_Actor_Emitter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Spark");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Spark.FX_Fireworks_Spark
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Spark_FX_Fireworks_Spark : public AClass_Object_Actor_Emitter_FX_Spark
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Spark.FX_Fireworks_Spark");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Explode.FX_Large_Explode
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Explode_FX_Large_Explode : public AClass_Object_Actor_Emitter_FX_Explode
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Explode.FX_Large_Explode");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_Rocket_Dud
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_Rocket_Dud : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_Rocket_Dud");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Fire.FX_ManOn_Fire
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Fire_FX_ManOn_Fire : public AClass_Object_Actor_Emitter_FX_Fire
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Fire.FX_ManOn_Fire");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_MFlash.Fx_ChainGun_Shell3RD
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_MFlash_Fx_ChainGun_Shell3RD : public AClass_Object_Actor_Emitter_FX_MFlash
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_MFlash.Fx_ChainGun_Shell3RD");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Spin_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_Spin_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_Spin_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_grenade_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_grenade_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_grenade_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_mortar_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_mortar_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_mortar_Decal");
		return ptr;
	}

};


// Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_rocket_Decal
// 0x0000 (0x059C - 0x059C)
class AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal_FX_rocket_Decal : public AClass_Object_Actor_Projector_ProjectedDecal_FX_Decal
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Projector.ProjectedDecal.FX_Decal.FX_rocket_Decal");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Landing.FX_Vehicle_Water
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Landing_FX_Vehicle_Water : public AClass_Object_Actor_Emitter_FX_Landing
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Landing.FX_Vehicle_Water");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Round.FX_handgrenade_round
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Round_FX_handgrenade_round : public AClass_Object_Actor_Emitter_FX_Round
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Round.FX_handgrenade_round");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_Dirt_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_Dirt_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_Dirt_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Hit.FX_DeployedMetal_Hit
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Hit_FX_DeployedMetal_Hit : public AClass_Object_Actor_Emitter_FX_Hit
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Hit.FX_DeployedMetal_Hit");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Landing.FX_TankLanding_Dust
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Landing_FX_TankLanding_Dust : public AClass_Object_Actor_Emitter_FX_Landing
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Landing.FX_TankLanding_Dust");
		return ptr;
	}

};


// Class Object.Actor.Emitter.FX_Pack.FX_EnergyPackLeft_Active
// 0x0000 (0x0478 - 0x0478)
class AClass_Object_Actor_Emitter_FX_Pack_FX_EnergyPackLeft_Active : public AClass_Object_Actor_Emitter_FX_Pack
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Emitter.FX_Pack.FX_EnergyPackLeft_Active");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistMedium
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist_DuelistMedium : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistMedium");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistMedium.DuelistMB
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist_DuelistMedium_DuelistMB : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist_DuelistMedium
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistMedium.DuelistMB");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer.SpammerHeavy
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer_SpammerHeavy : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer.SpammerHeavy");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer.SpammerHeavy.SpammerHI
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer_SpammerHeavy_SpammerHI : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer_SpammerHeavy
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer.SpammerHeavy.SpammerHI");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer.SpammerHeavy.SpammerHB
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer_SpammerHeavy_SpammerHB : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Spammer_SpammerHeavy
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Spammer.SpammerHeavy.SpammerHB");
		return ptr;
	}

};


// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistLight
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist_DuelistLight : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistLight");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistLight.DuelistLB
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist_DuelistLight_DuelistLB : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Duelist_DuelistLight
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Duelist.DuelistLight.DuelistLB");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Defender
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Defender : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Defender");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Defender.DefenderMedium
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Defender_DefenderMedium : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Defender
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Defender.DefenderMedium");
		return ptr;
	}

};

// Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Defender.DefenderMedium.DefenderMB
// 0x0000 (0x0BF8 - 0x0BF8)
class AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Defender_DefenderMedium_DefenderMB : public AClass_Object_Actor_Pawn_Rook_Ragdoll_Character_BaseAICharacter_AICharacter_BotAISettings_CustomBots_Defender_DefenderMedium
{
public:

	static UClass_Object_Field_Struct_State_Class* StaticClass()
	{
		static auto ptr = UClass_Object::FindClass("Class Object.Actor.Pawn.Rook.Ragdoll.Character.BaseAICharacter.AICharacter.BotAISettings.CustomBots.Defender.DefenderMedium.DefenderMB");
		return ptr;
	}

};


}


#ifdef _MSC_VER
	#pragma pack(pop)
#endif
